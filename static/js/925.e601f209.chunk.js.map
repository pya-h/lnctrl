{"version":3,"file":"static/js/925.e601f209.chunk.js","mappings":"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","sources":["math/GraphMenu.jsx","views/topics/chapter03/design-damping-system/lecture.jsx","views/topics/chapter03/design-damping-system/parameters.jsx","views/topics/chapter03/design-damping-system/index.jsx"],"sourcesContent":["import SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { useState, useEffect } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    graphFileName,\r\n    formulaFileName,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    const save = () => {\r\n        const graphBoxElement = document.getElementById(\"graphBox\");\r\n        // normal .blob has dark bakground\r\n        // convert background to light\r\n        const canvasWithBackground = document.createElement(\"canvas\");\r\n        canvasWithBackground.width = graphBoxElement.width;\r\n        canvasWithBackground.height = graphBoxElement.height;\r\n\r\n        const ctx = canvasWithBackground.getContext(\"2d\");\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, graphBoxElement.width, graphBoxElement.height);\r\n\r\n        ctx.drawImage(graphBoxElement, 0, 0);\r\n        // save\r\n        canvasWithBackground.toBlob((blob) => {\r\n            saveAs(blob, graphFileName);\r\n        });\r\n\r\n        html2canvas(document.getElementById(\"formulaBox\")).then((canvas) => {\r\n            canvas.toBlob((blob) => {\r\n                saveAs(blob, formulaFileName);\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}{\" \"}\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"download graph\"\r\n                    component=\"span\"\r\n                    onClick={save}\r\n                >\r\n                    <SaveAltIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import SubCard from \"views/ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"../../topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { mathjaxSpaces } from \"toolshed\";\r\n\r\nconst t_riseFormula =\r\n    \"$$ t_{pk} = \\\\frac{k\\\\pi}{\\\\omega_n \\\\sqrt{1 - \\\\zeta^2}} = \\\\frac{k\\\\pi}{\\\\omega_d} \" +\r\n    mathjaxSpaces(3) +\r\n    \" k = 1, 2, 3, ...\\\\\\\\\" +\r\n    \" t_{rise} = t_p = \\\\frac{\\\\pi}{\\\\omega_d} $$\";\r\nconst overshootFormula = `$$M_p = e^{\\\\frac{-\\\\zeta \\\\pi}{\\\\sqrt{1 - \\\\zeta^2}}} = e ^ {-\\\\pi cot\\\\theta} \\\\\\\\\r\n    \\\\zeta = \\\\frac{-\\\\ln M_p}{\\\\sqrt{\\\\pi^2 + \\\\lgroup \\\\ln M_p \\\\rgroup ^ 2}} $$`;\r\n\r\nconst DesignSystemByCharsLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"طراحی سیستم از طریق مشخصات میرایی\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n            spacing={gridSpacing}\r\n        >\r\n            <Grid className=\"lecture-text\" style={{ fontSize: \"20px\" }} item>\r\n                <p>&nbsp; &nbsp; &nbsp; &nbsp; \r\n                    زمان اوج (Rise Time)</p>\r\n            </Grid>\r\n            <Grid style={{ fontSize: \"20px\" }} item>\r\n                <MathJax>{t_riseFormula}</MathJax>\r\n            </Grid>\r\n            <Grid className=\"lecture-text\" style={{ fontSize: \"20px\" }} item>\r\n                <p>&nbsp; &nbsp; &nbsp; &nbsp; بالازدگی (Overshoot)</p>\r\n            </Grid>\r\n            <Grid style={{ fontSize: \"20px\" }} item>\r\n                <MathJax>{overshootFormula}</MathJax>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default DesignSystemByCharsLecture;\r\n","import { Grid } from \"@mui/material\";\r\nimport CoordinateSystem from \"views/input-boxes/CoordinateSystem\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$M_{p} = $$\",\r\n    \"$$t_{rise} = $$\",\r\n    \"$$t_i = $$\",\r\n    \"$$t_f = $$\",\r\n];\r\nconst parameterUnits = [\"%\", \"$$sec$$\", \"$$sec$$\", \"$$sec$$\"];\r\n\r\nconst DesignSystemByCharsParameters = ({\r\n    M_p,\r\n    t_rise,\r\n    $M_p,\r\n    $t_rise,\r\n    t_i,\r\n    t_f,\r\n    $t_i,\r\n    $t_f,\r\n}) => {\r\n    const grids = 1;\r\n    const checkRiseTime = (value) => value >= 0 && $t_rise(value);\r\n    const checkOvershoot = (value) => value >= 0 && $M_p(value);\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={0.6} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[ M_p, t_rise, t_i, t_f]}\r\n                    setters={[ checkOvershoot, checkRiseTime, $t_i, $t_f]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n\r\n                <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <p style={{ textAlign: \"center\" }}>\r\n                    مقدار پارامترها را از اینجا هم می توانید تغییر دهید\r\n                    </p>\r\n\r\n                    <CoordinateSystem\r\n                        point={{\r\n                            y: M_p,\r\n                            x: 0,\r\n                            select: ({ y }) => {\r\n                                if (y && y >= 0) $M_p(y);\r\n                            },\r\n                        }}\r\n                        extra={{\r\n                            y: 0,\r\n                            x: t_rise,\r\n                            select: ({ x }) => {\r\n                                if (x && x >= 0) $t_rise(x);\r\n                            },\r\n                        }}\r\n                        options={{ pointSize: 10, grids}}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default DesignSystemByCharsParameters;\r\n","import DesignSystemByCharsLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport DesignSystemByCharsParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Describer from \"math/describer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\n\r\nconst stepResponse = (tf, c_t = tf.step(), index = undefined) =>\r\n    \"$$\\\\begin{cases} \" +\r\n    tf.label(\"G\", index) +\r\n    \" \\\\\\\\ \\\\\\\\ \" +\r\n    c_t.label(\"c\", index) +\r\n    \"\\\\end{cases}$$\";\r\n\r\nconst symbols = {\r\n    in: \"t\",\r\n    out: \"c\",\r\n};\r\n\r\nconst DesignSystemByCharacteristics = () => {\r\n    const [M_p, $M_p] = useState(1);\r\n    const [t_rise, $t_rise] = useState(1);\r\n    const [t_i, $t_i] = useState(0);\r\n    const [t_f, $t_f] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [C_t, $C_t] = useState(null);\r\n    const [G_s, $G_s] = useState(null);\r\n    const [GInfo, $GInfo] = useState(\"\");\r\n\r\n    const [response, $response] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n    //update\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) => M_p === sys.M_p && t_rise === sys.t_rise\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                M_p: Number(M_p),\r\n                t_rise: Number(t_rise),\r\n                G_s,\r\n                C_t,\r\n                thickness,\r\n                legend:\r\n                    \"$$\" +\r\n                    symbols.out +\r\n                    \"_{\" +\r\n                    (systems.length + 1).toString() +\r\n                    \"}$$\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        let gtf = TransferFunction.Specials.$design(\r\n            Number(t_rise),\r\n            Number(M_p)\r\n        );\r\n        const tstep = gtf.step();\r\n        $G_s(gtf);\r\n        if (gtf) {\r\n            $C_t(tstep);\r\n            $GInfo(new Describer(gtf));\r\n            const [x, y] = calculus.pointify(tstep.$, Number(t_i), Number(t_f)); // N: 100\r\n            $response(stepResponse(gtf));\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            const all = systems.map((e, index) => {\r\n                const M_p2 = e.M_p * e.M_p;\r\n                let tgtf = new TransferFunction(\r\n                    [M_p2],\r\n                    [1, 2 * e.t_rise * e.M_p, M_p2]\r\n                );\r\n\r\n                const [xi, yi] = calculus.pointify(\r\n                    tgtf.step().$,\r\n                    Number(t_i),\r\n                    Number(t_f)\r\n                ); // N: 100\r\n\r\n                return {\r\n                    x: xi,\r\n                    y: yi,\r\n                    z: is3DPlotEnabled ? Array(xi.length).fill(0) : null,\r\n                    line: {\r\n                        // color: e.color...\r\n                        width: e.thickness,\r\n                    },\r\n                    // color,\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: e.legend,\r\n                };\r\n            });\r\n\r\n            const index = systems.findIndex(\r\n                (sys) => M_p === sys.M_p && t_rise === sys.t_rise\r\n            );\r\n            if (index === -1)\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                all.push({\r\n                    x,\r\n                    y,\r\n                    z: is3DPlotEnabled ? Array(x.length).fill(0) : null,\r\n                    // color,\r\n                    line: {\r\n                        // color:'rgb(17, 157, 255)'\r\n                        width: thickness,\r\n                    },\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: `${symbols.out}(${symbols.in})`,\r\n                });\r\n\r\n            $traces(all);\r\n        }\r\n    }, [M_p, t_rise, t_i, t_f, is3DPlotEnabled, thickness, systems]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [M_p, t_rise]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">\r\n                    طراحی سیستم با استفاده از مشخصات میرایی سیستم{\" \"}\r\n                </h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={gridSpacing}>\r\n                    <Grid\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        item\r\n                    >\r\n                        <DesignSystemByCharsLecture />\r\n                    </Grid>\r\n\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems instanceof Array &&\r\n                                    systems.map((sys, index) => {\r\n                                        const formula = stepResponse(\r\n                                            sys.G_s,\r\n                                            sys.C_t,\r\n                                            index + 1\r\n                                        );\r\n\r\n                                        return (\r\n                                            <Grid\r\n                                                style={{ fontSize: \"18px\" }}\r\n                                                xs={12}\r\n                                                item\r\n                                            >\r\n                                                <MathJax>{formula}</MathJax>\r\n                                            </Grid>\r\n                                        );\r\n                                    })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid style={{ fontSize: \"18px\" }} xs={12}>\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <DesignSystemByCharsParameters\r\n                                    M_p={M_p}\r\n                                    t_rise={t_rise}\r\n                                    t_i={t_i}\r\n                                    t_f={t_f}\r\n                                    $M_p={$M_p}\r\n                                    $t_rise={$t_rise}\r\n                                    $t_i={$t_i}\r\n                                    $t_f={$t_f}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    formulaFileName={\r\n                                        \"Water Tank Level Equations _ \" +\r\n                                        [\r\n                                            ...systems.map((sys) => sys.legend),\r\n                                        ].join() +\r\n                                        \".png\"\r\n                                    }\r\n                                    graphFileName={\r\n                                        [\r\n                                            ...systems.map(\r\n                                                (sys) =>\r\n                                                    `${sys.legend}{M_p=${\r\n                                                        sys.M_p\r\n                                                    }_t_rise=${sys.t_rise}_k=${\r\n                                                        sys.k\r\n                                                    }_in=${\r\n                                                        sys.inputSignal\r\n                                                            ? \"ramp\"\r\n                                                            : \"step\"\r\n                                                    }}`\r\n                                            ),\r\n                                        ].join(\", \") + \".png\"\r\n                                    }\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <GraphBox\r\n                                        title=\"پاسخ پله\"\r\n                                        traces={traces}\r\n                                    />\r\n                                </SubCard>\r\n                            </Grid>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                {GInfo && <GInfo.Explain />}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default DesignSystemByCharacteristics;\r\n"],"names":["capture","graphFileName","formulaFileName","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","sx","direction","container","md","sm","xs","item","color","component","onClick","graphBoxElement","document","getElementById","canvasWithBackground","createElement","width","height","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","blob","saveAs","html2canvas","then","canvas","spacing","mt","alignItems","value","onChange","e","t_riseFormula","mathjaxSpaces","SubCard","title","darkBorder","gridSpacing","Grid","className","style","fontSize","MathJax","parameterFormulas","parameterUnits","M_p","t_rise","$M_p","$t_rise","t_i","t_f","$t_i","$t_f","textAlign","SimpleParametersList","parameters","setters","labels","units","CoordinateSystem","point","y","x","select","extra","options","pointSize","grids","stepResponse","tf","c_t","step","index","undefined","label","symbols","systems","$systems","traces","$traces","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","C_t","$C_t","G_s","$G_s","GInfo","$GInfo","response","$response","gtf","TransferFunction","Number","tstep","Describer","calculus","$","all","map","M_p2","tgtf","xi","z","Array","length","fill","line","type","mode","name","legend","findIndex","sys","push","MainCard","margin","id","formula","marginTop","GraphMenu","capturedSystems","toString","join","k","inputSignal","changes","lg","GraphBox","Explain"],"sourceRoot":""}