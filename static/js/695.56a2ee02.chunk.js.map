{"version":3,"file":"static/js/695.56a2ee02.chunk.js","mappings":"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","sources":["math/algebra/complex.js","math/algebra/functions/exp.js","math/algebra/functions/fraction.js","math/algebra/functions/poly.js","math/input-signals/signals.js","math/solvers/equation.js","math/solvers/formula.js","math/algebra/functions/zero.js","math/algebra/functions/transfer.js","math/algebra/functions/trigonometric.js","errors/algebra/NotScalarError.js","math/algebra/index.js","math/input-signals/index.js"],"sourcesContent":["import Algebra from \".\";\r\nimport { round, isDigit } from \"../calculus\";\r\n\r\nclass Complex extends Algebra {\r\n    constructor(preal, pimage = 0, params = {}) {\r\n        super(preal, { symbol: \"j\", type: \"complex\", b: pimage, ...params });\r\n    }\r\n    static ToCouples = (arrComplex) => {\r\n        const n = arrComplex.length;\r\n        if (n >= 1) {\r\n            const reals = Array(n).fill(0),\r\n                imaginaries = Array(n).fill(0);\r\n            for (let i = 0; i < n; i++) {\r\n                if (arrComplex[i] instanceof Complex) {\r\n                    reals[i] = arrComplex[i].real();\r\n                    imaginaries[i] = arrComplex[i].imaginary();\r\n                } else reals[i] = arrComplex[i];\r\n            }\r\n            return [reals, imaginaries];\r\n        }\r\n        return [];\r\n    };\r\n    hasMultiTerms = () =>\r\n        this.plus || (this.a.toString() !== \"0\" && this.b.toString() !== \"0\");\r\n\r\n    toString = (parenthesis = false, showJ1 = false) => {\r\n        if (this.isZero()) return \"0\";\r\n        const rl = this.a;\r\n        let formula = parenthesis && this.hasMultiTerms() ? \"(\" : \"\";\r\n        if (rl !== 0)\r\n            formula +=\r\n                rl instanceof Algebra\r\n                    ? rl.toString(rl.hasMultiTerms())\r\n                    : round(rl);\r\n        let im = this.b;\r\n        if (im !== 0) {\r\n            //if (im < 0 || (im instanceof Algebra)) { im = im.negation()\r\n            if (im < 0) {\r\n                im *= -1;\r\n                formula += \" - \";\r\n            } else if (im instanceof Algebra && im.getA() < 0) {\r\n                im.setA(-im.getA());\r\n                formula += \" - \";\r\n            } else if (rl !== 0) formula += \" + \";\r\n\r\n            formula += this.symbol;\r\n            if (im !== 1 || showJ1)\r\n                formula +=\r\n                    im instanceof Algebra\r\n                        ? im.toString(im.hasMultiTerms())\r\n                        : round(im);\r\n        }\r\n        if (this.plus) formula += this.join(); // if there's a next term: casscade toString() calls\r\n\r\n        return parenthesis ? formula + \")\" : formula;\r\n    }; // a + jb\r\n\r\n    real = () => this.a;\r\n    imaginary = () => this.b;\r\n\r\n    copy = (linkPrevious = false) =>\r\n        new Complex(this.a, this.b, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    hardcopy = () =>\r\n        new Complex(this.a, this.b, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n\r\n    conjugate = () =>\r\n        new Complex(\r\n            this.a,\r\n            this.b instanceof Algebra ? this.b.negation() : -this.b\r\n        );\r\n\r\n    negation = () =>\r\n        new Complex(\r\n            this.a instanceof Algebra ? this.a.negation() : -this.a,\r\n            this.b instanceof Algebra ? this.b.negation() : -this.b\r\n        );\r\n\r\n    magnitude$2 = () => this.a ** 2 + this.b ** 2;\r\n\r\n    magnitude = () => (this.a ** 2 + this.b ** 2) ** 0.5;\r\n\r\n    phase = () => {\r\n        const definiteA = +this.a,\r\n            definiteB = +this.b;\r\n        if (this.a === definiteA && this.b === definiteB)\r\n            return Math.atan2(definiteB, definiteA);\r\n        if (this.b instanceof Algebra)\r\n            return (t) =>\r\n                Math.atan2(\r\n                    this.b.$(t),\r\n                    this.a instanceof Algebra ? this.a.$(t) : definiteA\r\n                );\r\n        if (this.a instanceof Algebra)\r\n            return (t) => Math.atan2(definiteB, this.a.$(t));\r\n        return NaN;\r\n    };\r\n    isReal = () => this.b === 0;\r\n\r\n    hasSameTypeWith = (x) =>\r\n        (this.isReal() && x.isReal()) || (!this.isReal() && !x.isReal()); // both full imaginray or both real\r\n    realify = () => new Complex(this.a, 0); // return a simple real value in Complex object format (for methods that only accept Complex values)\r\n\r\n    add = (operand) => {\r\n        let Re = null,\r\n            Im = null;\r\n        if (operand instanceof Complex) {\r\n            if (this.a instanceof Algebra) Re = this.a.add(operand.real());\r\n            else if (operand.real() instanceof Algebra)\r\n                Re = operand.real().add(this.a);\r\n            else Re = this.a + operand.real();\r\n\r\n            if (this.b instanceof Algebra) Im = this.b.add(operand.imaginary());\r\n            else if (operand.imaginary() instanceof Algebra)\r\n                Im = operand.imaginary().add(this.b);\r\n            else Im = this.b + operand.imaginary();\r\n        } else {\r\n            if (this.a instanceof Algebra) Re = this.a.add(operand);\r\n            else if (operand instanceof Algebra) Re = operand.add(this.a);\r\n            else Re = this.a + operand;\r\n\r\n            Im = this.b;\r\n        }\r\n        return new Complex(Re, Im);\r\n    };\r\n\r\n    substract = (operand) => this.add(operand.negation());\r\n\r\n    equals = (operand) => {\r\n        if (operand instanceof Complex) {\r\n            // two complex number are equal to eachother if both thier real parts are the same, and their imaginary parts are the same\r\n            let realPartsEqual = false;\r\n            if (this.a instanceof Algebra)\r\n                realPartsEqual = this.a.equals(operand.real());\r\n            else if (operand.real() instanceof Algebra)\r\n                realPartsEqual = operand.real().equals(this.a);\r\n            else realPartsEqual = this.a === operand.real();\r\n            if (!realPartsEqual) return false;\r\n\r\n            if (this.b instanceof Algebra)\r\n                return this.b.equals(operand.imaginary());\r\n            else if (operand.imaginary() instanceof Algebra)\r\n                return operand.imaginary().equals(this.b);\r\n            return this.b === operand.imaginary();\r\n        }\r\n\r\n        // if operand is not a complex number then the only way it can be equal with this object of Complex,\r\n        // is for this object to have a zero imaginary part:\r\n        return (\r\n            this.isReal() &&\r\n            (operand instanceof Algebra\r\n                ? operand.equals(this.a)\r\n                : operand === this.a)\r\n        );\r\n    };\r\n\r\n    isConjugateWith = (operand) => this.conjugate().equals(operand);\r\n    multiply = (operand) => {\r\n        let Re = [],\r\n            Im = [];\r\n        if (operand instanceof Complex) {\r\n            // first term\r\n            if (this.a instanceof Algebra) {\r\n                Re.push(this.a.multiply(operand.real()));\r\n                Im.push(this.a.multiply(operand.imaginary()));\r\n            } else {\r\n                Re.push(\r\n                    operand.a instanceof Algebra\r\n                        ? operand.a.multiply(this.a)\r\n                        : operand.a * this.a\r\n                );\r\n\r\n                Im.push(\r\n                    operand.b instanceof Algebra\r\n                        ? operand.b.multiply(this.a)\r\n                        : this.a * operand.b\r\n                );\r\n            }\r\n\r\n            // second term\r\n            if (this.b instanceof Algebra) {\r\n                Re.push(this.b.multiply(operand.imaginary()));\r\n                Im.push(this.b.multiply(operand.real()));\r\n            } else {\r\n                Re.push(\r\n                    operand.b instanceof Algebra\r\n                        ? operand.b.multiply(this.b)\r\n                        : operand.b * this.b\r\n                );\r\n\r\n                Im.push(\r\n                    operand.a instanceof Algebra\r\n                        ? operand.a.multiply(this.b)\r\n                        : this.b * operand.a\r\n                );\r\n            }\r\n            return new Complex(Re[0] - Re[1], Im[0] + Im[1]);\r\n        } else {\r\n            Re =\r\n                this.a instanceof Algebra\r\n                    ? this.a.multiply(operand)\r\n                    : operand instanceof Algebra\r\n                    ? operand.multiply(this.a)\r\n                    : this.a * operand;\r\n\r\n            Im =\r\n                this.b instanceof Algebra\r\n                    ? this.b.multiply(operand)\r\n                    : operand instanceof Algebra\r\n                    ? operand.multiply(this.b)\r\n                    : this.b * operand;\r\n        }\r\n        return new Complex(Re, Im);\r\n    };\r\n\r\n    devide = (denominator) => {\r\n        if (denominator instanceof Complex) {\r\n            const result = this.multiply(denominator.conjugate()).devide(\r\n                denominator.magnitude$2()\r\n            );\r\n            // CHECK THIS\r\n            if (isNaN(result.real())) result.setA(0);\r\n            if (isNaN(result.imaginary())) result.setB(0);\r\n            return result;\r\n        } else if (denominator instanceof Algebra) {\r\n            // USE super().devide ?\r\n            return this.copy(); // for now to avoid craches\r\n        } else return this.multiply(1 / denominator); // number\r\n    };\r\n\r\n    raiseTo = (power) => {\r\n        let result = this.copy(true);\r\n        // for now power must be integr\r\n        if (Math.floor(power) === power)\r\n            for (let i = 1; i < power; i++) {\r\n                result = result.multiply(this);\r\n            }\r\n\r\n        return result;\r\n    };\r\n\r\n    devideInverse = (k) =>\r\n        (k instanceof Algebra ? k : new Complex(k, 0)).devide(this);\r\n\r\n    static extract = (strNumber) => {\r\n        // extract a string to a complex object\r\n\r\n        strNumber = strNumber.replace(/\\s/g, \"\");\r\n        let i = strNumber[0] === \"-\" || strNumber[0] === \"+\" ? 1 : 0;\r\n        let real = 0;\r\n        if (strNumber[i] !== \"j\") {\r\n            for (; i < strNumber.length && isDigit(strNumber[i]); i++);\r\n            real = Number(strNumber.slice(0, i) || 0);\r\n        }\r\n\r\n        let sign = 1;\r\n        for (\r\n            ;\r\n            i < strNumber.length &&\r\n            (strNumber[i] === \"j\" ||\r\n                strNumber[i] === \"+\" ||\r\n                strNumber[i] === \"-\");\r\n            i++\r\n        )\r\n            if (strNumber[i] === \"-\") sign = -1;\r\n\r\n        const img = Number(strNumber.slice(i, strNumber.length) || 0);\r\n        return new Complex(real, sign * img);\r\n    };\r\n\r\n    isZero = () => this.a === 0 && this.b === 0;\r\n\r\n    static MultiplyFactors = (factors, s) => {\r\n        // list of factors (usually roots) multiply at a certain point\r\n        // (s + f1) * (s + f2) * ... * (s + fn)\r\n        if (!(s instanceof Complex)) s = new Complex(s, 0);\r\n        let result = new Complex(1, 0);\r\n        for (const factor of factors) {\r\n            let term = s.substract(factor.value);\r\n            if (factor.order > 1) term = term.raiseTo(factor.order);\r\n            result = result.multiply(term);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    actual = () => (this.isReal() ? this.real() : this);\r\n}\r\n\r\nexport default Complex;\r\n","import Algebra from \"math/algebra\";\r\nimport Complex from \"math/algebra//complex\";\r\nimport { Cos, Sin } from \"./trigonometric\";\r\n\r\nexport default class Exp extends Algebra {\r\n    constructor(a, b, symbol = \"t\", params = {}) {\r\n        // ae^bt\r\n        super(a, { symbol, type: \"exp\", b, ...params });\r\n    }\r\n\r\n    copy = (linkPrevious = false) => // copy everything\r\n        new Exp(this.a, this.b, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    hardcopy = () => // shallow copy just for single term copy\r\n        new Exp(this.a, this.b, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    toSin = () => {\r\n        const exp = this.copy();\r\n        if (exp.type === \"exp\" && exp.b instanceof Complex) {\r\n            if (exp.b instanceof Complex && exp.b.real() === 0) {\r\n                const cos = new Cos(exp.a, exp.b.imaginary());\r\n                const sin = new Sin(exp.a, exp.b.imaginary());\r\n                return new Complex(cos, sin);\r\n            }\r\n        }\r\n        return exp; // if doesnt math the condition then just return exponential function itself\r\n    };\r\n\r\n    amplitude = (t) => {\r\n        // NOT SURE\r\n        // if (this.b instanceof Complex || t instanceof Complex) {\r\n        //     if (this.a === +this.a) return this.a;\r\n        //     else if (this.a instanceof Algebra && this.symbol === this.a.symbol)\r\n        //         return this.a.$(t);\r\n        // } else return this.valueAt(t);\r\n    };\r\n    phase = (w) => {\r\n        const jw = new Complex(0, w);\r\n        let pb = +this.b;\r\n        if (this.b === pb) return pb * w;\r\n        if (this.b instanceof Algebra) {\r\n            pb = this.b.$(jw);\r\n            return jw.multiply(pb).imaginary();\r\n        }\r\n    };\r\n    valueAt = (t) => {\r\n        const numericT = +t;\r\n        if (numericT === t) {\r\n            const a = Algebra.valueOf(this.a, numericT),\r\n                b = Algebra.valueOf(this.b, numericT);\r\n            return a * Math.exp(b * numericT);\r\n        } else if (t instanceof Complex) {\r\n            if (!t.real()) {\r\n                return new Exp(\r\n                    this.a,\r\n                    new Complex(0, this.b * t.imaginary()),\r\n                    this.symbol\r\n                ).toSin();\r\n            } else if (t.imaginary()) {\r\n                // edit this\r\n                return (\r\n                    new Exp(this.a, this.b, this.symbol).valueAt(t.real()) *\r\n                    new Exp(\r\n                        1,\r\n                        new Complex(0, this.b * t.imaginary()),\r\n                        this.symbol\r\n                    ).toSin()\r\n                );\r\n            }\r\n            // t is real\r\n            else return this.valueAt(t.real());\r\n        }\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport Poly from \"./poly\";\r\nimport TransferFunction from \"./transfer\";\r\n\r\nexport default class Fraction extends Algebra {\r\n    constructor(num, den = [1], symbol = \"t\", params = {}) {\r\n        // ke^ct\r\n        if (!(num instanceof Algebra)) {\r\n            if (!(num instanceof Array)) num = [num];\r\n            // this.a\r\n            else if (num.length === 0) num = [0];\r\n        }\r\n        if (!(den instanceof Algebra)) {\r\n            if (!(den instanceof Array)) den = [den];\r\n            // this.b\r\n            else if (den.length === 0) den = [1];\r\n        }\r\n        super(num, { symbol, type: \"frac\", b: den, ...params });\r\n    }\r\n\r\n    copy = (\r\n        linkPrevious = false // copy everything\r\n    ) =>\r\n        new Fraction(this.a, this.b, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    hardcopy = () =>\r\n        // shallow copy just for copying single term\r\n        new Fraction(this.a, this.b, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    lim = () => {\r\n        // for all fractions with all kind of numerator and denominator\r\n    };\r\n\r\n    numerator = () =>\r\n        this.a instanceof Algebra\r\n            ? this.a.copy(true)\r\n            : new Poly(this.a, this.symbol);\r\n    denominator = () =>\r\n        this.b instanceof Algebra\r\n            ? this.b.copy(true)\r\n            : new Poly(this.b, this.symbol);\r\n\r\n    setNumerator = (num) => {\r\n        if (!(num instanceof Algebra)) {\r\n            if (!(num instanceof Array)) num = [num];\r\n            // this.a\r\n            else if (num.length === 0) num = [0];\r\n        }\r\n        return this.setA(num);\r\n    };\r\n\r\n    setDenominator = (den) => {\r\n        if (!(den instanceof Algebra)) {\r\n            if (!(den instanceof Array)) den = [den];\r\n            // this.b\r\n            else if (den.length === 0) den = [1];\r\n        }\r\n        return this.setB(den);\r\n    };\r\n    valueAt = (t) => {\r\n        const num = this.numerator().$(t);\r\n        const den = this.denominator().$(t);\r\n\r\n        if (num instanceof Algebra) return num.devide(den);\r\n        if (den instanceof Algebra) return den.devideInverse(num);\r\n        if (den) return num / den;\r\n        // THROW zero denominator ERROR\r\n        return undefined;\r\n    };\r\n\r\n    multiply = (operand) => {\r\n        let y = this.copy(true);\r\n        if (operand instanceof Fraction) {\r\n            const num = this.numerator().multiply(operand.numerator()),\r\n                den = this.denominator().multiply(operand.denominator());\r\n            y = num.devide(den);\r\n        } else {\r\n            const num = this.numerator().multiply(operand.numerator());\r\n            y = num.devide(this.denominator());\r\n        }\r\n        if (this.plus) y.plus = this.plus.multiply(operand);\r\n        return y;\r\n    };\r\n    toFormula = () =>\r\n        \"(\" +\r\n        this.numerator().toFormula() +\r\n        \")/(\" +\r\n        this.denominator().toFormula() +\r\n        \")\";\r\n\r\n    toTransferFunction = () => new TransferFunction(this.getA(), this.getB());\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport Complex from \"../complex\";\r\nimport Fraction from \"./fraction\";\r\n\r\nexport default class Poly extends Algebra {\r\n    static atn = (a, n, symbol = \"t\") => {\r\n        const aArray = Array(n + 1).fill(0);\r\n        aArray[0] = a;\r\n        return new Poly(aArray, symbol);\r\n    };\r\n    constructor(a, symbol = \"t\", params = {}) {\r\n        // ke^ct\r\n        super(a, { symbol, type: \"poly\", ...params });\r\n    }\r\n\r\n    copy = (\r\n        linkPrevious = false // copy everything\r\n    ) =>\r\n        new Poly(this.a, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    hardcopy = () =>\r\n        // shallow copy; signle term copy\r\n        new Poly(this.a, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    degree = () => this.a.length - 1;\r\n\r\n    valueAt = (t) => {\r\n        if (typeof t === \"number\") return Algebra.polynomialValueAt(this.a, t);\r\n        else if (t instanceof Complex) {\r\n            const n = this.a.length - 1;\r\n            if (n >= 0) {\r\n                let powerTerm = 1,\r\n                    result =\r\n                        this.a[n] instanceof Complex\r\n                            ? this.a[n].copy()\r\n                            : new Complex(this.a[n], 0);\r\n                for (let i = n - 1; i >= 0; i--) {\r\n                    powerTerm = t.multiply(powerTerm);\r\n                    result = result.add(powerTerm.multiply(this.a[i]));\r\n                }\r\n                return result;\r\n            }\r\n            return 0;\r\n        }\r\n        return NaN;\r\n    };\r\n\r\n    static Symbolic = (\r\n        degree,\r\n        symbol = \"t\",\r\n        halfTermsVisible = 2,\r\n        coef = \"a\",\r\n        inline = false\r\n    ) => {\r\n        let res = inline ? \"\" : \"$$\";\r\n        if (degree === \"n\") {\r\n            res += `${coef}_n ${symbol}^n + `;\r\n            for (let i = 1; i < halfTermsVisible; i++)\r\n                res += `${coef}_{n - ${i}}${symbol}^{n - ${i}} + `;\r\n            res += \" ... \";\r\n            for (let i = halfTermsVisible - 1; i > 0; i--)\r\n                res += ` + ${coef}_{${i}}${symbol}^{${i}}`;\r\n            res += ` + ${coef}_0`;\r\n        } else if (typeof degree === \"number\") {\r\n            for (; degree >= 0; degree--) {\r\n                res += `${coef}_{${degree}}`;\r\n                if (degree > 0) res += `${symbol}^{${degree}} + `;\r\n            }\r\n        }\r\n        return res + (inline ? \"\" : \" $$\");\r\n    };\r\n    derivative = (against = this.symbol) => {\r\n        const result = this.copy(true);\r\n        if (against === this.symbol) {\r\n            if (!result.dot) {\r\n                const n = result.a.length - 1;\r\n                const da = Array(n).fill(0);\r\n                for (let i = n; i >= 1; i--) da[n - i] = i * result.a[n - i];\r\n                result.a = [...da];\r\n            }\r\n            if (result.plus) result.plus = result.plus.derivative();\r\n        }\r\n        return result;\r\n    };\r\n\r\n    expression = () => {\r\n        if (this.a instanceof Array) {\r\n            const n = this.a.length - 1;\r\n            if (\r\n                !n ||\r\n                !this.a.slice(0, n).filter((ci) => ci.toString() !== \"0\").length\r\n            )\r\n                return this.a[n].toString();\r\n            return this.a\r\n                .map((a_i, i) =>\r\n                    a_i\r\n                        ? Algebra.coefy(a_i, i, n) +\r\n                          (i < n\r\n                              ? this.symbol +\r\n                                (i < n - 1 ? \"^\" + (n - i).toString() : \"\")\r\n                              : \"\")\r\n                        : \"\"\r\n                )\r\n                .join(\"\"); // joins all the coefficients, symbols, etc all together as for polynomal functions\r\n        }\r\n        return this.a.toString();\r\n    };\r\n\r\n    devide = (operand) => {\r\n        if (operand instanceof Poly && this.symbol === operand.symbol) {\r\n            return new Fraction(this.getA(), operand.getA(), this.symbol);\r\n        }\r\n        if (operand === +operand) return this.multiply(1 / Number(operand));\r\n        return this.copy();\r\n        // is it true??\r\n        // return super.devide();\r\n    };\r\n\r\n    // edit this function to remove unnecessary white spaces\r\n    toFormula = () => {\r\n        if (this.a instanceof Array) {\r\n            const n = this.a.length - 1;\r\n            if (\r\n                !n ||\r\n                !this.a.slice(0, n).filter((ci) => ci.toString() !== \"0\").length\r\n            )\r\n                return this.a[n].toString();\r\n            return this.a\r\n                .map((a_i, i) =>\r\n                    a_i\r\n                        ? Algebra.coefy(a_i, i, n) +\r\n                          (i < n\r\n                              ? this.symbol +\r\n                                (i < n - 1 ? \"^\" + (n - i).toString() : \"\")\r\n                              : \"\")\r\n                        : \"\"\r\n                )\r\n                .join(\"\"); // joins all the coefficients, symbols, etc all together as for polynomal functions\r\n        }\r\n        return this.a.toString();\r\n    };\r\n}\r\n","import StandardInputSignal from \"math/input-signals\";\r\nimport Poly from \"math/algebra/functions/poly\";\r\n\r\nexport class Step extends StandardInputSignal {\r\n    constructor(amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"u\", symbol); // \\\\delta is the equivalent of small delta in mathjax\r\n    }\r\n    copy = () => new Step(this.amp, this.symbol);\r\n\r\n    $ = (t) => (t >= 0) * this.amp;\r\n}\r\n\r\nexport class Puls extends StandardInputSignal {\r\n    constructor(Delta = 1, amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"\\\\sqcap\", symbol);\r\n        this.Delta = Delta;\r\n    }\r\n    copy = () => new Puls(this.Delta, this.amp, this.symbol);\r\n    $ = (t) => (t >= 0 && t <= this.Delta) * this.amp / this.Delta;\r\n}\r\n\r\nexport class Impact extends StandardInputSignal {\r\n    constructor(amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"\\\\delta\", symbol); // \\\\delta is the equivalent of small delta in mathjax\r\n    }\r\n    copy = () => new Impact(this.amp, this.symbol);\r\n\r\n    $ = (t) => this.amp * (t === 0);\r\n}\r\n\r\nexport class Ramp extends Poly {\r\n    constructor(amplitude, symbol = \"t\") {\r\n        super([amplitude, 0], symbol);\r\n        this.amplitude = amplitude; // just for calculating the value of this\r\n        this.selfmultiply(Step());\r\n    }\r\n    copy = () => new Ramp(this.amplitude, this.symbol);\r\n\r\n    $ = (t) => (t >= 0) * t * this.amplitude;\r\n}\r\n\r\n\r\nexport class Parabolic extends Poly { //EDIT\r\n    constructor(amplitude, symbol = \"t\") {\r\n        super([amplitude, 0, 0], symbol);\r\n        this.amplitude = amplitude; // just for calculating the value of this\r\n        this.selfmultiply(Step());\r\n    }\r\n    copy = () => new Parabolic(this.amplitude, this.symbol);\r\n    $ = (t) => (t >= 0 ? t * this.amplitude : 0);\r\n}\r\n","import Algebra from \"../algebra/index\";\r\nimport { isDigit, precision, round } from \"math/calculus\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Poly from \"../algebra/functions/poly\";\r\nconst Algebrite = require(\"algebrite\");\r\n\r\nexport default class Equation {\r\n    static zeroPrecision = round(10 ** -precision.get());\r\n    constructor(exp, symbol = \"x\") {\r\n        if (exp instanceof Array) {\r\n            this.algebra = new Poly(exp);\r\n            this.symbol = symbol;\r\n            this.expression = \"\";\r\n            const n = exp.length - 1;\r\n            this.degree = n;\r\n            for (\r\n                let i = 0;\r\n                i < exp.length;\r\n                this.expression += Equation.GetAlgebriteTerm(\r\n                    n - i,\r\n                    exp[i],\r\n                    i,\r\n                    symbol\r\n                ),\r\n                    i++\r\n            );\r\n        } else if (typeof exp === \"string\") {\r\n            this.expression = exp;\r\n            this.algebra = null;\r\n            this.symbol = symbol;\r\n        } else if (exp instanceof Poly) {\r\n            this.expression = \"\";\r\n            this.algebra = exp.copy();\r\n            this.symbol = this.exp.symbol;\r\n            const expression = this.getA();\r\n            const n = expression.length - 1;\r\n            this.degree = n; // unknown\r\n            for (\r\n                let i = 0;\r\n                i < expression.length;\r\n                this.expression += Equation.GetAlgebriteTerm(\r\n                    n - i,\r\n                    expression[i],\r\n                    i,\r\n                    symbol\r\n                ),\r\n                    i++\r\n            );\r\n        } else if (exp instanceof Algebra) {\r\n            // THIS IS TEMPORARY\r\n            this.expression = exp.toString(); // wrong EDIT THIS LATER\r\n            this.algebra = exp.copy();\r\n            this.symbol = this.exp.symbol;\r\n            this.degree = undefined; // unknown\r\n        }\r\n        this.symbol = symbol;\r\n    }\r\n\r\n    static GetAlgebriteTerm = (termDegree, coef, index, symbol) => {\r\n        if (coef === +coef) {\r\n            // means that coef is not a string\r\n            const intExpI = coef | 0;\r\n            const symbolicPart =\r\n                termDegree > 0 ? `*${symbol}^${termDegree}` : \"\";\r\n            if (intExpI !== coef) {\r\n                // means that coef is a float number\r\n                Algebrite.run(`a${index} = ${coef}`);\r\n                return (coef >= 0 ? \"+\" : \"\") + `a${index}${symbolicPart}`;\r\n            } else\r\n                return (intExpI >= 0 ? \"+\" : \"\") + `${intExpI}${symbolicPart}`;\r\n        }\r\n        // here it means coef is a string like '11/2' or '1/4', ...\r\n        return `${coef}${symbol}^${termDegree}`;\r\n    };\r\n    solve = () => {\r\n        // for factorable equations use: algebrite.roots\r\n        let x = Algebrite.nroots(this.expression)\r\n            .toString()\r\n            .replaceAll(\"...\", \"\");\r\n        x = x.slice(1, x.length - 1);\r\n        x = x.split(\",\").filter((xi) => xi && xi !== \"\"); // now x is converted from a string to the array of x answers (as Numbers);\r\n        // edit string to array\r\n        return x.map((xi, i) => {\r\n            // let [real, image] = xi.split(/\\+|-/).filter((xi) => xi && xi !== \"\");\r\n            let separatorIndex = 1;\r\n            for (; separatorIndex < xi.length; separatorIndex++)\r\n                if (\r\n                    (xi[separatorIndex] === \"+\" ||\r\n                        xi[separatorIndex] === \"-\") &&\r\n                    isDigit(xi[separatorIndex - 1]) &&\r\n                    isDigit(xi[separatorIndex + 1])\r\n                )\r\n                    break;\r\n\r\n            let terms = [];\r\n            terms.push(xi.slice(0, separatorIndex));\r\n            if (separatorIndex < xi.length)\r\n                terms.push(xi.slice(separatorIndex, xi.length - 2));\r\n            \r\n            if (terms.length === 1) {\r\n                const magnitude = terms[0].replace(\"*i\", \"\");\r\n                return magnitude === terms[0]\r\n                    ? new Complex(Number(magnitude))\r\n                    : new Complex(0, Number(magnitude));\r\n            } else return new Complex(Number(terms[0]), Number(terms[1]));\r\n        });\r\n    };\r\n\r\n    // AlgebraRoots = () => {\r\n    //     // convert roots returning string to\r\n    //     if (!this.roots || this.roots.length === 0) this.solve();\r\n    // };\r\n\r\n    approximate = (\r\n        method = Equation.Methods.newton,\r\n        N = 10,\r\n        boundary = 1000\r\n    ) => {\r\n        const allRoots = [];\r\n        // newton reaches to approx fast\r\n        // so N = 10 is enough (?????)\r\n        const isUnique = (newRoot) =>\r\n            !isNaN(newRoot) &&\r\n            allRoots.findIndex((rt) =>\r\n                !(rt instanceof Complex) ? rt === newRoot : rt.equals(newRoot)\r\n            ) === -1;\r\n        const isUniqueComplex = (newRoot) =>\r\n            newRoot instanceof Complex &&\r\n            allRoots.findIndex((rt) => newRoot.equals(rt)) === -1;\r\n\r\n        if (this.expression instanceof Algebra) {\r\n            let a0 = 0;\r\n            for (let i = this.expression.a.length - 1; i >= 0; i--)\r\n                if (this.expression.a[i]) {\r\n                    a0 = this.expression.a[i];\r\n                    break;\r\n                }\r\n            const an = this.expression.a[0];\r\n\r\n            if (a0 && an !== 0) boundary = Math.abs(a0 / an);\r\n\r\n            for (let x0 = -boundary; x0 <= boundary; x0++) {\r\n                let x = method(this.algebra, x0, N);\r\n                if (!isNaN(x)) {\r\n                    const rx = round(x);\r\n                    if (isUnique(rx)) allRoots.push(rx);\r\n                }\r\n                x = method(this.algebra, new Complex(0, x0), N);\r\n                if (isUniqueComplex(x)) allRoots.push(x);\r\n            }\r\n        }\r\n        return allRoots;\r\n    };\r\n    // approximation methods\r\n    durandKerner = (N = 20) => {\r\n        if (this.algebra instanceof Algebra) {\r\n            const f = this.algebra.$;\r\n            const n = this.algebra.degree();\r\n            let guess;\r\n            do {\r\n                guess = new Complex(Math.random(), Math.random());\r\n            } while (guess.isReal());\r\n            const roots = Array(n)\r\n                .fill(0)\r\n                .map((_) => []);\r\n\r\n            roots[0].push(new Complex(1, 0));\r\n            for (let i = 1; i < n; i++)\r\n                roots[i][0] = guess.multiply(roots[i - 1][0]);\r\n            for (let iter = 0; iter < N; iter++) {\r\n                for (let i = 0; i < n; i++) {\r\n                    const xiN = roots[i][iter].copy();\r\n                    let sndTermDen = new Complex(1, 0);\r\n                    for (let j = 0; j < n; j++) {\r\n                        if (i !== j) {\r\n                            const xjN = roots[j][roots[j].length - 1];\r\n                            sndTermDen = sndTermDen.multiply(\r\n                                xiN.substract(xjN)\r\n                            );\r\n                        }\r\n                    }\r\n                    let sndTerm = f(xiN).devide(sndTermDen);\r\n                    // USING PUSH MAY SLOW DOWN THE ALGORITHM\r\n                    roots[i].push(xiN.substract(sndTerm));\r\n                }\r\n            }\r\n            return roots.map((r) => r[r.length - 1]);\r\n        }\r\n    };\r\n\r\n    static Methods = {\r\n        // needs work!\r\n        newton: (algebraf, x0 = 0, N = 20) => {\r\n            const f = algebraf.$;\r\n            const df = algebraf.derivative().$;\r\n            const xs = Array(N + 1).fill(0);\r\n            const dfx0 = df(x0);\r\n            if (dfx0 && (!(dfx0 instanceof Complex) || !dfx0.isZero())) {\r\n                if (x0 instanceof Complex) {\r\n                    xs[0] = x0;\r\n                    for (let i = 0; i < N; i++) {\r\n                        // const dfxsi = df(xs[i]);\r\n                        // console.log(\"xs[i] = \", xs[i].toString(), \"=> f(x) = \", f(xs[i]).toString(), \"=> df =\", dfxsi.toString(), \"res = \", f(xs[i]).devide(df(xs[i])))\r\n                        xs[i + 1] = xs[i].substract(f(xs[i]).devide(df(xs[i])));\r\n                    }\r\n\r\n                    const fx = f(xs[N]);\r\n                    if (\r\n                        Math.abs(fx.real()) > Equation.zeroPrecision ||\r\n                        Math.abs(fx.imaginary()) > Equation.zeroPrecision\r\n                    )\r\n                        return NaN;\r\n                } else {\r\n                    xs[0] = x0;\r\n\r\n                    for (let i = 0; i < N; i++) {\r\n                        xs[i + 1] = xs[i] - f(xs[i]) / df(xs[i]);\r\n                    }\r\n\r\n                    if (f(xs[N]) > Equation.zeroPrecision) return NaN;\r\n                }\r\n                //integrity check!\r\n                return xs[xs.length - 1];\r\n            }\r\n            return NaN;\r\n        },\r\n        // needs work!\r\n        middlePoint: (\r\n            f,\r\n            boundary = 1000\r\n            // decimalPrecision = precision.get()\r\n        ) => {\r\n            // NOTE: works fine for some equations\r\n            // and wronge for some others like:  x ** 2 - 4*x  - 5\r\n            boundary = Math.abs(boundary);\r\n            const expectedRate = Equation.zeroPrecision;\r\n            const poles = [];\r\n            let xa = 0,\r\n                xb = 1;\r\n            for (let i = 0; i < boundary; i++) {\r\n                xa = -boundary + i;\r\n                xb = boundary - i;\r\n\r\n                let rate =\r\n                    (xb - xa) / (2 * Math.max(Math.abs(xa), Math.abs(xb)));\r\n                let p = null;\r\n                while (rate >= expectedRate) {\r\n                    p = (xa + xb) / 2;\r\n                    if (!f(p)) break;\r\n                    else if (f(p) * f(xa) < 0) xb = p;\r\n                    else {\r\n                        xa = p;\r\n                        rate =\r\n                            (xb - xa) /\r\n                            (2 * Math.max(Math.abs(xa), Math.abs(xb)));\r\n                    }\r\n                }\r\n                if (!f(p)) poles.push(round(p));\r\n            }\r\n            return new Set(poles);\r\n        },\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport { isDigit } from \"math/calculus\";\r\nimport Complex from \"math/algebra/complex\";\r\nconst nerdamer = require(\"nerdamer/all.min\");\r\n\r\nexport default class Formula {\r\n    constructor(mathPhrase, symbol = null, expressions = null) {\r\n        /// all type of parameters must be converted to an string mathPhrases (f)\r\n        if (mathPhrase instanceof Algebra) {\r\n            this.f = mathPhrase.toFormula();\r\n            this.symbol = mathPhrase.symbol;\r\n        } else if (typeof mathPhrase === \"string\") {\r\n            this.f = mathPhrase;\r\n            this.symbol = symbol;\r\n        }\r\n        this.expressions = expressions ? expressions : nerdamer(this.f); // normally its the nerdamer expressions\r\n    }\r\n\r\n    // differentiate function\r\n    df = (against = this.symbol) => {\r\n        const expressions = nerdamer.diff(this.f, against);\r\n        return new Formula(expressions.toString(), this.symbol, expressions);\r\n    };\r\n    iL = (timeSymbol = \"t\") => {\r\n        // inverse laplace transform\r\n        const expressions = nerdamer(\r\n            `ilt(${this.f}, ${this.symbol}, ${timeSymbol})`\r\n        );\r\n        return new Formula(expressions.toString(), timeSymbol, expressions);\r\n    };\r\n\r\n    L = (frequencySymbol = \"s\") => {\r\n        // laplace\r\n        const expressions = nerdamer(\r\n            `laplace(${this.f}, ${this.symbol}, ${frequencySymbol})`\r\n        );\r\n        return new Formula(\r\n            expressions.toString(),\r\n            frequencySymbol,\r\n            expressions\r\n        );\r\n    };\r\n\r\n    $ = (t = undefined) => {\r\n        // returns the containing f as a normal funtion or single value in a certain point\r\n        // get value at certain point\r\n        const knownVariables = [];\r\n        knownVariables[this.symbol] = t;\r\n        return t\r\n            ? nerdamer(this.f, { ...knownVariables })\r\n                  .evaluate()\r\n                  .toDecimal()\r\n            : nerdamer(this.f).toDecimal();\r\n    };\r\n\r\n    // solve equations\r\n    x = () => {\r\n        // nerdamer.solveEquations(this.f, this.symbol);\r\n\r\n        let roots = nerdamer(this.f)\r\n            .solveFor(this.symbol)\r\n            .map((ri) =>\r\n                (!ri.toString().includes(\"sqrt\")\r\n                    ? ri\r\n                    : ri.evaluate()\r\n                ).toDecimal()\r\n            );\r\n        //roots = roots.split(\",\").filter((ri) => ri && ri !== \"\"); // now x is converted from a string to the array of x answers (as +s);\r\n        // edit string to array\r\n        return roots.map((ri, i) => {\r\n            // let [real, image] = ri.split(/\\+|-/).filter((ri) => ri && ri !== \"\");\r\n            let separatorIndex = 1;\r\n            for (; separatorIndex < ri.length; separatorIndex++)\r\n                if (\r\n                    (ri[separatorIndex] === \"+\" ||\r\n                        ri[separatorIndex] === \"-\") &&\r\n                    (isDigit(ri[separatorIndex - 1]) ||\r\n                        ri[separatorIndex - 1] === \"i\") &&\r\n                    (isDigit(ri[separatorIndex + 1]) ||\r\n                        ri[separatorIndex + 1] === \"i\")\r\n                )\r\n                    break;\r\n\r\n            let terms = [];\r\n            terms.push(ri.slice(0, separatorIndex));\r\n            if (separatorIndex < ri.length)\r\n                terms.push(ri.slice(separatorIndex, ri.length));\r\n\r\n            if (terms.length === 1) {\r\n                const magnitude = terms[0].replace(\"*i\", \"\").replace(\"i\", \"1\");\r\n                return magnitude === terms[0]\r\n                    ? new Complex(+magnitude)\r\n                    : new Complex(0, +magnitude);\r\n            } else {\r\n                let b = terms[1].replace(\"*i\", \"\").replace(\"i\", \"1\");\r\n                if (b !== terms[1]) return new Complex(+terms[0], +b);\r\n                // if not, means the first term was image\r\n                b = terms[0].replace(\"*i\", \"\").replace(\"i\", \"1\");\r\n                return new Complex(+terms[1], +b);\r\n            }\r\n        });\r\n    };\r\n    toString = () => nerdamer(this.f).toTeX();\r\n\r\n    toAlgebra = () => {\r\n        if (this.expressions instanceof Algebra) return this.expressions.copy();\r\n    };\r\n    static GetTerm = (termDegree, coef, symbol) => {\r\n        if (coef === +coef) {\r\n            // means that coef is not a string\r\n            const symbolicPart =\r\n                termDegree > 0 ? `*${symbol}^${termDegree}` : \"\";\r\n            return (coef >= 0 ? \"+\" : \"\") + `${coef}${symbolicPart}`;\r\n        }\r\n        // here it means coef is a string like '11/2' or '1/4', ...\r\n        return `${coef}${symbol}^${termDegree}`;\r\n    };\r\n\r\n    static RepetitiveFactors = (f, roots, symbol) => {\r\n        const fullRoots = [...roots];\r\n        for (const root of roots) {\r\n            const knowns = [];\r\n            knowns[symbol] = root.toString(false, true).replace(\"j\", \"i*\");\r\n            for (\r\n                let fi = nerdamer.diff(f);\r\n                !+nerdamer(fi, {...knowns}).toDecimal();\r\n                fullRoots.push(root.copy()), fi = nerdamer.diff(fi)\r\n            );\r\n        }\r\n        return fullRoots;\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\nimport Fraction from \"./fraction\";\n\nexport default class Zero extends Algebra {\n    constructor(params = {}) {\n        // ke^ct\n        super(0, { symbol: null, type: \"poly\", ...params });\n    }\n\n    degree = () => 0;\n\n    valueAt = (t) => 0;\n\n    toString = () => {\n        let str = \"0\";\n        if (this.plus) str = this.plus.toString();\n\n        return str;\n    };\n    devide = (operand) => new Zero();\n\n    add = (operand) => operand.hardcopy().linkPlus(this.plus);\n\n    multiply = (operand) => new Zero();\n\n    replace = (operand) => {\n        this.a = operand.getA();\n        this.b = operand.getB();\n        this.teta = operand.getTeta();\n        this.symbol = operand.getSymbol();\n        this.type = operand.getType();\n        this.dot = operand.dot.copy();\n    };\n}\n","import Algebra from \"../index\";\r\nimport Complex from \"../complex\";\r\nimport Exp from \"./exp\";\r\nimport Fraction from \"./fraction\";\r\nimport { Step } from \"math/input-signals/signals\";\r\nimport Poly from \"./poly\";\r\nimport { Cos, Sin } from \"./trigonometric\";\r\nimport { round } from \"math/calculus/index\";\r\nimport Equation from \"math/solvers/equation\";\r\nimport { makeProgress } from \"toolshed\";\r\nimport Formula from \"math/solvers/formula\";\r\nimport Zero from \"./zero\";\r\n\r\nexport default class TransferFunction extends Fraction {\r\n    static Specials = {\r\n        $1: (k, a) =>\r\n            new TransferFunction([k], [1, a]).setRoots([], [-a]).setOrder(1),\r\n        $2: (k, a, b = a instanceof Complex ? a.conjugate : a) => {\r\n            // k / (s + a)(s + b) => must be converted to => k / (s2 + 2(a+b)s + ab)\r\n            let aplusb =\r\n                a instanceof Algebra\r\n                    ? a.add(b)\r\n                    : b instanceof Algebra\r\n                    ? b.add(a)\r\n                    : b + a;\r\n            let ab =\r\n                a instanceof Algebra\r\n                    ? a.multiply(b)\r\n                    : b instanceof Algebra\r\n                    ? b.multiply(a)\r\n                    : b * a;\r\n            if (aplusb instanceof Complex && aplusb.isReal())\r\n                aplusb = aplusb.real();\r\n            if (ab instanceof Complex && ab.isReal()) ab = ab.real();\r\n\r\n            return new TransferFunction(\r\n                [k],\r\n                [1, aplusb instanceof Algebra ? aplusb.negation() : -aplusb, ab]\r\n            )\r\n                .setRoots([], [a, b])\r\n                .setOrder(2);\r\n        },\r\n        $WnZ: (w_n, zeta) => new TransferFunction(null, null, { w_n, zeta }),\r\n        $design: (t_rise, overshoot) =>\r\n            new TransferFunction(null, null, { overshoot, t_rise }),\r\n\r\n        $PID: (Kp, Ti, Td) =>\r\n            Ti !== 0\r\n                ? new TransferFunction([Kp * Ti * Td, Kp * Ti, Kp], [Ti, 0])\r\n                : new TransferFunction([Kp * Td, Kp], [1]),\r\n        $Roots: (zeros, poles) => {\r\n            let num = new Poly([1], \"s\"),\r\n                den = new Poly([1], \"s\");\r\n            for (let i = 0; i < zeros.length; i++) {\r\n                if (zeros[i] instanceof Complex)\r\n                    num = num.multiply(new Poly([1, zeros[i].negation()], \"s\"));\r\n                else {\r\n                    num = num.multiply(new Poly([1, -zeros[i]], \"s\"));\r\n                    zeros[i] = new Complex(zeros[i], 0);\r\n                }\r\n            }\r\n            for (let i = 0; i < poles.length; i++) {\r\n                if (poles[i] instanceof Complex)\r\n                    den = den.multiply(new Poly([1, poles[i].negation()], \"s\"));\r\n                else {\r\n                    den = den.multiply(new Poly([1, -poles[i]], \"s\"));\r\n                    poles[i] = new Complex(poles[i], 0);\r\n                }\r\n            }\r\n            return num.devide(den).toTransferFunction().setRoots(zeros, poles);\r\n        },\r\n    };\r\n\r\n    static RootOrders = (Roots) => {\r\n        Roots = Roots.sort((p1, p2) => p1.real() - p2.real());\r\n        const orders = [];\r\n        for (let i = 0; i < Roots.length; i++) {\r\n            let j = i + 1,\r\n                order = 1;\r\n            for (; j < Roots.length && Roots[i].equals(Roots[j]); j++, order++);\r\n            orders.push({ value: Roots[i], order });\r\n            i = j - 1;\r\n        }\r\n        return orders;\r\n    };\r\n    static OmegaZetaPoles = (w_n, zeta) => {\r\n        if (Math.abs(zeta) >= 1) {\r\n            const alpha = -zeta * w_n;\r\n            const beta = w_n * (zeta * zeta - 1) ** 0.5;\r\n            return [alpha + beta, alpha - beta];\r\n        }\r\n        const alpha = -zeta * w_n;\r\n        const beta = w_n * (1 - zeta * zeta) ** 0.5;\r\n        return [new Complex(alpha, beta), new Complex(alpha, -beta)];\r\n    };\r\n    constructor(numerator, denominator, params = {}) {\r\n        let zeros = [],\r\n            poles = [];\r\n        if (params) {\r\n            if (params.overshoot && params.t_rise) {\r\n                params.overshoot = Number(params.overshoot);\r\n                params.t_rise = Number(params.t_rise);\r\n                const logMp = Math.log10(params.overshoot);\r\n                params.zeta =\r\n                    -logMp / (Math.PI * Math.PI + logMp * logMp) ** 0.5;\r\n                params.w_d = Math.PI / params.t_rise;\r\n                params.w_n =\r\n                    params.w_d / (1 - params.zeta * params.zeta) ** 0.5;\r\n            }\r\n\r\n            if (params.w_n) {\r\n                params.w_n = Number(params.w_n);\r\n                params.zeta = Number(params.zeta);\r\n                // if the user sends w_n params it will override the given zero/pole list\r\n                const { w_n, zeta } = params;\r\n                const wn2 = w_n * w_n;\r\n                numerator = wn2;\r\n                denominator = [1, 2 * zeta * w_n, wn2];\r\n                poles = TransferFunction.OmegaZetaPoles(w_n, zeta);\r\n                zeros = [];\r\n            }\r\n        }\r\n        super(numerator, denominator, \"s\", params);\r\n        // SIMPL;IFY\r\n        this.poles = [...poles]; //edit solve equations\r\n        this.zeros = [...zeros];\r\n        if (!this.a instanceof Array) this.a = [this.a];\r\n        if (this.a.length === 1 && !this.w_n) {\r\n            if (\r\n                this.b.length === 3 &&\r\n                this.b[this.b.length - 1] === this.a[0]\r\n            ) {\r\n                this.w_n = this.a[0];\r\n                this.zeta = this.b[1] / (2 * this.w_n);\r\n                this.timeConstant = round(1 / (this.zeta * this.w_n));\r\n                this.t_settle = 4 * this.timeConstant;\r\n                if (params && params.w_d) this.w_d = params.w_d;\r\n                else if (this.zeta >= -1 && this.zeta <= 1)\r\n                    this.w_d = this.w_n * (1 - this.zeta ** 2) ** 0.5;\r\n                this.order = 2;\r\n                this.setRoots(\r\n                    [],\r\n                    TransferFunction.OmegaZetaPoles(this.w_n, this.zeta)\r\n                );\r\n            }\r\n        }\r\n        if (!this.order)\r\n            this.order =\r\n                denominator instanceof Array ? denominator.length - 1 : 1;\r\n        if (params.overshoot && params.t_rise) {\r\n            [this.overshoot, this.t_rise] = [params.overshoot, params.t_rise];\r\n        } else {\r\n            const dampingCharasteristics =\r\n                this.getDampingSystemCharasteristics();\r\n            if (dampingCharasteristics) {\r\n                this.overshoot = dampingCharasteristics.overshoot;\r\n                this.t_rise = dampingCharasteristics.t_rise;\r\n            }\r\n        }\r\n        if (\r\n            (!this.zeros || !this.zeros.length) &&\r\n            (!this.poles || !this.poles.length)\r\n        ) {\r\n            const [zs, ps] = this.roots();\r\n            this.setRoots(zs, ps);\r\n        }\r\n    }\r\n\r\n    roots = () => {\r\n        // roots hasnt been decided by user\r\n        let zeros = [],\r\n            poles = [];\r\n        if (\r\n            this.a instanceof Array &&\r\n            this.b instanceof Array && // if all elements of numerator and denominator are actual numbers\r\n            !this.a.find((ai) => ai !== +ai) &&\r\n            !this.b.find((bi) => bi !== +bi)\r\n        ) {\r\n            // CONSTANT COEFFICIENT POLYNOMIAL EQUATIONS\r\n            zeros =\r\n                this.a.length > 1\r\n                    ? new Formula(this.numerator().toFormula(), this.symbol).x()\r\n                    : // ? new Equation(this.a, this.symbol).solve()\r\n                      [];\r\n            poles =\r\n                this.b.length > 1\r\n                    ? new Formula(\r\n                          this.denominator().toFormula(),\r\n                          this.symbol\r\n                      ).x()\r\n                    : //? new Equation(this.b, this.symbol).solve()\r\n                      [];\r\n            if (zeros.length < this.a.length - 1) {\r\n                zeros = Formula.RepetitiveFactors(\r\n                    this.numerator().toFormula(),\r\n                    zeros,\r\n                    this.symbol\r\n                );\r\n            }\r\n            if (poles.length < this.b.length - 1) {\r\n                poles = Formula.RepetitiveFactors(\r\n                    this.denominator().toFormula(),\r\n                    poles,\r\n                    this.symbol\r\n                );\r\n            }\r\n        } else {\r\n            // if the equation isnt a simple constant coefficient polynomial\r\n        }\r\n\r\n        return [zeros, poles];\r\n    };\r\n\r\n    setRoots = (zeros, poles) => {\r\n        this.poles = poles\r\n            .map((pi) =>\r\n                pi instanceof Complex ? pi.copy() : new Complex(pi, 0)\r\n            )\r\n            .sort((p1, p2) => p1.real() - p2.real());\r\n        this.zeros = zeros\r\n            .map((zi) =>\r\n                zi instanceof Complex ? zi.copy() : new Complex(zi, 0)\r\n            )\r\n            .sort((z1, z2) => z1.real() - z2.real());\r\n\r\n        return this;\r\n    };\r\n\r\n    getDampingSystemCharasteristics = () =>\r\n        this.w_d\r\n            ? {\r\n                  t_rise: round(Math.PI / this.w_d),\r\n                  // WHAT IF W_D === 0?\r\n                  overshoot:\r\n                      this.zeta >= -1 && this.zeta <= 1\r\n                          ? round(\r\n                                100 *\r\n                                    Math.exp(\r\n                                        -(this.zeta * Math.PI) /\r\n                                            (1 - this.zeta ** 2) ** 0.5\r\n                                    )\r\n                            )\r\n                          : null,\r\n              }\r\n            : null;\r\n\r\n    getOrder = () => this.order;\r\n    setOrder = (order) => {\r\n        this.order = order;\r\n        return this;\r\n    };\r\n    getPoles = () => this.poles;\r\n    setPoles = (poles) => {\r\n        this.poles = TransferFunction.map((pi) =>\r\n            pi instanceof Complex ? pi.copy() : new Complex(pi, 0)\r\n        );\r\n        return this;\r\n    };\r\n    getZeros = () => this.zeros;\r\n    setZeros = (zeros) => {\r\n        this.zeros = zeros.map((zi) =>\r\n            zi instanceof Complex ? zi.copy() : new Complex(zi, 0)\r\n        );\r\n        return this;\r\n    };\r\n\r\n    poleOrder = (pole) =>\r\n        this.poles.filter((pi) => Algebra.areTheseTwoEqual(pole, pi)).length;\r\n\r\n    derivative = (against = this.symbol) => {\r\n        let result = this.copy(true);\r\n        if (against === this.symbol) {\r\n            const rplus = result.plus;\r\n            if (!result.dot) {\r\n                const f = this.numerator(),\r\n                    g = this.denominator();\r\n                const num = f\r\n                    .derivative()\r\n                    .multiply(g)\r\n                    .substract(g.derivative().multiply(f));\r\n                result = num.devide(g.multiply(g)).toTransferFunction();\r\n            }\r\n            if (rplus) result.plus = rplus.derivative();\r\n        }\r\n        return result;\r\n    };\r\n    laplace = () => this.copy(); // actually it has no laplace, this is for disfunctioning the laplace method in the parent class Algebra\r\n    laplaceInverse = () => {\r\n        // const m = this.zeros.length - 1; // number of zeros\r\n        // const n = this.poles.length - 1; // number of poles\r\n        const zeros = TransferFunction.RootOrders(this.zeros),\r\n            poles = TransferFunction.RootOrders(this.poles); // compact zero/pole list containing the orders\r\n        const coefs = [];\r\n        for (let i = 0; i < poles.length; i++) {\r\n            // for(let j  = 0; j < poles[i].order; i++)\r\n            const s = poles[i].value;\r\n            const otherPoles = [...poles];\r\n            otherPoles.splice(i, 1);\r\n            const num =\r\n                    zeros.length > 0\r\n                        ? Complex.MultiplyFactors(zeros, s)\r\n                        : new Complex(1, 0),\r\n                den = Complex.MultiplyFactors(otherPoles, s);\r\n            coefs.push(num.devide(den));\r\n            if (poles[i].order > 1) {\r\n                coefs[i] = [coefs[i]];\r\n                let dF = TransferFunction.Specials.$Roots(\r\n                    zeros.map((z) => z.value),\r\n                    otherPoles.map((p) => p.value)\r\n                );\r\n                for (let q = 1; q < poles[i].order; q++) {\r\n                    dF = dF.derivative();\r\n                    coefs[i].push(dF.$(s));\r\n                }\r\n            }\r\n        }\r\n        // edit THIIIIIIIIIIIIIS\r\n        let g_s = new Zero(),\r\n            c_t = new Zero();\r\n        for (let i = 0; i < coefs.length; i++) {\r\n            if (coefs[i] instanceof Array && poles[i].order > 1) {\r\n                for (let q = 0; q < coefs[i].length; q++) {\r\n                    g_s = g_s.add(\r\n                        new TransferFunction(coefs[i][q].actual(), [\r\n                            1,\r\n                            poles[i].value.negation().actual(),\r\n                        ])\r\n                    );\r\n                    // const ap = [coefs[i][q].actual()];\r\n                    // for(let k = 0; k < poles[i].order - q - 1; k++)\r\n                    //     ap.push(0);\r\n                    const ap = Poly.atn(coefs[i][q].actual(), poles[i].order - q - 1)\r\n                    c_t = c_t.add(\r\n                        new Exp(ap, poles[i].value.actual())\r\n                    );\r\n                }\r\n            } else {\r\n                g_s = g_s.add(\r\n                    new TransferFunction(coefs[i].actual(),         [\r\n                        1,\r\n                        poles[i].value.negation().actual(),\r\n                    ])\r\n                );\r\n                console.log( new Exp(coefs[i].actual(), poles[i].value.actual()).toString())\r\n                c_t = c_t.add(\r\n                    !poles[i].value.isZero() ? new Exp(coefs[i].actual(), poles[i].value.actual()) : new Poly(coefs[i].actual())\r\n                );\r\n            }\r\n        }\r\n        return { $s: g_s, $t: c_t };\r\n    };\r\n\r\n    stepify = () => {\r\n        const lstep = this.copy();\r\n        lstep.b.push(0); //update denominator\r\n        lstep.poles.push(new Complex(0, 0));\r\n        return lstep;\r\n    };\r\n    step = () => {\r\n        // normally will automatically return the time domain answer\r\n        // unless inLaplaceDomain is true\r\n        // PUT INPUT SIGNAL AT THE END\r\n        const m = this.zeros.length; // number of zeros\r\n        const n = this.poles.length; // number of poles\r\n        const nreal = this.poles.filter(\r\n            (pi) => !(pi instanceof Complex) || pi.isReal()\r\n        ).length; // number of real poles; can be eig   her 2 or 0\r\n        if (m === 0) {\r\n            const k = this.numerator();\r\n            if (n === 0) {\r\n                // return u(t)\r\n                // DEFINE U(T) IN ALGEBRA\r\n            }\r\n            if (n === 1) {\r\n            } else if (n === 2) {\r\n                const a = -this.poles[0],\r\n                    b = -this.poles[1];\r\n                if (nreal === 2) {\r\n                    // if (a > 0 && b > 0) {\r\n                    if (a !== b)\r\n                        // two independent polesdddd\r\n                        // two negative independent poles\r\n                        return new Exp(1 / a, -a)\r\n                            .add(new Exp(-1 / b, -b))\r\n                            .multiply(k / (a - b))\r\n                            .multiply(new Step())\r\n                            .add(new Step(k / (a * b)));\r\n                    else {\r\n                        const a2 = a * a;\r\n                        return new Exp(-k / a2, -a)\r\n                            .multiply(new Poly([a, 1]))\r\n                            .multiply(new Step())\r\n                            .add(new Step(k / a2));\r\n                    }\r\n                    // } else {\r\n                    //     // repetetive poles\r\n                    // }\r\n                } else if (nreal === 0) {\r\n                    // two conjugated complex poles\r\n                    //UNDERSHOOT BUG FIXLAYS HERE\r\n                    const a = -this.poles[0].real(),\r\n                        b = this.poles[0].imaginary();\r\n                    const ka2b2 = k / (a ** 2 + b ** 2);\r\n                    // FIND BUUUUUUG\r\n                    // return new Exp(-ka2b2, -a)\r\n                    //     .multiply(new Cos(1, b).add(new Sin(a / b, b)))\r\n                    //     .multiply(new Step())\r\n                    //     .add(new Step(ka2b2));\r\n                    return new Exp(-ka2b2, -a)\r\n                        .multiply(new Cos(1, b))\r\n                        .add(new Exp(-ka2b2, -a).multiply(new Sin(a / b, b)))\r\n                        .multiply(new Step())\r\n                        .add(new Step(ka2b2));\r\n                }\r\n                // else if( nreal == 1) // this cant happen, but what if sth went wrong?\r\n            }\r\n        }\r\n        // if its not in special mode:\r\n        return new Formula(this.stepify().toFormula(), this.symbol).iL();\r\n    };\r\n    copy = (\r\n        linkPrevious = false // copy everything\r\n    ) =>\r\n        new TransferFunction(this.a, this.b, {\r\n            overshoot: this.overshoot,\r\n            t_rise: this.t_rise,\r\n            t_settle: this.t_settle,\r\n            w_d: this.w_d,\r\n            timeConstant: this.timeConstant,\r\n            w_n: this.w_n,\r\n            zeta: this.zeta,\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        }).setRoots(this.zeros, this.poles);\r\n\r\n    hardcopy = () =>\r\n        // shallow-singleterm copy\r\n        new TransferFunction(this.a, this.b, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    lim = (s0) => {\r\n        let num, den;\r\n        // for simple polynomial numerator and denominator fractions\r\n        // IMPLEMENT HOPITAL AS WELL?\r\n        if (!s0) {\r\n            // s -> 0)\r\n\r\n            num = { a: 0, sp: this.a.length - 1 };\r\n            den = { b: 1, sp: this.b.length - 1 };\r\n            for (; num.sp > 0 && this.a[num.sp] === 0; num.sp--);\r\n            num.a = this.a[num.sp];\r\n            for (; den.sp > 0 && this.b[den.sp] === 0; den.sp--);\r\n            den.b = this.b[den.sp];\r\n            num.sp = this.a.length - num.sp - 1;\r\n            den.sp = this.b.length - den.sp - 1;\r\n            if (num.sp === den.sp) return num.a / den.b;\r\n            else {\r\n                const sMinPower = Math.min(den.sp, num.sp);\r\n                if (sMinPower) {\r\n                    num.sp -= sMinPower;\r\n                    den.sp -= sMinPower;\r\n                }\r\n                // now one of num.sp or den.sp is zero\r\n                if (den.sp)\r\n                    // zero on denominator\r\n                    return Infinity;\r\n                // if den.sp == 0 and num.sp != 0\r\n                return 0;\r\n            }\r\n        } else if (s0 === Infinity) {\r\n            // s -> infinity\r\n            num = { a: 0, sp: 0 };\r\n            den = { b: 1, sp: 0 };\r\n            for (; num.sp < this.a.length && this.a[num.sp] === 0; num.sp++);\r\n            num.a = this.a[num.sp];\r\n            for (; den.sp < this.b.length && this.b[den.sp] === 0; den.sp++);\r\n            den.b = this.b[den.sp];\r\n            num.sp = this.a.length - num.sp - 1;\r\n            den.sp = this.b.length - den.sp - 1;\r\n            if (num.sp === den.sp) return num.a / den.b;\r\n            // else\r\n            const sMinPower = Math.min(den.sp, num.sp);\r\n            if (sMinPower) {\r\n                num.sp -= sMinPower;\r\n                den.sp -= sMinPower;\r\n            }\r\n            // now one of num.sp or den.sp is zero\r\n            if (den.sp)\r\n                // zero on denominator\r\n                return 0;\r\n            // if den.sp == 0 and num.sp != 0\r\n            return Infinity;\r\n        } else {\r\n            // if s0 is just a no-zero limited number\r\n            num = this.numerator().$(s0);\r\n            den = this.denominator().$(s0);\r\n            if (den)\r\n                // simple non zero denominator limit\r\n                return num / den;\r\n            // if den == 0\r\n            // use Hopital or other limit methods\r\n            //return (num.a * (s0 ** num.sp)) / (den.b * (s0 ** den.sp));\r\n        }\r\n    };\r\n    errors = () => {\r\n        const sGs = this.multiply(new Poly([1, 0], \"s\"));\r\n        const s2Gs = sGs.multiply(new Poly([1, 0], \"s\"));\r\n        return {\r\n            Ks: round(this.lim(0)),\r\n            Kr: round(sGs.lim(0)),\r\n            Ka: round(s2Gs.lim(0)),\r\n        };\r\n    };\r\n    // $ = (t) => this.laplaceInverse().$(t); // valueOf function in certain point; I used character $ in many places as,\r\n    // acronym for \"set\" in setters, so $ here means that set the t ( or x or whatever) with a certain point\r\n\r\n    amplitude = (w) => {\r\n        // w === omega\r\n        const jw = new Complex(0, w);\r\n        const num = this.numerator(),\r\n            den = this.denominator();\r\n        const numAmp = !(num instanceof Exp)\r\n                ? num.$(jw).magnitude()\r\n                : Math.abs(num.getA()),\r\n            denAmp = !(den instanceof Exp)\r\n                ? den.$(jw).magnitude()\r\n                : Math.abs(den.getB());\r\n        return numAmp / denAmp;\r\n        // this is for find exact match of the devide function\r\n        // but im sure num and den are Complex so i directly stated the result\r\n\r\n        // if(num instanceof Complex)\r\n        //     return num.magnitude() / (den instanceof Complex ? den.magnitude : den).magnitude();\r\n        // if(den instanceof Complex)\r\n        //     return num instanceof Algebra ? num.devide(den.magnitude()) : num / den.magnitude();\r\n        // if(num instanceof Algebra)\r\n        //     return num.devide(den);\r\n        // if(den instanceof Algebra)\r\n        //     return den.devideInverse(num);\r\n        // // signal input?\r\n        // if(den)\r\n        //     return num / den;\r\n        // return NaN;\r\n    };\r\n\r\n    phase = (w) => {\r\n        const jw = new Complex(0, w);\r\n        let num = this.numerator(),\r\n            den = this.denominator();\r\n        const numPhase = !(num instanceof Exp)\r\n                ? num.$(jw).phase()\r\n                : num.phase(w), //exponentials have their own shortcut for phase()\r\n            denPhase = !(den instanceof Exp) ? den.$(jw).phase() : den.phase(w);\r\n        if (+denPhase === denPhase && +numPhase === numPhase)\r\n            return numPhase - denPhase;\r\n        // for now Complex.phase() returns numbers or functions:\r\n        // numPhase or denPhase instanceof Function then:\r\n        return (\r\n            (numPhase instanceof Function ? numPhase(w) : numPhase) -\r\n            (denPhase instanceof Function ? denPhase(w) : denPhase)\r\n        );\r\n        // else if(numPhase instanceof Algebra)\r\n        //     return numPhase.$(w) - den.phase();\r\n        // return NaN;\r\n    };\r\n\r\n    static PolarToComplex = (A, phi) =>\r\n        new Complex(A * Math.cos(phi), A * Math.sin(phi));\r\n    nyquist = (w, method = \"complex\") =>\r\n        method === \"complex\"\r\n            ? this.$(new Complex(0, w))\r\n            : TransferFunction.PolarToComplex(this.amplitude(w), this.phase(w));\r\n\r\n    bode = (w) => 20 * Math.log10(this.amplitude(w));\r\n\r\n    toFormula = () => {\r\n        // const [zeros, poles] = this.repetitiveRoots();\r\n        const num =\r\n            this.zeros.length > 0\r\n                ? this.zeros\r\n                      .map(\r\n                          (zi) =>\r\n                              \"(\" +\r\n                              this.symbol +\r\n                              \" - \" +\r\n                              zi.toString(false, true).replace(\"j\", \"i*\") +\r\n                              \")\"\r\n                      )\r\n                      .join(\"*\")\r\n                : \"1\";\r\n        const den =\r\n            this.poles.length > 0\r\n                ? this.poles\r\n                      .map(\r\n                          (pi) =>\r\n                              \"(\" +\r\n                              this.symbol +\r\n                              \" - \" +\r\n                              pi.toString(false, true).replace(\"j\", \"i*\") +\r\n                              \")\"\r\n                      )\r\n                      .join(\"*\")\r\n                : \"1\";\r\n        return `(${num})/(${den})`;\r\n    };\r\n\r\n    // ****************************************************** //\r\n    // SOLVE THIS WITH nerdamer again\r\n    rootLocus = async (k_min, k_max, progressBarObject, N = 1000) => {\r\n        // return root locus values for plotting\r\n\r\n        // TEMPORARY:\r\n        let dk = (k_max - k_min) / N;\r\n        const a = this.getA(), // numerator\r\n            b = this.getB(); // denominator => a / b\r\n        const na = a.length - 1,\r\n            nb = b.length - 1;\r\n        const reals = [],\r\n            imaginaries = [];\r\n        const progressLength = k_max - k_min;\r\n        const newTerm = Formula.GetTerm; // Equation.GetAlgebriteTerm;\r\n        for (let k = k_min, progress = 0; k <= k_max; k += dk, progress += dk) {\r\n            // in this piece: using short form codes and using objects is set to minimum\r\n            // because root locus is time consuming and putting all the codes in one main loop is better\r\n            // const delta = b.add(a.multiply(k));\r\n            let delta = null,\r\n                expression = \"\";\r\n            // USE ARRAY DIRECT PROCESS FOR FASTER RESPONSE\r\n            // NUM + K * DEN\r\n            if (na <= nb) {\r\n                delta = Array(nb);\r\n                const offsetB = nb - na;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetB;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(nb - i, delta[i], this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetB;\r\n                    i <= na;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(na - i, delta[ib], this.symbol),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            } else {\r\n                delta = Array(na);\r\n                const offsetA = na - nb;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetA;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(na - i, delta[i], this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetA;\r\n                    i <= nb;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(nb - i, delta[ib], this.symbol),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            }\r\n            const poles = new Formula(expression, this.symbol).x();\r\n            await makeProgress(\r\n                progressBarObject,\r\n                (100 * progress) / progressLength\r\n            );\r\n\r\n            for (let i = 0; i < poles.length; i++) {\r\n                if (poles[i] instanceof Complex) {\r\n                    reals.push(poles[i].real());\r\n                    imaginaries.push(poles[i].imaginary());\r\n                } else {\r\n                    reals.push(poles[i]);\r\n                    imaginaries.push(0);\r\n                }\r\n            }\r\n        }\r\n        await makeProgress(progressBarObject, 100);\r\n        return [reals, imaginaries];\r\n    };\r\n\r\n    rootsByAlgebriteLocus = async (\r\n        k_min,\r\n        k_max,\r\n        progressBarObject,\r\n        N = 1000\r\n    ) => {\r\n        // return root locus values for plotting\r\n\r\n        // TEMPORARY:\r\n        let dk = (k_max - k_min) / N;\r\n        const a = this.getA(), // numerator\r\n            b = this.getB(); // denominator => a / b\r\n        const na = a.length - 1,\r\n            nb = b.length - 1;\r\n        const reals = [],\r\n            imaginaries = [];\r\n        const progressLength = k_max - k_min;\r\n        const newTerm = Equation.GetAlgebriteTerm;\r\n        for (let k = k_min, progress = 0; k <= k_max; k += dk, progress += dk) {\r\n            // in this piece: using short form codes and using objects is set to minimum\r\n            // because root locus is time consuming and putting all the codes in one main loop is better\r\n            // const delta = b.add(a.multiply(k));\r\n            let delta = null,\r\n                expression = \"\";\r\n            // USE ARRAY DIRECT PROCESS FOR FASTER RESPONSE\r\n            // NUM + K * DEN\r\n            if (na <= nb) {\r\n                delta = Array(nb);\r\n                const offsetB = nb - na;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetB;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(nb - i, delta[i], i, this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetB;\r\n                    i <= na;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(\r\n                            na - i,\r\n                            delta[ib],\r\n                            ib,\r\n                            this.symbol\r\n                        ),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            } else {\r\n                delta = Array(na);\r\n                const offsetA = na - nb;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetA;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(na - i, delta[i], i, this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetA;\r\n                    i <= nb;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(\r\n                            nb - i,\r\n                            delta[ib],\r\n                            ib,\r\n                            this.symbol\r\n                        ),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            }\r\n            // const roots = new Equation(new Poly(delta)).roots();\r\n            const poles = new Equation(expression).solve();\r\n\r\n            await makeProgress(\r\n                progressBarObject,\r\n                (100 * progress) / progressLength\r\n            );\r\n\r\n            for (let i = 0; i < poles.length; i++) {\r\n                if (poles[i] instanceof Complex) {\r\n                    reals.push(poles[i].real());\r\n                    imaginaries.push(poles[i].imaginary());\r\n                } else {\r\n                    reals.push(poles[i]);\r\n                    imaginaries.push(0);\r\n                }\r\n            }\r\n        }\r\n        await makeProgress(progressBarObject, 100);\r\n        return [reals, imaginaries];\r\n    };\r\n\r\n    controlFeedback = (controller) => {\r\n        const cs_gs = this.multiply(controller);\r\n        return cs_gs\r\n            .numerator()\r\n            .devide(cs_gs.numerator().add(cs_gs.denominator()))\r\n            .toTransferFunction();\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Exp from \"./exp\";\r\nimport Fraction from \"./fraction\";\r\n\r\nexport class Sin extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        if (w === +w && w < 0) {\r\n            w *= -1;\r\n            A *= -1;\r\n        }\r\n        super(A, { symbol, type: \"sin\", b: w, teta, ...params });\r\n    }\r\n    copy = (\r\n        linkPrevious = false // deep copy; copy everything\r\n    ) =>\r\n        new Sin(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    hardcopy = () =>\r\n        // shallow copy; copy signle term\r\n        new Sin(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    toExp = () => {\r\n        const sin = this.copy();\r\n        const exp1 = new Exp(sin.a / 2, new Complex(0, -sin.b));\r\n        const exp2 = new Exp(-sin.a / 2, new Complex(0, sin.b));\r\n        return new Complex(0, exp1.add(exp2));\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.sin(w * t + teta);\r\n    };\r\n}\r\n\r\nexport class Cos extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        if (+w === w && w < 0) w *= -1; // cos(-w) = cos(w);\r\n        super(A, { symbol, type: \"cos\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Cos(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    hardcopy = () =>\r\n        // shallow copy; copy signle term\r\n        new Cos(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    toExp = () => {\r\n        const cos = this.copy();\r\n        const exp1 = new Exp(cos.a / 2, new Complex(0, cos.b));\r\n        const exp2 = new Exp(cos.a / 2, new Complex(0, -cos.b));\r\n        return exp1.add(exp2);\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.cos(w * t + teta);\r\n    };\r\n}\r\n\r\nexport class Tan extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        super(A, { symbol, type: \"tan\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Tan(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    hardcopy = () =>\r\n        // shallow copy; copy signle term\r\n        new Tan(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    toExp = () => {\r\n        const tan = this.copy();\r\n        const exp1 = new Exp(1, new Complex(0, -tan.b));\r\n        const numeratorExp2 = new Exp(-1, new Complex(0, tan.b));\r\n        const denominatorExp2 = new Exp(1, new Complex(0, tan.b));\r\n        return new Fraction(exp1.add(numeratorExp2), exp1.add(denominatorExp2));\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.tan(w * t + teta);\r\n    };\r\n}\r\n\r\nexport class Cot extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        super(A, { symbol, type: \"cot\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Cot(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    hardcopy = () =>\r\n        // shallow copy; copy signle term\r\n        new Cot(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    toExp = () => {\r\n        const cot = this.copy();\r\n        const exp1 = new Exp(1, new Complex(0, -cot.b));\r\n        const numeratorExp2 = new Exp(-1, new Complex(0, cot.b));\r\n        const denominatorExp2 = new Exp(1, new Complex(0, cot.b));\r\n        return new Fraction(exp1.add(denominatorExp2), exp1.add(numeratorExp2));\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.cot(w * t + teta);\r\n    };\r\n}\r\n","import { error_codes } from \"config\";\r\n\r\nexport default class NotScalarError extends Error {\r\n    \r\n    constructor(cause = null){ // the parameter with problem\r\n        super(cause ? `${cause} => این عبارت باید اسکالر باشد!!` : \"این خطا بدلیل استفاده از یک عبارت غیر اسکالر در مکان غیر مجاز رخ داده است!\")\r\n        this.name = \"NotNumberError\";\r\n        this.type = \"Numeric\";\r\n        this.code = error_codes.not_scalar;\r\n        this.cause = cause;\r\n    }\r\n\r\n    describe = () => {\r\n        console.log(this.message + (this.cause ? \"\\n\" + this.cause : \"\"));\r\n        return this.message + (this.cause ? \"\\n\" + this.cause.toString() : \"\");\r\n    }\r\n}","import NotScalarError from \"errors/algebra/NotScalarError\";\r\nimport StandardInputSignal from \"math/input-signals\";\r\nimport { round, strictPrecisionFormat } from \"../calculus\";\r\n\r\nclass Algebra {\r\n    // symbolic expressions\r\n    constructor(\r\n        a,\r\n        { symbol = \"t\", type = \"poly\", b, dot, plus, teta = 0, previous, input }\r\n    ) {\r\n        // dot is the interface between terms\r\n        // g(t) = a * f(t) * {dot: as Algebra}\r\n        // teta is the offset for wt + alpha in sin/cos/tan/..\r\n\r\n        this.symbol = symbol;\r\n        this.type = type.toLowerCase();\r\n        this.setA(a).setB(b).setTeta(teta);\r\n\r\n        this.input = input; // u(t), r(t), puls, ...\r\n        if (dot) {\r\n            this.dot = dot.copy();\r\n        } // multiply a Algebra from different type into 'this'\r\n\r\n        if (plus) {\r\n            this.plus = plus.copy();\r\n            this.simplify();\r\n        } // add another Algebra with different type to this one\r\n\r\n        this.previous = previous; // the previous term in the chained Algebra objects\r\n        // term.plus => next term, term.previous => previous term, term.dot => an algebra from another type that is multiplied to actual term\r\n        // F(u) = a.f(u).dot(u) + term.plus(u)\r\n        this.link();\r\n    }\r\n    static identify = (parameter) => {\r\n        if (parameter instanceof Array)\r\n        return parameter.map((pi) =>\r\n                pi instanceof Algebra || pi instanceof StandardInputSignal\r\n                    ? pi.copy()\r\n                    : round(pi)\r\n            );\r\n        else if (parameter instanceof Algebra) {\r\n            return parameter.copy();\r\n        } else if (typeof parameter === \"number\") return round(parameter);\r\n        else if (typeof parameter === \"string\") return parameter;\r\n        else if (!parameter) return 0;\r\n        throw new NotScalarError(parameter);\r\n    };\r\n    setA = (a) => {\r\n        this.a = Algebra.identify(a);\r\n        return this;\r\n    };\r\n    getA = () => this.a;\r\n    getSymbol = () => this.symbol;\r\n    setB = (b) => {\r\n        this.b = Algebra.identify(b);\r\n        return this;\r\n    };\r\n    getB = () => this.b;\r\n\r\n    setTeta = (teta) => {\r\n        this.teta = Algebra.identify(teta);\r\n        return this;\r\n    };\r\n    getTeta = () => this.teta;\r\n    getType = () => this.type;\r\n\r\n    linkPlus = plus => {\r\n        this.plus = plus;\r\n        return this;\r\n    }\r\n    \r\n    setInputSignal = (input) => {\r\n        this.input = input;\r\n        return this;\r\n    };\r\n    // CONNECT AND LINK METHODS, FIND FIRST TERM AND LAST TERM AND ...\r\n    end = () => {\r\n        // returns the end term in the algebratic chain\r\n        let last = this;\r\n        while (last.plus) last = last.plus;\r\n        return last;\r\n    };\r\n\r\n    first = () => {\r\n        // returns the first term in the algebratic chain\r\n        let fst = this;\r\n        while (fst.previous) fst = fst.previous;\r\n        return fst;\r\n    };\r\n\r\n    enddot = () => {\r\n        // returns the end term in the algebratic chain\r\n        let last = this;\r\n        while (last.dot) last = last.dot;\r\n        return last;\r\n    };\r\n\r\n    firstdot = () => {\r\n        // returns the first term in the algebratic chain\r\n        let fst = this;\r\n        // WRONG *****************************\r\n        //while (fst.previous) fst = fst.previous;\r\n        return fst;\r\n    };\r\n    link = () => {\r\n        // some times .previous links are broken; so i decided to write this method just to make sure everything is connected\r\n        let term = this.first();\r\n        if (!term) term = this; // in case this.first() returns wrong answer\r\n        while (term.plus) {\r\n            if (term.plus) term.plus.previous = term;\r\n            term = term.plus; // go to next term in the chain\r\n        }\r\n        return this;\r\n    };\r\n\r\n    copy = (linkPrevious = false) =>\r\n        new Algebra(this.a, {\r\n            type: this.type,\r\n            b: this.b,\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            symbol: this.symbol,\r\n            teta: this.teta,\r\n            input: this.input,\r\n            previous: linkPrevious ? this.previous : null,\r\n        });\r\n\r\n    // SORT THE MULTIPLIERD TERMS ( TERMS CONNECTED WITH this.dot) IN A SPECIFIC ORDER (FOR BETTER SHOW AND COMPARE AND ETC.)\r\n    // LOOK HERE IT STILL HAS BUGS\r\n    sort = () => {\r\n        // sort .dot in special order: poly - exp - frac - ...\r\n        const orders = [\"poly\", \"exp\", \"frac\"];\r\n        let position = this;\r\n        for (const order of orders) {\r\n            while (position) {\r\n                let func = position.dot;\r\n                while (func) {\r\n                    if (func.type === order && !position.isPrior(order)) {\r\n                        const temp = position.copy();\r\n                        position.a =\r\n                            func.a instanceof Array ? [...func.a] : func.a;\r\n                        position.type = func.type;\r\n                        position.symbol = func.symbol;\r\n                        if (func.b instanceof Array) position.b = [...func.b];\r\n                        else position.b = func.b;\r\n\r\n                        func.a = temp.a instanceof Array ? [...temp.a] : temp.a;\r\n                        func.type = temp.type;\r\n                        func.symbol = temp.symbol;\r\n                        if (temp.b instanceof Array) func.b = [...temp.b];\r\n                        else func.b = temp.b;\r\n                    }\r\n                    func = func.dot;\r\n                }\r\n                position = position.dot;\r\n            }\r\n        }\r\n    };\r\n\r\n    isPrior = (order) => {\r\n        const orders = [\"poly\", \"exp\", \"frac\"];\r\n        const thisValue = orders.findIndex((or) => or === this.type);\r\n        const orderValue = orders.findIndex((or) => or === order);\r\n        return thisValue <= orderValue;\r\n    };\r\n\r\n    // CHECK IF ONE TERMS CAN BE ADDED TO ANOTHER ONE (MEANING THEY HAVE SAME PARAMETRIC TERMS)\r\n    unifiable = (exp) => {\r\n        // check if this is unifiable with expression:exp\r\n        //this.sort();\r\n        //exp.sort();\r\n        if (exp && this.type === exp.type && this.symbol === exp.symbol) {\r\n            // check if this and exp are sumable\r\n            // check .dot s:\r\n            let isUnifiable = true;\r\n            if (this.dot || exp.dot)\r\n                isUnifiable = this.dot && this.dot.unifiable(exp.dot);\r\n\r\n            if (this.b instanceof Array && exp.b instanceof Array) {\r\n                if (this.b.length === exp.b.length) {\r\n                    const sameOnes = this.b.filter(\r\n                        (item, idx) => item === exp.b[idx]\r\n                    );\r\n                    return isUnifiable && this.b.length === sameOnes.length;\r\n                }\r\n            } else if (this.b instanceof Algebra)\r\n                return isUnifiable && this.b.equals(exp.b);\r\n            return isUnifiable && exp.b === this.b;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    static valueOf = (x, t = 0) => {\r\n        if (x) {\r\n            let value = 0;\r\n            if (x instanceof Algebra || x instanceof StandardInputSignal)\r\n                value = x.$(t);\r\n            else if (x instanceof Array)\r\n                value = Algebra.polynomialValueAt(x, t);\r\n            else value = x;\r\n            return value;\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    static polynomialValueAt = (arr, t) => {\r\n        let value = 0;\r\n        const n = arr.length - 1;\r\n        for (let i = 0; i <= n; i++) {\r\n            value += arr[i] * t ** (n - i);\r\n        }\r\n        return value;\r\n    };\r\n    // REMOVE REDUNDANT TERMS, SIGNS AND ETC.\r\n    simplify = () => {\r\n        let term = this.first();\r\n        while (term) {\r\n            if (term instanceof Algebra) {\r\n                if (\r\n                    term.a === 0 ||\r\n                    Algebra.polynomial(term.a, term.symbol) === 0\r\n                ) {\r\n                    if (term.previous) {\r\n                        term.previous.plus = term.plus;\r\n                    } else {\r\n                        // remove first term and transfer the second term to first one\r\n                        if (this === term) term.redundant = true;\r\n                        if (term.plus) {\r\n                            term = term.plus.copy(true);\r\n                            if (term.plus) {\r\n                                term.plus = term.plus.plus;\r\n                                if (term.plus) term.plus.previous = term;\r\n                            }\r\n                            term.previous = null;\r\n                        }\r\n                    }\r\n                    // }\r\n                }\r\n            }\r\n            term = term.plus;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    $ = (t) => {\r\n        // valueOf function in certain point\r\n        // I used character $ in many places as acronym for \"set\" in setters, so $ here means that set the t ( or x or whatever) with a certain point\r\n        // for each type just implement the method literally\r\n        let result = this.valueAt(t);\r\n        if (this.dot) result *= this.dot.$(t);\r\n        if (this.plus) result += this.plus.$(t);\r\n\r\n        return result;\r\n    };\r\n\r\n    label = (name = undefined, index = undefined) =>\r\n        (name\r\n            ? name +\r\n              (index !== undefined ? \"_{\" + index + \"}\" : \"\") +\r\n              \"(\" +\r\n              this.symbol +\r\n              \") = \"\r\n            : \"\") + this.toString();\r\n\r\n    // RETURNS THE BEST AND SIMPLE AND SHORTEST WAY TO SHOW COEFFICIENTS\r\n    static coefy = (a_i, i, n) => {\r\n        if (a_i instanceof Algebra) {\r\n            let str = \"\";\r\n            let ai = a_i.copy();\r\n            if (i > 0) {\r\n                // write a method to edit all the + - occuring next to each other in toString()\r\n                if (ai.type === \"complex\" && +ai.a === ai.a) {\r\n                    if (ai.a < 0) {\r\n                        str += \" - \";\r\n                        ai.a *= -1;\r\n                    } else if (!ai.a) {\r\n                        ai.b = +ai.b;\r\n                        if (ai.b < 0) {\r\n                            str += \" - \";\r\n                            ai.b *= -1;\r\n                        } else str += \" + \";\r\n                    } else str += \" + \";\r\n                } else str += \" + \";\r\n            }\r\n            return str + ai.toString(i < n && a_i.hasMultiTerms());\r\n        }\r\n        if (a_i instanceof StandardInputSignal) {\r\n            //EDIT THIS PART TOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\r\n            let str = i > 0 ? \" + \" : \"\";\r\n            return str + a_i.toString(i < n && a_i.hasMultiTerms());\r\n        } else {\r\n            if (n === 0) return strictPrecisionFormat(a_i);\r\n            if (a_i === 0) return \"\";\r\n            if (i !== 0) {\r\n                let s = \"\";\r\n                if (a_i < 0) {\r\n                    s += \" - \";\r\n                    a_i *= -1;\r\n                } else s += \" + \";\r\n\r\n                if (a_i === 1 && i < n) return s;\r\n                return s + strictPrecisionFormat(a_i);\r\n            }\r\n            if (a_i === 1) return \"\";\r\n            if (a_i === -1) return \"-\";\r\n\r\n            return strictPrecisionFormat(a_i);\r\n        }\r\n    };\r\n\r\n    // DECIPHER THE OBJECT TO ITS POLYNOMINAL FORM (IF IT IS ONE ACTUALLY)\r\n    static polynomial = (coefs, symbol) => {\r\n        if (coefs instanceof Array) {\r\n            const n = coefs.length - 1;\r\n            if (\r\n                !n ||\r\n                !coefs.slice(0, n).filter((ci) => ci.toString() !== \"0\").length\r\n            )\r\n                return coefs[n].toString();\r\n            return coefs\r\n                .map((a_i, i) =>\r\n                    a_i\r\n                        ? Algebra.coefy(a_i, i, n) +\r\n                          (i < n\r\n                              ? symbol +\r\n                                (i < n - 1\r\n                                    ? \"^{\" + (n - i).toString() + \"}\"\r\n                                    : \"\")\r\n                              : \"\")\r\n                        : \"\"\r\n                )\r\n                .join(\"\"); // joins all the coefficients, symbols, etc all together as for polynomal functions\r\n        }\r\n        return coefs.toString();\r\n    };\r\n\r\n    join = () => {\r\n        // connect this term to its next terms; considering the right use of + or -\r\n        if (this.plus) {\r\n            let operator = \"+\",\r\n                next = this.plus.copy();\r\n            if (next.a instanceof Array) {\r\n                if (next.a[0] < 0) {\r\n                    operator = \"-\";\r\n                    next.a[0] *= -1;\r\n                }\r\n            } else {\r\n                if (next.a < 0) {\r\n                    operator = \"-\";\r\n                    next.a *= -1;\r\n                }\r\n            }\r\n            return operator + next.toString();\r\n        }\r\n        return \"\";\r\n    };\r\n\r\n    hasMultiTerms = () => {\r\n        if (this.plus) return true;\r\n        if (this.a instanceof Array && this.type !== \"frac\")\r\n            return this.a.filter((ai) => ai !== 0).length > 1;\r\n        return false;\r\n    };\r\n    isTriangular = () =>\r\n        this.type === \"sin\" ||\r\n        this.type === \"cos\" ||\r\n        this.type === \"tan\" ||\r\n        this.type === \"cot\";\r\n\r\n    // MATHEMATICAL OPERATIONS\r\n    // static add = (expressions) => expressions.map((el) => el.toString()).join(\" + \");\r\n    add = (right) => {\r\n        // result = this + operand\r\n        let result = this.link().copy();\r\n        if (right instanceof Algebra) {\r\n            let operand = right.link().copy();\r\n\r\n            let x = result; // now we try to add each term with its unifiable term in y\r\n            while (x) {\r\n                let y = operand;\r\n                while (y) {\r\n                    if (x.unifiable(y)) {\r\n                        if (x.a instanceof Algebra) x.a = x.a.add(y.a);\r\n                        else if (y.a instanceof Algebra) x.a = y.a.add(x.a);\r\n                        // **************************************************\r\n                        // else if x.a || y.a instanceof StandardInputSignal\r\n                        // *********************************************\r\n                        else if (x.a instanceof Array) {\r\n                            if (y.a instanceof Array) {\r\n                                if (y.a.length > x.a.length) x.a = [...y.a];\r\n                                for (\r\n                                    let i = 1;\r\n                                    i <= y.a.length && i <= x.a.length;\r\n                                    i++\r\n                                )\r\n                                    x.a[x.a.length - i] += y.a[y.a.length - i];\r\n                            } else {\r\n                                x.a[x.a.length - 1] += y.a;\r\n                            }\r\n                        } else {\r\n                            x.a += y.a;\r\n                        }\r\n                        // remove the term in y that has been processed\r\n                        if (y.previous) {\r\n                            y.previous.plus = y.plus;\r\n                            if (y.plus) y.plus.previous = y.previous;\r\n                            y.a = 0;\r\n                        }\r\n\r\n                        // its the first term\r\n                        else operand = operand.plus;\r\n                        // after this the garbage collector will remove the term because it has no reference to it\r\n                    }\r\n                    y = y.plus;\r\n                }\r\n                // if(x.plus) x.plus.previous = x;\r\n                x = x.plus; // go to next term in the chain\r\n            }\r\n\r\n            if (operand) {\r\n                // if the above algorythm leaves operand with non-null value\r\n                /// it means there was terms in the operand's algebratic chain that are'nt unifiable with x terms\r\n                // so we must connect the leftovers to last terms of the result\r\n                if (Algebra.polynomial(result.a, result.symbol) !== \"0\") {\r\n                    if (\r\n                        Algebra.polynomial(operand.getA(), operand.symbol) !==\r\n                        \"0\"\r\n                    ) {\r\n                        let endTerm = result.end();\r\n                        endTerm.plus = operand;\r\n                        endTerm.plus.previous = result;\r\n                    }\r\n                } else result = operand.copy(); // connect to next term\r\n            }\r\n            return result.simplify();\r\n        } else if (right instanceof StandardInputSignal) {\r\n            const endTerm = result.end();\r\n            endTerm.plus = right.copy();\r\n            endTerm.plus.previous = endTerm;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    arrangeDots = () => {\r\n        let term = this;\r\n        let input = null;\r\n        while (term.dot) {\r\n            // enhance the algo for cases that more than one input signal erxists in .dot chain\r\n            if (term.dot instanceof StandardInputSignal) {\r\n                input = term.dot;\r\n                term.dot = term.dot.dot;\r\n            }\r\n            if (term.dot) term = term.dot;\r\n        }\r\n        term.dot = input;\r\n    };\r\n    // INCOMPLETE ***********\r\n    multiply = (operand) => {\r\n        const y = this.copy().link();\r\n        if (operand instanceof Algebra) {\r\n            // operand algebra or complex\r\n            // ***** TODO:  ****************\r\n            if (operand.type === \"poly\") {\r\n                if (this.type === \"poly\" || this.type === \"frac\") {\r\n                    // NEEDS ERDITING for FRACTIONs\r\n                    if (this.symbol === operand.symbol) {\r\n                        const ao = operand.getA();\r\n                        const no = ao.length - 1;\r\n                        const As = [];\r\n                        for (let i = no; i >= 0; i--) {\r\n                            if (operand.a[i]) {\r\n                                const zeros = Array(no - i).fill(0);\r\n                                const a = [...y.a].map((yai) =>\r\n                                    yai instanceof Algebra\r\n                                        ? yai.multiply(operand.a[i])\r\n                                        : operand.a[i] instanceof Algebra\r\n                                        ? operand.a[i].multiply(yai)\r\n                                        : yai * operand.a[i]\r\n                                );\r\n                                a.push(...zeros);\r\n                                As.push(a);\r\n                            }\r\n                        }\r\n                        // now sum all the products\r\n                        let product = As.pop();\r\n                        for (let j = 0; j < As.length; j++)\r\n                            for (\r\n                                let i = 1;\r\n                                i <= As[j].length && i <= product.length;\r\n                                i++\r\n                            )\r\n                                if (\r\n                                    product[product.length - i] instanceof\r\n                                    Algebra\r\n                                )\r\n                                    product[product.length - i] = product[\r\n                                        product.length - i\r\n                                    ].add(As[j][As[j].length - i]);\r\n                                else if (\r\n                                    As[j][As[j].length - i] instanceof Algebra\r\n                                )\r\n                                    product[product.length - i] = As[j][\r\n                                        As[j].length - i\r\n                                    ].add(product[product.length - i]);\r\n                                else\r\n                                    product[product.length - i] +=\r\n                                        As[j][As[j].length - i];\r\n\r\n                        y.a = product;\r\n                        if (operand.dot) {\r\n                            // link dots ***IS THIS TRUE?>***\r\n                            const endDotTerm = y.enddot();\r\n                            endDotTerm.dot = operand.dot.copy(); // multiply\r\n                            endDotTerm.dot.previous = endDotTerm;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (y.type !== operand.type && operand.plus) {\r\n                // like: exp(f(...)) * [Asin(...) * Bcos(...)]\r\n                // UPDATE SELF MULTIPLY AFTER SOLVING THIS ISSUE\r\n                y.plus = y.multiply(operand.plus.copy());\r\n                const lastyDot = y.enddot();\r\n                if (\r\n                    typeof y.a === \"number\" &&\r\n                    typeof operand.a === \"number\" &&\r\n                    operand.a !== 1\r\n                ) {\r\n                    y.a *= operand.a;\r\n                    operand.a = 1;\r\n                }\r\n                lastyDot.dot = operand.copy();\r\n                lastyDot.dot.previous = lastyDot;\r\n                // UPDATE SELF MULTIPLY AFTER SOLVING THIS ISSUE\r\n            } else {\r\n                const endDotTerm = y.enddot();\r\n                if (typeof y.a === \"number\" && typeof operand.a === \"number\") {\r\n                    y.a *= operand.a;\r\n                    operand.a = 1;\r\n                }\r\n                endDotTerm.dot = operand.copy(); // multiply\r\n                endDotTerm.dot.previous = endDotTerm;\r\n            }\r\n            if (y.plus) y.plus = y.plus.multiply(operand);\r\n            if (operand.plus) y.end().plus = y.multiply(operand.plus);\r\n            return y; // for now just to avoid crashes\r\n        } else if (operand instanceof StandardInputSignal) {\r\n            // const endDotTerm = y.enddot();\r\n            // endDotTerm.dot = operand.copy(); // multiply\r\n            // endDotTerm.dot.previous = endDotTerm;\r\n            y.input = operand.copy();\r\n            if (y.plus) y.plus = y.plus.multiply(operand);\r\n        } else {\r\n            // scalar multiply\r\n            if (operand instanceof Algebra) {\r\n            } else {\r\n                if (y.a instanceof Array) y.a = y.a.map((ai) => operand * ai);\r\n                else if (y.a instanceof Algebra) y.a = y.a.multiply(operand);\r\n                else y.a = y.a * operand;\r\n            }\r\n            if (y.plus) y.plus = y.plus.multiply(operand);\r\n        }\r\n        return y;\r\n    };\r\n\r\n    selfmultiply = (operand) => {\r\n        if (operand instanceof Algebra) {\r\n            // operand algebra or complex\r\n            // ***** TODO:  ****************\r\n            if (operand.type === \"poly\") {\r\n                if (this.type === \"poly\" || this.type === \"frac\") {\r\n                    // NEEDS ERDITING for FRACTIONs\r\n                    if (this.symbol === operand.symbol) {\r\n                        const ao = operand.getA();\r\n                        const no = ao.length - 1;\r\n                        const As = [];\r\n                        for (let i = no; i >= 0; i--) {\r\n                            if (ao[i]) {\r\n                                const zeros = Array(no - i).fill(0);\r\n                                const a = [...this.a].map(\r\n                                    (yai) => yai * operand[i]\r\n                                );\r\n                                a.push(...zeros);\r\n                                As.push(a);\r\n                            }\r\n                        }\r\n                        // now sum all the products\r\n                        const product = As.pop();\r\n                        for (let j = 0; j < As.length; j++)\r\n                            for (\r\n                                let i = 1;\r\n                                i <= As[j].length && i <= product.length;\r\n                                i++\r\n                            )\r\n                                product[product.length - i] +=\r\n                                    As[j][As[j].length - i];\r\n                        this.a = product;\r\n                        if (operand.dot) {\r\n                            // link dots ***IS THIS TRUE?>***\r\n                            const endDotTerm = this.enddot();\r\n                            endDotTerm.dot = operand.dot.copy(); // multiply\r\n                            endDotTerm.dot.previous = endDotTerm;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (this.type !== operand.type && operand.plus) {\r\n                // like: exp(f(...)) * [Asin(...) * Bcos(...)]\r\n                // UPDATE SELF MULTIPLY AFTER SOLVING THIS ISSUE\r\n                this.plus = this.selfmultiply(operand.plus.copy());\r\n                const lastyDot = this.enddot();\r\n                if (\r\n                    typeof this.a === \"number\" &&\r\n                    typeof operand.a === \"number\" &&\r\n                    operand.a !== 1\r\n                ) {\r\n                    this.a *= operand.a;\r\n                    operand.a = 1;\r\n                }\r\n                lastyDot.dot = operand.copy();\r\n                lastyDot.dot.previous = lastyDot;\r\n                // UPDATE SELF MULTIPLY AFTER SOLVING THIS ISSUE\r\n            } else {\r\n                const endDotTerm = this.enddot();\r\n                if (\r\n                    typeof this.a === \"number\" &&\r\n                    typeof operand.a === \"number\"\r\n                ) {\r\n                    this.a *= operand.a;\r\n                    operand.a = 1;\r\n                }\r\n                endDotTerm.dot = operand.copy(); // multiply\r\n                endDotTerm.dot.previous = endDotTerm;\r\n            }\r\n            if (this.plus) this.plus.selfmultiply(operand);\r\n            // if (operand.plus) this.end().plus = this.selfmultiply(operand.plus);\r\n        } else if (operand instanceof StandardInputSignal) {\r\n            // this.dot = operand.copy(); // multiply\r\n            // this.dot.previous = this;\r\n            this.input = operand.copy();\r\n            if (this.plus) this.plus.selfmultiply(operand);\r\n            if (operand.plus) this.end().plus = this.multiply(operand.plus);\r\n        } else {\r\n            // scalar multiply\r\n            if (this.a instanceof Array)\r\n                this.a = this.a.map((ai) => operand * ai);\r\n            else this.a *= operand;\r\n\r\n            if (this.plus) this.plus.selfmultiply(operand);\r\n        }\r\n    };\r\n\r\n    negation = () => this.multiply(-1);\r\n\r\n    substract = (operand) => this.add(operand.negation());\r\n\r\n    devide = (operand) => {\r\n        if (operand === +operand)\r\n            // scaler\r\n            return this.multiply(1 / +operand);\r\n        // u need to handle Complex objects as Algebra using their type to recognize them\r\n        if (operand instanceof Algebra) {\r\n            if (operand.type === \"poly\" && this.symbol === operand.symbol) {\r\n                return new Algebra(this.getA(), {\r\n                    type: \"frac\",\r\n                    b: operand.getA(),\r\n                    symbol: this.symbol,\r\n                });\r\n            }\r\n            return this.copy(); // for now just to avoid crashes\r\n        }\r\n    };\r\n\r\n    devideInverse = (k) => {\r\n        if (k === +k) {\r\n            return new Algebra([k], {\r\n                symbol: this.symbol,\r\n                type: \"frac\",\r\n                b: [1],\r\n            });\r\n        } else if (k instanceof Algebra) return k.devide(this);\r\n    };\r\n\r\n    laplace = () => {};\r\n\r\n    static areTheSame = (el1, el2) => {\r\n        // checkes the sameness of parameters like .a .b .teta , etc.\r\n        if (el1 instanceof Algebra && el2 instanceof Algebra)\r\n            return el1.equals(el2);\r\n        else if (el1 instanceof Array && el2 instanceof Array) {\r\n            if (el1.length === el2.length) {\r\n                let i = 0;\r\n                for (i = 0; i < el1.length; i++) if (el1[i] !== el2[i]) break;\r\n                return i >= el1.length;\r\n            }\r\n        }\r\n        return typeof el1 === typeof el2 && el1 === el2;\r\n    };\r\n    equals = (operand) =>\r\n        operand instanceof Algebra &&\r\n        this.type === operand.type &&\r\n        this.symbol === operand.symbol &&\r\n        this.type === operand.type &&\r\n        this.symbol === operand.symbol &&\r\n        Algebra.areTheSame(this.a, operand.a) &&\r\n        Algebra.areTheSame(this.b, operand.b) &&\r\n        Algebra.areTheSame(this.teta, operand.teta) &&\r\n        (!this.dot || this.dot.equals(operand.dot)) &&\r\n        (!this.plus || this.plus.equals(operand.plus)) &&\r\n        (!this.previous || this.previous.equals(operand.previous));\r\n\r\n    static areTheseTwoEqual = (p1, p2) =>\r\n        p1 instanceof Algebra\r\n            ? p1.equals(p2)\r\n            : p2 instanceof Algebra\r\n            ? p2.equals(p1)\r\n            : p1 === p2;\r\n    // DECIPHERS THE CONNECT OBJECTS TO UNDERSTANDABLE MATHMATICALLY SHAPED TEXT\r\n    // IT IS FORMATTED COMPATIBLE FOR MathJax component\r\n    toString = (parenthesis = false) => {\r\n        // this.arrangeDots();\r\n        this.simplify(); // simplify current chain that's left from unknown number of operations\r\n        let formula = \"\";\r\n        // if ... + 0 || 0 + ... appears ===>>>>> see below !!\r\n        if (!this.a) return \"0\"; // what if **************************************** 0 / 0\r\n        if (parenthesis) formula += \"(\";\r\n        switch (this.type.toLowerCase()) {\r\n            case \"exp\": {\r\n                // if (this.a < 0) formula += \"(\";\r\n                let a0 = this.a;\r\n                if (a0 < 0) {\r\n                    formula += \"-\";\r\n                    a0 *= -1;\r\n                }\r\n                if (a0 !== 1)\r\n                    if (a0 instanceof Algebra)\r\n                        formula += a0.toString(\r\n                            a0 instanceof Algebra && a0.hasMultiTerms()\r\n                        );\r\n                    else if (a0 instanceof Array)\r\n                        // testTEST\r\n                        formula += Algebra.polynomial(a0, this.symbol);\r\n                    // FOR TEST\r\n                    else formula += strictPrecisionFormat(a0);\r\n                if (this.dot instanceof Algebra)\r\n                    formula += this.dot.toString(\r\n                        this.dot instanceof Algebra && this.dot.hasMultiTerms()\r\n                    );\r\n                if (this.b !== 0) {\r\n                    if (this.a !== 0) {\r\n                        formula += \"e^{\";\r\n                        let e0 = this.b;\r\n                        if (this.b instanceof Algebra)\r\n                            formula += this.b.toString(\r\n                                this.b instanceof Algebra &&\r\n                                    this.b.hasMultiTerms()\r\n                            );\r\n                        else if (this.b instanceof Array)\r\n                            formula += Algebra.polynomial(this.b, this.symbol);\r\n                        else {\r\n                            if (e0 < 0) {\r\n                                formula += \"-\";\r\n                                e0 *= -1;\r\n                            }\r\n                            if (e0 !== 1) formula += e0;\r\n                        }\r\n                        formula += this.symbol + \"}\";\r\n                    }\r\n                    if (this.input) formula += this.input.toString();\r\n                } else {\r\n                    if (a0 !== 1 || !this.dot)\r\n                        formula += strictPrecisionFormat(this.a);\r\n                }\r\n                // if (this.a < 0) formula += \")\";\r\n                if (this.plus) formula += this.join(); // if there's a next term: casscade toString() calls\r\n                break;\r\n            }\r\n            case \"poly\":\r\n                formula += Algebra.polynomial(this.a, this.symbol);\r\n                if (this.dot instanceof Algebra)\r\n                    formula += this.dot.toString(\r\n                        this.dot instanceof Algebra && this.dot.hasMultiTerms()\r\n                    );\r\n                if (this.input) {\r\n                    formula += (parenthesis ? \")\" : \"\") + this.input.toString();\r\n                    parenthesis = false;\r\n                }\r\n                if (this.plus) formula += this.join(); // if there's a next term: casscade toString() calls\r\n                break;\r\n            case \"frac\": {\r\n                if (this.dot instanceof Algebra)\r\n                    formula += this.dot.toString(\r\n                        this.dot instanceof Algebra && this.dot.hasMultiTerms()\r\n                    );\r\n                const numerator = Algebra.polynomial(this.a, this.symbol);\r\n                formula +=\r\n                    numerator !== \"0\"\r\n                        ? \"\\\\frac{\" +\r\n                          numerator +\r\n                          \"}{\" +\r\n                          Algebra.polynomial(this.b, this.symbol) +\r\n                          \"}\"\r\n                        : \"0\";\r\n                if (this.input) formula += this.input.toString();\r\n                if (this.plus) formula += this.join(); // if there's a next term: casscade toString() calls\r\n\r\n                break;\r\n            }\r\n            case \"sin\":\r\n            case \"asin\":\r\n            case \"cos\":\r\n            case \"tan\":\r\n            case \"cot\": {\r\n                // if (this.a < 0) formula += \"(\";\r\n                let a0 = this.a;\r\n                if (a0 < 0) {\r\n                    formula += \"-\";\r\n                    a0 *= -1;\r\n                }\r\n                if (a0 !== 1)\r\n                    if (a0 instanceof Algebra)\r\n                        formula += a0.toString(\r\n                            a0 instanceof Algebra && a0.hasMultiTerms()\r\n                        );\r\n                    else if (a0 instanceof Array)\r\n                        formula += Algebra.polynomial(a0, this.symbol);\r\n                    // FOR TEST\r\n                    else formula += strictPrecisionFormat(a0);\r\n                if (this.a !== 0) {\r\n                    if (this.dot && this.dot instanceof Algebra)\r\n                        formula += this.dot.toString(\r\n                            this.dot instanceof Algebra &&\r\n                                this.dot.hasMultiTerms()\r\n                        );\r\n                    if (this.b !== 0) {\r\n                        formula += this.type;\r\n                        if (this.b instanceof Algebra) {\r\n                            formula += this.b.toString(\r\n                                this.b instanceof Algebra &&\r\n                                    this.b.hasMultiTerms()\r\n                            );\r\n                        } else if (this.b instanceof Array)\r\n                            formula += Algebra.polynomial(this.b, this.symbol);\r\n                        // FOR TEST\r\n                        else {\r\n                            let w0 = this.b;\r\n                            formula += \"(\";\r\n                            if (w0 < 0) {\r\n                                formula += \"-\";\r\n                                w0 *= -1;\r\n                            }\r\n                            if (w0 !== 1) formula += strictPrecisionFormat(w0);\r\n                            formula += this.symbol;\r\n                            if (this.teta instanceof Algebra)\r\n                                formula += this.teta.toString();\r\n                            else if (this.teta) {\r\n                                let e0 = this.teta;\r\n                                if (e0 < 0) {\r\n                                    formula += \" - \";\r\n                                    e0 *= -1;\r\n                                } else formula += \" + \";\r\n                                formula += strictPrecisionFormat(e0);\r\n                            }\r\n                            formula += \")\";\r\n                        }\r\n                        if (this.input) formula += this.input.toString();\r\n                    }\r\n                    // simple num\r\n                } else {\r\n                    if (a0 !== 1 || !this.dot)\r\n                        formula += strictPrecisionFormat(this.a);\r\n                }\r\n                // if (this.a < 0) formula += \")\";\r\n                if (this.plus) formula += this.join(); // if there's a next term: casscade toString() calls\r\n                break;\r\n            }\r\n\r\n            default:\r\n                return null;\r\n        }\r\n        if (parenthesis) formula += \")\";\r\n\r\n        return formula;\r\n    };\r\n    toArray = () => {\r\n        let x = [];\r\n        const params = [\"a\", \"b\", \"teta\", \"symbol\", \"type\"],\r\n            linkers = [\"dot\", \"input\", \"plus\", \"previous\"];\r\n        for (const [key, value] of Object.entries(this)) {\r\n            if (typeof value !== \"function\") {\r\n                if (value) {\r\n                    // maximum toArray call happens\r\n                    if (params.filter((p) => p === key).length)\r\n                        x[key] =\r\n                            value instanceof Algebra ? value.toArray() : value;\r\n                    //)((value instanceof StandardInputSignal ? value.copy() : ));\r\n                    else if (linkers.filter((l) => l === key).length)\r\n                        x[key] =\r\n                            value instanceof StandardInputSignal\r\n                                ? value.copy()\r\n                                : value.toArray();\r\n                }\r\n            }\r\n        }\r\n        return x;\r\n    };\r\n}\r\n\r\nexport default Algebra;\r\n","import { round, strictPrecisionFormat } from \"../calculus\";\r\n\r\nexport default class StandardInputSignal {\r\n    constructor(amplitude = 1, type = \"u\", symbol = \"t\") {\r\n        this.symbol = symbol;\r\n        this.type = type;\r\n        this.amp = round(amplitude);\r\n    }\r\n\r\n    copy = () => new StandardInputSignal(this.amp, this.type, this.symbol);\r\n\r\n    toString = () => {\r\n        let str = \"\",\r\n            a = this.amp;\r\n        if (this.amp === -1) {\r\n            str += \"-\";\r\n            a *= -1;\r\n        }\r\n        if (a !== 1) str += strictPrecisionFormat(a);\r\n        return str + `${this.type}(${this.symbol})`;\r\n    };\r\n\r\n    ampiltude = () => this.amp;\r\n}\r\n"],"names":["Complex","preal","pimage","params","symbol","type","b","hasMultiTerms","plus","a","toString","parenthesis","showJ1","isZero","rl","formula","Algebra","round","im","getA","setA","join","real","imaginary","copy","linkPrevious","dot","previous","input","hardcopy","conjugate","negation","magnitude$2","magnitude","phase","definiteA","definiteB","Math","atan2","t","$","NaN","isReal","hasSameTypeWith","x","realify","add","operand","Re","Im","substract","equals","isConjugateWith","multiply","push","devide","denominator","result","isNaN","setB","raiseTo","power","floor","i","devideInverse","k","actual","ToCouples","arrComplex","n","length","reals","Array","fill","imaginaries","extract","strNumber","replace","isDigit","Number","slice","sign","img","MultiplyFactors","factors","s","factor","term","value","order","Exp","toSin","exp","cos","Cos","sin","Sin","amplitude","w","jw","pb","valueAt","numericT","Fraction","num","den","lim","numerator","Poly","setNumerator","setDenominator","y","toFormula","toTransferFunction","TransferFunction","getB","degree","powerTerm","derivative","against","da","expression","filter","ci","map","a_i","atn","aArray","Symbolic","halfTermsVisible","coef","inline","res","Step","amp","StandardInputSignal","Algebrite","require","Equation","solve","nroots","replaceAll","split","xi","separatorIndex","terms","approximate","method","Methods","newton","N","boundary","allRoots","isUnique","newRoot","findIndex","rt","isUniqueComplex","a0","an","abs","x0","algebra","rx","durandKerner","guess","f","random","roots","_","iter","xiN","sndTermDen","j","xjN","sndTerm","r","this","GetAlgebriteTerm","undefined","zeroPrecision","precision","termDegree","index","intExpI","symbolicPart","run","algebraf","df","xs","dfx0","fx","middlePoint","expectedRate","poles","xa","xb","rate","max","p","Set","nerdamer","Formula","mathPhrase","expressions","diff","iL","timeSymbol","L","frequencySymbol","knownVariables","evaluate","toDecimal","solveFor","ri","includes","toTeX","toAlgebra","GetTerm","RepetitiveFactors","fullRoots","root","knowns","fi","Zero","str","linkPlus","teta","getTeta","getSymbol","getType","zeros","overshoot","t_rise","logMp","log10","zeta","PI","w_d","w_n","wn2","OmegaZetaPoles","find","ai","bi","setRoots","pi","sort","p1","p2","zi","z1","z2","getDampingSystemCharasteristics","getOrder","setOrder","getPoles","setPoles","getZeros","setZeros","poleOrder","pole","rplus","g","laplace","laplaceInverse","RootOrders","coefs","otherPoles","splice","dF","Specials","$Roots","z","q","g_s","c_t","ap","console","log","$s","$t","stepify","lstep","step","m","nreal","a2","ka2b2","t_settle","timeConstant","s0","sp","sMinPower","min","Infinity","errors","sGs","s2Gs","Ks","Kr","Ka","numPhase","denPhase","Function","nyquist","PolarToComplex","bode","rootLocus","k_min","k_max","progressBarObject","dk","na","nb","progressLength","newTerm","progress","delta","offsetB","ib","offsetA","makeProgress","rootsByAlgebriteLocus","controlFeedback","controller","cs_gs","dampingCharasteristics","zs","ps","$1","$2","aplusb","ab","$WnZ","$design","$PID","Kp","Ti","Td","Roots","orders","alpha","beta","A","phi","toExp","exp1","exp2","NotScalarError","cause","describe","message","name","code","error_codes","Error","identify","setTeta","setInputSignal","end","last","first","fst","enddot","firstdot","link","position","func","isPrior","temp","or","unifiable","isUnifiable","sameOnes","item","idx","simplify","polynomial","redundant","label","operator","next","isTriangular","right","endTerm","arrangeDots","no","As","yai","product","pop","endDotTerm","lastyDot","selfmultiply","ao","areTheSame","toLowerCase","strictPrecisionFormat","e0","w0","toArray","linkers","key","l","Object","entries","parameter","valueOf","polynomialValueAt","arr","coefy","el1","el2","areTheseTwoEqual","ampiltude"],"sourceRoot":""}