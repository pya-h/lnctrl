{"version":3,"file":"static/js/876.12186fc1.chunk.js","mappings":"yIA8DA,IA3DiB,SAAC,GAA4C,IAA1CA,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,MAAiC,KAA1BC,MAA0B,EAAnBC,QAAAA,OAAmB,MAAV,IAAU,EA0BzD,OACI,SAAC,IAAD,CACIC,MAAO,CAAEC,UAAW,UAEpBC,KAAMN,EACNO,OAAQ,CAGJC,OAAQ,CACJC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IAEPC,MAAO,CACHC,UAAW,SACXC,UAAU,GAEdC,MAAO,CACHF,UAAW,SACXC,UAAU,GAGdZ,OAAAA,EACAF,MAAAA,EAEAgB,WAAY,CAACC,MAAM,OAAQC,QAAS,UAAWC,KAAK,CAACC,MAAM,cAC3DC,OAAQ,CAACC,YAAa,U,mNCkEtC,IA9GkB,SAAC,GAOZ,IANHC,EAME,EANFA,QACAC,EAKE,EALFA,cACAC,EAIE,EAJFA,gBACAC,EAGE,EAHFA,MACAC,EAEE,EAFFA,OACAC,EACE,EADFA,aAEA,GAA6CC,EAAAA,EAAAA,WAAS,GAAtD,eAAOC,EAAP,KAAwBC,EAAxB,KACA,GACIF,EAAAA,EAAAA,UAAS,IADb,eAAOG,EAAP,KAAkCC,EAAlC,KAqCA,OAJAC,EAAAA,EAAAA,YAAU,WACNP,EAAO,CAAEQ,UAAWH,EAA4B,GAAO,OACxD,CAACA,EAA2BL,KAG3B,UAAC,KAAD,CAAMS,GAAI,CAAEC,UAAW,OAASC,WAAS,EAACD,UAAU,MAApD,WACI,UAAC,KAAD,CAAME,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGL,GAAI,CAAEC,UAAW,OAASK,MAAI,EAA1D,UACKd,IACG,SAAC,IAAD,CACIR,MAAM,YACN,aAAW,gBACXuB,UAAU,OACVC,QA1CC,WACjBb,GAAmBD,GACnBF,KAoCY,SAMKE,GACG,SAAC,IAAD,KAEA,SAAC,IAAD,MAGT,KACH,SAAC,IAAD,CACIV,MAAM,YACN,aAAW,gBACXuB,UAAU,OACVC,QAASrB,EAJb,UAMI,SAAC,IAAD,OAEJ,SAAC,IAAD,CACIH,MAAM,YACN,aAAW,iBACXuB,UAAU,OACVC,QA1DH,WACT,IAAMC,EAAkBC,SAASC,eAAe,YAG1CC,EAAuBF,SAASG,cAAc,UACpDD,EAAqB/C,MAAQ4C,EAAgB5C,MAC7C+C,EAAqB9C,OAAS2C,EAAgB3C,OAE9C,IAAMgD,EAAMF,EAAqBG,WAAW,MAC5CD,EAAIE,UAAY,QAChBF,EAAIG,SAAS,EAAG,EAAGR,EAAgB5C,MAAO4C,EAAgB3C,QAE1DgD,EAAII,UAAUT,EAAiB,EAAG,GAElCG,EAAqBO,QAAO,SAACC,IACzBC,EAAAA,EAAAA,QAAOD,EAAMhC,MAGjBkC,GAAAA,CAAYZ,SAASC,eAAe,eAAeY,MAAK,SAACC,GACrDA,EAAOL,QAAO,SAACC,IACXC,EAAAA,EAAAA,QAAOD,EAAM/B,UAkCb,UAMI,SAAC,IAAD,OAEJ,SAAC,IAAD,CACIL,MAAM,YACN,aAAW,gBACXuB,UAAU,OACVC,QAASlB,EAJb,UAMI,SAAC,IAAD,UAGR,SAAC,KAAD,CAAMa,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,MAAI,EAA/B,UACI,UAAC,IAAD,CACImB,QAAS,EACTxB,UAAU,MACVD,GAAI,CAAE0B,GAAI,GAAKzB,UAAW,OAC1B0B,WAAW,SAJf,WAMI,SAAC,IAAD,KACA,SAAC,KAAD,CACI,aAAW,SACXC,MAAOhC,EACPiC,SAAU,SAACC,EAAGF,GAAJ,OACN/B,EAA6B+B,OAGrC,SAAC,IAAD,c,sGCjFpB,IA7B6B,SAAC,GAA4C,IAA1CG,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACzD,OACI,SAAC,EAAAC,SAAD,UACKJ,aAAsBK,OACnBL,EAAWM,KAAI,SAACC,EAAOC,GAAR,OACX,SAAC,KAAD,CAAMpC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,MAAI,EAAhC,UACI,SAAC,IAAD,CACIuB,SAAU,SAACC,GAAD,OAAOE,EAAQO,GAAGT,EAAEU,OAAOZ,QACrCA,MAAOU,EACPtC,GAAI,CAAEnC,MAAO,QACb4E,WAAY,CACRC,gBACI,SAAC,IAAD,CAAgBC,SAAS,OAAzB,UACI,SAAC,IAAD,UAAUV,EAAOM,OAGzBK,aAAcV,EAAMK,KAChB,SAAC,IAAD,CAAgBI,SAAS,QAAzB,UACI,SAAC,IAAD,UAAUT,EAAMK,mB,yQCjBlDM,EAAoB,CACtB,cACA,cACA,uBACA,wBAEEC,EAAiB,CAAC,QAAS,QAAS,SAAU,UAuEpD,EArEoC,SAAC,GAY9B,IAXHC,EAWE,EAXFA,aACAC,EAUE,EAVFA,eACAC,EASE,EATFA,cACAC,EAQE,EARFA,gBACAC,EAOE,EAPFA,MACAC,EAME,EANFA,MACAC,EAKE,EALFA,OACAC,EAIE,EAJFA,OACAC,EAGE,EAHFA,mBACAC,EAEE,EAFFA,sBACAC,EACE,EADFA,aAEA,OACI,SAACC,EAAA,EAAD,CACIC,YAAU,EACV/F,MAAM,yDACNoC,GAAI,CACAC,UAAW,MACXjC,UAAW,QACXF,OAAQ,QANhB,UASI,UAAC8F,EAAA,GAAD,CAAMnC,QAASoC,EAAAA,GAAa3D,WAAS,EAACD,UAAU,MAAhD,WACI,SAAC6D,EAAA,EAAD,CACI/B,WAAY,CAACgB,EAAcC,EAAgBG,EAAOC,GAClDpB,QAAS,CAACiB,EAAeC,EAAiBG,EAAQC,GAClDrB,OAAQY,EACRX,MAAOY,KAEX,UAACc,EAAA,GAAD,CAAMvD,GAAI,GAAItC,MAAO,CAACgG,YAAa,MAAO7D,WAAS,EAAnD,WACI,SAAC0D,EAAA,GAAD,CAAMvD,GAAI,EAAGL,GAAI,CAAEgE,EAAG,GAAM1D,MAAI,EAAhC,UACI,SAAC2D,EAAA,EAAD,CACIzD,QAAS,kBAAMgD,GAAsB,IACrCzF,MAAO,CAAEF,MAAO,OAAQqG,cAAe,QACvCC,QACKZ,EAAmC,WAAd,YAJ9B,yCAUJ,SAACK,EAAA,GAAD,CAAMvD,GAAI,EAAGL,GAAI,CAAEgE,EAAG,GAAK1D,MAAI,EAA/B,UACI,SAAC2D,EAAA,EAAD,CACIzD,QAAS,kBAAMgD,EAAsB,QACrCzF,MAAO,CAAEF,MAAO,OAAQqG,cAAe,QACvCC,QACIZ,EAAqB,YAAc,WAJ3C,wDAWR,SAACK,EAAA,GAAD,CAAMvD,GAAI,GAAIL,GAAI,CAAE0B,GAAI,GAAKpB,MAAI,EAAjC,UACI,SAAC8D,EAAA,EAAD,CAAaC,GAAG,qBAEnBZ,IACG,SAACG,EAAA,GAAD,CAAMvD,GAAI,GAAIL,GAAI,CAAE0B,GAAI,GAAKpB,MAAI,EAAjC,UACI,eAAGvC,MAAO,CAAEC,UAAW,SAAUgB,MAAO,SAAxC,+FACsByE,EADtB,6C,gCC5DlBa,EACE,KADFA,EAEG,IAEHC,EAA8B,IAAMC,KAAKC,GAEzCC,EAAY,SAACC,EAAGC,EAAG7E,EAAWd,EAAQ4F,GAAyB,IAApBC,EAAmB,uDAAZ,QACpD,MAAO,CACHH,EAAAA,EACAC,EAAAA,EACAG,EAAGF,EAAMzC,MAAMuC,EAAEK,QAAQC,KAAK,GAAK,KAEnCC,KAAM,CAEFrH,MAAOkC,GAEXoF,KAAM,WAAaN,EAAM,KAAO,IAChCC,KAAAA,EACAM,KAAK,KAAD,OAAOnG,EAAP,QAGNoG,EAAU,SAACC,EAAGnC,EAAOC,EAAOrD,EAAWd,EAAQ4F,GAAmB,IAAdU,EAAa,uDAAT,IAC1D,EAAeC,EAAAA,GAAAA,SAAkBF,EAAGnC,EAAOC,EAAOmC,GAAlD,eAAOZ,EAAP,KAAUC,EAAV,KACA,OAAOF,EAAUC,EAAGC,EAAG7E,EAAWd,EAAQ4F,IAqV9C,EAlV0B,WACtB,OAAsCpF,EAAAA,EAAAA,UAAS,KAA/C,eAAOsD,EAAP,KAAqBE,EAArB,KACA,GAA0CxD,EAAAA,EAAAA,UAAS,OAAnD,eAAOuD,EAAP,KAAuBE,EAAvB,KACA,GAAoBzD,EAAAA,EAAAA,UAAS,MAA7B,eAAOgG,EAAP,KAAYC,EAAZ,KACA,GAAwBjG,EAAAA,EAAAA,WAAU,IAAlC,eAAO0D,EAAP,KAAcE,EAAd,KACA,GAAwB5D,EAAAA,EAAAA,UAAS,IAAjC,eAAO2D,EAAP,KAAcE,EAAd,KAEA,GAA4B7D,EAAAA,EAAAA,UAAS,IAArC,eAAOkG,EAAP,KAAgBC,EAAhB,KACA,GAA0BnG,EAAAA,EAAAA,UAAS,CAC/BoG,MAAO,GACPC,MAAO,GACPC,UAAW,GACXC,YAAa,KAJjB,eAAOrI,EAAP,KAAesI,EAAf,KAMA,GAA8BxG,EAAAA,EAAAA,UAAS,MAAvC,eAAOyG,EAAP,KAAiBC,GAAjB,KACA,IAAgC1G,EAAAA,EAAAA,UAAS,GAAzC,iBAAOM,GAAP,MAAkBqG,GAAlB,MACA,IAAyC3G,EAAAA,EAAAA,WAAS,GAAlD,iBAAO4G,GAAP,MAAuBC,GAAvB,MACA,IAA0C7G,EAAAA,EAAAA,WAAS,GAAnD,iBAAO8G,GAAP,MAAwBC,GAAxB,MACA,IAAoD/G,EAAAA,EAAAA,WAAS,GAA7D,iBAAO8D,GAAP,MAA2BC,GAA3B,MACA,IAAgB/D,EAAAA,EAAAA,UAAS,KAAzB,iBAAO8F,GAAP,MACA,IADA,OACwC9F,EAAAA,EAAAA,UAAS,OAAjD,iBAAOgE,GAAP,MAAqBgD,GAArB,OAqBA3G,EAAAA,EAAAA,YAAU,YACN,iBAAC,qIAEa4G,EAAMlB,EAAAA,GAAAA,cAAuBzC,GAC/B4D,EAAMnB,EAAAA,GAAAA,cAAuBxC,GAC3B4D,EACFlG,SAASC,eAAe,kBACtBkG,EAAM,IAAIC,EAAAA,EAAiBJ,EAAKC,GACtCjB,EAAKmB,GACLV,GAAU,KAAOU,EAAIE,MAAM,KAAO,MAG9BC,GAAiB,EACfC,EAAM,CACRlB,UAAW3D,MAAMuD,EAAQX,QACzBc,MAAO1D,MAAMuD,EAAQX,QACrBgB,YAAa5D,MAAMuD,EAAQX,QAC3Ba,MAAOzD,MAAMuD,EAAQX,SAEnBkC,EAAY,IAAIC,KAEb5E,EAAI,EApBpB,aAoBuBA,EAAIoD,EAAQX,QApBnC,wBAqBWiC,EAAIlB,UAAUxD,GAAK8C,EACfM,EAAQpD,GAAGkD,IAAIM,WACd5C,GACAC,EACDuC,EAAQpD,GAAGxC,UACX4F,EAAQpD,GAAGtD,OACXsH,GACAhB,IAEJ0B,EAAInB,MAAMvD,GAAK8C,EACXM,EAAQpD,GAAGkD,IAAIK,OACd3C,GACAC,EACDuC,EAAQpD,GAAGxC,UACX4F,EAAQpD,GAAGtD,OACXsH,GACAhB,IAEJ0B,EAAIjB,YAAYzD,IAAhB,UAA0B0E,EAAInB,MAAMvD,IACpC0E,EAAIjB,YAAYzD,GAAGqC,EAAIqC,EAAIjB,YAAYzD,GAAGqC,EAAEvC,KACxC,SAAC+E,GAAD,OAAQA,EAAK7C,KAzC5B,UA2CgCiB,EAAAA,GAAAA,gBACjBG,EAAQpD,GAAGkD,IAAI4B,mBACdlE,GACAC,EACDmC,IA/Cf,uCA2CkBZ,EA3ClB,KA2CqBC,EA3CrB,KAiDWqC,EAAIpB,MAAMtD,GAAKmC,EACXC,EACAC,EACAe,EAAQpD,GAAGxC,UACX4F,EAAQpD,GAAGtD,OACXsH,GACA,SAGAM,EAAIS,OAAO3B,EAAQpD,GAAGkD,OAAMuB,GAAiB,GA1D5D,WA2DiBO,EAAAA,EAAAA,IACFX,EACC,IAAMrE,GAAMoD,EAAQX,OAAS,IA7D7C,QAoB2CzC,IApB3C,2BAiEYyE,EAjEZ,kCAoEgCxB,EAAAA,GAAAA,gBACjBqB,EAAIQ,mBACHlE,GACAC,EACDmC,IAxEf,gCAoEkBZ,EApElB,KAoEqBC,EApErB,KA2EiBiB,EAAQnB,EACNC,EACAC,EACA7E,GAHe,UAIZuE,EAJY,YAIGA,EAJH,KAKfiC,GACA,SAEJiB,EAAOnC,EACHwB,EAAId,WACH5C,GACAC,EACDrD,GAJU,UAKPuE,EALO,YAKQA,EALR,KAMViC,GACAhB,IAEJO,EAAQT,EACJwB,EAAIf,OACH3C,GACAC,EACDrD,GAJW,UAKRuE,EALQ,YAKOA,EALP,KAMXiC,GACAhB,KAEFS,GArGjB,UAqGoCF,IACblB,EAAIoB,EAAYpB,EAAEvC,KAC1B,SAAC+E,GAAD,OAAQA,EAAK7C,KAGjB0C,EAAIpB,MAAM4B,KAAK5B,GACfoB,EAAInB,MAAM2B,KAAK3B,GACfmB,EAAIjB,YAAYyB,KAAKzB,GACrBiB,EAAIlB,UAAU0B,KAAKD,GACbE,EAAU,IAAIP,KACpBV,KAAkBiB,GAAWR,GAAa,KA/GrD,0BAiHaK,EAAAA,EAAAA,IAAaX,EAAoB,KAjH9C,QAmHOX,EAAQgB,GAnHf,kDAqHOU,QAAQC,IAAR,MArHP,yDAAD,KAwHD,CACC7E,EACAC,EACAG,EACAC,EACAmD,GACAxG,GACA4F,EACAJ,MAGJzF,EAAAA,EAAAA,YAAU,WACNwG,IAAe,KAChB,CAACvD,EAAcC,IAMlB,OACI,UAAC6E,EAAA,EAAD,YACI,SAACjE,EAAA,GAAD,CAAMtD,MAAI,EAACmB,QAASoC,EAAAA,GAApB,UACI,gBAAIiE,UAAU,wBAAd,UACK,IADL,wHAKJ,SAAClE,EAAA,GAAD,CAAMtD,MAAI,EAACmB,QAASoC,EAAAA,GAApB,UACI,UAACD,EAAA,GAAD,CAAM1D,WAAS,EAACD,UAAU,SAASwB,QAAS,EAA5C,WACI,SAACmC,EAAA,GAAD,CAAM5D,GAAI,CAAE7B,OAAQ,OAAQN,MAAO,QAAUyC,MAAI,EAAjD,UACI,SAACoD,EAAA,EAAD,CAAS1D,GAAI,CAAEC,UAAW,OAA1B,UACI,UAAC2D,EAAA,GAAD,CACIS,GAAG,aACHrE,GAAI,CAAE7B,OAAQ,QACd+B,WAAS,EACTD,UAAU,MAJd,UAMK0F,EAAQtD,KAAI,SAAC0F,EAAKC,GACf,IAAIC,EACA,KACAF,EAAItC,IAAIsB,MAAM,IAAKiB,EAAQ,GAC3B,KAEJ,OACI,SAACpE,EAAA,GAAD,CACI7F,MAAO,CAAEmK,SAAU,QACnB/H,GAAI,EACJC,GAAI,GACJE,MAAI,EAJR,UAMI,SAAC6H,EAAA,EAAD,UAAUF,UAIpB5B,KACE,SAACzC,EAAA,GAAD,CACI7F,MAAO,CAAEmK,SAAU,QACnB/H,GAAI,EACJC,GAAI,GAHR,UAKI,SAAC+H,EAAA,EAAD,UAAUjC,cAM9B,UAACtC,EAAA,GAAD,CACInC,QAAS,EACT1D,MAAO,CACHF,MAAO,OACPC,OAAQ,OACRK,OAAQ,OACR8B,UAAW,OAEfC,WAAS,EARb,WAUI,SAAC0D,EAAA,GAAD,CACIzD,GAAI,EACJC,GAAI,GACJC,GAAI,GACJL,GAAI,CAAEoI,UAAW,KAAMvK,MAAO,QAC9BqC,WAAS,EALb,UAOI,SAAC0D,EAAA,GAAD,CAAMvD,GAAI,GAAV,UACI,SAAC,EAAD,CACI0C,aAAcA,EACdC,eAAgBA,EAChBC,cAAeA,EACfC,gBAAiBA,EACjBC,MAAOA,EACPC,MAAOA,EACPC,OAAQA,EACRC,OAAQA,EACRC,mBAAoBA,GACpBC,sBACIA,GAEJC,aAAcA,UAI1B,UAACG,EAAA,GAAD,CAAMzD,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,MAAI,EAAjC,WACI,SAACoD,EAAA,EAAD,WACI,SAAC2E,EAAA,EAAD,CACIlJ,QAlPhB,WACZ,IAAMmJ,GAAe,OAAO3C,IAEmC,IAA3D2C,EAAgBC,WAAU,SAACR,GAAD,OAAStC,EAAI6B,OAAOS,EAAIS,QAElDF,EAAgBb,KAAK,CACjBhC,IAAAA,EACA1F,UAAAA,GACAd,OACIqF,EAAc,MAAQqB,EAAQX,OAAS,GAAGyD,WAAa,MAE/D7C,EAAS0C,GACThC,IAAe,GACfqB,QAAQC,IAAIU,KAsOYjJ,gBACI,iCACA,OACOsG,EAAQtD,KAAI,SAAC0F,GAAD,OAASA,EAAI9I,WAC9ByJ,OACF,OAEJtJ,eACI,OACOuG,EAAQtD,KACP,SAAC0F,GAAD,gBACOA,EAAI9I,OADX,kBAEQ8I,EAAIY,EAFZ,cAGUZ,EAAIa,EAHd,eAIQb,EAAIc,YACE,OACA,OANd,SASNH,KAAK,MAAQ,OAEnBpJ,MAAO,kBAAMsG,EAAS,KACtBrG,OAAQ,SAACuJ,GAAD,OAhHzB,SAACA,GACRA,GAAS1C,GAAW0C,EAAQ/I,WA+GiBR,CAAOuJ,IAC5BtJ,aA5QX,kBAAMgH,IAAgBD,UA+QnB,mBACA,SAAC3C,EAAA,GAAD,CAAMmF,GAAI,GAAI5I,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,MAAI,EAA1C,UACI,SAACoD,EAAA,EAAD,WACI,SAACE,EAAA,GAAD,CAAMmF,GAAI,GAAI5I,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,MAAI,EAA1C,UACI,SAAC0I,EAAA,EAAD,CACIpL,MAAM,sEACND,OAAQA,EAAOkI,kBAMnC,SAACjC,EAAA,GAAD,CAAMmF,GAAI,GAAI5I,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,MAAI,EAA1C,UACI,SAACoD,EAAA,EAAD,WACI,UAACE,EAAA,GAAD,CACInC,QAASoC,EAAAA,GACT5D,UAAU,MACVC,WAAS,EAHb,WAKI,SAAC0D,EAAA,GAAD,CAAMmF,GAAI,EAAG5I,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,MAAI,EAAxC,UACI,SAAC0I,EAAA,EAAD,CACIpL,MAAM,uCACND,OAAQA,EAAOoI,eAGvB,SAACnC,EAAA,GAAD,CAAMmF,GAAI,EAAG5I,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,MAAI,EAAxC,UACI,SAAC0I,EAAA,EAAD,CACIpL,MAAM,qBACND,OACI4F,GACM5F,EAAOmI,MACPnI,EAAOqI,oC,qCCtV7D,IArBoB,SAAC,GAKd,IAJH3B,EAIE,EAJFA,GAIE,IAHFrF,MAAAA,OAGE,MAHM,QAGN,MAFFiK,WAAAA,OAEE,MAFW,aAEX,MADFC,aAAAA,OACE,MADa,OACb,EACF,OACI,gBACInL,MAAO,CACHF,MAAO,KACPG,UAAW,QACXiL,WAAAA,EACAjK,MAAAA,EACAkK,aAAAA,EACAC,QAAS,MAEb9E,GAAIA","sources":["math/GraphBox.jsx","math/GraphMenu.jsx","views/input-boxes/SimpleParametersList.jsx","views/topics/chapter06/frequency-response/parameters.jsx","views/topics/chapter06/frequency-response/index.jsx","views/ui-component/progressbar/ProgressBar.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst GraphBox = ({ traces, title, width, height = 500 }) => {\r\n    /*const temp_layout = {\r\n        xaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n        yaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n    };*/\r\n\r\n    return (\r\n        <Plot\r\n            style={{ textAlign: \"center\" }}\r\n            //id=\"graphBox\"\r\n            data={traces}\r\n            layout={{\r\n                // width: 1000,\r\n                // autosize: true,\r\n                margin: {\r\n                    t: 30, //top margin\r\n                    l: 30, //left margin\r\n                    r: 20, //right margin\r\n                    b: 30, //bottom margin\r\n                },\r\n                xaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true\r\n                },\r\n                yaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true\r\n\r\n                },\r\n                height,\r\n                title,\r\n                // hoverlabel: { bgcolor: \"#FFF\" },\r\n                hoverlabel: {align:'auto', boxmode: 'overlay', font:{color:'#000000FF'}},\r\n                legend: {orientation: 'h'}//, y: -0.3},\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GraphBox;\r\n","import SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { useState, useEffect } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    graphFileName,\r\n    formulaFileName,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    const save = () => {\r\n        const graphBoxElement = document.getElementById(\"graphBox\");\r\n        // normal .blob has dark bakground\r\n        // convert background to light\r\n        const canvasWithBackground = document.createElement(\"canvas\");\r\n        canvasWithBackground.width = graphBoxElement.width;\r\n        canvasWithBackground.height = graphBoxElement.height;\r\n\r\n        const ctx = canvasWithBackground.getContext(\"2d\");\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, graphBoxElement.width, graphBoxElement.height);\r\n\r\n        ctx.drawImage(graphBoxElement, 0, 0);\r\n        // save\r\n        canvasWithBackground.toBlob((blob) => {\r\n            saveAs(blob, graphFileName);\r\n        });\r\n\r\n        html2canvas(document.getElementById(\"formulaBox\")).then((canvas) => {\r\n            canvas.toBlob((blob) => {\r\n                saveAs(blob, formulaFileName);\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}{\" \"}\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"download graph\"\r\n                    component=\"span\"\r\n                    onClick={save}\r\n                >\r\n                    <SaveAltIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import { Grid, InputAdornment, TextField } from \"@mui/material\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { evaluate } from \"math/calculus\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst SimpleParametersList = ({ parameters, setters, labels, units }) => {\r\n    return (\r\n        <Fragment>\r\n            {parameters instanceof Array &&\r\n                parameters.map((param, i) => (\r\n                    <Grid md={12} sm={4} xs={6} item>\r\n                        <TextField\r\n                            onChange={(e) => setters[i](e.target.value)}\r\n                            value={param}\r\n                            sx={{ width: \"100%\" }}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"left\">\r\n                                        <MathJax>{labels[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: units[i] && (\r\n                                    <InputAdornment position=\"right\">\r\n                                        <MathJax>{units[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SimpleParametersList;\r\n","import { Grid, Button } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport ProgressBar from \"views/ui-component/progressbar/ProgressBar\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$Num = [$$\",\r\n    \"$$Den = [$$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n];\r\nconst parameterUnits = [\"$$]$$\", \"$$]$$\", \"$$Hz$$\", \"$$Hz$$\"];\r\n\r\nconst FrequencyResponseParameters = ({\r\n    rawNumerator,\r\n    rawDenominator,\r\n    $rawNumerator,\r\n    $rawDenominator,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    phaseInRadianScale,\r\n    setPhaseInRadianScale,\r\n    responseTime,\r\n}) => {\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[rawNumerator, rawDenominator, w_min, w_max]}\r\n                    setters={[$rawNumerator, $rawDenominator, $w_min, $w_max]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n                <Grid xs={12} style={{paddingLeft: '3%'}} container>\r\n                    <Grid xs={6} sx={{ p: 1 }}  item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(false)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                !phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            درجه\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(\"rad\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            رادیان\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid xs={12} sx={{ mt: 1 }} item>\r\n                    <ProgressBar id=\"fr_progressbar\" />\r\n                </Grid>\r\n                {responseTime && (\r\n                    <Grid xs={12} sx={{ mt: 1 }} item>\r\n                        <p style={{ textAlign: \"center\", color: \"coral\" }}>\r\n                            مدت زمان عملیات: {responseTime} ثانیه\r\n                        </p>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default FrequencyResponseParameters;\r\n","// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport FrequencyResponseParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { makeProgress } from \"toolshed\";\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\nconst radianToDegreeScaleConstant = 180 / Math.PI;\r\n\r\nconst makeTrace = (x, y, thickness, legend, _3d, mode = \"lines\") => {\r\n    return {\r\n        x,\r\n        y,\r\n        z: _3d ? Array(x.length).fill(0) : null,\r\n        // color,\r\n        line: {\r\n            // color:'rgb(17, 157, 255)'\r\n            width: thickness,\r\n        },\r\n        type: \"scatter\" + (_3d ? \"3d\" : \"\"),\r\n        mode,\r\n        name: `$$${legend}$$`,\r\n    };\r\n};\r\nconst toTrace = (f, w_min, w_max, thickness, legend, _3d, N = 1000) => {\r\n    const [x, y] = calculus.pointify(f, w_min, w_max, N);\r\n    return makeTrace(x, y, thickness, legend, _3d);\r\n};\r\n\r\nconst FrequencyResponse = () => {\r\n    const [rawNumerator, $rawNumerator] = useState(\"1\");\r\n    const [rawDenominator, $rawDenominator] = useState(\"1 1\");\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(-10);\r\n    const [w_max, $w_max] = useState(10);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState({\r\n        whole: [],\r\n        phase: [],\r\n        amplitude: [],\r\n        degreePhase: [],\r\n    });\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n    const [responseTime, setResponseTime] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n\r\n        if (capturedSystems.findIndex((sys) => H_s.equals(sys.H)) === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                H_s,\r\n                thickness,\r\n                legend:\r\n                    symbols.out + \"_{\" + (systems.length + 1).toString() + \"}\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n            console.log(capturedSystems);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const num = calculus.stringToArray(rawNumerator),\r\n                    den = calculus.stringToArray(rawDenominator);\r\n                const progressBarElement =\r\n                    document.getElementById(\"fr_progressbar\");\r\n                const h_s = new TransferFunction(num, den);\r\n                $H_s(h_s);\r\n                $response(\"$$\" + h_s.label(\"H\") + \"$$\");\r\n                // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n                // so that the traces will be loaded with new conditions\r\n                let repeatedSystem = false;\r\n                const all = {\r\n                    amplitude: Array(systems.length),\r\n                    phase: Array(systems.length),\r\n                    degreePhase: Array(systems.length),\r\n                    whole: Array(systems.length),\r\n                };\r\n                const startTime = new Date();\r\n\r\n                for (let i = 0; i < systems.length; i++) {\r\n                    all.amplitude[i] = toTrace(\r\n                        systems[i].H_s.amplitude,\r\n                        +w_min,\r\n                        +w_max,\r\n                        systems[i].thickness,\r\n                        systems[i].legend,\r\n                        is3DPlotEnabled,\r\n                        N\r\n                    );\r\n                    all.phase[i] = toTrace(\r\n                        systems[i].H_s.phase,\r\n                        +w_min,\r\n                        +w_max,\r\n                        systems[i].thickness,\r\n                        systems[i].legend,\r\n                        is3DPlotEnabled,\r\n                        N\r\n                    );\r\n                    all.degreePhase[i] = { ...all.phase[i] };\r\n                    all.degreePhase[i].y = all.degreePhase[i].y.map(\r\n                        (yi) => yi * radianToDegreeScaleConstant\r\n                    );\r\n                    const [x, y] = await calculus.complexPointify(\r\n                        systems[i].H_s.frequencyResponse,\r\n                        +w_min,\r\n                        +w_max,\r\n                        N\r\n                    );\r\n                    all.whole[i] = makeTrace(\r\n                        x,\r\n                        y,\r\n                        systems[i].thickness,\r\n                        systems[i].legend,\r\n                        is3DPlotEnabled,\r\n                        \"lines\"\r\n                    );\r\n\r\n                    if (h_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n                    await makeProgress(\r\n                        progressBarElement,\r\n                        (100 * i) / (systems.length + 1)\r\n                    );\r\n                }\r\n\r\n                if (!repeatedSystem) {\r\n                    // if current system isnt in traces list => add it temperory to plot\r\n\r\n                    const [x, y] = await calculus.complexPointify(\r\n                        h_s.frequencyResponse,\r\n                        +w_min,\r\n                        +w_max,\r\n                        N\r\n                    );\r\n\r\n                    const whole = makeTrace(\r\n                            x,\r\n                            y,\r\n                            thickness,\r\n                            `${symbols.out}(${symbols.in})`,\r\n                            is3DPlotEnabled,\r\n                            \"lines\"\r\n                        ),\r\n                        amps = toTrace(\r\n                            h_s.amplitude,\r\n                            +w_min,\r\n                            +w_max,\r\n                            thickness,\r\n                            `${symbols.out}(${symbols.in})`,\r\n                            is3DPlotEnabled,\r\n                            N\r\n                        ),\r\n                        phase = toTrace(\r\n                            h_s.phase,\r\n                            +w_min,\r\n                            +w_max,\r\n                            thickness,\r\n                            `${symbols.out}(${symbols.in})`,\r\n                            is3DPlotEnabled,\r\n                            N\r\n                        );\r\n                    const degreePhase = { ...phase };\r\n                    degreePhase.y = degreePhase.y.map(\r\n                        (yi) => yi * radianToDegreeScaleConstant\r\n                    );\r\n\r\n                    all.whole.push(whole);\r\n                    all.phase.push(phase);\r\n                    all.degreePhase.push(degreePhase);\r\n                    all.amplitude.push(amps);\r\n                    const endTime = new Date();\r\n                    setResponseTime((+endTime - +startTime) / 1000);\r\n                }\r\n                await makeProgress(progressBarElement, 100);\r\n\r\n                $traces(all);\r\n            } catch (ex) {\r\n                console.log(ex);\r\n            }\r\n        })();\r\n    }, [\r\n        rawNumerator,\r\n        rawDenominator,\r\n        w_min,\r\n        w_max,\r\n        is3DPlotEnabled,\r\n        thickness,\r\n        systems,\r\n        N,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">\r\n                    {\" \"}\r\n                    پاسخ فرکانسی سیستم ها\r\n                </h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <FrequencyResponseParameters\r\n                                    rawNumerator={rawNumerator}\r\n                                    rawDenominator={rawDenominator}\r\n                                    $rawNumerator={$rawNumerator}\r\n                                    $rawDenominator={$rawDenominator}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                    responseTime={responseTime}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    formulaFileName={\r\n                                        \"Water Tank Level Equations _ \" +\r\n                                        [\r\n                                            ...systems.map((sys) => sys.legend),\r\n                                        ].join() +\r\n                                        \".png\"\r\n                                    }\r\n                                    graphFileName={\r\n                                        [\r\n                                            ...systems.map(\r\n                                                (sys) =>\r\n                                                    `${sys.legend}{alpha=${\r\n                                                        sys.a\r\n                                                    }_k=${sys.k}_in=${\r\n                                                        sys.inputSignal\r\n                                                            ? \"ramp\"\r\n                                                            : \"step\"\r\n                                                    }}`\r\n                                            ),\r\n                                        ].join(\", \") + \".png\"\r\n                                    }\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"پاسخ فرکانسی\"\r\n                                            traces={traces.whole}\r\n                                        />\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <Grid\r\n                                    spacing={gridSpacing}\r\n                                    direction=\"row\"\r\n                                    container\r\n                                >\r\n                                    <Grid lg={6} md={6} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"اندازه\"\r\n                                            traces={traces.amplitude}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid lg={6} md={6} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"فاز\"\r\n                                            traces={\r\n                                                phaseInRadianScale\r\n                                                    ? traces.phase\r\n                                                    : traces.degreePhase\r\n                                            }\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </SubCard>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default FrequencyResponse;\r\n","const ProgressBar = ({\r\n    id,\r\n    color = \"white\",\r\n    background = \"lightgreen\",\r\n    borderRadius = \"10px\",\r\n}) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"0%\",\r\n                textAlign: \"right\",\r\n                background,\r\n                color,\r\n                borderRadius,\r\n                padding: \"1%\",\r\n            }}\r\n            id={id}\r\n        ></div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;\r\n"],"names":["traces","title","width","height","style","textAlign","data","layout","margin","t","l","r","b","xaxis","rangemode","zeroline","yaxis","hoverlabel","align","boxmode","font","color","legend","orientation","capture","graphFileName","formulaFileName","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","sx","direction","container","md","sm","xs","item","component","onClick","graphBoxElement","document","getElementById","canvasWithBackground","createElement","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","blob","saveAs","html2canvas","then","canvas","spacing","mt","alignItems","value","onChange","e","parameters","setters","labels","units","Fragment","Array","map","param","i","target","InputProps","startAdornment","position","endAdornment","parameterFormulas","parameterUnits","rawNumerator","rawDenominator","$rawNumerator","$rawDenominator","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","responseTime","SubCard","darkBorder","Grid","gridSpacing","SimpleParametersList","paddingLeft","p","Button","textTransform","variant","ProgressBar","id","symbols","radianToDegreeScaleConstant","Math","PI","makeTrace","x","y","_3d","mode","z","length","fill","line","type","name","toTrace","f","N","calculus","H_s","$H_s","systems","$systems","whole","phase","amplitude","degreePhase","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","setResponseTime","num","den","progressBarElement","h_s","TransferFunction","label","repeatedSystem","all","startTime","Date","yi","frequencyResponse","equals","makeProgress","amps","push","endTime","console","log","MainCard","className","sys","index","formula","fontSize","MathJax","marginTop","GraphMenu","capturedSystems","findIndex","H","toString","join","a","k","inputSignal","changes","lg","GraphBox","background","borderRadius","padding"],"sourceRoot":""}