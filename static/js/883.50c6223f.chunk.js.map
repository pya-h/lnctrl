{"version":3,"file":"static/js/883.50c6223f.chunk.js","mappings":"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","sources":["math/GraphBox.jsx","math/GraphMenu.jsx","views/input-boxes/SimpleParametersList.jsx","views/topics/chapter06/bode-plot/parameters.jsx","views/topics/chapter06/bode-plot/index.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst GraphBox = ({ traces, title, width, height = 500, logX }) => {\r\n    /*const temp_layout = {\r\n        xaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n        yaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n    };*/\r\n\r\n    return (\r\n        <Plot\r\n            style={{ textAlign: \"center\" }}\r\n            //id=\"graphBox\"\r\n            data={traces}\r\n            layout={{\r\n                // width: 1000,\r\n                // autosize: true,\r\n                margin: {\r\n                    t: 30, //top margin\r\n                    l: 30, //left margin\r\n                    r: 20, //right margin\r\n                    b: 30, //bottom margin\r\n                },\r\n                xaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true,\r\n                    type: !logX ? \"dec\" : \"log\"\r\n                },\r\n                yaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true\r\n\r\n                },\r\n                height,\r\n                title,\r\n                // hoverlabel: { bgcolor: \"#FFF\" },\r\n                hoverlabel: {align:'auto', boxmode: 'overlay', font:{color:'#000000FF'}},\r\n                legend: {orientation: 'h'}//, y: -0.3},\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GraphBox;\r\n","import SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { useState, useEffect } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    graphFileName,\r\n    formulaFileName,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    const save = () => {\r\n        const graphBoxElement = document.getElementById(\"graphBox\");\r\n        // normal .blob has dark bakground\r\n        // convert background to light\r\n        const canvasWithBackground = document.createElement(\"canvas\");\r\n        canvasWithBackground.width = graphBoxElement.width;\r\n        canvasWithBackground.height = graphBoxElement.height;\r\n\r\n        const ctx = canvasWithBackground.getContext(\"2d\");\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, graphBoxElement.width, graphBoxElement.height);\r\n\r\n        ctx.drawImage(graphBoxElement, 0, 0);\r\n        // save\r\n        canvasWithBackground.toBlob((blob) => {\r\n            saveAs(blob, graphFileName);\r\n        });\r\n\r\n        html2canvas(document.getElementById(\"formulaBox\")).then((canvas) => {\r\n            canvas.toBlob((blob) => {\r\n                saveAs(blob, formulaFileName);\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}{\" \"}\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"download graph\"\r\n                    component=\"span\"\r\n                    onClick={save}\r\n                >\r\n                    <SaveAltIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import { Grid, InputAdornment, TextField } from \"@mui/material\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { evaluate } from \"math/calculus\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst SimpleParametersList = ({ parameters, setters, labels, units }) => {\r\n    return (\r\n        <Fragment>\r\n            {parameters instanceof Array &&\r\n                parameters.map((param, i) => (\r\n                    <Grid md={12} sm={4} xs={6} item>\r\n                        <TextField\r\n                            onChange={(e) => setters[i](e.target.value)}\r\n                            value={param}\r\n                            sx={{ width: \"100%\" }}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"left\">\r\n                                        <MathJax>{labels[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: units[i] && (\r\n                                    <InputAdornment position=\"right\">\r\n                                        <MathJax>{units[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SimpleParametersList;\r\n","import { Grid, Button } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from \"store/constant\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$Num = [$$\",\r\n    \"$$Den = [$$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n];\r\nconst parameterUnits = [\"$$]$$\", \"$$]$$\", \"$$Hz$$\", \"$$Hz$$\"];\r\n\r\nconst BodePlotParameters = ({\r\n    rawNumerator,\r\n    rawDenominator,\r\n    $rawNumerator,\r\n    $rawDenominator,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    phaseInRadianScale,\r\n    setPhaseInRadianScale,\r\n}) => {\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[rawNumerator, rawDenominator, w_min, w_max]}\r\n                    setters={[$rawNumerator, $rawDenominator, $w_min, $w_max]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n                <Grid xs={12} style={{paddingLeft: '3%'}} container>\r\n                    <Grid xs={6} sx={{ p: 1 }}  item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(false)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                !phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            درجه\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(\"rad\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            رادیان\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default BodePlotParameters;\r\n","// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport BodePlotParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\nconst radianToDegreeScaleConstant = 180 / Math.PI;\r\n\r\nconst makeTrace = (x, y, thickness, legend, _3d, mode = \"lines\") => {\r\n    return {\r\n        x,\r\n        y,\r\n        z: _3d ? Array(x.length).fill(0) : null,\r\n        // color,\r\n        line: {\r\n            // color:'rgb(17, 157, 255)'\r\n            width: thickness,\r\n        },\r\n        type: \"scatter\" + (_3d ? \"3d\" : \"\"),\r\n        mode,\r\n        name: `$$${legend}$$`,\r\n    };\r\n};\r\nconst toTrace = (f, w_min, w_max, thickness, legend, _3d, N = 1000) => {\r\n    let [x, y] = calculus.pointify(f, w_min, w_max, N);\r\n    return makeTrace(x, y, thickness, legend, _3d);\r\n};\r\n\r\nconst BodePlot = () => {\r\n    const [rawNumerator, $rawNumerator] = useState(\"1\");\r\n    const [rawDenominator, $rawDenominator] = useState(\"1 1\");\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(0);\r\n    const [w_max, $w_max] = useState(10);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState({\r\n        phase: [],\r\n        amplitude: [],\r\n        degreePhase: [],\r\n    });\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n\r\n        if (capturedSystems.findIndex((sys) => H_s.equals(sys.H)) === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                H_s,\r\n                thickness,\r\n                legend:\r\n                    symbols.out + \"_{\" + (systems.length + 1).toString() + \"}\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n            console.log(capturedSystems);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const num = calculus.stringToArray(rawNumerator),\r\n                den = calculus.stringToArray(rawDenominator);\r\n            const h_s = new TransferFunction(num, den);\r\n            $H_s(h_s);\r\n            $response(\"$$\" + h_s.label(\"H\") + \"$$\");\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            let repeatedSystem = false;\r\n            const all = {\r\n                amplitude: Array(systems.length),\r\n                phase: Array(systems.length),\r\n                degreePhase: Array(systems.length),\r\n            };\r\n\r\n            for (let i = 0; i < systems.length; i++) {\r\n                all.amplitude[i] = toTrace(\r\n                    systems[i].H_s.bode,\r\n                    +w_min,\r\n                    +w_max,\r\n                    systems[i].thickness,\r\n                    systems[i].legend,\r\n                    is3DPlotEnabled,\r\n                    N\r\n                );\r\n                all.phase[i] = toTrace(\r\n                    systems[i].H_s.phase,\r\n                    +w_min,\r\n                    +w_max,\r\n                    systems[i].thickness,\r\n                    systems[i].legend,\r\n                    is3DPlotEnabled,\r\n                    N\r\n                );\r\n                all.degreePhase[i] = { ...all.phase[i] };\r\n                all.degreePhase[i].y = all.degreePhase[i].y.map(\r\n                    (yi) => yi * radianToDegreeScaleConstant\r\n                );\r\n                if (h_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n            }\r\n\r\n            if (!repeatedSystem) {\r\n                const amps = toTrace(\r\n                        h_s.bode,\r\n                        +w_min,\r\n                        +w_max,\r\n                        thickness,\r\n                        `${symbols.out}(${symbols.in})`,\r\n                        is3DPlotEnabled,\r\n                        N\r\n                    ),\r\n                    phase = toTrace(\r\n                        h_s.phase,\r\n                        +w_min,\r\n                        +w_max,\r\n                        thickness,\r\n                        `${symbols.out}(${symbols.in})`,\r\n                        is3DPlotEnabled,\r\n                        N\r\n                    );\r\n                const degreePhase = { ...phase };\r\n                degreePhase.y = degreePhase.y.map(\r\n                    (yi) => yi * radianToDegreeScaleConstant\r\n                );\r\n                all.phase.push(phase);\r\n                all.degreePhase.push(degreePhase);\r\n                all.amplitude.push(amps);\r\n            }\r\n\r\n            $traces(all);\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }, [\r\n        rawNumerator,\r\n        rawDenominator,\r\n        w_min,\r\n        w_max,\r\n        is3DPlotEnabled,\r\n        thickness,\r\n        systems,\r\n        N,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">\r\n                    نمودار بود\r\n                </h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <BodePlotParameters\r\n                                    rawNumerator={rawNumerator}\r\n                                    rawDenominator={rawDenominator}\r\n                                    $rawNumerator={$rawNumerator}\r\n                                    $rawDenominator={$rawDenominator}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    formulaFileName={\r\n                                        \"Water Tank Level Equations _ \" +\r\n                                        [\r\n                                            ...systems.map((sys) => sys.legend),\r\n                                        ].join() +\r\n                                        \".png\"\r\n                                    }\r\n                                    graphFileName={\r\n                                        [\r\n                                            ...systems.map(\r\n                                                (sys) =>\r\n                                                    `${sys.legend}{alpha=${\r\n                                                        sys.a\r\n                                                    }_k=${sys.k}_in=${\r\n                                                        sys.inputSignal\r\n                                                            ? \"ramp\"\r\n                                                            : \"step\"\r\n                                                    }}`\r\n                                            ),\r\n                                        ].join(\", \") + \".png\"\r\n                                    }\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid lg={9} md={9} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            logX={true}\r\n\r\n                                            title=\"نمودار بود\"\r\n                                            traces={traces.amplitude}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid lg={9} md={9} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"فاز\"\r\n                                            logX={true}\r\n                                            traces={\r\n                                                phaseInRadianScale\r\n                                                    ? traces.phase\r\n                                                    : traces.degreePhase\r\n                                            }\r\n                                        />\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default BodePlot;\r\n"],"names":["traces","title","width","height","logX","style","textAlign","data","layout","margin","t","l","r","b","xaxis","rangemode","zeroline","type","yaxis","hoverlabel","align","boxmode","font","color","legend","orientation","capture","graphFileName","formulaFileName","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","sx","direction","container","md","sm","xs","item","component","onClick","graphBoxElement","document","getElementById","canvasWithBackground","createElement","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","blob","saveAs","html2canvas","then","canvas","spacing","mt","alignItems","value","onChange","e","parameters","setters","labels","units","Fragment","Array","map","param","i","target","InputProps","startAdornment","position","endAdornment","parameterFormulas","parameterUnits","rawNumerator","rawDenominator","$rawNumerator","$rawDenominator","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","SubCard","darkBorder","Grid","gridSpacing","SimpleParametersList","paddingLeft","p","Button","textTransform","variant","symbols","radianToDegreeScaleConstant","Math","PI","makeTrace","x","y","_3d","mode","z","length","fill","line","name","toTrace","f","N","calculus","H_s","$H_s","systems","$systems","phase","amplitude","degreePhase","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","num","den","h_s","TransferFunction","label","repeatedSystem","all","bode","yi","equals","amps","push","ex","console","log","MainCard","className","id","sys","index","formula","fontSize","MathJax","marginTop","GraphMenu","capturedSystems","findIndex","H","toString","join","a","k","inputSignal","changes","lg","GraphBox"],"sourceRoot":""}