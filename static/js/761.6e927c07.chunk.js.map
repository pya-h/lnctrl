{"version":3,"file":"static/js/761.6e927c07.chunk.js","mappings":"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","sources":["math/algebra/functions/exp.js","math/input-signals/signals.js","math/equation/index.js","math/algebra/functions/transfer.js","math/algebra/functions/trigonometric.js","views/ui-component/cards/MainCard.js"],"sourcesContent":["import Algebra from \"math/algebra\";\r\nimport Complex from \"math/algebra//complex\";\r\nimport { Cos, Sin } from \"./trigonometric\";\r\n\r\nexport default class Exp extends Algebra {\r\n    constructor(a, b, symbol = \"t\", params = {}) {\r\n        // ae^bt\r\n        super(a, { symbol, type: \"exp\", b, ...params });\r\n    }\r\n\r\n    copy = (linkPrevious = false) =>\r\n        new Exp(this.a, this.b, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    toSin = () => {\r\n        const exp = this.copy();\r\n        if (exp.type === \"exp\" && exp.b instanceof Complex) {\r\n            if (exp.b instanceof Complex && exp.b.real() === 0) {\r\n                const cos = new Cos(exp.a, exp.b.imaginary());\r\n                const sin = new Sin(exp.a, exp.b.imaginary());\r\n                return new Complex(cos, sin);\r\n            }\r\n        }\r\n        return exp; // if doesnt math the condition then just return exponential function itself\r\n    };\r\n\r\n    amplitude = (t) => {\r\n        // NOT SURE\r\n        // if (this.b instanceof Complex || t instanceof Complex) {\r\n        //     if (this.a === +this.a) return this.a;\r\n        //     else if (this.a instanceof Algebra && this.symbol === this.a.symbol)\r\n        //         return this.a.$(t);\r\n        // } else return this.valueAt(t);\r\n    };\r\n    phase = (w) => {\r\n        const jw = new Complex(0, w);\r\n        let pb = +this.b;\r\n        if(this.b === pb)\r\n            return pb * w;\r\n        if(this.b instanceof Algebra){\r\n            pb = this.b.$(jw);\r\n            return jw.multiply(pb).imaginary();\r\n        }\r\n        \r\n    };\r\n    valueAt = (t) => {\r\n        const numericT = +t;\r\n        if (numericT === t) {\r\n            const a = Algebra.valueOf(this.a, numericT),\r\n                b = Algebra.valueOf(this.b, numericT);\r\n            return a * Math.exp(b * numericT);\r\n        } else if (t instanceof Complex) {\r\n            if (!t.real()) {\r\n                return new Exp(\r\n                    this.a,\r\n                    new Complex(0, this.b * t.imaginary()),\r\n                    this.symbol\r\n                ).toSin();\r\n            } else if (t.imaginary()) {\r\n                // edit this\r\n                return (\r\n                    new Exp(this.a, this.b, this.symbol).valueAt(t.real()) *\r\n                    new Exp(\r\n                        1,\r\n                        new Complex(0, this.b * t.imaginary()),\r\n                        this.symbol\r\n                    ).toSin()\r\n                );\r\n            }\r\n            // t is real\r\n            else return this.valueAt(t.real());\r\n        }\r\n    };\r\n}\r\n","import StandardInputSignal from \"math/input-signals\";\r\nimport Poly from \"math/algebra/functions/poly\";\r\n\r\nexport class Step extends StandardInputSignal {\r\n    constructor(amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"u\", symbol); // \\\\delta is the equivalent of small delta in mathjax\r\n    }\r\n    copy = () => new Step(this.amp, this.symbol);\r\n\r\n    $ = (t) => (t >= 0) * this.amp;\r\n}\r\n\r\nexport class Puls extends StandardInputSignal {\r\n    constructor(Delta = 1, amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"\\\\sqcap\", symbol);\r\n        this.Delta = Delta;\r\n    }\r\n    copy = () => new Puls(this.Delta, this.amp, this.symbol);\r\n    $ = (t) => (t >= 0 && t <= this.Delta) * this.amp / this.Delta;\r\n}\r\n\r\nexport class Impact extends StandardInputSignal {\r\n    constructor(amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"\\\\delta\", symbol); // \\\\delta is the equivalent of small delta in mathjax\r\n    }\r\n    copy = () => new Impact(this.amp, this.symbol);\r\n\r\n    $ = (t) => this.amp * (t === 0);\r\n}\r\n\r\nexport class Ramp extends Poly {\r\n    constructor(amplitude, symbol = \"t\") {\r\n        super([amplitude, 0], symbol);\r\n        this.amplitude = amplitude; // just for calculating the value of this\r\n        this.selfmultiply(Step());\r\n    }\r\n    copy = () => new Ramp(this.amplitude, this.symbol);\r\n\r\n    $ = (t) => (t >= 0) * t * this.amplitude;\r\n}\r\n\r\n\r\nexport class Parabolic extends Poly { //EDIT\r\n    constructor(amplitude, symbol = \"t\") {\r\n        super([amplitude, 0, 0], symbol);\r\n        this.amplitude = amplitude; // just for calculating the value of this\r\n        this.selfmultiply(Step());\r\n    }\r\n    copy = () => new Parabolic(this.amplitude, this.symbol);\r\n    $ = (t) => (t >= 0 ? t * this.amplitude : 0);\r\n}\r\n","import Algebra from \"../algebra/index\";\r\nimport { isDigit, precision, round } from \"math/calculus\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Poly from \"../algebra/functions/poly\";\r\nconst Algebrite = require(\"algebrite\");\r\n\r\nexport default class Equation {\r\n    static zeroPrecision = round(10 ** -precision.get());\r\n    constructor(exp, symbol = \"x\") {\r\n        if (exp instanceof Array) {\r\n            this.algebra = new Poly(exp);\r\n            this.symbol = symbol;\r\n            this.expression = \"\";\r\n            const n = exp.length - 1;\r\n            this.degree = n;\r\n            for (\r\n                let i = 0;\r\n                i < exp.length;\r\n                this.expression += Equation.GetAlgebriteTerm(\r\n                    n - i,\r\n                    exp[i],\r\n                    i,\r\n                    symbol\r\n                ),\r\n                    i++\r\n            );\r\n        } else if (typeof exp === \"string\") {\r\n            this.expression = exp;\r\n            this.algebra = null;\r\n            this.symbol = symbol;\r\n        } else if (exp instanceof Poly) {\r\n            this.expression = \"\";\r\n            this.algebra = exp.copy();\r\n            this.symbol = this.exp.symbol;\r\n            const expression = this.getA();\r\n            const n = expression.length - 1;\r\n            this.degree = n; // unknown\r\n            for (\r\n                let i = 0;\r\n                i < expression.length;\r\n                this.expression += Equation.GetAlgebriteTerm(\r\n                    n - i,\r\n                    expression[i],\r\n                    i,\r\n                    symbol\r\n                ),\r\n                    i++\r\n            );\r\n        } else if (exp instanceof Algebra) {\r\n            // THIS IS TEMPORARY\r\n            this.expression = exp.toString(); // wrong EDIT THIS LATER\r\n            this.algebra = exp.copy();\r\n            this.symbol = this.exp.symbol;\r\n            this.degree = undefined; // unknown\r\n        }\r\n        this.symbol = symbol;\r\n    }\r\n\r\n    static GetAlgebriteTerm = (termDegree, coef, index, symbol) => {\r\n        if (coef === +coef) {\r\n            // means that coef is not a string\r\n            const intExpI = coef | 0;\r\n            const symbolicPart =\r\n                termDegree > 0 ? `*${symbol}^${termDegree}` : \"\";\r\n            if (intExpI !== coef) {\r\n                // means that coef is a float number\r\n                Algebrite.run(`a${index} = ${coef}`);\r\n                return (coef >= 0 ? \"+\" : \"\") + `a${index}${symbolicPart}`;\r\n            } else\r\n                return (intExpI >= 0 ? \"+\" : \"\") + `${intExpI}${symbolicPart}`;\r\n        }\r\n        // here it means coef is a string like '11/2' or '1/4', ...\r\n        return `${coef}${symbol}^${termDegree}`;\r\n    };\r\n    solve = () => {\r\n        console.log(this.expression);\r\n        // for factorable equations use: algebrite.roots\r\n        let x = Algebrite.nroots(this.expression)\r\n            .toString()\r\n            .replaceAll(\"...\", \"\");\r\n        x = x.slice(1, x.length - 1);\r\n        x = x.split(\",\").filter((xi) => xi && xi !== \"\"); // now x is converted from a string to the array of x answers (as Numbers);\r\n        // edit string to array\r\n        return x.map((xi, i) => {\r\n            // let [real, image] = xi.split(/\\+|-/).filter((xi) => xi && xi !== \"\");\r\n            let separatorIndex = 1;\r\n            for (; separatorIndex < xi.length; separatorIndex++)\r\n                if (\r\n                    (xi[separatorIndex] === \"+\" ||\r\n                        xi[separatorIndex] === \"-\") &&\r\n                    isDigit(xi[separatorIndex - 1]) &&\r\n                    isDigit(xi[separatorIndex + 1])\r\n                )\r\n                    break;\r\n\r\n            let terms = [];\r\n            terms.push(xi.slice(0, separatorIndex));\r\n            if (separatorIndex < xi.length)\r\n                terms.push(xi.slice(separatorIndex, xi.length - 2));\r\n\r\n            if (terms.length === 1) {\r\n                const magnitude = terms[0].replace(\"*i\");\r\n                return magnitude === terms[0]\r\n                    ? new Complex(Number(magnitude))\r\n                    : new Complex(0, Number(magnitude));\r\n            } else return new Complex(Number(terms[0]), Number(terms[1]));\r\n        });\r\n    };\r\n\r\n    // AlgebraRoots = () => {\r\n    //     // convert roots returning string to\r\n    //     if (!this.roots || this.roots.length === 0) this.solve();\r\n    // };\r\n\r\n    approximate = (\r\n        method = Equation.Methods.newton,\r\n        N = 10,\r\n        boundary = 1000\r\n    ) => {\r\n        const allRoots = [];\r\n        // newton reaches to approx fast\r\n        // so N = 10 is enough (?????)\r\n        const isUnique = (newRoot) =>\r\n            !isNaN(newRoot) &&\r\n            allRoots.findIndex((rt) =>\r\n                !(rt instanceof Complex) ? rt === newRoot : rt.equals(newRoot)\r\n            ) === -1;\r\n        const isUniqueComplex = (newRoot) =>\r\n            newRoot instanceof Complex &&\r\n            allRoots.findIndex((rt) => newRoot.equals(rt)) === -1;\r\n\r\n        if (this.expression instanceof Algebra) {\r\n            let a0 = 0;\r\n            for (let i = this.expression.a.length - 1; i >= 0; i--)\r\n                if (this.expression.a[i]) {\r\n                    a0 = this.expression.a[i];\r\n                    break;\r\n                }\r\n            const an = this.expression.a[0];\r\n\r\n            if (a0 && an !== 0) boundary = Math.abs(a0 / an);\r\n\r\n            for (let x0 = -boundary; x0 <= boundary; x0++) {\r\n                let x = method(this.algebra, x0, N);\r\n                if (!isNaN(x)) {\r\n                    const rx = round(x);\r\n                    if (isUnique(rx)) allRoots.push(rx);\r\n                }\r\n                x = method(this.algebra, new Complex(0, x0), N);\r\n                if (isUniqueComplex(x)) allRoots.push(x);\r\n            }\r\n        }\r\n        return allRoots;\r\n    };\r\n    // approximation methods\r\n    durandKerner = (N = 20) => {\r\n        if (this.algebra instanceof Algebra) {\r\n            const f = this.algebra.$;\r\n            const n = this.algebra.degree();\r\n            let guess;\r\n            do {\r\n                guess = new Complex(Math.random(), Math.random());\r\n            } while (guess.isReal());\r\n            const roots = Array(n)\r\n                .fill(0)\r\n                .map((_) => []);\r\n\r\n            roots[0].push(new Complex(1, 0));\r\n            for (let i = 1; i < n; i++)\r\n                roots[i][0] = guess.multiply(roots[i - 1][0]);\r\n            for (let iter = 0; iter < N; iter++) {\r\n                for (let i = 0; i < n; i++) {\r\n                    const xiN = roots[i][iter].copy();\r\n                    let sndTermDen = new Complex(1, 0);\r\n                    for (let j = 0; j < n; j++) {\r\n                        if (i !== j) {\r\n                            const xjN = roots[j][roots[j].length - 1];\r\n                            sndTermDen = sndTermDen.multiply(\r\n                                xiN.substract(xjN)\r\n                            );\r\n                        }\r\n                    }\r\n                    let sndTerm = f(xiN).devide(sndTermDen);\r\n                    // USING PUSH MAY SLOW DOWN THE ALGORITHM\r\n                    roots[i].push(xiN.substract(sndTerm));\r\n                }\r\n            }\r\n            return roots.map((r) => r[r.length - 1]);\r\n        }\r\n    };\r\n\r\n    static Methods = {\r\n        // needs work!\r\n        newton: (algebraf, x0 = 0, N = 20) => {\r\n            const f = algebraf.$;\r\n            const df = algebraf.derivative().$;\r\n            const xs = Array(N + 1).fill(0);\r\n            const dfx0 = df(x0);\r\n            if (dfx0 && (!(dfx0 instanceof Complex) || !dfx0.isZero())) {\r\n                if (x0 instanceof Complex) {\r\n                    xs[0] = x0;\r\n                    for (let i = 0; i < N; i++) {\r\n                        // const dfxsi = df(xs[i]);\r\n                        // console.log(\"xs[i] = \", xs[i].toString(), \"=> f(x) = \", f(xs[i]).toString(), \"=> df =\", dfxsi.toString(), \"res = \", f(xs[i]).devide(df(xs[i])))\r\n                        xs[i + 1] = xs[i].substract(f(xs[i]).devide(df(xs[i])));\r\n                    }\r\n\r\n                    const fx = f(xs[N]);\r\n                    if (\r\n                        Math.abs(fx.real()) > Equation.zeroPrecision ||\r\n                        Math.abs(fx.imaginary()) > Equation.zeroPrecision\r\n                    )\r\n                        return NaN;\r\n                } else {\r\n                    xs[0] = x0;\r\n\r\n                    for (let i = 0; i < N; i++) {\r\n                        xs[i + 1] = xs[i] - f(xs[i]) / df(xs[i]);\r\n                    }\r\n\r\n                    if (f(xs[N]) > Equation.zeroPrecision) return NaN;\r\n                }\r\n                //integrity check!\r\n                return xs[xs.length - 1];\r\n            }\r\n            return NaN;\r\n        },\r\n        // needs work!\r\n        middlePoint: (\r\n            f,\r\n            boundary = 1000\r\n            // decimalPrecision = precision.get()\r\n        ) => {\r\n            // NOTE: works fine for some equations\r\n            // and wronge for some others like:  x ** 2 - 4*x  - 5\r\n            boundary = Math.abs(boundary);\r\n            const expectedRate = Equation.zeroPrecision;\r\n            const poles = [];\r\n            let xa = 0,\r\n                xb = 1;\r\n            for (let i = 0; i < boundary; i++) {\r\n                xa = -boundary + i;\r\n                xb = boundary - i;\r\n\r\n                let rate =\r\n                    (xb - xa) / (2 * Math.max(Math.abs(xa), Math.abs(xb)));\r\n                let p = null;\r\n                while (rate >= expectedRate) {\r\n                    p = (xa + xb) / 2;\r\n                    if (!f(p)) break;\r\n                    else if (f(p) * f(xa) < 0) xb = p;\r\n                    else {\r\n                        xa = p;\r\n                        rate =\r\n                            (xb - xa) /\r\n                            (2 * Math.max(Math.abs(xa), Math.abs(xb)));\r\n                    }\r\n                }\r\n                if (!f(p)) poles.push(round(p));\r\n            }\r\n            return new Set(poles);\r\n        },\r\n    };\r\n}\r\n","import Algebra from \"../index\";\r\nimport Complex from \"../complex\";\r\nimport Exp from \"./exp\";\r\nimport Fraction from \"./fraction\";\r\nimport { Step } from \"math/input-signals/signals\";\r\nimport Poly from \"./poly\";\r\nimport { Cos, Sin } from \"./trigonometric\";\r\nimport { round } from \"math/calculus/index\";\r\nimport Equation from \"math/equation\";\r\nimport { makeProgress } from \"toolshed\";\r\n\r\nexport default class TransferFunction extends Fraction {\r\n    static Specials = {\r\n        $1: (k, a) =>\r\n            new TransferFunction([k], [1, a]).setRoots([], [-a]).setOrder(1),\r\n        $2: (k, a, b = a instanceof Complex ? a.conjugate : a) => {\r\n            // k / (s + a)(s + b) => must be converted to => k / (s2 + 2(a+b)s + ab)\r\n            let aplusb =\r\n                a instanceof Algebra\r\n                    ? a.add(b)\r\n                    : b instanceof Algebra\r\n                    ? b.add(a)\r\n                    : b + a;\r\n            let ab =\r\n                a instanceof Algebra\r\n                    ? a.multiply(b)\r\n                    : b instanceof Algebra\r\n                    ? b.multiply(a)\r\n                    : b * a;\r\n            if (aplusb instanceof Complex && aplusb.isReal())\r\n                aplusb = aplusb.real();\r\n            if (ab instanceof Complex && ab.isReal()) ab = ab.real();\r\n\r\n            return new TransferFunction(\r\n                [k],\r\n                [1, aplusb instanceof Algebra ? aplusb.negation() : -aplusb, ab]\r\n            )\r\n                .setRoots([], [a, b])\r\n                .setOrder(2);\r\n        },\r\n        $WnZ: (w_n, zeta) => new TransferFunction(null, null, { w_n, zeta }),\r\n        $design: (t_rise, overshoot) =>\r\n            new TransferFunction(null, null, { overshoot, t_rise }),\r\n    };\r\n\r\n    static omegaZetaPoles = (w_n, zeta) => {\r\n        if (Math.abs(zeta) >= 1) {\r\n            const alpha = -zeta * w_n;\r\n            const beta = w_n * (zeta * zeta - 1) ** 0.5;\r\n            return [alpha + beta, alpha - beta];\r\n        }\r\n        const alpha = -zeta * w_n;\r\n        const beta = w_n * (1 - zeta * zeta) ** 0.5;\r\n        return [new Complex(alpha, beta), new Complex(alpha, -beta)];\r\n    };\r\n    constructor(numerator, denominator, params = {}) {\r\n        let zeros = [],\r\n            poles = [];\r\n        if (params) {\r\n            if (params.overshoot && params.t_rise) {\r\n                params.overshoot = Number(params.overshoot);\r\n                params.t_rise = Number(params.t_rise);\r\n                const logMp = Math.log10(params.overshoot);\r\n                params.zeta =\r\n                    -logMp / (Math.PI * Math.PI + logMp * logMp) ** 0.5;\r\n                params.w_d = Math.PI / params.t_rise;\r\n                params.w_n =\r\n                    params.w_d / (1 - params.zeta * params.zeta) ** 0.5;\r\n            }\r\n\r\n            if (params.w_n) {\r\n                params.w_n = Number(params.w_n);\r\n                params.zeta = Number(params.zeta);\r\n                // if the user sends w_n params it will override the given zero/pole list\r\n                const { w_n, zeta } = params;\r\n                const wn2 = w_n * w_n;\r\n                numerator = wn2;\r\n                denominator = [1, 2 * zeta * w_n, wn2];\r\n                poles = TransferFunction.omegaZetaPoles(w_n, zeta);\r\n                zeros = [];\r\n            }\r\n        }\r\n        super(numerator, denominator, \"s\", params);\r\n        // SIMPL;IFY\r\n        this.poles = [...poles]; //edit solve equations\r\n        this.zeros = [...zeros];\r\n        if (!this.a instanceof Array) this.a = [this.a];\r\n        if (this.a.length === 1 && !this.w_n) {\r\n            if (\r\n                this.b.length === 3 &&\r\n                this.b[this.b.length - 1] === this.a[0]\r\n            ) {\r\n                this.w_n = this.a[0];\r\n                this.zeta = this.b[1] / (2 * this.w_n);\r\n                this.timeConstant = round(1 / (this.zeta * this.w_n));\r\n                this.t_settle = 4 * this.timeConstant;\r\n                if (params && params.w_d) this.w_d = params.w_d;\r\n                else if (this.zeta >= -1 && this.zeta <= 1)\r\n                    this.w_d = this.w_n * (1 - this.zeta ** 2) ** 0.5;\r\n                this.order = 2;\r\n                this.setRoots(\r\n                    [],\r\n                    TransferFunction.omegaZetaPoles(this.w_n, this.zeta)\r\n                );\r\n            }\r\n        }\r\n        if (!this.order)\r\n            this.order =\r\n                denominator instanceof Array ? denominator.length - 1 : 1;\r\n        if (params.overshoot && params.t_rise) {\r\n            [this.overshoot, this.t_rise] = [params.overshoot, params.t_rise];\r\n        } else {\r\n            const dampingCharasteristics =\r\n                this.getDampingSystemCharasteristics();\r\n            if (dampingCharasteristics) {\r\n                this.overshoot = dampingCharasteristics.overshoot;\r\n                this.t_rise = dampingCharasteristics.t_rise;\r\n            }\r\n        }\r\n    }\r\n    static sortRoots = (rt) =>\r\n        rt.sort((ri, rj) =>\r\n            ri instanceof Algebra\r\n                ? ri.substract(rj)\r\n                : rj instanceof Algebra\r\n                ? rj.substract(ri)\r\n                : Math.abs(ri) - Math.abs(rj)\r\n        );\r\n\r\n    roots = () => {\r\n        if (\r\n            (!this.zeros || !this.zeros.length) &&\r\n            (!this.poles || !this.poles.length)\r\n        ) {\r\n            // roots hasnt been decided by user\r\n            if (\r\n                this.a instanceof Array &&\r\n                this.b instanceof Array && // if all elements of numerator and denominator are actual numbers\r\n                !this.a.find((ai) => ai !== +ai) &&\r\n                !this.b.find((bi) => bi !== +bi)\r\n            ) {\r\n                // CONSTANT COEFFICIENT POLYNOMIAL EQUATIONS\r\n                this.zeros =\r\n                    this.a.length > 1\r\n                        ? new Equation(this.a, this.symbol).solve()\r\n                        : [];\r\n                this.poles =\r\n                    this.b.length > 1\r\n                        ? new Equation(this.b, this.symbol).solve()\r\n                        : [];\r\n            } else {\r\n                // if the equation isnt a simple constant coefficient polynomial\r\n            }\r\n        }\r\n        return [this.zeros, this.poles];\r\n    };\r\n\r\n    setRoots = (zeros, poles) => {\r\n        this.poles = poles.map((pi) =>\r\n            pi instanceof Complex && pi.isReal() ? pi.real() : pi\r\n        );\r\n        this.zeros = zeros.map((zi) =>\r\n            zi instanceof Complex && zi.isReal() ? zi.real() : zi\r\n        );\r\n        return this;\r\n    };\r\n\r\n    getDampingSystemCharasteristics = () =>\r\n        this.w_d\r\n            ? {\r\n                  t_rise: round(Math.PI / this.w_d),\r\n                  // WHAT IF W_D === 0?\r\n                  overshoot:\r\n                      this.zeta >= -1 && this.zeta <= 1\r\n                          ? round(\r\n                                100 *\r\n                                    Math.exp(\r\n                                        -(this.zeta * Math.PI) /\r\n                                            (1 - this.zeta ** 2) ** 0.5\r\n                                    )\r\n                            )\r\n                          : null,\r\n              }\r\n            : null;\r\n\r\n    getOrder = () => this.order;\r\n    setOrder = (order) => {\r\n        this.order = order;\r\n        return this;\r\n    };\r\n    getPoles = () => this.poles;\r\n    setPoles = (poles) => {\r\n        this.poles = TransferFunction.sortRoots(poles).map((pi) =>\r\n            pi instanceof Complex && pi.isReal() ? pi.real() : pi\r\n        );\r\n        return this;\r\n    };\r\n    getZeros = () => this.zeros;\r\n    setZeros = (zeros) => {\r\n        this.zeros = zeros.map((pi) =>\r\n            pi instanceof Complex && pi.isReal() ? pi.real() : pi\r\n        );\r\n        return this;\r\n    };\r\n\r\n    poleOrder = (pole) =>\r\n        this.poles.filter((pi) => Algebra.areTheseTwoEqual(pole, pi)).length;\r\n\r\n    laplace = () => this.copy(); // actually it has no laplace, this is for disfunctioning the laplace method in the parent class Algebra\r\n    laplaceInverse = () => {\r\n        const m = this.zeros.length - 1; // number of zeros\r\n        const n = this.poles.length - 1; // number of poles\r\n\r\n        if (m === 0) {\r\n            switch (n) {\r\n                case 2:\r\n                    return null;\r\n                case 1:\r\n                    return new Algebra(1, { type: \"exp\" }); //EDITTTTTTTTTTTTTTTT\r\n                case 0:\r\n                    return null; //u(t)\r\n                default:\r\n                    return null; //DEFINE AN UNKNOWN FUNCTION FOR CASE LIKE THIS\r\n            }\r\n        }\r\n    };\r\n    step = (inTimeDomain = true) => {\r\n        // normally will automatically return the time domain answer\r\n        // unless inLaplaceDomain is true\r\n        if (inTimeDomain) {\r\n            const m = this.zeros.length; // number of zeros\r\n            const n = this.poles.length; // number of poles\r\n            const nreal = this.poles.filter(\r\n                (pi) => !(pi instanceof Complex)\r\n            ).length; // number of real poles; can be eigher 2 or 0\r\n            if (m === 0) {\r\n                const k = this.numerator();\r\n                if (n === 0) {\r\n                    // return u(t)\r\n                    // DEFINE U(T) IN ALGEBRA\r\n                }\r\n                if (n === 1) {\r\n                } else if (n === 2) {\r\n                    const a = -this.poles[0],\r\n                        b = -this.poles[1];\r\n                    if (nreal === 2) {\r\n                        // if (a > 0 && b > 0) {\r\n                        if (a !== b)\r\n                            // two independent polesdddd\r\n                            // two negative independent poles\r\n                            return new Exp(1 / a, -a)\r\n                                .add(new Exp(-1 / b, -b))\r\n                                .multiply(k / (a - b))\r\n                                .multiply(new Step())\r\n                                .add(new Step(k / (a * b)));\r\n                        else {\r\n                            const a2 = a * a;\r\n                            return new Exp(-k / a2, -a)\r\n                                .multiply(new Poly([a, 1]))\r\n                                .multiply(new Step())\r\n                                .add(new Step(k / a2));\r\n                        }\r\n                        // } else {\r\n                        //     // repetetive poles\r\n                        // }\r\n                    } else if (nreal === 0) {\r\n                        // two conjugated complex poles\r\n                        //UNDERSHOOT BUG FIXLAYS HERE\r\n                        const a = -this.poles[0].real(),\r\n                            b = this.poles[0].imaginary();\r\n                        const ka2b2 = k / (a ** 2 + b ** 2);\r\n                        // FIND BUUUUUUG\r\n                        // return new Exp(-ka2b2, -a)\r\n                        //     .multiply(new Cos(1, b).add(new Sin(a / b, b)))\r\n                        //     .multiply(new Step())\r\n                        //     .add(new Step(ka2b2));\r\n                        return new Exp(-ka2b2, -a)\r\n                            .multiply(new Cos(1, b))\r\n                            .add(\r\n                                new Exp(-ka2b2, -a).multiply(new Sin(a / b, b))\r\n                            )\r\n                            .multiply(new Step())\r\n                            .add(new Step(ka2b2));\r\n                    }\r\n                    // else if( nreal == 1) // this cant happen, but what if sth went wrong?\r\n                }\r\n            }\r\n        } else {\r\n            const lstep = this.copy();\r\n            const poles = lstep.getPoles();\r\n            poles.push(0);\r\n            lstep.getB().push(0); //update denominator\r\n            lstep.setPoles(poles).setDenominator(lstep.getB());\r\n            return lstep;\r\n        }\r\n    };\r\n    copy = (linkPrevious = false) =>\r\n        new TransferFunction(this.a, this.b, {\r\n            overshoot: this.overshoot,\r\n            t_rise: this.t_rise,\r\n            t_settle: this.t_settle,\r\n            w_d: this.w_d,\r\n            timeConstant: this.timeConstant,\r\n            w_n: this.w_n,\r\n            zeta: this.zeta,\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        }).setRoots(this.zeros, this.poles);\r\n\r\n    lim = (s0) => {\r\n        let num, den;\r\n        // for simple polynomial numerator and denominator fractions\r\n        // IMPLEMENT HOPITAL AS WELL?\r\n        if (!s0) {\r\n            // s -> 0)\r\n\r\n            num = { a: 0, sp: this.a.length - 1 };\r\n            den = { b: 1, sp: this.b.length - 1 };\r\n            for (; num.sp > 0 && this.a[num.sp] === 0; num.sp--);\r\n            num.a = this.a[num.sp];\r\n            for (; den.sp > 0 && this.b[den.sp] === 0; den.sp--);\r\n            den.b = this.b[den.sp];\r\n            num.sp = this.a.length - num.sp - 1;\r\n            den.sp = this.b.length - den.sp - 1;\r\n            if (num.sp === den.sp) return num.a / den.b;\r\n            else {\r\n                const sMinPower = Math.min(den.sp, num.sp);\r\n                if (sMinPower) {\r\n                    num.sp -= sMinPower;\r\n                    den.sp -= sMinPower;\r\n                }\r\n                // now one of num.sp or den.sp is zero\r\n                if (den.sp)\r\n                    // zero on denominator\r\n                    return Infinity;\r\n                // if den.sp == 0 and num.sp != 0\r\n                return 0;\r\n            }\r\n        } else if (s0 === Infinity) {\r\n            // s -> infinity\r\n            num = { a: 0, sp: 0 };\r\n            den = { b: 1, sp: 0 };\r\n            for (; num.sp < this.a.length && this.a[num.sp] === 0; num.sp++);\r\n            num.a = this.a[num.sp];\r\n            for (; den.sp < this.b.length && this.b[den.sp] === 0; den.sp++);\r\n            den.b = this.b[den.sp];\r\n            num.sp = this.a.length - num.sp - 1;\r\n            den.sp = this.b.length - den.sp - 1;\r\n            if (num.sp === den.sp) return num.a / den.b;\r\n            // else\r\n            const sMinPower = Math.min(den.sp, num.sp);\r\n            if (sMinPower) {\r\n                num.sp -= sMinPower;\r\n                den.sp -= sMinPower;\r\n            }\r\n            // now one of num.sp or den.sp is zero\r\n            if (den.sp)\r\n                // zero on denominator\r\n                return 0;\r\n            // if den.sp == 0 and num.sp != 0\r\n            return Infinity;\r\n        } else {\r\n            // if s0 is just a no-zero limited number\r\n            num = this.numerator().$(s0);\r\n            den = this.denominator().$(s0);\r\n            if (den)\r\n                // simple non zero denominator limit\r\n                return num / den;\r\n            // if den == 0\r\n            // use Hopital or other limit methods\r\n            //return (num.a * (s0 ** num.sp)) / (den.b * (s0 ** den.sp));\r\n        }\r\n    };\r\n    errors = () => {\r\n        const sGs = this.multiply(new Poly([1, 0], \"s\"));\r\n        const s2Gs = sGs.multiply(new Poly([1, 0], \"s\"));\r\n        return {\r\n            Ks: round(this.lim(0)),\r\n            Kr: round(sGs.lim(0)),\r\n            Ka: round(s2Gs.lim(0)),\r\n        };\r\n    };\r\n    // $ = (t) => this.laplaceInverse().$(t); // valueOf function in certain point; I used character $ in many places as,\r\n    // acronym for \"set\" in setters, so $ here means that set the t ( or x or whatever) with a certain point\r\n\r\n    amplitude = (w) => {\r\n        // w === omega\r\n        const jw = new Complex(0, w);\r\n        const num = this.numerator(),\r\n            den = this.denominator();\r\n        const numAmp = !(num instanceof Exp) ? num.$(jw).magnitude() : Math.abs(num.getA()),\r\n            denAmp = !(den instanceof Exp) ? den.$(jw).magnitude() : Math.abs(den.getB());\r\n        return numAmp / denAmp;\r\n        // this is for find exact match of the devide function\r\n        // but im sure num and den are Complex so i directly stated the result\r\n\r\n        // if(num instanceof Complex)\r\n        //     return num.magnitude() / (den instanceof Complex ? den.magnitude : den).magnitude();\r\n        // if(den instanceof Complex)\r\n        //     return num instanceof Algebra ? num.devide(den.magnitude()) : num / den.magnitude();\r\n        // if(num instanceof Algebra)\r\n        //     return num.devide(den);\r\n        // if(den instanceof Algebra)\r\n        //     return den.devideInverse(num);\r\n        // // signal input?\r\n        // if(den)\r\n        //     return num / den;\r\n        // return NaN;\r\n    };\r\n\r\n    phase = (w) => {\r\n        const jw = new Complex(0, w);\r\n        let num = this.numerator(),\r\n            den = this.denominator();\r\n        const numPhase = !(num instanceof Exp)\r\n                ? num.$(jw).phase()\r\n                : num.phase(w), //exponentials have their own shortcut for phase()\r\n            denPhase = !(den instanceof Exp) ? den.$(jw).phase() : den.phase(w);\r\n        if (+denPhase === denPhase && +numPhase === numPhase)\r\n            return numPhase - denPhase;\r\n        // for now Complex.phase() returns numbers or functions:\r\n        // numPhase or denPhase instanceof Function then:\r\n        return (\r\n            (numPhase instanceof Function ? numPhase(w) : numPhase) -\r\n            (denPhase instanceof Function ? denPhase(w) : denPhase)\r\n        );\r\n        // else if(numPhase instanceof Algebra)\r\n        //     return numPhase.$(w) - den.phase();\r\n        // return NaN;\r\n    };\r\n\r\n    nyquist = (w) => this.$(new Complex(0, w)); // G(jw)\r\n\r\n    bode = (w) => 20 * Math.log10(this.amplitude(w));\r\n\r\n    rootLocus = async (k_min, k_max, progressBarObject, N = 1000) => {\r\n        // return root locus values for plotting\r\n\r\n        // TEMPORARY:\r\n        let dk = (k_max - k_min) / N;\r\n        const a = this.getA(), // numerator\r\n            b = this.getB(); // denominator => a / b\r\n        const na = a.length - 1,\r\n            nb = b.length - 1;\r\n        const reals = [],\r\n            imaginaries = [];\r\n        const percentageScale = 100 / (k_max - k_min);\r\n        // channel.bind(\"pusher:subscription_succeeded\", function(data) {\r\n        const newTerm = Equation.GetAlgebriteTerm;\r\n        for (let k = k_min; k <= k_max; k += dk) {\r\n            // in this piece: using short form codes and using objects is set to minimum\r\n            // because root locus is time consuming and putting all the codes in one main loop is better\r\n            // const delta = b.add(a.multiply(k));\r\n            let delta = null,\r\n                expression = \"\";\r\n            // USE ARRAY DIRECT PROCESS FOR FASTER RESPONSE\r\n            // NUM + K * DEN\r\n            if (na <= nb) {\r\n                delta = Array(nb);\r\n                const offsetB = nb - na;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetB;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(nb - i, delta[i], i, this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetB;\r\n                    i <= na;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(\r\n                            na - i,\r\n                            delta[ib],\r\n                            ib,\r\n                            this.symbol\r\n                        ),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            } else {\r\n                delta = Array(na);\r\n                const offsetA = na - nb;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetA;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(na - i, delta[i], i, this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetA;\r\n                    i <= nb;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(\r\n                            nb - i,\r\n                            delta[ib],\r\n                            ib,\r\n                            this.symbol\r\n                        ),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            }\r\n            // const roots = new Equation(new Poly(delta)).roots();\r\n            const poles = new Equation(expression).solve();\r\n\r\n            await makeProgress(progressBarObject, k * percentageScale);\r\n\r\n            for (let i = 0; i < poles.length; i++) {\r\n                if (poles[i] instanceof Complex) {\r\n                    reals.push(poles[i].real());\r\n                    imaginaries.push(poles[i].imaginary());\r\n                } else {\r\n                    reals.push(poles[i]);\r\n                    imaginaries.push(0);\r\n                }\r\n            }\r\n        }\r\n        await makeProgress(progressBarObject, 100);\r\n        return [reals, imaginaries];\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Exp from \"./exp\";\r\nimport Fraction from \"./fraction\";\r\n\r\nexport class Sin extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        if(w === +w && w < 0){\r\n            w *= -1;\r\n            A *= -1;\r\n        }\r\n        super(A, { symbol, type: \"sin\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Sin(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    toExp = () => {\r\n        const sin = this.copy();\r\n        const exp1 = new Exp(sin.a / 2, new Complex(0, -sin.b));\r\n        const exp2 = new Exp(-sin.a / 2, new Complex(0, sin.b));\r\n        return new Complex(0, exp1.add(exp2));\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.sin(w * t + teta)\r\n    }\r\n}\r\n\r\nexport class Cos extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        if(+w === w && w < 0) w *= -1; // cos(-w) = cos(w);\r\n        super(A, { symbol, type: \"cos\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Cos(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    toExp = () => {\r\n        const cos = this.copy();\r\n        const exp1 = new Exp(cos.a / 2, new Complex(0, cos.b));\r\n        const exp2 = new Exp(cos.a / 2, new Complex(0, -cos.b));\r\n        return exp1.add(exp2);\r\n    };\r\n\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.cos(w * t + teta)\r\n    }\r\n}\r\n\r\nexport class Tan extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        super(A, { symbol, type: \"tan\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Tan(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    toExp = () => {\r\n        const tan = this.copy();\r\n        const exp1 = new Exp(1, new Complex(0, -tan.b));\r\n        const numeratorExp2 = new Exp(-1, new Complex(0, tan.b));\r\n        const denominatorExp2 = new Exp(1, new Complex(0, tan.b));\r\n        return new Fraction(exp1.add(numeratorExp2), exp1.add(denominatorExp2));\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.tan(w * t + teta)\r\n    }\r\n}\r\n\r\nexport class Cot extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        super(A, { symbol, type: \"cot\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Cot(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    toExp = () => {\r\n        const cot = this.copy();\r\n        const exp1 = new Exp(1, new Complex(0, -cot.b));\r\n        const numeratorExp2 = new Exp(-1, new Complex(0, cot.b));\r\n        const denominatorExp2 = new Exp(1, new Complex(0, cot.b));\r\n        return new Fraction(exp1.add(denominatorExp2), exp1.add(numeratorExp2));\r\n    };\r\n\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.cot(w * t + teta)\r\n    }\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    overflowY: 'auto',\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n"],"names":["Exp","a","b","symbol","params","type","copy","linkPrevious","dot","plus","previous","input","toSin","exp","Complex","real","cos","Cos","imaginary","sin","Sin","amplitude","t","phase","w","jw","pb","Algebra","$","multiply","valueAt","numericT","Math","Step","amp","StandardInputSignal","Algebrite","require","Equation","solve","console","log","expression","x","nroots","toString","replaceAll","slice","length","split","filter","xi","map","i","separatorIndex","isDigit","terms","push","magnitude","replace","Number","approximate","method","Methods","newton","N","boundary","allRoots","isUnique","newRoot","isNaN","findIndex","rt","equals","isUniqueComplex","a0","an","abs","x0","algebra","rx","round","durandKerner","guess","f","n","degree","random","isReal","roots","Array","fill","_","iter","xiN","sndTermDen","j","xjN","substract","sndTerm","devide","r","this","Poly","GetAlgebriteTerm","getA","undefined","zeroPrecision","precision","termDegree","coef","index","intExpI","symbolicPart","run","algebraf","df","derivative","xs","dfx0","isZero","fx","NaN","middlePoint","expectedRate","poles","xa","xb","rate","max","p","Set","TransferFunction","numerator","denominator","zeros","overshoot","t_rise","logMp","log10","zeta","PI","w_d","w_n","wn2","omegaZetaPoles","find","ai","bi","setRoots","pi","zi","getDampingSystemCharasteristics","getOrder","order","setOrder","getPoles","setPoles","sortRoots","getZeros","setZeros","poleOrder","pole","laplace","laplaceInverse","m","step","inTimeDomain","lstep","getB","setDenominator","nreal","k","add","a2","ka2b2","t_settle","timeConstant","lim","s0","num","den","sp","sMinPower","min","Infinity","errors","sGs","s2Gs","Ks","Kr","Ka","numPhase","denPhase","Function","nyquist","bode","rootLocus","k_min","k_max","progressBarObject","dk","na","nb","reals","imaginaries","percentageScale","newTerm","delta","offsetB","ib","offsetA","makeProgress","dampingCharasteristics","Fraction","Specials","$1","$2","conjugate","aplusb","ab","negation","$WnZ","$design","alpha","beta","sort","ri","rj","A","teta","toExp","exp1","exp2","headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","overflowY","borderColor","palette","primary","action","variant","className"],"sourceRoot":""}