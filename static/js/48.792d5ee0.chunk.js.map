{"version":3,"file":"static/js/48.792d5ee0.chunk.js","mappings":"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","sources":["../node_modules/nerdamer/Algebra.js","../node_modules/nerdamer/Calculus.js","../node_modules/nerdamer/Extra.js","../node_modules/nerdamer/Solve.js","../node_modules/nerdamer/nerdamer.core.js","../javascript/esm|/home/py/projects/react/lnctrl/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../javascript/esm|/home/py/projects/react/lnctrl/node_modules/@babel/runtime/helpers/esm/typeof.js","../javascript/esm|/home/py/projects/react/lnctrl/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../javascript/esm|/home/py/projects/react/lnctrl/node_modules/@babel/runtime/helpers/esm/createSuper.js","../javascript/esm|/home/py/projects/react/lnctrl/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../javascript/esm|/home/py/projects/react/lnctrl/node_modules/@babel/runtime/helpers/esm/inherits.js","../javascript/esm|/home/py/projects/react/lnctrl/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../javascript/esm|/home/py/projects/react/lnctrl/node_modules/@babel/runtime/helpers/esm/construct.js","../javascript/esm|/home/py/projects/react/lnctrl/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../javascript/esm|/home/py/projects/react/lnctrl/node_modules/@babel/runtime/helpers/esm/isNativeFunction.js"],"sourcesContent":["/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * License : MIT\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global module, Function */\r\n\r\nif((typeof module) !== 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Calculus.js');\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    /*shortcuts*/\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            N = core.groups.N,\r\n            P = core.groups.P,\r\n            S = core.groups.S,\r\n            EX = core.groups.EX,\r\n            FN = core.groups.FN,\r\n            PL = core.groups.PL,\r\n            CP = core.groups.CP,\r\n            CB = core.groups.CB,\r\n            keys = core.Utils.keys,\r\n            even = core.Utils.even,\r\n            variables = core.Utils.variables,\r\n            format = core.Utils.format,\r\n            round = core.Utils.round,\r\n            Frac = core.Frac,\r\n            isInt = core.Utils.isInt,\r\n            Symbol = core.Symbol,\r\n            CONST_HASH = core.Settings.CONST_HASH,\r\n            math = core.Utils.importFunctions(),\r\n            evaluate = core.Utils.evaluate;\r\n    //*************** CLASSES ***************//\r\n    /**\r\n     * Converts a symbol into an equivalent polynomial arrays of \r\n     * the form [[coefficient_1, power_1],[coefficient_2, power_2], ... ]\r\n     * Univariate polymials only. \r\n     * @param {Symbol|Number} symbol\r\n     * @param {String} variable The variable name of the polynomial\r\n     * @param {int} order\r\n     */\r\n    function Polynomial(symbol, variable, order) {\r\n        if(core.Utils.isSymbol(symbol)) {\r\n            this.parse(symbol);\r\n            this.variable = this.variable || variable;\r\n        }\r\n        else if(!isNaN(symbol)) {\r\n            order = order || 0;\r\n            if(variable === undefined)\r\n                throw new core.exceptions.InvalidVariableNameError('Polynomial expects a variable name when creating using order');\r\n            this.coeffs = [];\r\n            this.coeffs[order] = symbol;\r\n            this.fill(symbol);\r\n        }\r\n        else if(typeof symbol === 'string') {\r\n            this.parse(_.parse(symbol));\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Polynomial given an array of coefficients\r\n     * @param {int[]} arr\r\n     * @param {String} variable\r\n     * @returns {Polynomial}\r\n     */\r\n    Polynomial.fromArray = function (arr, variable) {\r\n        if(typeof variable === 'undefined')\r\n            throw new core.exceptions.InvalidVariableNameError('A variable name must be specified when creating polynomial from array');\r\n        var p = new Polynomial();\r\n        p.coeffs = arr;\r\n        p.variable = variable;\r\n        return p;\r\n    };\r\n\r\n    Polynomial.fit = function (c1, c2, n, base, p, variable) {\r\n        //after having looped through and mod 10 the number to get the matching factor\r\n        var terms = new Array(p + 1),\r\n                t = n - c2;\r\n        terms[0] = c2; //the constants is assumed to be correct\r\n        //constant for x^p is also assumed know so add\r\n        terms[p] = c1;\r\n        t -= c1 * Math.pow(base, p);\r\n        //start fitting\r\n        for(var i = p - 1; i > 0; i--) {\r\n            var b = Math.pow(base, i), //we want as many wholes as possible\r\n                    q = t / b,\r\n                    sign = Math.sign(q);\r\n            var c = sign * Math.floor(Math.abs(q));\r\n            t -= c * b;\r\n            terms[i] = c;\r\n        }\r\n        if(t !== 0)\r\n            return null;\r\n        for(var i = 0; i < terms.length; i++)\r\n            terms[i] = new Frac(terms[i]);\r\n\r\n        return Polynomial.fromArray(terms, variable);\r\n    };\r\n\r\n    Polynomial.prototype = {\r\n        /**\r\n         * Converts Symbol to Polynomial\r\n         * @param {Symbol} symbol\r\n         * @param {Array} c - a collector array\r\n         * @returns {Polynomial}\r\n         */\r\n        parse: function (symbol, c) {\r\n            this.variable = variables(symbol)[0];\r\n            if(!symbol.isPoly())\r\n                throw core.exceptions.NerdamerTypeError('Polynomial Expected! Received ' + core.Utils.text(symbol));\r\n            c = c || [];\r\n            if(!symbol.power.absEquals(1))\r\n                symbol = _.expand(symbol);\r\n\r\n            if(symbol.group === core.groups.N) {\r\n                c[0] = symbol.multiplier;\r\n            }\r\n            else if(symbol.group === core.groups.S) {\r\n                c[symbol.power.toDecimal()] = symbol.multiplier;\r\n            }\r\n            else {\r\n                for(var x in symbol.symbols) {\r\n                    var sub = symbol.symbols[x],\r\n                            p = sub.power;\r\n                    if(core.Utils.isSymbol(p))\r\n                        throw new core.exceptions.NerdamerTypeError('power cannot be a Symbol');\r\n\r\n                    p = sub.group === N ? 0 : p.toDecimal();\r\n                    if(sub.symbols) {\r\n                        this.parse(sub, c);\r\n                    }\r\n                    else {\r\n                        c[p] = sub.multiplier;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.coeffs = c;\r\n\r\n            this.fill();\r\n        },\r\n        /**\r\n         * Fills in the holes in a polynomial with zeroes\r\n         * @param {Number} x - The number to fill the holes with\r\n         */\r\n        fill: function (x) {\r\n            x = Number(x) || 0;\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                if(this.coeffs[i] === undefined) {\r\n                    this.coeffs[i] = new Frac(x);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Removes higher order zeros or a specific coefficient\r\n         * @returns {Array}\r\n         */\r\n        trim: function () {\r\n            var l = this.coeffs.length;\r\n            while(l--) {\r\n                var c = this.coeffs[l];\r\n                var equalsZero = c.equals(0);\r\n                if(c && equalsZero) {\r\n                    if(l === 0)\r\n                        break;\r\n                    this.coeffs.pop();\r\n                }\r\n                else\r\n                    break;\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /*\r\n         * Returns polynomial mod p **currently fails**\r\n         * @param {Number} p\r\n         * @returns {Polynomial}\r\n         */\r\n        modP: function (p) {\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var c = this.coeffs[i];\r\n                if(c < 0) { //go borrow\r\n                    var b; //a coefficient > 0\r\n                    for(var j = i; j < l; j++) {//starting from where we left off\r\n                        if(this.coeffs[j] > 0) {\r\n                            b = this.coeffs[j];\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(b) { //if such a coefficient exists\r\n                        for(j; j > i; j--) { //go down the line and adjust using p\r\n                            this.coeffs[j] = this.coeffs[j].subtract(new Frac(1));\r\n                            this.coeffs[j - 1] = this.coeffs[j - 1].add(new Frac(p));\r\n                        }\r\n                        c = this.coeffs[i]; //reset c\r\n                    }\r\n                }\r\n\r\n                var d = c.mod(p);\r\n                var w = c.subtract(d).divide(p);\r\n                if(!w.equals(0)) {\r\n                    var up_one = i + 1;\r\n                    var next = this.coeffs[up_one] || new Frac(0);\r\n                    next = next.add(w);\r\n                    this.coeffs[up_one] = new Frac(next);\r\n                    this.coeffs[i] = new Frac(d);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * Adds together 2 polynomials\r\n         * @param {Polynomial} poly\r\n         */\r\n        add: function (poly) {\r\n            var l = Math.max(this.coeffs.length, poly.coeffs.length);\r\n            for(var i = 0; i < l; i++) {\r\n                var a = (this.coeffs[i] || new Frac(0)),\r\n                        b = (poly.coeffs[i] || new Frac(0));\r\n                this.coeffs[i] = a.add(b);\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Adds together 2 polynomials\r\n         * @param {Polynomial} poly\r\n         */\r\n        subtract: function (poly) {\r\n            var l = Math.max(this.coeffs.length, poly.coeffs.length);\r\n            for(var i = 0; i < l; i++) {\r\n                var a = (this.coeffs[i] || new Frac(0)),\r\n                        b = (poly.coeffs[i] || new Frac(0));\r\n                this.coeffs[i] = a.subtract(b);\r\n            }\r\n            return this;\r\n        },\r\n        divide: function (poly) {\r\n            var variable = this.variable,\r\n                    dividend = core.Utils.arrayClone(this.coeffs),\r\n                    divisor = core.Utils.arrayClone(poly.coeffs),\r\n                    n = dividend.length,\r\n                    mp = divisor.length - 1,\r\n                    quotient = [];\r\n\r\n            //loop through the dividend\r\n            for(var i = 0; i < n; i++) {\r\n                var p = n - (i + 1);\r\n                //get the difference of the powers\r\n                var d = p - mp;\r\n                //get the quotient of the coefficients\r\n                var q = dividend[p].divide(divisor[mp]);\r\n\r\n                if(d < 0)\r\n                    break;//the divisor is not greater than the dividend\r\n                //place it in the quotient\r\n                quotient[d] = q;\r\n\r\n                for(var j = 0; j <= mp; j++) {\r\n                    //reduce the dividend\r\n                    dividend[j + d] = dividend[j + d].subtract((divisor[j].multiply(q)));\r\n                }\r\n            }\r\n\r\n            //clean up\r\n            var p1 = Polynomial.fromArray(dividend, variable || 'x').trim(), //pass in x for safety\r\n                    p2 = Polynomial.fromArray(quotient, variable || 'x');\r\n            return [p2, p1];\r\n        },\r\n        multiply: function (poly) {\r\n            var l1 = this.coeffs.length, l2 = poly.coeffs.length,\r\n                    c = []; //array to be returned\r\n            for(var i = 0; i < l1; i++) {\r\n                var x1 = this.coeffs[i];\r\n                for(var j = 0; j < l2; j++) {\r\n                    var k = i + j, //add the powers together\r\n                            x2 = poly.coeffs[j],\r\n                            e = c[k] || new Frac(0); //get the existing term from the new array\r\n                    c[k] = e.add(x1.multiply(x2)); //multiply the coefficients and add to new polynomial array\r\n                }\r\n            }\r\n            this.coeffs = c;\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks if a polynomial is zero\r\n         * @returns {Boolean}\r\n         */\r\n        isZero: function () {\r\n            var l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var e = this.coeffs[i];\r\n                if(!e.equals(0))\r\n                    return false;\r\n            }\r\n            return true;\r\n        },\r\n        /** \r\n         * Substitutes in a number n into the polynomial p(n)\r\n         * @param {Number} n\r\n         * @returns {Frac}\r\n         */\r\n        sub: function (n) {\r\n            var sum = new Frac(0), l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var t = this.coeffs[i];\r\n                if(!t.equals(0))\r\n                    sum = sum.add(t.multiply(new Frac(Math.pow(n, i))));\r\n            }\r\n            return sum;\r\n        },\r\n        /**\r\n         * Returns a clone of the polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        clone: function () {\r\n            var p = new Polynomial();\r\n            p.coeffs = this.coeffs;\r\n            p.variable = this.variable;\r\n            return p;\r\n        },\r\n        /**\r\n         * Gets the degree of the polynomial\r\n         * @returns {Number}\r\n         */\r\n        deg: function () {\r\n            this.trim();\r\n            return this.coeffs.length - 1;\r\n        },\r\n        /**\r\n         * Returns a lead coefficient\r\n         * @returns {Frac}\r\n         */\r\n        lc: function () {\r\n            return this.coeffs[this.deg()].clone();\r\n        },\r\n        /**\r\n         * Converts polynomial into a monic polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        monic: function () {\r\n            var lc = this.lc(), l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++)\r\n                this.coeffs[i] = this.coeffs[i].divide(lc);\r\n            return this;\r\n        },\r\n        /**\r\n         * Returns the GCD of two polynomials\r\n         * @param {Polynomial} poly\r\n         * @returns {Polynomial}\r\n         */\r\n        gcd: function (poly) {\r\n            //get the maximum power of each\r\n            var mp1 = this.coeffs.length - 1,\r\n                    mp2 = poly.coeffs.length - 1,\r\n                    T;\r\n            //swap so we always have the greater power first\r\n            if(mp1 < mp2) {\r\n                return poly.gcd(this);\r\n            }\r\n            var a = this;\r\n\r\n            while(!poly.isZero()) {\r\n                var t = poly.clone();\r\n                a = a.clone();\r\n                T = a.divide(t);\r\n                poly = T[1];\r\n                a = t;\r\n            }\r\n\r\n            var gcd = core.Math2.QGCD.apply(null, a.coeffs);\r\n            if(!gcd.equals(1)) {\r\n                var l = a.coeffs.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    a.coeffs[i] = a.coeffs[i].divide(gcd);\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        /**\r\n         * Differentiates the polynomial\r\n         * @returns {Polynomial}\r\n         */\r\n        diff: function () {\r\n            var new_array = [], l = this.coeffs.length;\r\n            for(var i = 1; i < l; i++)\r\n                new_array.push(this.coeffs[i].multiply(new Frac(i)));\r\n            this.coeffs = new_array;\r\n            return this;\r\n        },\r\n        /**\r\n         * Integrates the polynomial\r\n         * @returns {Polynomial} \r\n         */\r\n        integrate: function () {\r\n            var new_array = [0], l = this.coeffs.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var c = new Frac(i + 1);\r\n                new_array[c] = this.coeffs[i].divide(c);\r\n            }\r\n            this.coeffs = new_array;\r\n            return this;\r\n        },\r\n        /**\r\n         * Returns the Greatest common factor of the polynomial\r\n         * @param {bool} toPolynomial - true if a polynomial is wanted\r\n         * @returns {Frac|Polynomial}\r\n         */\r\n        gcf: function (toPolynomial) {\r\n            //get the first nozero coefficient and returns its power\r\n            var fnz = function (a) {\r\n                for(var i = 0; i < a.length; i++)\r\n                    if(!a[i].equals(0))\r\n                        return i;\r\n            },\r\n                    ca = [];\r\n            for(var i = 0; i < this.coeffs.length; i++) {\r\n                var c = this.coeffs[i];\r\n                if(!c.equals(0) && ca.indexOf(c) === -1)\r\n                    ca.push(c);\r\n            }\r\n            var p = [core.Math2.QGCD.apply(undefined, ca), fnz(this.coeffs)].toDecimal();\r\n\r\n            if(toPolynomial) {\r\n                var parr = [];\r\n                parr[p[1] - 1] = p[0];\r\n                p = Polynomial.fromArray(parr, this.variable).fill();\r\n            }\r\n\r\n            return p;\r\n        },\r\n        /**\r\n         * Raises a polynomial P to a power p -> P^p. e.g. (x+1)^2\r\n         * @param {bool} incl_img - Include imaginary numbers \r\n         */\r\n        quad: function (incl_img) {\r\n            var roots = [];\r\n            if(this.coeffs.length > 3)\r\n                throw new Error('Cannot calculate quadratic order of ' + (this.coeffs.length - 1));\r\n            if(this.coeffs.length === 0)\r\n                throw new Error('Polynomial array has no terms');\r\n            var a = this.coeffs[2] || 0, b = this.coeffs[1] || 0, c = this.coeffs[0];\r\n            var dsc = b * b - 4 * a * c;\r\n            if(dsc < 0 && !incl_img)\r\n                return roots;\r\n            else {\r\n                roots[0] = (-b + Math.sqrt(dsc)) / (2 * a);\r\n                roots[1] = (-b - Math.sqrt(dsc)) / (2 * a);\r\n            }\r\n            return roots;\r\n        },\r\n        /**\r\n         * Makes polynomial square free\r\n         * @returns {Array}\r\n         */\r\n        squareFree: function () {\r\n\r\n            var a = this.clone(),\r\n                    i = 1,\r\n                    b = a.clone().diff(),\r\n                    c = a.clone().gcd(b),\r\n                    w = a.divide(c)[0];\r\n            var output = Polynomial.fromArray([new Frac(1)], a.variable);\r\n            while(!c.equalsNumber(1)) {\r\n                var y = w.gcd(c);\r\n                var z = w.divide(y)[0];\r\n                //one of the factors may have shown up since it's square but smaller than the \r\n                //one where finding\r\n                if(!z.equalsNumber(1) && i > 1) {\r\n                    var t = z.clone();\r\n                    for(var j = 1; j < i; j++)\r\n                        t.multiply(z.clone());\r\n                    z = t;\r\n                }\r\n                output = output.multiply(z);\r\n                i++;\r\n                w = y;\r\n                c = c.divide(y)[0];\r\n            }\r\n\r\n            return [output, w, i];\r\n        },\r\n        /**\r\n         * Converts polynomial to Symbol\r\n         * @returns {Symbol}\r\n         */\r\n        toSymbol: function () {\r\n            var l = this.coeffs.length,\r\n                    variable = this.variable;\r\n            if(l === 0)\r\n                return new core.Symbol(0);\r\n            var end = l - 1, str = '';\r\n\r\n            for(var i = 0; i < l; i++) {\r\n                //place the plus sign for all but the last one\r\n                var plus = i === end ? '' : '+',\r\n                        e = this.coeffs[i];\r\n                if(!e.equals(0))\r\n                    str += (e + '*' + variable + '^' + i + plus);\r\n            }\r\n            return _.parse(str);\r\n        },\r\n        /**\r\n         * Checks if polynomial is equal to a number\r\n         * @param {Number} x\r\n         * @returns {Boolean}\r\n         */\r\n        equalsNumber: function (x) {\r\n            this.trim();\r\n            return this.coeffs.length === 1 && this.coeffs[0].toDecimal() === String(x);\r\n        },\r\n        toString: function () {\r\n            return this.toSymbol().toString();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * TODO\r\n     * ===================================================================================\r\n     * THIS METHOD HAS A NASTY HIDDEN BUG. IT HAS INCONSISTENT RETURN TYPES PRIMARILY DUE TO \r\n     * WRONG ASSUMPTIONS AT THE BEGINNING. THE ASSUMPTION WAS THAT COEFFS WERE ALWAYS GOING BE NUMBERS\r\n     * NOT TAKING INTO ACCOUNT THAT IMAGINARY NUMBERS. FIXING THIS BREAKS WAY TOO MANY TESTS \r\n     * AT THEM MOMENT WHICH I DON'T HAVE TO FIX\r\n     * ===================================================================================\r\n     * If the symbols is of group PL or CP it will return the multipliers of each symbol\r\n     * as these are polynomial coefficients. CB symbols are glued together by multiplication\r\n     * so the symbol multiplier carries the coefficients for all contained symbols.\r\n     * For S it just returns it's own multiplier. This function doesn't care if it's a polynomial or not\r\n     * @param {Array} c The coefficient array\r\n     * @param {boolean} with_order \r\n     * @return {Array}\r\n     */\r\n    Symbol.prototype.coeffs = function (c, with_order) {\r\n        if(with_order && !this.isPoly(true))\r\n            _.error('Polynomial expected when requesting coefficients with order');\r\n        c = c || [];\r\n        var s = this.clone().distributeMultiplier();\r\n        if(s.isComposite()) {\r\n            for(var x in s.symbols) {\r\n                var sub = s.symbols[x];\r\n                if(sub.isComposite()) {\r\n                    sub.clone().distributeMultiplier().coeffs(c, with_order);\r\n                }\r\n                else {\r\n                    if(with_order)\r\n                        c[sub.isConstant() ? 0 : sub.power.toDecimal()] = sub.multiplier;\r\n                    else {\r\n                        c.push(sub.multiplier);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if(with_order)\r\n                c[s.isConstant(true) ? 0 : s.power.toDecimal()] = s.multiplier;\r\n            else {\r\n                if(s.group === CB && s.isImaginary()) {\r\n                    var m = new Symbol(s.multiplier);\r\n                    s.each(function (x) {\r\n                        //add the imaginary part\r\n                        if(x.isConstant(true) || x.imaginary)\r\n                            m = _.multiply(m, x);\r\n                    });\r\n                    c.push(m);\r\n                }\r\n                else\r\n                    c.push(s.multiplier);\r\n            }\r\n        }\r\n        //fill the holes\r\n        if(with_order) {\r\n            for(var i = 0; i < c.length; i++)\r\n                if(c[i] === undefined)\r\n                    c[i] = new Symbol(0);\r\n        }\r\n        return c;\r\n    };\r\n    Symbol.prototype.tBase = function (map) {\r\n        if(typeof map === 'undefined')\r\n            throw new Error('Symbol.tBase requires a map object!');\r\n        var terms = [];\r\n        var symbols = this.collectSymbols(null, null, null, true),\r\n                l = symbols.length;\r\n        for(var i = 0; i < l; i++) {\r\n            var symbol = symbols[i],\r\n                    g = symbol.group,\r\n                    nterm = new MVTerm(symbol.multiplier, [], map);\r\n            if(g === CB) {\r\n                for(var x in symbol.symbols) {\r\n                    var sym = symbol.symbols[x];\r\n                    nterm.terms[map[x]] = sym.power;\r\n                }\r\n            }\r\n            else {\r\n                nterm.terms[map[symbol.value]] = symbol.power;\r\n            }\r\n\r\n            terms.push(nterm.fill());\r\n            nterm.updateCount();\r\n        }\r\n        return terms;\r\n    };\r\n    Symbol.prototype.altVar = function (x) {\r\n        var m = this.multiplier.toString(), p = this.power.toString();\r\n        return (m === '1' ? '' : m + '*') + x + (p === '1' ? '' : '^' + p);\r\n    };\r\n    /**\r\n     * Checks to see if the symbols contain the same variables\r\n     * @param {Symbol} symbol\r\n     * @returns {Boolean}\r\n     */\r\n    Symbol.prototype.sameVars = function (symbol) {\r\n        if(!(this.symbols || this.group === symbol.group))\r\n            return false;\r\n        for(var x in this.symbols) {\r\n            var a = this.symbols[x], b = symbol.symbols[x];\r\n            if(!b)\r\n                return false;\r\n            if(a.value !== b.value)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Groups the terms in a symbol with respect to a variable\r\n     * For instance the symbol {a*b^2*x^2+a*b*x^2+x+6} returns [6,1,a*b+a*b^2]\r\n     * @returns {Factors}\r\n     */\r\n    Symbol.prototype.groupTerms = function (x) {\r\n        x = String(x);\r\n        var f, p, egrouped;\r\n        var grouped = [];\r\n        this.each(function (e) {\r\n            if(e.group === PL) {\r\n                egrouped = e.groupTerms(x);\r\n                for(var i = 0; i < egrouped.length; i++) {\r\n                    var el = egrouped[i];\r\n                    if(el)\r\n                        grouped[i] = el;\r\n                }\r\n            }\r\n            else {\r\n                f = core.Utils.decompose_fn(e, x, true);\r\n                p = f.x.value === x ? Number(f.x.power) : 0;\r\n                //check if there's an existing value\r\n                grouped[p] = _.add(grouped[p] || new Symbol(0), f.a);\r\n            }\r\n        });\r\n        return grouped;\r\n    };\r\n    /**\r\n     * Use this to collect Factors\r\n     * @returns {Symbol[]}\r\n     */\r\n    Symbol.prototype.collectFactors = function () {\r\n        var factors = [];\r\n        if(this.group === CB)\r\n            this.each(function (x) {\r\n                factors.push(x.clone());\r\n            });\r\n        else\r\n            factors.push(this.clone());\r\n        return factors;\r\n    };\r\n    /**\r\n     * A container class for factors\r\n     * @returns {Factors}\r\n     */\r\n    function Factors() {\r\n        this.factors = {};\r\n        this.length = 0;\r\n    }\r\n    ;\r\n    Factors.prototype.getNumberSymbolics = function () {\r\n        var n = 0;\r\n        this.each(function (x) {\r\n            if(!x.isConstant(true))\r\n                n++;\r\n        });\r\n        return n;\r\n    };\r\n    /**\r\n     * Adds the factors to the factor object\r\n     * @param {Symbo} s\r\n     * @returns {Factors}\r\n     */\r\n    Factors.prototype.add = function (s) {\r\n        if(s.equals(0))\r\n            return this; //nothing to add\r\n\r\n        //we don't want to carry -1 as a factor. If a factor already exists,\r\n        //then add the minus one to that factor and return.\r\n        if(s.equals(-1) && this.length > 0) {\r\n            var fo = core.Utils.firstObject(this.factors, null, true);\r\n            this.add(_.symfunction(core.Settings.PARENTHESIS, [fo.obj]).negate());\r\n            delete this.factors[fo.key];\r\n            this.length--;\r\n            return this;\r\n        }\r\n\r\n        if(s.group === CB) {\r\n            var factors = this;\r\n            if(!s.multiplier.equals(1))\r\n                factors.add(new Symbol(s.multiplier));\r\n            s.each(function (x) {\r\n                factors.add(x);\r\n            });\r\n        }\r\n        else {\r\n            if(this.preAdd) //if a preAdd function was defined call it to do prep\r\n                s = this.preAdd(s);\r\n            if(this.pFactor) //if the symbol isn't linear add back the power\r\n                s = _.pow(s, new Symbol(this.pFactor));\r\n\r\n            var is_constant = s.isConstant();\r\n            if(is_constant && s.equals(1))\r\n                return this; //don't add 1\r\n            var v = is_constant ? s.value : s.text();\r\n            if(v in this.factors) {\r\n                this.factors[v] = _.multiply(this.factors[v], s);\r\n                //did the addition cancel out the existing factor? If so remove it and decrement the length\r\n                if(this.factors[v].equals(1)) {\r\n                    delete this.factors[v];\r\n                    this.length--;\r\n                }\r\n            }\r\n            else {\r\n                this.factors[v] = s;\r\n                this.length++;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Converts the factor object to a Symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Factors.prototype.toSymbol = function () {\r\n        var factored = new Symbol(1);\r\n        var factors = Object.values(this.factors).sort(function (a, b) {\r\n            return a.group > b.group;\r\n        });\r\n\r\n        for(var i = 0, l = factors.length; i < l; i++) {\r\n            var f = factors[i];\r\n\r\n            //don't wrap group S or FN\r\n            var factor = f.power.equals(1) && f.fname !== '' /* don't wrap it twice */ ?\r\n                    _.symfunction(core.PARENTHESIS, [f]) : f;\r\n\r\n            factored = _.multiply(factored, factor);\r\n        }\r\n        if(factored.fname === '')\r\n            factored = Symbol.unwrapPARENS(factored);\r\n        return factored;\r\n    };\r\n    /**\r\n     * Merges 2 factor objects into one\r\n     * @param {Factor} o\r\n     * @returns {Factors}\r\n     */\r\n    Factors.prototype.merge = function (o) {\r\n        for(var x in o) {\r\n            if(x in this.factors)\r\n                this.factors[x] = _.multiply(this.factors[x], o[x]);\r\n            else\r\n                this.factors[x] = o[x];\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * The iterator for the factor object\r\n     * @param {Function} f - callback\r\n     * @returns {Factor}\r\n     */\r\n    Factors.prototype.each = function (f) {\r\n        for(var x in this.factors) {\r\n            var factor = this.factors[x];\r\n            if(factor.fname === core.PARENTHESIS && factor.isLinear())\r\n                factor = factor.args[0];\r\n            f.call(this, factor, x);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Return the number of factors contained in the factor object\r\n     * @returns {int}\r\n     */\r\n    Factors.prototype.count = function () {\r\n        return keys(this.factors).length;\r\n    };\r\n    /**\r\n     * Cleans up factors from -1\r\n     * @returns {undefined}\r\n     */\r\n    Factors.prototype.clean = function () {\r\n        try {\r\n            var h = core.Settings.CONST_HASH;\r\n            if(this.factors[h].lessThan(0)) {\r\n                if(this.factors[h].equals(-1))\r\n                    delete this.factors[h];\r\n                else\r\n                    this.factors[h].negate();\r\n                this.each(function (x) {\r\n                    x.negate();\r\n                });\r\n            }\r\n        }\r\n        catch(e) {\r\n        }\r\n        ;\r\n    };\r\n    Factors.prototype.toString = function () {\r\n        return this.toSymbol().toString();\r\n    };\r\n\r\n    //a wrapper for performing multivariate division\r\n    function MVTerm(coeff, terms, map) {\r\n        this.terms = terms || [];\r\n        this.coeff = coeff;\r\n        this.map = map; //careful! all maps are the same object\r\n        this.sum = new core.Frac(0);\r\n        this.image = undefined;\r\n    }\r\n    ;\r\n    MVTerm.prototype.updateCount = function () {\r\n        this.count = this.count || 0;\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            if(!this.terms[i].equals(0))\r\n                this.count++;\r\n        }\r\n        return this;\r\n    };\r\n    MVTerm.prototype.getVars = function () {\r\n        var vars = [];\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            var term = this.terms[i],\r\n                    rev_map = this.getRevMap();\r\n            if(!term.equals(0))\r\n                vars.push(this.rev_map[i]);\r\n        }\r\n        return vars.join(' ');\r\n    };\r\n    MVTerm.prototype.len = function () {\r\n        if(typeof this.count === 'undefined') {\r\n            this.updateCount();\r\n        }\r\n        return this.count;\r\n    };\r\n    MVTerm.prototype.toSymbol = function (rev_map) {\r\n        rev_map = rev_map || this.getRevMap();\r\n        var symbol = new Symbol(this.coeff);\r\n        for(var i = 0; i < this.terms.length; i++) {\r\n            var v = rev_map[i],\r\n                    t = this.terms[i];\r\n            if(t.equals(0) || v === CONST_HASH)\r\n                continue;\r\n            var mapped = new Symbol(v);\r\n            mapped.power = t;\r\n            symbol = _.multiply(symbol, mapped);\r\n        }\r\n        return symbol;\r\n    };\r\n    MVTerm.prototype.getRevMap = function () {\r\n        if(this.rev_map)\r\n            return this.rev_map;\r\n        var o = {};\r\n        for(var x in this.map)\r\n            o[this.map[x]] = x;\r\n        this.rev_map = o;\r\n        return o;\r\n    };\r\n    MVTerm.prototype.generateImage = function () {\r\n        this.image = this.terms.join(' ');\r\n        return this;\r\n    },\r\n            MVTerm.prototype.getImg = function () {\r\n                if(!this.image)\r\n                    this.generateImage();\r\n                return this.image;\r\n            },\r\n            MVTerm.prototype.fill = function () {\r\n                var l = this.map.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    if(typeof this.terms[i] === 'undefined')\r\n                        this.terms[i] = new core.Frac(0);\r\n                    else {\r\n                        this.sum = this.sum.add(this.terms[i]);\r\n                    }\r\n                }\r\n                return this;\r\n            };\r\n    MVTerm.prototype.divide = function (mvterm) {\r\n        var c = this.coeff.divide(mvterm.coeff),\r\n                l = this.terms.length,\r\n                new_mvterm = new MVTerm(c, [], this.map);\r\n        for(var i = 0; i < l; i++) {\r\n            new_mvterm.terms[i] = this.terms[i].subtract(mvterm.terms[i]);\r\n            new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\r\n        }\r\n        return new_mvterm;\r\n    };\r\n    MVTerm.prototype.multiply = function (mvterm) {\r\n        var c = this.coeff.multiply(mvterm.coeff),\r\n                l = this.terms.length,\r\n                new_mvterm = new MVTerm(c, [], this.map);\r\n        for(var i = 0; i < l; i++) {\r\n            new_mvterm.terms[i] = this.terms[i].add(mvterm.terms[i]);\r\n            new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\r\n        }\r\n        return new_mvterm;\r\n    };\r\n    MVTerm.prototype.isZero = function () {\r\n        return this.coeff.equals(0);\r\n    };\r\n    MVTerm.prototype.toString = function () {\r\n        return '{ coeff: ' + this.coeff.toString() + ', terms: [' +\r\n                this.terms.join(',') + ']: sum: ' + this.sum.toString() + ', count: ' + this.count + '}';\r\n    };\r\n\r\n    core.Utils.toMapObj = function (arr) {\r\n        var c = 0, o = {};\r\n        for(var i = 0; i < arr.length; i++) {\r\n            var v = arr[i];\r\n            if(typeof o[v] === 'undefined') {\r\n                o[v] = c;\r\n                c++;\r\n            }\r\n        }\r\n        o.length = c;\r\n        return o;\r\n    };\r\n    core.Utils.filledArray = function (v, n, clss) {\r\n        var a = [];\r\n        while(n--) {\r\n            a[n] = clss ? new clss(v) : v;\r\n        }\r\n        return a;\r\n    };\r\n    core.Utils.arrSum = function (arr) {\r\n        var sum = 0, l = arr.length;\r\n        for(var i = 0; i < l; i++)\r\n            sum += arr[i];\r\n        return sum;\r\n    };\r\n    /**\r\n     * Determines if 2 arrays have intersecting elements.\r\n     * @param {Array} a\r\n     * @param {Array} b\r\n     * @returns {Boolean} True if a and b have intersecting elements.\r\n     */\r\n    core.Utils.haveIntersection = function (a, b) {\r\n        var t;\r\n        if(b.length > a.length)\r\n            t = b, b = a, a = t; // indexOf to loop over shorter\r\n        return a.some(function (e) {\r\n            return b.indexOf(e) > -1;\r\n        });\r\n    };\r\n    /**\r\n     * Substitutes out functions as variables so they can be used in regular algorithms\r\n     * @param {Symbol} symbol\r\n     * @param {Object} map\r\n     * @returns {String} The expression string\r\n     */\r\n    core.Utils.subFunctions = function (symbol, map) {\r\n        map = map || {};\r\n        var subbed = [];\r\n        symbol.each(function (x) {\r\n            if(x.group === FN || x.previousGroup === FN) {\r\n                //we need a new variable name so why not use one of the existing\r\n                var val = core.Utils.text(x, 'hash'), tvar = map[val];\r\n                if(!tvar) {\r\n                    //generate a unique enough name\r\n                    var t = x.fname + keys(map).length;\r\n                    map[val] = t;\r\n                    subbed.push(x.altVar(t));\r\n                }\r\n                else\r\n                    subbed.push(x.altVar(tvar));\r\n            }\r\n            else if(x.group === CB || x.group === PL || x.group === CP) {\r\n                subbed.push(core.Utils.subFunctions(x, map));\r\n            }\r\n            else\r\n                subbed.push(x.text());\r\n        });\r\n        if(symbol.group === CP || symbol.group === PL)\r\n            return symbol.altVar(core.Utils.inBrackets(subbed.join('+')));\r\n        ;\r\n        if(symbol.group === CB)\r\n            return symbol.altVar(core.Utils.inBrackets(subbed.join('*')));\r\n        return symbol.text();\r\n    };\r\n    core.Utils.getFunctionsSubs = function (map) {\r\n        var subs = {};\r\n        //prepare substitutions\r\n        for(var x in map)\r\n            subs[map[x]] = _.parse(x);\r\n        return subs;\r\n    };\r\n\r\n    var __ = core.Algebra = {\r\n        version: '1.4.6',\r\n        proots: function (symbol, decp) {\r\n            //the roots will be rounded up to 7 decimal places.\r\n            //if this causes trouble you can explicitly pass in a different number of places\r\n            //rarr for polynomial of power n is of format [n, coeff x^n, coeff x^(n-1), ..., coeff x^0]\r\n            decp = decp || 7;\r\n            var zeros = 0;\r\n            var known_roots = [];\r\n            var get_roots = function (rarr, powers, max) {\r\n                var roots = calcroots(rarr, powers, max).concat(known_roots);\r\n                for(var i = 0; i < zeros; i++)\r\n                    roots.unshift(0);\r\n                return roots;\r\n            };\r\n\r\n            if(symbol instanceof Symbol && symbol.isPoly()) {\r\n                symbol.distributeMultiplier();\r\n                //make it so the symbol has a constants as the lowest term\r\n                if(symbol.group === PL) {\r\n                    var lowest_pow = core.Utils.arrayMin(keys(symbol.symbols));\r\n                    var lowest_symbol = symbol.symbols[lowest_pow].clone().toUnitMultiplier();\r\n                    symbol = _.expand(_.divide(symbol, lowest_symbol));\r\n                    known_roots.push(0); //add zero since this is a known root\r\n                }\r\n                if(symbol.group === core.groups.S) {\r\n                    return [0];\r\n                }\r\n                else if(symbol.group === core.groups.PL) {\r\n                    var powers = keys(symbol.symbols),\r\n                            minpower = core.Utils.arrayMin(powers),\r\n                            symbol = core.PARSER.divide(symbol, core.PARSER.parse(symbol.value + '^' + minpower));\r\n                }\r\n\r\n                var variable = keys(symbol.symbols).sort().pop(),\r\n                        sym = symbol.group === core.groups.PL ? symbol.symbols : symbol.symbols[variable],\r\n                        g = sym.group,\r\n                        powers = g === S ? [sym.power.toDecimal()] : keys(sym.symbols),\r\n                        rarr = [],\r\n                        max = core.Utils.arrayMax(powers); //maximum power and degree of polynomial to be solved\r\n\r\n                // Prepare the data\r\n                for(var i = 1; i <= max; i++) {\r\n                    var c = 0; //if there is no power then the hole must be filled with a zero\r\n                    if(powers.indexOf(i + '') !== -1) {\r\n                        if(g === S) {\r\n                            c = sym.multiplier;\r\n                        }\r\n                        else {\r\n                            c = sym.symbols[i].multiplier;\r\n                        }\r\n                    }\r\n                    // Insert the coeffient but from the front\r\n                    rarr.unshift(c);\r\n                }\r\n\r\n                rarr.push(symbol.symbols[CONST_HASH].multiplier);\r\n\r\n                if(sym.group === S)\r\n                    rarr[0] = sym.multiplier;//the symbol maybe of group CP with one variable\r\n\r\n                return get_roots(rarr, powers, max);\r\n            }\r\n            else if(core.Utils.isArray(symbol)) {\r\n                var parr = symbol;\r\n                var rarr = [],\r\n                        powers = [],\r\n                        last_power = 0;\r\n                for(var i = 0; i < parr.length; i++) {\r\n\r\n                    var coeff = parr[i][0],\r\n                            pow = parr[i][1],\r\n                            d = pow - last_power - 1;\r\n                    //insert the zeros\r\n                    for(var j = 0; j < d; j++)\r\n                        rarr.unshift(0);\r\n\r\n                    rarr.unshift(coeff);\r\n                    if(pow !== 0)\r\n                        powers.push(pow);\r\n                    last_power = pow;\r\n                }\r\n                var max = Math.max.apply(undefined, powers);\r\n\r\n                return get_roots(rarr, powers, max);\r\n            }\r\n            else {\r\n                throw new core.exceptions.NerdamerTypeError('Cannot calculate roots. Symbol must be a polynomial!');\r\n            }\r\n\r\n            function calcroots(rarr, powers, max) {\r\n                var MAXDEGREE = 100; // Degree of largest polynomial accepted by this script.\r\n\r\n                // Make a clone of the coefficients before appending the max power\r\n                var p = rarr.slice(0);\r\n\r\n                // Divide the string up into its individual entries, which--presumably--are separated by whitespace\r\n                rarr.unshift(max);\r\n\r\n                if(max > MAXDEGREE) {\r\n                    throw new core.exceptions.ValueLimitExceededError(\"This utility accepts polynomials of degree up to \" + MAXDEGREE + \". \");\r\n                }\r\n\r\n                var zeroi = [], // Vector of imaginary components of roots\r\n                        degreePar = {};    // degreePar is a dummy variable for passing the parameter POLYDEGREE by reference\r\n                degreePar.Degree = max;\r\n\r\n                for(i = 0; i < max; i++) {\r\n                    zeroi.push(0);\r\n                }\r\n                var zeror = zeroi.slice(0); // Vector of real components of roots\r\n\r\n                // Find the roots\r\n                //--> Begin Jenkins-Traub\r\n\r\n                /*\r\n                 * A verbatim copy of Mr. David Binner's Jenkins-Traub port\r\n                 */\r\n                function QuadSD_ak1(NN, u, v, p, q, iPar) {\r\n                    // Divides p by the quadratic 1, u, v placing the quotient in q and the remainder in a, b\r\n                    // iPar is a dummy variable for passing in the two parameters--a and b--by reference\r\n                    q[0] = iPar.b = p[0];\r\n                    q[1] = iPar.a = -(u * iPar.b) + p[1];\r\n\r\n                    for(var i = 2; i < NN; i++) {\r\n                        q[i] = -(u * iPar.a + v * iPar.b) + p[i];\r\n                        iPar.b = iPar.a;\r\n                        iPar.a = q[i];\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function calcSC_ak1(DBL_EPSILON, N, a, b, iPar, K, u, v, qk) {\r\n                    // This routine calculates scalar quantities used to compute the next K polynomial and\r\n                    // new estimates of the quadratic coefficients.\r\n                    // calcSC -\tinteger variable set here indicating how the calculations are normalized\r\n                    // to avoid overflow.\r\n                    // iPar is a dummy variable for passing in the nine parameters--a1, a3, a7, c, d, e, f, g, and h --by reference\r\n\r\n                    // sdPar is a dummy variable for passing the two parameters--c and d--into QuadSD_ak1 by reference\r\n                    var sdPar = new Object(),\r\n                            // TYPE = 3 indicates the quadratic is almost a factor of K\r\n                            dumFlag = 3;\r\n\r\n                    // Synthetic division of K by the quadratic 1, u, v\r\n                    sdPar.b = sdPar.a = 0.0;\r\n                    QuadSD_ak1(N, u, v, K, qk, sdPar);\r\n                    iPar.c = sdPar.a;\r\n                    iPar.d = sdPar.b;\r\n\r\n                    if(Math.abs(iPar.c) <= (100.0 * DBL_EPSILON * Math.abs(K[N - 1]))) {\r\n                        if(Math.abs(iPar.d) <= (100.0 * DBL_EPSILON * Math.abs(K[N - 2])))\r\n                            return dumFlag;\r\n                    }\r\n\r\n                    iPar.h = v * b;\r\n                    if(Math.abs(iPar.d) >= Math.abs(iPar.c)) {\r\n                        // TYPE = 2 indicates that all formulas are divided by d\r\n                        dumFlag = 2;\r\n                        iPar.e = a / (iPar.d);\r\n                        iPar.f = (iPar.c) / (iPar.d);\r\n                        iPar.g = u * b;\r\n                        iPar.a3 = (iPar.e) * ((iPar.g) + a) + (iPar.h) * (b / (iPar.d));\r\n                        iPar.a1 = -a + (iPar.f) * b;\r\n                        iPar.a7 = (iPar.h) + ((iPar.f) + u) * a;\r\n                    }\r\n                    else {\r\n                        // TYPE = 1 indicates that all formulas are divided by c;\r\n                        dumFlag = 1;\r\n                        iPar.e = a / (iPar.c);\r\n                        iPar.f = (iPar.d) / (iPar.c);\r\n                        iPar.g = (iPar.e) * u;\r\n                        iPar.a3 = (iPar.e) * a + ((iPar.g) + (iPar.h) / (iPar.c)) * b;\r\n                        iPar.a1 = -(a * ((iPar.d) / (iPar.c))) + b;\r\n                        iPar.a7 = (iPar.g) * (iPar.d) + (iPar.h) * (iPar.f) + a;\r\n                    }\r\n                    return dumFlag;\r\n                }\r\n\r\n                function nextK_ak1(DBL_EPSILON, N, tFlag, a, b, iPar, K, qk, qp) {\r\n                    // Computes the next K polynomials using the scalars computed in calcSC_ak1\r\n                    // iPar is a dummy variable for passing in three parameters--a1, a3, and a7\r\n                    var temp;\r\n                    if(tFlag == 3) {\t// Use unscaled form of the recurrence\r\n                        K[1] = K[0] = 0.0;\r\n                        for(var i = 2; i < N; i++) {\r\n                            K[i] = qk[i - 2];\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    temp = ((tFlag == 1) ? b : a);\r\n                    if(Math.abs(iPar.a1) > (10.0 * DBL_EPSILON * Math.abs(temp))) {\r\n                        // Use scaled form of the recurrence\r\n                        iPar.a7 /= iPar.a1;\r\n                        iPar.a3 /= iPar.a1;\r\n                        K[0] = qp[0];\r\n                        K[1] = -(qp[0] * iPar.a7) + qp[1];\r\n                        for(var i = 2; i < N; i++)\r\n                            K[i] = -(qp[i - 1] * iPar.a7) + qk[i - 2] * iPar.a3 + qp[i];\r\n                    }\r\n                    else {\r\n                        // If a1 is nearly zero, then use a special form of the recurrence\r\n                        K[0] = 0.0;\r\n                        K[1] = -(qp[0] * iPar.a7);\r\n                        for(var i = 2; i < N; i++) {\r\n                            K[i] = -(qp[i - 1] * iPar.a7) + qk[i - 2] * iPar.a3;\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function newest_ak1(tFlag, iPar, a, a1, a3, a7, b, c, d, f, g, h, u, v, K, N, p) {\r\n                    // Compute new estimates of the quadratic coefficients using the scalars computed in calcSC_ak1\r\n                    // iPar is a dummy variable for passing in the two parameters--uu and vv--by reference\r\n                    // iPar.a = uu, iPar.b = vv\r\n\r\n                    var a4, a5, b1, b2, c1, c2, c3, c4, temp;\r\n                    iPar.b = iPar.a = 0.0;// The quadratic is zeroed\r\n\r\n                    if(tFlag != 3) {\r\n                        if(tFlag != 2) {\r\n                            a4 = a + u * b + h * f;\r\n                            a5 = c + (u + v * f) * d;\r\n                        }\r\n                        else {\r\n                            a4 = (a + g) * f + h;\r\n                            a5 = (f + u) * c + v * d;\r\n                        }\r\n\r\n                        // Evaluate new quadratic coefficients\r\n                        b1 = -(K[N - 1] / p[N]);\r\n                        b2 = -(K[N - 2] + b1 * p[N - 1]) / p[N];\r\n                        c1 = v * b2 * a1;\r\n                        c2 = b1 * a7;\r\n                        c3 = b1 * b1 * a3;\r\n                        c4 = -(c2 + c3) + c1;\r\n                        temp = -c4 + a5 + b1 * a4;\r\n                        if(temp != 0.0) {\r\n                            iPar.a = -((u * (c3 + c2) + v * (b1 * a1 + b2 * a7)) / temp) + u;\r\n                            iPar.b = v * (1.0 + c4 / temp);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function Quad_ak1(a, b1, c, iPar) {\r\n                    // Calculates the zeros of the quadratic a*Z^2 + b1*Z + c\r\n                    // The quadratic formula, modified to avoid overflow, is used to find the larger zero if the\r\n                    // zeros are real and both zeros are complex. The smaller real zero is found directly from\r\n                    // the product of the zeros c/a.\r\n\r\n                    // iPar is a dummy variable for passing in the four parameters--sr, si, lr, and li--by reference\r\n\r\n                    var b, d, e;\r\n                    iPar.sr = iPar.si = iPar.lr = iPar.li = 0.0;\r\n\r\n                    if(a == 0) {\r\n                        iPar.sr = ((b1 != 0) ? -(c / b1) : iPar.sr);\r\n                        return;\r\n                    }\r\n                    if(c == 0) {\r\n                        iPar.lr = -(b1 / a);\r\n                        return;\r\n                    }\r\n\r\n                    // Compute discriminant avoiding overflow\r\n                    b = b1 / 2.0;\r\n                    if(Math.abs(b) < Math.abs(c)) {\r\n                        e = ((c >= 0) ? a : -a);\r\n                        e = -e + b * (b / Math.abs(c));\r\n                        d = Math.sqrt(Math.abs(e)) * Math.sqrt(Math.abs(c));\r\n                    }\r\n                    else {\r\n                        e = -((a / b) * (c / b)) + 1.0;\r\n                        d = Math.sqrt(Math.abs(e)) * (Math.abs(b));\r\n                    }\r\n\r\n                    if(e >= 0) {\r\n                        // Real zeros\r\n                        d = ((b >= 0) ? -d : d);\r\n                        iPar.lr = (-b + d) / a;\r\n                        iPar.sr = ((iPar.lr != 0) ? (c / (iPar.lr)) / a : iPar.sr);\r\n                    }\r\n                    else {\r\n                        // Complex conjugate zeros\r\n                        iPar.lr = iPar.sr = -(b / a);\r\n                        iPar.si = Math.abs(d / a);\r\n                        iPar.li = -(iPar.si);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function QuadIT_ak1(DBL_EPSILON, N, iPar, uu, vv, qp, NN, sdPar, p, qk, calcPar, K) {\r\n                    // Variable-shift K-polynomial iteration for a quadratic factor converges only if the\r\n                    // zeros are equimodular or nearly so.\r\n                    // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\r\n                    // sdPar is a dummy variable for passing the two parameters--a and b--in by reference\r\n                    // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --in by reference\r\n\r\n                    // qPar is a dummy variable for passing the four parameters--szr, szi, lzr, and lzi--into Quad_ak1 by reference\r\n                    var qPar = new Object(),\r\n                            ee, mp, omp, relstp, t, u, ui, v, vi, zm,\r\n                            i, j = 0, tFlag, triedFlag = 0;   // Integer variables\r\n\r\n                    iPar.NZ = 0;// Number of zeros found\r\n                    u = uu; // uu and vv are coefficients of the starting quadratic\r\n                    v = vv;\r\n\r\n                    do {\r\n                        qPar.li = qPar.lr = qPar.si = qPar.sr = 0.0;\r\n                        Quad_ak1(1.0, u, v, qPar);\r\n                        iPar.szr = qPar.sr;\r\n                        iPar.szi = qPar.si;\r\n                        iPar.lzr = qPar.lr;\r\n                        iPar.lzi = qPar.li;\r\n\r\n                        // Return if roots of the quadratic are real and not close to multiple or nearly\r\n                        // equal and of opposite sign.\r\n                        if(Math.abs(Math.abs(iPar.szr) - Math.abs(iPar.lzr)) > 0.01 * Math.abs(iPar.lzr))\r\n                            break;\r\n\r\n                        // Evaluate polynomial by quadratic synthetic division\r\n\r\n                        QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n\r\n                        mp = Math.abs(-((iPar.szr) * (sdPar.b)) + (sdPar.a)) + Math.abs((iPar.szi) * (sdPar.b));\r\n\r\n                        // Compute a rigorous bound on the rounding error in evaluating p\r\n\r\n                        zm = Math.sqrt(Math.abs(v));\r\n                        ee = 2.0 * Math.abs(qp[0]);\r\n                        t = -((iPar.szr) * (sdPar.b));\r\n\r\n                        for(i = 1; i < N; i++) {\r\n                            ee = ee * zm + Math.abs(qp[i]);\r\n                        }\r\n\r\n                        ee = ee * zm + Math.abs(t + sdPar.a);\r\n                        ee = (9.0 * ee + 2.0 * Math.abs(t) - 7.0 * (Math.abs((sdPar.a) + t) + zm * Math.abs((sdPar.b)))) * DBL_EPSILON;\r\n\r\n                        // Iteration has converged sufficiently if the polynomial value is less than 20 times this bound\r\n                        if(mp <= 20.0 * ee) {\r\n                            iPar.NZ = 2;\r\n                            break;\r\n                        }\r\n\r\n                        j++;\r\n                        // Stop iteration after 20 steps\r\n                        if(j > 20)\r\n                            break;\r\n                        if(j >= 2) {\r\n                            if((relstp <= 0.01) && (mp >= omp) && (!triedFlag)) {\r\n                                // A cluster appears to be stalling the convergence. Five fixed shift\r\n                                // steps are taken with a u, v close to the cluster.\r\n                                relstp = ((relstp < DBL_EPSILON) ? Math.sqrt(DBL_EPSILON) : Math.sqrt(relstp));\r\n                                u -= u * relstp;\r\n                                v += v * relstp;\r\n\r\n                                QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                                for(i = 0; i < 5; i++) {\r\n                                    tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                                    nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\r\n                                }\r\n\r\n                                triedFlag = 1;\r\n                                j = 0;\r\n\r\n                            }\r\n                        }\r\n                        omp = mp;\r\n\r\n                        // Calculate next K polynomial and new u and v\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                        nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\r\n                        newest_ak1(tFlag, sdPar, sdPar.a, calcPar.a1, calcPar.a3, calcPar.a7, sdPar.b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\r\n                        ui = sdPar.a;\r\n                        vi = sdPar.b;\r\n\r\n                        // If vi is zero, the iteration is not converging\r\n                        if(vi != 0) {\r\n                            relstp = Math.abs((-v + vi) / vi);\r\n                            u = ui;\r\n                            v = vi;\r\n                        }\r\n                    }\r\n                    while(vi != 0);\r\n                    return;\r\n                }\r\n\r\n                function RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk) {\r\n                    // Variable-shift H-polynomial iteration for a real zero\r\n                    // sss\t- starting iterate = sdPar.a\r\n                    // NZ\t\t- number of zeros found = iPar.NZ\r\n                    // dumFlag\t- flag to indicate a pair of zeros near real axis, returned to iFlag\r\n\r\n                    var ee, kv, mp, ms, omp, pv, s, t,\r\n                            dumFlag, i, j, nm1 = N - 1;   // Integer variables\r\n\r\n                    iPar.NZ = j = dumFlag = 0;\r\n                    s = sdPar.a;\r\n\r\n                    for(; ; ) {\r\n                        pv = p[0];\r\n\r\n                        // Evaluate p at s\r\n                        qp[0] = pv;\r\n                        for(i = 1; i < NN; i++) {\r\n                            qp[i] = pv = pv * s + p[i];\r\n                        }\r\n                        mp = Math.abs(pv);\r\n\r\n                        // Compute a rigorous bound on the error in evaluating p\r\n                        ms = Math.abs(s);\r\n                        ee = 0.5 * Math.abs(qp[0]);\r\n                        for(i = 1; i < NN; i++) {\r\n                            ee = ee * ms + Math.abs(qp[i]);\r\n                        }\r\n\r\n                        // Iteration has converged sufficiently if the polynomial value is less than\r\n                        // 20 times this bound\r\n                        if(mp <= 20.0 * DBL_EPSILON * (2.0 * ee - mp)) {\r\n                            iPar.NZ = 1;\r\n                            iPar.szr = s;\r\n                            iPar.szi = 0.0;\r\n                            break;\r\n                        }\r\n                        j++;\r\n                        // Stop iteration after 10 steps\r\n                        if(j > 10)\r\n                            break;\r\n\r\n                        if(j >= 2) {\r\n                            if((Math.abs(t) <= 0.001 * Math.abs(-t + s)) && (mp > omp)) {\r\n                                // A cluster of zeros near the real axis has been encountered.\r\n                                // Return with iFlag set to initiate a quadratic iteration.\r\n                                dumFlag = 1;\r\n                                iPar.a = s;\r\n                                break;\r\n                            } // End if ((fabs(t) <= 0.001*fabs(s - t)) && (mp > omp))\r\n                        } //End if (j >= 2)\r\n\r\n                        // Return if the polynomial value has increased significantly\r\n                        omp = mp;\r\n\r\n                        // Compute t, the next polynomial and the new iterate\r\n                        qk[0] = kv = K[0];\r\n                        for(i = 1; i < N; i++) {\r\n                            qk[i] = kv = kv * s + K[i];\r\n                        }\r\n\r\n                        if(Math.abs(kv) > Math.abs(K[nm1]) * 10.0 * DBL_EPSILON) {\r\n                            // Use the scaled form of the recurrence if the value of K at s is non-zero\r\n                            t = -(pv / kv);\r\n                            K[0] = qp[0];\r\n                            for(i = 1; i < N; i++) {\r\n                                K[i] = t * qk[i - 1] + qp[i];\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Use unscaled form\r\n                            K[0] = 0.0;\r\n                            for(i = 1; i < N; i++)\r\n                                K[i] = qk[i - 1];\r\n                        }\r\n\r\n                        kv = K[0];\r\n                        for(i = 1; i < N; i++) {\r\n                            kv = kv * s + K[i];\r\n                        }\r\n                        t = ((Math.abs(kv) > (Math.abs(K[nm1]) * 10.0 * DBL_EPSILON)) ? -(pv / kv) : 0.0);\r\n                        s += t;\r\n                    }\r\n                    return dumFlag;\r\n                }\r\n\r\n                function Fxshfr_ak1(DBL_EPSILON, MDP1, L2, sr, v, K, N, p, NN, qp, u, iPar) {\r\n\r\n                    // Computes up to L2 fixed shift K-polynomials, testing for convergence in the linear or\r\n                    // quadratic case. Initiates one of the variable shift iterations and returns with the\r\n                    // number of zeros found.\r\n                    // L2\tlimit of fixed shift steps\r\n                    // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\r\n                    // NZ\tnumber of zeros found\r\n                    var sdPar = new Object(), // sdPar is a dummy variable for passing the two parameters--a and b--into QuadSD_ak1 by reference\r\n                            calcPar = new Object(),\r\n                            // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --into calcSC_ak1 by reference\r\n\r\n                            qk = new Array(MDP1),\r\n                            svk = new Array(MDP1),\r\n                            a, b, betas, betav, oss, ots, otv, ovv, s, ss, ts, tss, tv, tvv, ui, vi, vv,\r\n                            fflag, i, iFlag = 1, j, spass, stry, tFlag, vpass, vtry;     // Integer variables\r\n\r\n                    iPar.NZ = 0;\r\n                    betav = betas = 0.25;\r\n                    oss = sr;\r\n                    ovv = v;\r\n\r\n                    //Evaluate polynomial by synthetic division\r\n                    sdPar.b = sdPar.a = 0.0;\r\n                    QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                    a = sdPar.a;\r\n                    b = sdPar.b;\r\n                    calcPar.h = calcPar.g = calcPar.f = calcPar.e = calcPar.d = calcPar.c = calcPar.a7 = calcPar.a3 = calcPar.a1 = 0.0;\r\n                    tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n\r\n                    for(j = 0; j < L2; j++) {\r\n                        fflag = 1;\r\n\r\n                        // Calculate next K polynomial and estimate v\r\n                        nextK_ak1(DBL_EPSILON, N, tFlag, a, b, calcPar, K, qk, qp);\r\n                        tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n\r\n                        // Use sdPar for passing in uu and vv instead of defining a brand-new variable.\r\n                        // sdPar.a = ui, sdPar.b = vi\r\n                        newest_ak1(tFlag, sdPar, a, calcPar.a1, calcPar.a3, calcPar.a7, b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\r\n                        ui = sdPar.a;\r\n                        vv = vi = sdPar.b;\r\n\r\n                        // Estimate s\r\n                        ss = ((K[N - 1] != 0.0) ? -(p[N] / K[N - 1]) : 0.0);\r\n                        ts = tv = 1.0;\r\n\r\n                        if((j != 0) && (tFlag != 3)) {\r\n                            // Compute relative measures of convergence of s and v sequences\r\n                            tv = ((vv != 0.0) ? Math.abs((vv - ovv) / vv) : tv);\r\n                            ts = ((ss != 0.0) ? Math.abs((ss - oss) / ss) : ts);\r\n\r\n                            // If decreasing, multiply the two most recent convergence measures\r\n                            tvv = ((tv < otv) ? tv * otv : 1.0);\r\n                            tss = ((ts < ots) ? ts * ots : 1.0);\r\n\r\n                            // Compare with convergence criteria\r\n                            vpass = ((tvv < betav) ? 1 : 0);\r\n                            spass = ((tss < betas) ? 1 : 0);\r\n\r\n                            if((spass) || (vpass)) {\r\n\r\n                                // At least one sequence has passed the convergence test.\r\n                                // Store variables before iterating\r\n\r\n                                for(i = 0; i < N; i++) {\r\n                                    svk[i] = K[i];\r\n                                }\r\n                                s = ss;\r\n\r\n                                // Choose iteration according to the fastest converging sequence\r\n\r\n                                stry = vtry = 0;\r\n\r\n                                for(; ; ) {\r\n                                    if((fflag && ((fflag = 0) == 0)) && ((spass) && (!vpass || (tss < tvv)))) {\r\n                                        ;// Do nothing. Provides a quick \"short circuit\".\r\n                                    }\r\n                                    else {\r\n                                        QuadIT_ak1(DBL_EPSILON, N, iPar, ui, vi, qp, NN, sdPar, p, qk, calcPar, K);\r\n                                        a = sdPar.a;\r\n                                        b = sdPar.b;\r\n\r\n                                        if((iPar.NZ) > 0)\r\n                                            return;\r\n\r\n                                        // Quadratic iteration has failed. Flag that it has been tried and decrease the\r\n                                        // convergence criterion\r\n                                        iFlag = vtry = 1;\r\n                                        betav *= 0.25;\r\n\r\n                                        // Try linear iteration if it has not been tried and the s sequence is converging\r\n                                        if(stry || (!spass)) {\r\n                                            iFlag = 0;\r\n                                        }\r\n                                        else {\r\n                                            for(i = 0; i < N; i++)\r\n                                                K[i] = svk[i];\r\n                                        }\r\n                                    }\r\n                                    //fflag = 0;\r\n                                    if(iFlag != 0) {\r\n                                        // Use sdPar for passing in s instead of defining a brand-new variable.\r\n                                        // sdPar.a = s\r\n                                        sdPar.a = s;\r\n                                        iFlag = RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk);\r\n                                        s = sdPar.a;\r\n\r\n                                        if((iPar.NZ) > 0)\r\n                                            return;\r\n\r\n                                        // Linear iteration has failed. Flag that it has been tried and decrease the\r\n                                        // convergence criterion\r\n                                        stry = 1;\r\n                                        betas *= 0.25;\r\n\r\n                                        if(iFlag != 0) {\r\n                                            // If linear iteration signals an almost double real zero, attempt quadratic iteration\r\n                                            ui = -(s + s);\r\n                                            vi = s * s;\r\n                                            continue;\r\n\r\n                                        }\r\n                                    }\r\n\r\n                                    // Restore variables\r\n                                    for(i = 0; i < N; i++)\r\n                                        K[i] = svk[i];\r\n\r\n                                    // Try quadratic iteration if it has not been tried and the v sequence is converging\r\n                                    if(!vpass || vtry)\r\n                                        break;\t\t// Break out of infinite for loop\r\n\r\n                                }\r\n\r\n                                // Re-compute qp and scalar values to continue the second stage\r\n\r\n                                QuadSD_ak1(NN, u, v, p, qp, sdPar);\r\n                                a = sdPar.a;\r\n                                b = sdPar.b;\r\n\r\n                                tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\r\n                            }\r\n                        }\r\n                        ovv = vv;\r\n                        oss = ss;\r\n                        otv = tv;\r\n                        ots = ts;\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                function rpSolve(degPar, p, zeror, zeroi) {\r\n                    var N = degPar.Degree,\r\n                            RADFAC = 3.14159265358979323846 / 180, // Degrees-to-radians conversion factor = PI/180\r\n                            LB2 = Math.LN2, // Dummy variable to avoid re-calculating this value in loop below\r\n                            MDP1 = degPar.Degree + 1,\r\n                            K = new Array(MDP1),\r\n                            pt = new Array(MDP1),\r\n                            qp = new Array(MDP1),\r\n                            temp = new Array(MDP1),\r\n                            // qPar is a dummy variable for passing the four parameters--sr, si, lr, and li--by reference\r\n                            qPar = new Object(),\r\n                            // Fxshfr_Par is a dummy variable for passing parameters by reference : NZ, lzi, lzr, szi, szr);\r\n                            Fxshfr_Par = new Object(),\r\n                            bnd, DBL_EPSILON, df, dx, factor, ff, moduli_max, moduli_min, sc, x, xm,\r\n                            aa, bb, cc, sr, t, u, xxx,\r\n                            j, jj, l, NM1, NN, zerok;// Integer variables\r\n\r\n                    // Calculate the machine epsilon and store in the variable DBL_EPSILON.\r\n                    // To calculate this value, just use existing variables rather than create new ones that will be used only for this code block\r\n                    aa = 1.0;\r\n                    do {\r\n                        DBL_EPSILON = aa;\r\n                        aa /= 2;\r\n                        bb = 1.0 + aa;\r\n                    }\r\n                    while(bb > 1.0);\r\n\r\n                    var LO = Number.MIN_VALUE / DBL_EPSILON,\r\n                            cosr = Math.cos(94.0 * RADFAC), // = -0.069756474\r\n                            sinr = Math.sin(94.0 * RADFAC), // = 0.99756405\r\n                            xx = Math.sqrt(0.5), // = 0.70710678\r\n                            yy = -xx;\r\n\r\n                    Fxshfr_Par.NZ = j = 0;\r\n                    Fxshfr_Par.szr = Fxshfr_Par.szi = Fxshfr_Par.lzr = Fxshfr_Par.lzi = 0.0;\r\n\r\n                    // Remove zeros at the origin, if any\r\n                    while(p[N] == 0) {\r\n                        zeror[j] = zeroi[j] = 0;\r\n                        N--;\r\n                        j++;\r\n                    }\r\n                    NN = N + 1;\r\n\r\n                    // >>>>> Begin Main Loop <<<<<\r\n                    while(N >= 1) { // Main loop\r\n                        // Start the algorithm for one zero\r\n                        if(N <= 2) {\r\n                            // Calculate the final zero or pair of zeros\r\n                            if(N < 2) {\r\n                                zeror[degPar.Degree - 1] = -(p[1] / p[0]);\r\n                                zeroi[degPar.Degree - 1] = 0;\r\n                            }\r\n                            else {\r\n                                qPar.li = qPar.lr = qPar.si = qPar.sr = 0.0;\r\n                                Quad_ak1(p[0], p[1], p[2], qPar);\r\n                                zeror[degPar.Degree - 2] = qPar.sr;\r\n                                zeroi[degPar.Degree - 2] = qPar.si;\r\n                                zeror[degPar.Degree - 1] = qPar.lr;\r\n                                zeroi[degPar.Degree - 1] = qPar.li;\r\n                            }\r\n                            break;\r\n                        }\r\n\r\n                        // Find the largest and smallest moduli of the coefficients\r\n                        moduli_max = 0.0;\r\n                        moduli_min = Number.MAX_VALUE;\r\n\r\n                        for(i = 0; i < NN; i++) {\r\n                            x = Math.abs(p[i]);\r\n                            if(x > moduli_max)\r\n                                moduli_max = x;\r\n                            if((x != 0) && (x < moduli_min))\r\n                                moduli_min = x;\r\n                        }\r\n\r\n                        // Scale if there are large or very small coefficients\r\n                        // Computes a scale factor to multiply the coefficients of the polynomial. The scaling\r\n                        // is done to avoid overflow and to avoid undetected underflow interfering with the\r\n                        // convergence criterion.\r\n                        // The factor is a power of the base.\r\n                        sc = LO / moduli_min;\r\n\r\n                        if(((sc <= 1.0) && (moduli_max >= 10)) || ((sc > 1.0) && (Number.MAX_VALUE / sc >= moduli_max))) {\r\n                            sc = ((sc == 0) ? Number.MIN_VALUE : sc);\r\n                            l = Math.floor(Math.log(sc) / LB2 + 0.5);\r\n                            factor = Math.pow(2.0, l);\r\n                            if(factor != 1.0) {\r\n                                for(i = 0; i < NN; i++)\r\n                                    p[i] *= factor;\r\n                            }\r\n                        }\r\n\r\n                        // Compute lower bound on moduli of zeros\r\n                        for(var i = 0; i < NN; i++)\r\n                            pt[i] = Math.abs(p[i]);\r\n                        pt[N] = -(pt[N]);\r\n                        NM1 = N - 1;\r\n\r\n                        // Compute upper estimate of bound\r\n                        x = Math.exp((Math.log(-pt[N]) - Math.log(pt[0])) / N);\r\n\r\n                        if(pt[NM1] != 0) {\r\n                            // If Newton step at the origin is better, use it\r\n                            xm = -pt[N] / pt[NM1];\r\n                            x = ((xm < x) ? xm : x);\r\n                        }\r\n\r\n                        // Chop the interval (0, x) until ff <= 0\r\n                        xm = x;\r\n                        do {\r\n                            x = xm;\r\n                            xm = 0.1 * x;\r\n                            ff = pt[0];\r\n                            for(var i = 1; i < NN; i++) {\r\n                                ff = ff * xm + pt[i];\r\n                            }\r\n                        }\r\n                        while(ff > 0); // End do-while loop\r\n\r\n                        dx = x;\r\n                        // Do Newton iteration until x converges to two decimal places\r\n\r\n                        do {\r\n                            df = ff = pt[0];\r\n                            for(var i = 1; i < N; i++) {\r\n                                ff = x * ff + pt[i];\r\n                                df = x * df + ff;\r\n                            } // End for i\r\n                            ff = x * ff + pt[N];\r\n                            dx = ff / df;\r\n                            x -= dx;\r\n                        }\r\n                        while(Math.abs(dx / x) > 0.005); // End do-while loop\r\n\r\n                        bnd = x;\r\n\r\n                        // Compute the derivative as the initial K polynomial and do 5 steps with no shift\r\n                        for(var i = 1; i < N; i++)\r\n                            K[i] = (N - i) * p[i] / N;\r\n                        K[0] = p[0];\r\n                        aa = p[N];\r\n                        bb = p[NM1];\r\n                        zerok = ((K[NM1] == 0) ? 1 : 0);\r\n\r\n                        for(jj = 0; jj < 5; jj++) {\r\n                            cc = K[NM1];\r\n                            if(zerok) {\r\n                                // Use unscaled form of recurrence\r\n                                for(var i = 0; i < NM1; i++) {\r\n                                    j = NM1 - i;\r\n                                    K[j] = K[j - 1];\r\n                                } // End for i\r\n                                K[0] = 0;\r\n                                zerok = ((K[NM1] == 0) ? 1 : 0);\r\n                            }\r\n                            else {\r\n                                // Used scaled form of recurrence if value of K at 0 is nonzero\r\n                                t = -aa / cc;\r\n                                for(var i = 0; i < NM1; i++) {\r\n                                    j = NM1 - i;\r\n                                    K[j] = t * K[j - 1] + p[j];\r\n                                } // End for i\r\n                                K[0] = p[0];\r\n                                zerok = ((Math.abs(K[NM1]) <= Math.abs(bb) * DBL_EPSILON * 10.0) ? 1 : 0);\r\n                            }\r\n                        }\r\n\r\n                        // Save K for restarts with new shifts\r\n                        for(var i = 0; i < N; i++)\r\n                            temp[i] = K[i];\r\n\r\n                        // Loop to select the quadratic corresponding to each new shift\r\n                        for(jj = 1; jj <= 20; jj++) {\r\n\r\n                            // Quadratic corresponds to a double shift to a non-real point and its\r\n                            // complex conjugate. The point has modulus BND and amplitude rotated\r\n                            // by 94 degrees from the previous shift.\r\n\r\n                            xxx = -(sinr * yy) + cosr * xx;\r\n                            yy = sinr * xx + cosr * yy;\r\n                            xx = xxx;\r\n                            sr = bnd * xx;\r\n                            u = -(2.0 * sr);\r\n\r\n                            // Second stage calculation, fixed quadratic\r\n                            Fxshfr_ak1(DBL_EPSILON, MDP1, 20 * jj, sr, bnd, K, N, p, NN, qp, u, Fxshfr_Par);\r\n\r\n                            if(Fxshfr_Par.NZ != 0) {\r\n                                // The second stage jumps directly to one of the third stage iterations and\r\n                                // returns here if successful. Deflate the polynomial, store the zero or\r\n                                // zeros, and return to the main algorithm.\r\n                                j = degPar.Degree - N;\r\n                                zeror[j] = Fxshfr_Par.szr;\r\n                                zeroi[j] = Fxshfr_Par.szi;\r\n                                NN = NN - Fxshfr_Par.NZ;\r\n                                N = NN - 1;\r\n                                for(var i = 0; i < NN; i++)\r\n                                    p[i] = qp[i];\r\n                                if(Fxshfr_Par.NZ != 1) {\r\n                                    zeror[j + 1] = Fxshfr_Par.lzr;\r\n                                    zeroi[j + 1] = Fxshfr_Par.lzi;\r\n                                }\r\n                                break;\r\n                            }\r\n                            else {\r\n                                // If the iteration is unsuccessful, another quadratic is chosen after restoring K\r\n                                for(var i = 0; i < N; i++) {\r\n                                    K[i] = temp[i];\r\n                                }\r\n                            }\r\n                        }\r\n                        // Return with failure if no convergence with 20 shifts\r\n                        if(jj > 20) {\r\n                            degPar.Degree -= N;\r\n                            break;\r\n                        }\r\n                    }\r\n                    // >>>>> End Main Loop <<<<<\r\n                    return;\r\n                }\r\n                //--> End Jenkins-Traub\r\n                rpSolve(degreePar, p, zeror, zeroi);\r\n\r\n                var l = zeroi.length;\r\n                //format the output\r\n                for(i = 0; i < l; i++) {\r\n                    // We round the imaginary part to avoid having something crazy like 5.67e-16.\r\n                    var img = round(zeroi[i], decp + 8),\r\n                            real = round(zeror[i], decp + 8);\r\n                    // Did the rounding pay off? If the rounding did nothing more than chop off a few digits then no.\r\n                    // If the rounding results in a a number at least 3 digits shorter we'll keep it else we'll keep \r\n                    // the original otherwise the rounding was worth it.\r\n                    real = decp - String(real).length > 2 ? real : zeror[i];\r\n                    var sign = img < 0 ? '-' : '';\r\n\r\n                    // Remove the zeroes\r\n                    if(real === 0) {\r\n                        real = '';\r\n                    }\r\n                    if(img === 0) {\r\n                        img = '';\r\n                    }\r\n\r\n                    // Remove 1 as the multiplier and discard imaginary part if there isn't one.\r\n                    img = Math.abs(img) === 1 ? sign + 'i' : (img ? img + '*i' : '');\r\n\r\n                    var num = (real && img) ? real + '+' + img : real + img;\r\n                    zeror[i] = num.replace(/\\+\\-/g, '-');\r\n                }\r\n                return zeror;\r\n            }\r\n        },\r\n        roots: function (symbol) {\r\n\r\n            if(symbol.isConstant(true, true)) {\r\n                return core.Utils.nroots(symbol);\r\n            }\r\n            var roots = __.proots(symbol).map(function (x) {\r\n                return _.parse(x);\r\n            });\r\n            return core.Vector.fromArray(roots);\r\n        },\r\n        froot: function (f, guess, dx) {\r\n            var newtonraph = function (xn) {\r\n                var mesh = 1e-12,\r\n                        // If the derivative was already provided then don't recalculate.\r\n                        df = dx ? dx : core.Utils.build(core.Calculus.diff(f.clone())),\r\n                        // If the function was passed in as a function then don't recalculate.\r\n                        fn = f instanceof Function ? f : core.Utils.build(f),\r\n                        max = 10000,\r\n                        done = false,\r\n                        safety = 0;\r\n                while(!done) {\r\n                    var x = xn - (fn(xn) / df(xn));\r\n                    //absolute values for both x & xn ensures that we indeed have the radius    \r\n                    var r = Math.abs(x) - Math.abs(xn),\r\n                            delta = Math.abs(r);\r\n                    xn = x;\r\n\r\n                    if(delta < mesh)\r\n                        done = true;\r\n                    else if(safety > max) {\r\n                        xn = null;\r\n                        done = true;\r\n                    }\r\n\r\n                    safety++;\r\n                }\r\n                return xn;\r\n            };\r\n            return newtonraph(Number(guess));\r\n        },\r\n        quad: function (a, b, c) {\r\n            var q = function (a, b, c, sign) {\r\n                return _.parse('-(' + b + '+' + sign + '*sqrt((' + b + ')^2-4*(' + a + ')*(' + c + ')))/(2*' + a + ')');\r\n            };\r\n            return [q(a, b, c, 1), q(a, b, c, -1)];\r\n        },\r\n        sumProd: function (a, b) {\r\n            return __.quad(-b, a, -1).map(function (x) {\r\n                return x.invert();\r\n            });\r\n        },\r\n        coeffs: function (symbol, wrt, coeffs) {\r\n            wrt = String(wrt);\r\n            symbol = _.expand(symbol);\r\n            coeffs = coeffs || [new Symbol(0)];\r\n            //we cannot get coeffs for group EX\r\n            if(symbol.group === EX && symbol.contains(wrt, true))\r\n                _.error('Unable to get coefficients using expression ' + symbol.toString());\r\n            var vars = variables(symbol);\r\n            if(vars.length === 1 && vars[0] === wrt && !symbol.isImaginary()) {\r\n                var a = new Polynomial(symbol).coeffs.map(function (x) {\r\n                    return new Symbol(x);\r\n                });\r\n\r\n                for(var i = 0, l = a.length; i < l; i++) {\r\n                    var coeff = a[i],\r\n                            e = coeffs[i];\r\n                    if(e)\r\n                        coeff = _.add(e, coeff);\r\n                    coeffs[i] = coeff; //transfer it all over\r\n                }\r\n            }\r\n            else {\r\n                if(!wrt)\r\n                    _.error('Polynomial contains more than one variable. Please specify which variable is to be used!');\r\n                //if the variable isn't part of this polynomial then we're looking at x^0\r\n\r\n                if(vars.indexOf(wrt) === -1) {\r\n                    coeffs[0] = _.add(symbol, coeffs[0]);\r\n                }\r\n                else {\r\n                    coeffs = coeffs || [new Symbol(0)];\r\n                    if(symbol.group === CB) {\r\n                        var s = symbol.symbols[wrt];\r\n                        if(!s)\r\n                            _.error('Expression is not a polynomial!');\r\n                        var p = Number(s.power);\r\n                        coeff = _.divide(symbol.clone(), s.clone());\r\n                        if(coeff.contains(wrt, true) || p < 0 || !isInt(p))\r\n                            _.error('Expression is not a polynomial!');\r\n                        var e = coeffs[p];\r\n                        if(e)\r\n                            coeff = _.add(e, coeff);\r\n                        coeffs[p] = coeff;\r\n                    }\r\n                    else if(symbol.group === CP) {\r\n                        symbol.each(function (x) {\r\n                            __.coeffs(x.clone(), wrt, coeffs);\r\n                        }, true);\r\n                    }\r\n                }\r\n            }\r\n            //fill holes\r\n            for(var i = 0, l = coeffs.length; i < l; i++)\r\n                if(typeof coeffs[i] === 'undefined')\r\n                    coeffs[i] = new Symbol(0);\r\n\r\n            return coeffs;\r\n        },\r\n        /**\r\n         * Get's all the powers of a particular polynomial including the denominators. The denominators powers\r\n         * are returned as negative. All remaining polynomials are returned as zero order polynomials.\r\n         * for example polyPowers(x^2+1/x+y+t) will return [ '-1', 0, '2' ]\r\n         * @param {Symbol} e\r\n         * @param {String} for_variable\r\n         * @param {Array} powers\r\n         * @returns {Array} An array of the powers\r\n         */\r\n        //assumes you've already verified that it's a polynomial\r\n        polyPowers: function (e, for_variable, powers) {\r\n            powers = powers || [];\r\n            var g = g = e.group;\r\n            if(g === PL && for_variable === e.value) {\r\n                powers = powers.concat(keys(e.symbols));\r\n            }\r\n            else if(g === CP) {\r\n                for(var s in e.symbols) {\r\n                    var symbol = e.symbols[s];\r\n                    var g = symbol.group, v = symbol.value;\r\n                    if(g === S && for_variable === v)\r\n                        powers.push(symbol.power);\r\n                    else if(g === PL || g === CP)\r\n                        powers = __.polyPowers(symbol, for_variable, powers);\r\n                    else if(g === CB && symbol.contains(for_variable)) {\r\n                        var t = symbol.symbols[for_variable];\r\n                        if(t)\r\n                            powers.push((t.power));\r\n                    }\r\n                    else if(g === N || for_variable !== v)\r\n                        powers.push(0);\r\n                }\r\n            }\r\n            else if(g === CB && e.contains(for_variable)) {\r\n                powers.push(core.Utils.decompose_fn(e, for_variable, true).x.power);\r\n            }\r\n            return core.Utils.arrayUnique(powers).sort();\r\n        },\r\n        //The factor object\r\n        Factor: {\r\n            //splits the symbol in symbol and constant\r\n            split: function (symbol) {\r\n                var c = new Symbol(1); //the constants part\r\n                var s = new Symbol(1); //the symbolic part\r\n                __.Factor.factor(symbol, new Factors()).each(function (x) {\r\n                    var t = _.parse(x);\r\n                    if(x.isConstant(true)) {\r\n                        c = _.multiply(c, t);\r\n                    }\r\n                    else {\r\n                        s = _.multiply(s, t);\r\n                    }\r\n                });\r\n                return [c, s];\r\n            },\r\n            mix: function (o, include_negatives) {\r\n                var factors = keys(o);\r\n                var l = factors.length;\r\n                var m = [];//create a row which we'r going to be mixing\r\n                for(var i = 0; i < l; i++) {\r\n                    var factor = factors[i],\r\n                            p = o[factor];\r\n                    var ll = m.length;\r\n                    for(var j = 0; j < ll; j++) {\r\n                        var t = m[j] * factor;\r\n                        m.push(t);\r\n                        if(include_negatives)\r\n                            m.push(-t);\r\n                    }\r\n\r\n                    for(var j = 1; j <= p; j++)\r\n                        m.push(Math.pow(factor, j));\r\n                }\r\n                return m;\r\n            },\r\n            //TODO: this method is to replace common factoring\r\n            common: function (symbol, factors) {\r\n                try {\r\n                    if(symbol.group === CP) {\r\n                        //this may have the unfortunate side effect of expanding and factoring again\r\n                        //to only end up with the same result. \r\n                        //TODO: try to avoid this\r\n                        //collect the symbols and sort to have the longest first. Thinking is that the longest terms \r\n                        //has to contain the variable in order for it to be factorable\r\n                        var symbols = _.expand(symbol.clone(), true).collectSymbols(null, null, function (a, b) {\r\n                            return (b.length || 1) - (a.length || 1);\r\n                        });\r\n\r\n                        var map = {}; //create a map of common factors\r\n                        var coeffs = [];\r\n                        for(var i = 0; i < symbols.length; i++) {\r\n                            var sym = symbols[i];\r\n                            coeffs.push(sym.multiplier.clone());\r\n                            sym.each(function (x) {\r\n                                var p = Number(x.power);\r\n                                //This check exits since we have a symbolic power.\r\n                                //For the future... think about removing this check and modify for symbolic powers\r\n                                if(isNaN(p))\r\n                                    throw new Error('exiting');\r\n                                //loop through the symbols and lump together common terms\r\n                                if(x.value in map) {\r\n                                    if(p < map[x.value][0])\r\n                                        map[x.value][0] = p;\r\n                                    map[x.value][1].push(x);\r\n                                }\r\n                                else\r\n                                    map[x.value] = [p, [x]];\r\n                            });\r\n                        }\r\n                        //the factor\r\n                        var factor = new Symbol(1);\r\n                        for(var x in map) {\r\n                            //if this factor is found in all terms since the length of \r\n                            //matching variable terms matches the number of original terms\r\n                            if(map[x][1].length === symbols.length) {\r\n                                //generate a symbol and multiply into the factor\r\n                                factor = _.multiply(factor, _.pow(new Symbol(x), new Symbol(map[x][0])));\r\n                            }\r\n                        }\r\n                        //get coefficient factor\r\n                        var c = core.Math2.QGCD.apply(null, coeffs);\r\n\r\n                        if(!c.equals(1)) {\r\n                            factors.add(new Symbol(c));\r\n                            for(var i = 0; i < symbols.length; i++) {\r\n                                symbols[i].multiplier = symbols[i].multiplier.divide(c);\r\n                            }\r\n                        }\r\n\r\n                        //if we actuall found any factors\r\n                        if(!factor.equals(1)) {\r\n                            factors.add(factor);\r\n                            symbol = new Symbol(0);\r\n                            for(var i = 0; i < symbols.length; i++) {\r\n                                symbol = _.add(symbol, _.divide(symbols[i], factor.clone()));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    ;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            zeroes: function (symbol, factors) {\r\n                var exit = function () {\r\n                    throw new core.exceptions.ValueLimitExceededError('Exiting');\r\n                };\r\n                try {\r\n                    var vars, term, sum, p, e;\r\n                    symbol = _.expand(symbol.clone());\r\n                    e = symbol.toString();\r\n                    vars = variables(symbol);\r\n\r\n                    sum = new Symbol(0);\r\n\r\n                    var terms = [];\r\n                    var powers = [];\r\n\r\n                    //start setting each variable to zero\r\n                    for(var i = 0, l = vars.length; i < vars.length; i++) {\r\n                        var subs = {};\r\n                        //we want to create a subs object with all but the current variable set to zero\r\n                        for(var j = 0; j < l; j++)\r\n                            if(i !== j) //make sure we're not looking at the same variable\r\n                                subs[vars[j]] = 0;\r\n                        term = _.parse(e, subs);\r\n                        var tp = term.power;\r\n                        //the temporary power has to be an integer as well\r\n                        if(!isInt(tp))\r\n                            exit();\r\n                        terms.push(term);\r\n                        powers.push(term.power);\r\n                    }\r\n\r\n                    //get the gcd. This will be the p in (a^n+b^m)^p\r\n                    //if the gcd equals 1 meaning n = m then we need a tie breakder\r\n                    if(core.Utils.allSame(powers)) {\r\n                        //get p given x number of terms\r\n                        var n_terms = symbol.length;\r\n                        //the number of zeroes determines\r\n                        var n_zeroes = terms.length;\r\n                        if(n_zeroes === 2) {\r\n                            p = new Frac(powers[0] / (n_terms - 1));\r\n                        }\r\n                        if(n_zeroes === 3) {\r\n                            p = new Frac(powers[0] / Math.round((Math.sqrt(8 * n_terms - 1) - 3) / 2));\r\n                        }\r\n                        /*\r\n                         //get the lowest possible power\r\n                         //e.g. given b^4+2*a^2*b^2+a^4, the power we're looking for would be 2\r\n                         symbol.each(function(x) {\r\n                         if(x.group === CB)\r\n                         x.each(function(y) {\r\n                         if(!p || y.power.lessThan(p))\r\n                         //p = Number(y.power);\r\n                         p = y.power;\r\n                         });\r\n                         else if(!p || x.power.lessThan(p))\r\n                         //p = Number(x.power);\r\n                         p = x.power;\r\n                         });\r\n                         */\r\n                    }\r\n                    else\r\n                        //p is just the gcd of the powers\r\n                        p = core.Math2.QGCD.apply(null, powers);\r\n\r\n                    //if we don't have an integer then exit\r\n                    if(!isInt(p))\r\n                        exit();\r\n\r\n                    //build the factor\r\n                    for(var i = 0; i < terms.length; i++) {\r\n                        var t = terms[i];\r\n                        var n = t.power.clone().divide(p);\r\n                        t.multiplier = new Frac(Math.pow(t.multiplier, 1 / n));\r\n                        t.power = p.clone();\r\n                        sum = _.add(sum, t);\r\n                    }\r\n\r\n                    //by now we have the factor of zeroes. We'll know if we got it right because \r\n                    //we'll get a remainder of zero each time we divide by it\r\n                    if(sum.group !== CP)\r\n                        return symbol; //nothing to do\r\n\r\n                    while(true) {\r\n                        var d = __.div(symbol.clone(), sum.clone());\r\n                        if(d[1].equals(0)) {\r\n                            symbol = d[0];\r\n                            factors.add(sum.clone());\r\n                            if(symbol.equals(1)) //we've reached 1 so done.\r\n                                break;\r\n                        }\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                catch(e) {\r\n                }\r\n                ;\r\n\r\n                return symbol;\r\n            },\r\n            factor: function (symbol, factors) {\r\n                // Don't try to factor constants\r\n                if(symbol.isConstant()) {\r\n                    return core.Math2.factor(symbol);\r\n                }\r\n\r\n                var _symbol = _.parse(symbol);\r\n                var retval = __.Factor._factor(_symbol, factors);\r\n                if(retval.equals(symbol)) {\r\n                    return retval;\r\n                }\r\n\r\n                if(retval.group === CB) {\r\n                    var t = new Symbol(1);\r\n                    var p = _.parse(retval.power);\r\n                    //store the multiplier and strip it\r\n                    var m = _.parse(retval.multiplier);\r\n\r\n                    retval.toUnitMultiplier();\r\n\r\n                    /* \r\n                     * NOTE: for sign issues with factor START DEBUGGING HERE\r\n                     */\r\n                    //move the sign to t\r\n                    if(retval.multiplier.lessThan(0)) {\r\n                        t.negate();\r\n                        retval.negate();\r\n                    }\r\n\r\n                    retval.each(function (x) {\r\n                        // Related to #566. Since the symbol's group may not have been properly\r\n                        // updated, it's easier to just parse the symbol and have the parser \r\n                        // do the update for us.\r\n                        var factored = _.parse(__.Factor._factor(x));\r\n\r\n                        if(factored.group === CB) {\r\n                            // Include the multiplier\r\n                            m = _.multiply(m, Symbol.create(factored.multiplier));\r\n                            factored.each(function (y) {\r\n                                var _factored = _.parse(__.Factor._factor(y));\r\n                                t = _.multiply(t, _factored);\r\n                                if(_factored.group === CB) {\r\n                                    m = _.multiply(m, Symbol.create(_factored.multiplier));\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            t = _.multiply(t, factored);\r\n                        }\r\n                    });\r\n\r\n                    //put back the multiplier and power\r\n                    retval = _.pow(_.multiply(m, t), p);\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            quadFactor: function (symbol, factors) {\r\n                if(symbol.isPoly() && __.degree(symbol.equals(2))) {\r\n                    //We've  already checked that we're dealing with a polynomial\r\n                    var v = core.Utils.variables(symbol)[0]; //get the variable\r\n                    var coeffs = __.coeffs(symbol, v);\r\n                    //factor the lead coefficient\r\n                    var cf = __.Factor._factor(coeffs[2].clone());\r\n                    //check if we have factors\r\n                    if(cf.group === CB) {\r\n                        var symbols = cf.collectSymbols();\r\n                        //if the factors are greater than 2 we're done so exit\r\n                        if(symbols.length > 2)\r\n                            return symbol;\r\n                        //if we have two factors then attempt to factor the polynomial\r\n                        //let the factors be f1 and f1\r\n                        //let the factors be (ax+b)(cx+d)\r\n                        //let the coefficients be c1x^2+c2x+c3\r\n                        //then a(x1)+c(x2)=c2 and x1*x2=c3\r\n                        //we can solve for x1 and x2\r\n                        var c = _.multiply(_.parse(coeffs[0]), _.parse(symbols[0]));\r\n                        var b = _.parse(coeffs[1]).negate();\r\n                        var a = _.parse(symbols[1]);\r\n                        //solve the system\r\n                        var root = __.quad(a, b, c).filter(function (x) {\r\n                            if(core.Utils.isInt(x))\r\n                                return x;\r\n                        });\r\n                        //if we have one root then find the other one by dividing the constant\r\n                        if(root.length === 1) {\r\n                            var root1 = root[0];\r\n                            var root2 = _.divide(coeffs[0], _.parse(root1));\r\n                            if(core.Utils.isInt(root2)) {\r\n                                //we found them both\r\n                                factors.add(_.parse(format('({0})*({1})+({2})', symbols[1], v, root2)));\r\n                                factors.add(_.parse(format('({0})*({1})+({2})', symbols[0], v, root1)));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return symbol;\r\n            },\r\n            cubeFactor: function (symbol, factors) {\r\n                if(symbol.isComposite()) {\r\n                    var symbols = symbol.collectSymbols();\r\n                    // The symbol should be in the form of a^3+-b^3. The length\r\n                    // should therefore only be two. If it's any different from this\r\n                    // then we're done\r\n                    if(symbols.length === 2) {\r\n                        // Store the signs and then strip them from the symbols\r\n                        var sign_a = symbols[0].sign();\r\n                        var a = symbols[0].clone().abs();\r\n                        var sign_b = symbols[1].sign();\r\n                        var b = symbols[1].clone().abs();\r\n                        // Check if they're cube\r\n                        if(a.isCube() && b.isCube()) {\r\n                            // Keep the negative sign on the right, meaning b is always negative.\r\n                            if(sign_a < sign_b) {\r\n                                // Swap the signs and then the values\r\n                                [sign_a, sign_b] = [sign_b, sign_a];\r\n                                [a, b] = [b, a];\r\n                            }\r\n\r\n                            // Get teh roots\r\n                            var m_root_a = _.parse(a.getNth(3));\r\n                            var m_root_b = _.parse(b.getNth(3));\r\n\r\n                            // Remove the cube for both\r\n                            var x = _.multiply(_.expand(_.pow(a.clone().toUnitMultiplier(), _.parse('1/3'))), m_root_a);\r\n                            var y = _.multiply(_.expand(_.pow(b.clone().toUnitMultiplier(), _.parse('1/3'))), m_root_b);\r\n\r\n                            if(sign_a === 1 && sign_b === -1) {\r\n                                // Apply difference of cubes rule\r\n                                factors.add(_.parse(format('(({0})-({1}))', x, y)));\r\n                                factors.add(_.parse(format('(({0})^2+({0})*({1})+({1})^2)', x, y)));\r\n                                symbol = Symbol(1);\r\n                            }\r\n                            else if(sign_a === 1 && sign_b === 1) {\r\n                                // Apply sum of cubes rule\r\n                                factors.add(_.parse(format('(({0})+({1}))', x, y)));\r\n                                factors.add(_.parse(format('(({0})^2-({0})*({1})+({1})^2)', x, y)));\r\n                                symbol = Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            _factor: function (symbol, factors) {\r\n                var g = symbol.group;\r\n                //some items cannot be factored any further so return those right away\r\n                if(symbol.group === FN) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.group === S && arg.isSimple()) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n                else if(symbol.group === S && symbol.isSimple()) {\r\n                    return symbol;\r\n                }\r\n\r\n                // Expand the symbol to get it in a predictable form. If this step\r\n                // is skipped some factors are missed.\r\n                //if(symbol.group === CP && !(even(symbol.power) && symbol.multiplier.lessThan(0))) {\r\n                if(symbol.group === CP) {\r\n                    symbol.distributeMultiplier(true);\r\n                    var t = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        if((x.group === CP && x.power.greaterThan(1) || x.group === CB))\r\n                            x = _.expand(x);\r\n                        t = _.add(t, x);\r\n                    });\r\n                    t.power = symbol.power;\r\n\r\n                    symbol = t;\r\n                }\r\n\r\n                if(symbol.group === FN && symbol.fname !== 'sqrt') {\r\n                    symbol = core.Utils.evaluate(symbol);\r\n                }\r\n\r\n                //make a copy of the symbol to return if something goes wrong\r\n                var untouched = symbol.clone();\r\n                try {\r\n                    if(symbol.group === CB) {\r\n                        var p = _.parse(symbol.power);\r\n\r\n                        var den_array, num_array, den, num, dfact, nfact;\r\n                        //grab the denominator and strip the multiplier and power. Store them in an array\r\n                        den_array = __.Simplify.strip(symbol.getDenom());\r\n                        num_array = __.Simplify.strip(symbol.getNum());\r\n\r\n                        den = den_array.pop();\r\n                        num = num_array.pop();\r\n\r\n                        //if the numerator equals the symbol then we've hit the simplest form and then we're done\r\n                        if(num.equals(symbol)) {\r\n                            return symbol;\r\n                        }\r\n                        nfact = __.Factor.factor(num);\r\n                        dfact = __.Factor.factor(den);\r\n\r\n                        var n = __.Simplify.unstrip(num_array, nfact);\r\n                        var d = __.Simplify.unstrip(den_array, dfact);\r\n\r\n                        var retval = _.divide(n, d);\r\n\r\n                        return retval;\r\n                    }\r\n                    if(symbol.group === S) {\r\n                        return symbol; //absolutely nothing to do\r\n                    }\r\n\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol.equals(1))\r\n                            return symbol.clone();\r\n                        var ret = core.Math2.factor(symbol);\r\n                        return ret;\r\n                    }\r\n\r\n                    var p = symbol.power.clone();\r\n\r\n                    if(isInt(p) && !(p.lessThan(0) && symbol.group === FN)) {\r\n                        var sign = p.sign();\r\n                        symbol.toLinear();\r\n                        factors = factors || new Factors();\r\n                        var map = {};\r\n                        symbol = _.parse(core.Utils.subFunctions(symbol, map));\r\n                        if(keys(map).length > 0) { //it might have functions\r\n                            factors.preAdd = function (factor) {\r\n                                var ret = _.parse(factor, core.Utils.getFunctionsSubs(map));\r\n                                return ret;\r\n                            };\r\n                        }\r\n\r\n                        //strip the power\r\n                        if(!symbol.isLinear()) {\r\n                            factors.pFactor = symbol.power.toString();\r\n                            symbol.toLinear();\r\n                        }\r\n\r\n                        var vars = variables(symbol);\r\n                        //bypass for imaginary. TODO: find a better solution\r\n                        if(symbol.isImaginary()) {\r\n                            vars.push(core.Settings.IMAGINARY);\r\n                        }\r\n                        var multiVar = vars.length > 1;\r\n\r\n                        //minor optimization. Seems to cut factor time by half in some cases.\r\n                        if(multiVar) {\r\n                            var all_S = true, all_unit = true;\r\n                            symbol.each(function (x) {\r\n                                if(x.group !== S)\r\n                                    all_S = false;\r\n                                if(!x.multiplier.equals(1))\r\n                                    all_unit = false;\r\n                            });\r\n\r\n                            if(all_S && all_unit) {\r\n                                return _.pow(_.parse(symbol, core.Utils.getFunctionsSubs(map)), _.parse(p));\r\n                            }\r\n                        }\r\n\r\n                        //factor the coefficients\r\n                        var coeff_factors = new Factors();\r\n\r\n                        symbol = __.Factor.coeffFactor(symbol, coeff_factors);\r\n\r\n                        coeff_factors.each(function (x) {\r\n                            // If the factor was negative but was within a square then it becomes positive\r\n                            if(even(p) && x.lessThan(0)) {\r\n                                x.negate();\r\n                            }\r\n\r\n                            if(sign < 0)\r\n                                x.invert();\r\n                            factors.add(x);\r\n                        });\r\n\r\n                        //factor the power\r\n                        var power_factors = new Factors();\r\n                        symbol = __.Factor.powerFactor(symbol, power_factors);\r\n                        power_factors.each(function (x) {\r\n                            if(sign < 0)\r\n                                x.invert();\r\n                            factors.add(x);\r\n                        });\r\n\r\n                        if(!multiVar) {\r\n                            //pass in vars[0] for safety\r\n                            var v = vars[0];\r\n\r\n                            symbol = __.Factor.squareFree(symbol, factors, v);\r\n\r\n                            var t_factors = new Factors();\r\n\r\n                            symbol = __.Factor.trialAndError(symbol, t_factors, v);\r\n\r\n                            //generate a symbol based off the last factors\r\n                            var tf_symbol = t_factors.toSymbol();\r\n                            //if nothing was factored then return the factors\r\n                            if(tf_symbol.equals(untouched)) {\r\n                                return tf_symbol;\r\n                            }\r\n\r\n                            for(var x in t_factors.factors) {\r\n                                //store the current factor in t_factor\r\n                                var t_factor = t_factors.factors[x];\r\n                                factors.add(_.pow(t_factor, _.parse(p)));\r\n                            }\r\n                            //if we still don't have a factor and it's quadratic then let's just do a quad factor\r\n                            if(symbol.equals(untouched)) {\r\n                                symbol = __.Factor.quadFactor(symbol, factors);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            // Try sum and difference of cubes\r\n                            symbol = __.Factor.cubeFactor(symbol, factors);\r\n\r\n                            symbol = __.Factor.mfactor(symbol, factors);\r\n\r\n                            //put back the sign of power\r\n                            factors.each(function (x) {\r\n                                if(sign < 0)\r\n                                    x.power.negate();\r\n                            });\r\n                        }\r\n\r\n                        //last minute clean up\r\n                        symbol = _.parse(symbol, core.Utils.getFunctionsSubs(map));\r\n                        \r\n                        var addPower = factors.length === 1;\r\n                        \r\n                        factors.add(_.pow(symbol, _.parse(p)));\r\n\r\n                        var retval = factors.toSymbol();\r\n                        \r\n                        // We may have only factored out the symbol itself so we end up with a factor of one \r\n                        // where the power needs to be placed back\r\n                        // e.g. factor((2*y+p)^2). Here we end up having a factor of 1 remaining and a p of 2.\r\n                        if(addPower && symbol.equals(1) && retval.isLinear()) {\r\n                            retval = _.pow(retval, _.parse(p));\r\n                        }\r\n                        \r\n                        return retval;\r\n                    }\r\n\r\n                    return symbol;\r\n                }\r\n                catch(e) {\r\n                    //no need to stop the show because something went wrong :). Just return the unfactored.\r\n                    return untouched;\r\n                }\r\n            },\r\n            reduce: function (symbol, factors) {\r\n                if(symbol.group === CP && symbol.length === 2) {\r\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                        return b.multiplier - a.multiplier;\r\n                    });\r\n                    if(symbols[0].power.equals(symbols[1].power)) {\r\n                        //x^n-a^n\r\n                        var n = _.parse(symbols[0].power),\r\n                                a = symbols[0].clone().toLinear(),\r\n                                b = symbols[1].clone().toLinear();\r\n\r\n                        //apply rule: (a-b)*sum(a^(n-i)*b^(i-1),1,n)\r\n                        factors.add(_.add(a.clone(), b.clone()));\r\n                        //flip the sign\r\n                        b.negate();\r\n                        //turn n into a number\r\n                        var nn = Number(n);\r\n                        //the remainder\r\n                        var result = new Symbol(0);\r\n                        for(var i = 1; i <= nn; i++) {\r\n                            var aa = _.pow(a.clone(), _.subtract(n.clone(), new Symbol(i))),\r\n                                    bb = _.pow(b.clone(), _.subtract(new Symbol(i), new Symbol(1)));\r\n                            result = _.add(result, _.multiply(aa, bb));\r\n                        }\r\n                        return result;\r\n                    }\r\n                }\r\n                return symbol;\r\n            },\r\n            /**\r\n             * Makes Symbol square free\r\n             * @param {Symbol} symbol\r\n             * @param {Factors} factors\r\n             * @@param {String} variable The variable which is being factored \r\n             * @returns {[Symbol, Factor]}\r\n             */\r\n            squareFree: function (symbol, factors, variable) {\r\n                if(symbol.isConstant() || symbol.group === S)\r\n                    return symbol;\r\n\r\n                var poly = new Polynomial(symbol, variable);\r\n                var sqfr = poly.squareFree();\r\n                var p = sqfr[2];\r\n                //if we found a square then the p entry in the array will be non-unit\r\n                if(p !== 1) {\r\n                    //make sure the remainder doesn't have factors\r\n                    var t = sqfr[1].toSymbol();\r\n                    t.power = t.power.multiply(new Frac(p));\r\n                    //send the factor to be fatored to be sure it's completely factored\r\n                    factors.add(__.Factor.factor(t));\r\n\r\n                    var retval = __.Factor.squareFree(sqfr[0].toSymbol(), factors);\r\n\r\n                    return retval;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            /**\r\n             * Factors the powers such that the lowest power is a constant\r\n             * @param {Symbol} symbol\r\n             * @param {Factors} factors\r\n             * @returns {[Symbol, Factor]}\r\n             */\r\n            powerFactor: function (symbol, factors) {\r\n                //only PL need apply\r\n                if(symbol.group !== PL || symbol.previousGroup === EX)\r\n                    return symbol;\r\n                var k = keys(symbol.symbols);\r\n                //we expect only numeric powers so return all else\r\n                if(!core.Utils.allNumeric(k))\r\n                    return symbol;\r\n\r\n                var d = core.Utils.arrayMin(k);\r\n                var retval = new Symbol(0);\r\n                var q = _.parse(symbol.value + '^' + d);\r\n                symbol.each(function (x) {\r\n                    x = _.divide(x, q.clone());\r\n                    retval = _.add(retval, x);\r\n                });\r\n\r\n                factors.add(q);\r\n                return retval;\r\n            },\r\n            /**\r\n             * Removes GCD from coefficients\r\n             * @param {Symbol} symbol\r\n             * @param {Factor} factors\r\n             * @returns {Symbol}\r\n             */\r\n            coeffFactor: function (symbol, factors) {\r\n                if(symbol.isComposite()) {\r\n                    var gcd = core.Math2.QGCD.apply(null, symbol.coeffs());\r\n\r\n                    if(!gcd.equals(1)) {\r\n                        symbol.each(function (x) {\r\n                            if(x.isComposite()) {\r\n                                x.each(function (y) {\r\n                                    y.multiplier = y.multiplier.divide(gcd);\r\n                                });\r\n                            }\r\n                            else\r\n                                x.multiplier = x.multiplier.divide(gcd);\r\n                        });\r\n                        symbol.updateHash();\r\n                    }\r\n                    else {\r\n                        // TODO: This should probably go to the prototype\r\n                        var power = function (symbol) {\r\n                            var p;\r\n                            if(symbol.group === CB) {\r\n                                p = 0;\r\n                                symbol.each(function (x) {\r\n                                    p += x.power;\r\n                                });\r\n                            }\r\n                            else {\r\n                                p = Number(symbol.power);\r\n                            }\r\n                            return p;\r\n                        };\r\n                        // Factor out negatives from the lead term\r\n                        var terms = symbol.collectSymbols(null, null, null, true).sort(function (a, b) {\r\n                            // Push constants to the back\r\n                            if(a.isConstant(true))\r\n                                return 1;\r\n                            return b.power - a.power;\r\n                        });\r\n\r\n                        var LT = terms[0];\r\n\r\n                        // Check if the LT is indeed the greatest\r\n                        if(power(LT) > power(terms[1]) || terms[1].isConstant(true)) {\r\n                            if(LT.multiplier.lessThan(0)) {\r\n                                // Although the symbol should always be linear at this point, remove the negative for squares\r\n                                // to be safe.\r\n                                factors.add(new Symbol(-1));\r\n\r\n                                symbol.each(function (x) {\r\n                                    x.negate();\r\n                                }, true);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                    if(factors) {\r\n                        factors.add(new Symbol(gcd));\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            /**\r\n             * The name says it all :)\r\n             * @param {Symbol} symbol\r\n             * @param {Factor} factors\r\n             * @@param {String} variable \r\n             * @returns {Symbol}\r\n             */\r\n            trialAndError: function (symbol, factors, variable) {\r\n                var untouched = symbol.clone();\r\n                try {\r\n                    // At temp holder for the factors. If all goes well then\r\n                    // they'll be moved to the actual factors.\r\n                    var factor_array = [];\r\n\r\n                    if(symbol.isConstant() || symbol.group === S)\r\n                        return symbol;\r\n                    var poly = new Polynomial(symbol, variable),\r\n                            cnst = poly.coeffs[0],\r\n                            cfactors = core.Math2.ifactor(cnst),\r\n                            roots = __.proots(symbol);\r\n                    for(var i = 0; i < roots.length; i++) {\r\n                        var r = roots[i],\r\n                                p = 1;\r\n                        if(!isNaN(r)) { //if it's a number\r\n                            for(var x in cfactors) {\r\n                                //check it's raised to a power\r\n                                var n = core.Utils.round(Math.log(x) / Math.log(Math.abs(r)), 8);\r\n                                if(isInt(n)) {\r\n                                    r = x; //x must be the root since n gave us a whole\r\n                                    p = n;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            var root = new Frac(r),\r\n                                    terms = [new Frac(root.num).negate()];\r\n                            terms[p] = new Frac(root.den);\r\n                            //convert to Frac. The den is coeff of LT and the num is coeff of constant\r\n                            var div = Polynomial.fromArray(terms, poly.variable).fill(),\r\n                                    t = poly.divide(div);\r\n                            if(t[1].equalsNumber(0)) { //if it's zero we have a root and divide it out\r\n                                poly = t[0];\r\n                                // factors.add(div.toSymbol());\r\n                                factor_array.push(div.toSymbol());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if(!poly.equalsNumber(1)) {\r\n                        poly = __.Factor.search(poly, factors);\r\n                    }\r\n\r\n                    // Move the factors over since all went well.\r\n                    factor_array.forEach(function (x) {\r\n                        factors.add(x);\r\n                    });\r\n\r\n                    return poly.toSymbol();\r\n                }\r\n                catch(e) {\r\n                    return untouched;\r\n                }\r\n            },\r\n            search: function (poly, factors, base) {\r\n                base = base || 10; //I like 10 because numbers exhibit similar behaviours at 10\r\n                var v = poly.variable; //the polynmial variable name\r\n                /**\r\n                 * Attempt to remove a root by division given a number by first creating\r\n                 * a polynomial fromt he given information\r\n                 * @param {int} c1 - coeffient for the constant\r\n                 * @param {int} c2 - coefficient for the LT\r\n                 * @param {int} n - the number to be used to construct the polynomial\r\n                 * @param {int} p - the power at which to create the polynomial\r\n                 * @returns {null|Polynomial} - returns polynomial if successful otherwise null\r\n                 */\r\n                var check = function (c1, c2, n, p) {\r\n                    var candidate = Polynomial.fit(c1, c2, n, base, p, v);\r\n                    if(candidate && candidate.coeffs.length > 1) {\r\n                        var t = poly.divide(candidate);\r\n                        if(t[1].equalsNumber(0)) {\r\n                            factors.add(candidate.toSymbol());\r\n                            return [t[0], candidate];\r\n                        }\r\n                    }\r\n                    return null;\r\n                };\r\n                var cnst = poly.coeffs[0];\r\n                var cfactors = core.Math2.ifactor(cnst);\r\n                var lc = poly.lc();\r\n                var ltfactors = core.Math2.ifactor(lc);\r\n                var subbed = poly.sub(base);\r\n                var isubbed = core.Math2.ifactor(subbed);\r\n                var nfactors = __.Factor.mix(isubbed, subbed < 0);\r\n                var cp = Math.ceil(poly.coeffs.length / 2);\r\n                var lc_is_neg = lc.lessThan(0);\r\n                var cnst_is_neg = cnst.lessThan(0);\r\n                ltfactors['1'] = 1;\r\n                cfactors['1'] = 1;\r\n                while(cp--) {\r\n                    for(var x in ltfactors) {\r\n                        for(var y in cfactors) {\r\n                            for(var i = 0; i < nfactors.length; i++) {\r\n                                var factor_found = check(x, y, nfactors[i], cp);\r\n                                if(factor_found) {\r\n                                    poly = factor_found[0];\r\n                                    if(!core.Utils.isPrime(poly.sub(base)))\r\n                                        poly = __.Factor.search(poly, factors);\r\n                                    return poly;\r\n                                }\r\n                                else if(!factor_found) {\r\n                                    if(lc_is_neg && cnst_is_neg)\r\n                                        factor_found = check(-x, -y, nfactors[i], cp);\r\n                                    else if(lc_is_neg)\r\n                                        factor_found = check(-x, y, nfactors[i], cp); //check a negative lc\r\n                                    else if(cnst_is_neg)\r\n                                        factor_found = check(x, -y, nfactors[i], cp); //check a negative constant\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return poly;\r\n            },\r\n            /**\r\n             * Equivalent of square free factor for multivariate polynomials\r\n             * @param {type} symbol\r\n             * @param {type} factors\r\n             * @returns {AlgebraL#18.Factor.mSqfrFactor.symbol|Array|AlgebraL#18.__.Factor.mSqfrFactor.d}\r\n             */\r\n            mSqfrFactor: function (symbol, factors) {\r\n                if(symbol.group !== FN) {\r\n                    var vars = variables(symbol).reverse();\r\n\r\n                    // Loop through all the variable and remove the partial derivatives\r\n                    for(var i = 0; i < vars.length; i++) {\r\n                        do {\r\n                            if(vars[i] === symbol.value) {\r\n                                //the derivative tells us nothing since this symbol is already the factor\r\n                                factors.add(symbol);\r\n                                symbol = new Symbol(1);\r\n                                continue;\r\n                            }\r\n\r\n                            var diff = core.Calculus.diff(symbol, vars[i]);\r\n\r\n                            var d = __.Factor.coeffFactor(diff);\r\n\r\n                            if(d.equals(0))\r\n                                break;\r\n\r\n                            //trial division to see if factors have whole numbers. \r\n                            //This can be optimized by stopping as soon as can_divide is false\r\n                            //this will also need utilize big number at some point\r\n                            var can_divide = true;\r\n                            if(d.isConstant() && symbol.isComposite()) {\r\n                                //check the coefficients\r\n\r\n                                symbol.each(function (x) {\r\n                                    if(x.multiplier % d !== 0)\r\n                                        can_divide = false;\r\n                                }, true);\r\n                            }\r\n\r\n                            //if we can divide then do so\r\n                            if(can_divide) {\r\n\r\n                                var div = __.div(symbol, d.clone()),\r\n                                        is_factor = div[1].equals(0);\r\n                                \r\n                                // Break infinite loop for factoring e^t*x-1\r\n                                if((symbol.equals(div[0]) && div[1].equals(0))) {\r\n                                    break;\r\n                                }\r\n                                \r\n                                if(div[0].isConstant()) {\r\n                                    factors.add(div[0]);\r\n                                    break;\r\n                                }\r\n                                \r\n                            }\r\n                            else\r\n                                is_factor = false;\r\n\r\n                            if(is_factor) {\r\n                                factors.add(div[0]);\r\n                                symbol = d;\r\n                            }\r\n                        }\r\n                        while(is_factor)\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            //difference of squares factorization\r\n            sqdiff: function (symbol, factors) {\r\n                if(symbol.isConstant('all')) {\r\n                    // Nothing to do\r\n                    return symbol;\r\n                }\r\n\r\n                try {\r\n                    var remove_square = function (x) {\r\n                        return core.Utils.block('POSITIVE_MULTIPLIERS', function () {\r\n                            return Symbol.unwrapPARENS(math.sqrt(math.abs(x)));\r\n                        }, true);\r\n                    };\r\n                    var separated = core.Utils.separate(symbol.clone());\r\n\r\n                    var obj_array = [];\r\n\r\n                    //get the unique variables\r\n                    for(var x in separated) {\r\n                        if(x !== 'constants') {\r\n                            obj_array.push(separated[x]);\r\n                        }\r\n                    }\r\n                    obj_array.sort(function (a, b) {\r\n                        return b.power - a.power;\r\n                    });\r\n\r\n                    //if we have the same number of variables as unique variables then we can apply the difference of squares\r\n                    if(obj_array.length === 2) {\r\n                        var a, b;\r\n                        a = obj_array.pop();\r\n                        b = obj_array.pop();\r\n\r\n                        if(even(a.power) && even(b.power)\r\n                                && a.sign() === b.sign()\r\n                                && a.group === S && b.group === S) {\r\n                            throw new Error('Unable to factor');\r\n                        }\r\n                        ;\r\n\r\n                        if(a.isComposite() && b.power.equals(2)) {\r\n                            //remove the square from b\r\n                            b = remove_square(b);\r\n                            var f = __.Factor.factor(_.add(a, separated.constants));\r\n                            if(f.power.equals(2)) {\r\n                                f.toLinear();\r\n                                factors.add(_.subtract(f.clone(), b.clone()));\r\n                                factors.add(_.add(f, b));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                        else {\r\n                            a = a.powSimp();\r\n                            b = b.powSimp();\r\n\r\n                            if((a.group === S || a.fname === '') && a.power.equals(2) && (b.group === S || b.fname === '') && b.power.equals(2) && !separated.constants) {\r\n                                if(a.multiplier.lessThan(0)) {\r\n                                    var t = b;\r\n                                    b = a;\r\n                                    a = t;\r\n                                }\r\n                                if(a.multiplier.greaterThan(0)) {\r\n                                    a = remove_square(a);\r\n                                    b = remove_square(b);\r\n                                }\r\n\r\n                                factors.add(_.subtract(a.clone(), b.clone()));\r\n                                factors.add(_.add(a, b));\r\n                                symbol = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    ;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            //factoring for multivariate\r\n            mfactor: function (symbol, factors) {\r\n\r\n                if(symbol.group === FN) {\r\n                    if(symbol.fname === 'sqrt') {\r\n                        var factors2 = new Factors(),\r\n                                arg = __.Factor.common(symbol.args[0].clone(), factors2);\r\n                        arg = __.Factor.coeffFactor(arg, factors2);\r\n                        symbol = _.multiply(_.symfunction('sqrt', [arg]), _.parse(symbol.multiplier));\r\n                        factors2.each(function (x) {\r\n                            symbol = _.multiply(symbol, _.parse(core.Utils.format('sqrt({0})', x)));\r\n                        });\r\n                    }\r\n                    else\r\n                        factors.add(symbol);\r\n                }\r\n                else {\r\n\r\n                    //square free factorization\r\n                    symbol = __.Factor.mSqfrFactor(symbol, factors);\r\n\r\n                    //try factor out common factors\r\n                    //symbol = __.Factor.common(symbol, factors);\r\n\r\n                    var vars = variables(symbol),\r\n                            symbols = symbol.collectSymbols().map(function (x) {\r\n                        return Symbol.unwrapSQRT(x);\r\n                    }),\r\n                            sorted = {},\r\n                            maxes = {},\r\n                            l = vars.length, n = symbols.length;\r\n                    //take all the variables in the symbol and organize by variable name\r\n                    //e.g. a^2+a^2+b*a -> {a: {a^3, a^2, b*a}, b: {b*a}}\r\n\r\n                    for(var i = 0; i < l; i++) {\r\n                        var v = vars[i];\r\n                        sorted[v] = new Symbol(0);\r\n                        for(var j = 0; j < n; j++) {\r\n                            var s = symbols[j];\r\n                            if(s.contains(v)) {\r\n                                var p = s.value === v ? s.power.toDecimal() : s.symbols[v].power.toDecimal();\r\n                                if(!maxes[v] || p < maxes[v])\r\n                                    maxes[v] = p;\r\n                                sorted[v] = _.add(sorted[v], s.clone());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for(var x in sorted) {\r\n                        var r = _.parse(x + '^' + maxes[x]);\r\n                        var div = _.divide(sorted[x], r);\r\n                        var new_factor = _.expand(div);\r\n\r\n                        if(new_factor.equals(1))\r\n                            break; //why divide by one. Just move \r\n                        var divided = __.div(symbol.clone(), new_factor);\r\n\r\n                        if(divided[0].equals(0)) {\r\n                            //cant factor anymore\r\n                            break;\r\n                        }\r\n\r\n                        // We potentially ended up with fractional coefficients when the\r\n                        // trial division was performed. We need to remove \r\n                        // This check will more then likely become superfluous with improvements\r\n                        // to polynomial division\r\n                        if(divided[1].equals(0)) {\r\n                            var has_fractions = false;\r\n\r\n                            divided[0].each(function (x) {\r\n                                if(!isInt(x.multiplier)) {\r\n                                    has_fractions = true;\r\n                                }\r\n                            });\r\n\r\n                            // The factor isn't really a factor and needs to be put back\r\n                            if(has_fractions) {\r\n                                divided[1] = _.expand(_.multiply(divided[1], new_factor));\r\n                                // Since the new factor is not just one, we exit.\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        var neg_numeric_factor = isInt(new_factor) && new_factor.lessThan(0);\r\n\r\n                        if(divided[1].equals(0) && !neg_numeric_factor) { //we found at least one factor\r\n\r\n                            //factors.add(new_factor);\r\n                            var d = __.div(symbol.clone(), divided[0].clone());\r\n                            var r = d[0];\r\n\r\n                            // Nothing left to do since we didn't get a reduction\r\n                            if(r.equals(0)) {\r\n                                return symbol;\r\n                            }\r\n\r\n                            symbol = d[1];\r\n                            //we don't want to just flip the sign. If the remainder is -1 then we accomplished nothing\r\n                            //and we just return the symbol;\r\n                            //If r equals zero then there's nothing left to do so we're done\r\n\r\n                            if(r.equals(-1) && !symbol.equals(0))\r\n                                return symbol;\r\n\r\n                            var factor = divided[0];\r\n\r\n                            if(symbol.equals(factor)) {\r\n                                var rem = __.Factor.reduce(factor, factors);\r\n\r\n                                if(!symbol.equals(rem))\r\n                                    return __.Factor.mfactor(rem, factors);\r\n\r\n                                return rem;\r\n                            }\r\n                            else {\r\n                                factors.add(factor);\r\n                                //if the remainder of the symbol is zero then we're done. TODO: Rethink this logic a bit.\r\n                                if(symbol.equals(0))\r\n                                    return r;\r\n                            }\r\n\r\n                            if(r.isConstant('all')) {\r\n                                factors.add(r);\r\n                                return r;\r\n                            }\r\n\r\n                            return __.Factor.mfactor(r, factors);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                //difference of squares factorization\r\n                symbol = __.Factor.sqdiff(symbol, factors);\r\n\r\n                //factors by fishing for zeroes\r\n                symbol = __.Factor.zeroes(symbol, factors);\r\n\r\n                return symbol;\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a set of \"equations\" is linear. \r\n         * @param {type} set\r\n         * @returns {Boolean}\r\n         */\r\n        allLinear: function (set) {\r\n            var l = set.length;\r\n            for(var i = 0; i < l; i++) {\r\n                if(!__.isLinear(set[i]))\r\n                    return false;\r\n            }\r\n            return true;\r\n        },\r\n        /*\r\n         * Checks to see if the \"equation\" is linear\r\n         * @param {Symbol} e\r\n         * @returns {boolean}\r\n         */\r\n        isLinear: function (e) {\r\n            var status = false, g = e.group;\r\n            if(g === PL || g === CP) {\r\n                status = true;\r\n                for(var s in e.symbols) {\r\n                    var symbol = e.symbols[s], sg = symbol.group;\r\n                    if(sg === FN || sg === EX) {\r\n                        status = false;\r\n                    }\r\n                    if(sg === CB) {\r\n                        //needs further checking since it might be imaginary\r\n                        status = variables(symbol).length === 1;\r\n                    }\r\n                    else {\r\n                        if(sg === PL || sg === CP)\r\n                            status = __.isLinear(symbol);\r\n                        else {\r\n                            if(symbol.group !== N && symbol.power.toString() !== '1') {\r\n                                status = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if(g === S && e.power === 1)\r\n                status = true;\r\n            return status;\r\n        },\r\n        gcd: function () {\r\n            var args;\r\n            if(arguments.length === 1 && arguments[0] instanceof core.Vector)\r\n                args = arguments[0].elements;\r\n            else\r\n                args = core.Utils.arguments2Array(arguments);\r\n\r\n            //short-circuit early\r\n            if(args.length === 0)\r\n                return new Symbol(1);\r\n            else if(args.length === 1)\r\n                return args[0];\r\n\r\n            var appeared = [], evaluate = false;\r\n            for(var i = 0; i < args.length; i++) {\r\n                if(args[i].group === FN && args[i].fname === 'gcd')\r\n                {\r\n                    //compress gcd(a,gcd(b,c)) into gcd(a,b,c)\r\n                    args = args.concat(arguments[i].args);\r\n                    //do not keep gcd in args\r\n                    args.splice(i, 1);\r\n                }\r\n                else\r\n                {\r\n                    //Look if there are any common variables such that\r\n                    //gcd(a,b) => gcd(a,b); gcd(a,a) => a\r\n                    var vars = variables(args[i]);\r\n                    if(core.Utils.haveIntersection(vars, appeared))\r\n                    {\r\n                        //Ok, there are common variables\r\n                        evaluate = true;\r\n                        break;\r\n                    }\r\n                    else\r\n                        appeared = appeared.concat(vars);\r\n                }\r\n            }\r\n\r\n            //appeared.length is 0 when all arguments are group N\r\n            if(evaluate || appeared.length === 0) {\r\n                //TODO: distribute exponent so that (a^-1*b^-1)^-1 => a*b\r\n                if(args.every(function (symbol) {\r\n                    return symbol.getDenom().equals(1)\r\n                })) {\r\n                    var aggregate = args[0];\r\n\r\n                    for(var i = 1; i < args.length; i++) {\r\n                        aggregate = __.gcd_(args[i], aggregate);\r\n                    }\r\n                    return aggregate;\r\n                }\r\n                else {\r\n                    //gcd_ cannot handle denominators correctly\r\n                    return _.divide(__.gcd.apply(null, args.map(function (symbol) {\r\n                        return symbol.getNum();\r\n                    })),\r\n                            __.lcm.apply(null, args.map(function (symbol) {\r\n                                return symbol.getDenom();\r\n                            })));\r\n                }\r\n            }\r\n            else\r\n                return _.symfunction('gcd', args);\r\n        },\r\n        gcd_: function (a, b) {\r\n            if(a.group === FN || a.group === P)\r\n                a = core.Utils.block('PARSE2NUMBER', function () {\r\n                    return _.parse(a);\r\n                });\r\n\r\n            if(b.group === FN)\r\n                b = core.Utils.block('PARSE2NUMBER', function () {\r\n                    return _.parse(b);\r\n                });\r\n\r\n            if(a.isConstant() && b.isConstant()) {\r\n                // return core.Math2.QGCD(new Frac(+a), new Frac(+b));\r\n                return new Symbol(core.Math2.QGCD(new Frac(+a), new Frac(+b)));\r\n            }\r\n\r\n            var den = _.multiply(a.getDenom() || new Symbol(1), b.getDenom() || new Symbol(1)).invert();\r\n            a = _.multiply(a.clone(), den.clone());\r\n            b = _.multiply(b.clone(), den.clone());\r\n\r\n            //feels counter intuitive but it works. Issue #123 (nerdamer(\"gcd(x+y,(x+y)^2)\"))\r\n            a = _.expand(a);\r\n            b = _.expand(b);\r\n\r\n            if(a.group === CB || b.group === CB) {\r\n                var q = _.divide(a.clone(), b.clone()); //get the quotient\r\n                var t = _.multiply(b.clone(), q.getDenom().invert());//multiply by the denominator\r\n                //if they have a common factor then the result will not equal one \r\n                if(!t.equals(1))\r\n                    return t;\r\n            }\r\n\r\n            //just take the gcd of each component when either of them is in group EX\r\n            if(a.group === EX || b.group === EX)\r\n            {\r\n                var gcd_m = new Symbol(core.Math2.GCD(a.multiplier, b.multiplier));\r\n                var gcd_v = __.gcd_(a.value === CONST_HASH ? new Symbol(1) : _.parse(a.value), b.value === CONST_HASH ? new Symbol(1) : _.parse(b.value));\r\n                var gcd_p = __.gcd_(_.parse(a.power), _.parse(b.power));\r\n                return _.multiply(gcd_m, _.pow(gcd_v, gcd_p));\r\n            }\r\n\r\n            if(a.length < b.length) { //swap'm\r\n                var t = a;\r\n                a = b;\r\n                b = t;\r\n            }\r\n            var vars_a = variables(a), vars_b = variables(b);\r\n            if((vars_a.length === vars_b.length && vars_a.length === 1 && vars_a[0] === vars_b[0])\r\n                    || vars_a.length === 1 && vars_b.length === 0\r\n                    || vars_a.length === 0 && vars_b.length === 1) {\r\n                a = new Polynomial(a);\r\n                b = new Polynomial(b);\r\n                return _.divide(a.gcd(b).toSymbol(), den);\r\n            }\r\n            else {\r\n                //get the gcd of the multipiers\r\n                //get rid of gcd in coeffs\r\n                var multipliers = [];\r\n                a.each(function (x) {\r\n                    multipliers.push(x.multiplier);\r\n                });\r\n                b.each(function (x) {\r\n                    multipliers.push(x.multiplier);\r\n                });\r\n\r\n                var T;\r\n                while(!b.equals(0)) {\r\n                    var t = b.clone();\r\n                    a = a.clone();\r\n                    T = __.div(a, t);\r\n\r\n                    b = T[1];\r\n                    if(T[0].equals(0)) {\r\n                        //return _.multiply(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), b);\r\n                        return _.divide(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), den);\r\n                    }\r\n                    a = t;\r\n                }\r\n\r\n                var gcd = core.Math2.QGCD.apply(undefined, multipliers);\r\n\r\n                if(!gcd.equals(1)) {\r\n                    a.each(function (x) {\r\n                        x.multiplier = x.multiplier.divide(gcd);\r\n                    });\r\n                }\r\n\r\n                //return symbolic function for gcd in indeterminate form\r\n                if(a.equals(1) && !a.isConstant() && !b.isConstant())\r\n                    return _.divide(_.symfunction('gcd', arguments), den);\r\n\r\n                return _.divide(a, den);\r\n            }\r\n        },\r\n        lcm: function () {\r\n            //https://math.stackexchange.com/a/319310\r\n            //generalization of the 2-variable formula of lcm\r\n\r\n            var args;\r\n            if(arguments.length === 1)\r\n                if(arguments[0] instanceof core.Vector)\r\n                    args = arguments[0].elements;\r\n                else\r\n                    _.error('lcm expects either 1 vector or 2 or more arguments');\r\n            else\r\n                args = core.Utils.arguments2Array(arguments);\r\n\r\n            //product of all arguments\r\n            //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\r\n            var numer = args.reduce(function (prev, curr) {\r\n                return _.multiply(prev, curr.clone())\r\n            }, new Symbol(1));\r\n\r\n            //gcd of complementary terms\r\n            var denom_args =\r\n                    //https://stackoverflow.com/a/18223072\r\n                //take all complementary terms, e.g.\r\n                //[a,b,c] => [a*b, b*c, a*c]\r\n                //[a,b,c,d] => [a*b*c, a*b*d, a*c*d, b*c*d]\r\n                (function (input, size) {\r\n                        size = Number(size);\r\n                        var results = [], result, mask, i, total = Math.pow(2, input.length);\r\n                        for(mask = size; mask < total; mask++) {\r\n                            result = [];\r\n                            i = input.length - 1;\r\n\r\n                            do {\r\n                                if((mask & (1 << i)) !== 0) {\r\n                                    result.push(input[i]);\r\n                                }\r\n                            }\r\n                            while(i--);\r\n\r\n                            if(result.length === size) {\r\n                                results.push(result);\r\n                            }\r\n                        }\r\n                        return results;\r\n                        //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\r\n                    })(arguments, arguments.length - 1).map(function (x) {\r\n                return x.reduce(function (prev, curr) {\r\n                    return _.multiply(prev, curr.clone())\r\n                }, new Symbol(1))\r\n            });\r\n\r\n            var denom;\r\n            //don't eat the gcd term if all arguments are symbols\r\n            if(args.every(function (x) {\r\n                return core.Utils.isVariableSymbol(x)\r\n            }))\r\n                denom = _.symfunction('gcd', core.Utils.arrayUnique(denom_args));\r\n            else\r\n                denom = __.gcd.apply(null, denom_args);\r\n            //divide product of all arguments by gcd of complementary terms\r\n            var div = _.divide(numer, denom);\r\n            return div;\r\n        },\r\n        /**\r\n         * Divides one expression by another\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Array}\r\n         */\r\n        divide: function (symbol1, symbol2) {\r\n            var result, remainder, factored, den;\r\n            factored = core.Algebra.Factor.factor(symbol1.clone());\r\n            den = factored.getDenom();\r\n            if(!den.isConstant('all')) {\r\n                symbol1 = _.expand(Symbol.unwrapPARENS(_.multiply(factored, den.clone())));\r\n            }\r\n            else\r\n                //reset the denominator since we're not dividing by it anymore\r\n                den = new Symbol(1);\r\n            result = __.div(symbol1, symbol2);\r\n            remainder = _.divide(result[1], symbol2);\r\n            return _.divide(_.add(result[0], remainder), den);\r\n        },\r\n        div: function (symbol1, symbol2) {\r\n            // If all else fails then assume that division failed with\r\n            // a remainder of zero and the original quotient\r\n            var fail = [new Symbol(0), symbol1.clone()];\r\n\r\n            try {\r\n\r\n                // Division by constants\r\n                if(symbol2.isConstant('all')) {\r\n                    symbol1.each(function (x) {\r\n                        x.multiplier = x.multiplier.divide(symbol2.multiplier);\r\n                    });\r\n                    return [symbol1, new Symbol(0)];\r\n                }\r\n                // So that factorized symbols don't affect the result\r\n                symbol1 = _.expand(symbol1);\r\n                symbol2 = _.expand(symbol2);\r\n                // Special case. May need revisiting\r\n                if(symbol1.group === S && symbol2.group === CP) {\r\n                    var x = symbol1.value;\r\n                    var f = core.Utils.decompose_fn(symbol2.clone(), x, true);\r\n                    if(symbol1.isLinear() && f.x && f.x.isLinear() && symbol2.isLinear()) {\r\n                        var k = Symbol.create(symbol1.multiplier);\r\n                        return [_.divide(k.clone(), f.a.clone()), _.divide(_.multiply(k, f.b), f.a).negate()];\r\n                    }\r\n                }\r\n                if(symbol1.group === S && symbol2.group === S) {\r\n                    var r = _.divide(symbol1.clone(), symbol2.clone());\r\n                    if(r.isConstant()) //we have a whole\r\n                        return [r, new Symbol(0)];\r\n                    return [new Symbol(0), symbol1.clone()];\r\n                }\r\n                var symbol1_has_func = symbol1.hasFunc(),\r\n                        symbol2_has_func = symbol2.hasFunc(),\r\n                        parse_funcs = false;\r\n\r\n                //substitute out functions so we can treat them as regular variables\r\n                if(symbol1_has_func || symbol2_has_func) {\r\n                    parse_funcs = true;\r\n                    var map = {},\r\n                            symbol1 = _.parse(core.Utils.subFunctions(symbol1, map)),\r\n                            symbol2 = _.parse(core.Utils.subFunctions(symbol2, map)),\r\n                            subs = core.Utils.getFunctionsSubs(map);\r\n                }\r\n                //get a list of the variables\r\n                var vars = core.Utils.arrayUnique(variables(symbol1).concat(variables(symbol2))),\r\n                        quot, rem;\r\n\r\n                //treat imaginary numbers as variables\r\n                if(symbol1.isImaginary() || symbol2.isImaginary()) {\r\n                    vars.push(core.Settings.IMAGINARY);\r\n                }\r\n\r\n                if(vars.length === 1) {\r\n                    var q = new Polynomial(symbol1).divide(new Polynomial(symbol2));\r\n                    quot = q[0].toSymbol();\r\n                    rem = q[1].toSymbol();\r\n                }\r\n                else {\r\n                    vars.push(CONST_HASH); //this is for the numbers\r\n                    var reconvert = function (arr) {\r\n                        var symbol = new Symbol(0);\r\n                        for(var i = 0; i < arr.length; i++) {\r\n                            var x = arr[i].toSymbol();\r\n                            symbol = _.add(symbol, x);\r\n                        }\r\n                        return symbol;\r\n                    };\r\n\r\n                    // Silly Martin. This is why you document. I don't remember now\r\n                    var get_unique_max = function (term, any) {\r\n                        var max = Math.max.apply(null, term.terms),\r\n                                count = 0, idx;\r\n\r\n                        if(!any) {\r\n                            for(var i = 0; i < term.terms.length; i++) {\r\n                                if(term.terms[i].equals(max)) {\r\n                                    idx = i;\r\n                                    count++;\r\n                                }\r\n                                if(count > 1)\r\n                                    return;\r\n                            }\r\n                        }\r\n                        if(any) {\r\n                            for(i = 0; i < term.terms.length; i++)\r\n                                if(term.terms[i].equals(max)) {\r\n                                    idx = i;\r\n                                    break;\r\n                                }\r\n                        }\r\n                        return [max, idx, term];\r\n                    };\r\n\r\n                    // Tries to find an LT in the dividend that will satisfy division\r\n                    var get_det = function (s, lookat) {\r\n                        lookat = lookat || 0;\r\n                        var det = s[lookat], l = s.length;\r\n                        if(!det)\r\n                            return;\r\n                        //eliminate the first term if it doesn't apply\r\n                        var umax = get_unique_max(det);\r\n                        for(var i = lookat + 1; i < l; i++) {\r\n                            var term = s[i],\r\n                                    is_equal = det.sum.equals(term.sum);\r\n                            if(!is_equal && umax) {\r\n                                break;\r\n                            }\r\n                            if(is_equal) {\r\n                                // Check the differences of their maxes. The one with the biggest difference governs\r\n                                // e.g. x^2*y^3 vs x^2*y^3 is unclear but this isn't the case in x*y and x^2\r\n                                var max1, max2, idx1, idx2, l2 = det.terms.length;\r\n                                for(var j = 0; j < l2; j++) {\r\n                                    var item1 = det.terms[j], item2 = term.terms[j];\r\n                                    if(typeof max1 === 'undefined' || item1.greaterThan(max1)) {\r\n                                        max1 = item1;\r\n                                        idx1 = j;\r\n                                    }\r\n                                    if(typeof max2 === 'undefined' || item2.greaterThan(max2)) {\r\n                                        max2 = item2;\r\n                                        idx2 = j;\r\n                                    }\r\n                                }\r\n                                //check their differences\r\n                                var d1 = max1.subtract(term.terms[idx1]),\r\n                                        d2 = max2.subtract(det.terms[idx2]);\r\n                                if(d2 > d1) {\r\n                                    umax = [max2, idx2, term];\r\n                                    break;\r\n                                }\r\n                                if(d1 > d2) {\r\n                                    umax = [max1, idx1, det];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                //check if it's a suitable pick to determine the order\r\n                                umax = get_unique_max(term);\r\n                                //if(umax) return umax;\r\n                                if(umax)\r\n                                    break;\r\n                            }\r\n                            umax = get_unique_max(term); //calculate a new unique max\r\n                        }\r\n\r\n                        //if still no umax then any will do since we have a tie\r\n                        if(!umax)\r\n                            return get_unique_max(s[0], true);\r\n                        var e, idx;\r\n                        for(var i = 0; i < s2.length; i++) {\r\n                            var cterm = s2[i].terms;\r\n                            //confirm that this is a good match for the denominator\r\n                            idx = umax[1];\r\n                            if(idx === cterm.length - 1)\r\n                                return;\r\n                            e = cterm[idx];\r\n                            if(!e.equals(0))\r\n                                break;\r\n                        }\r\n                        if(e.equals(0))\r\n                            return get_det(s, ++lookat); //look at the next term\r\n\r\n                        return umax;\r\n                    };\r\n\r\n                    var t_map = core.Utils.toMapObj(vars);\r\n                    var init_sort = function (a, b) {\r\n                        return b.sum.subtract(a.sum);\r\n                    };\r\n                    var is_larger = function (a, b) {\r\n                        if(!a || !b)\r\n                            return false; //it's empty so...\r\n                        for(var i = 0; i < a.terms.length; i++) {\r\n                            if(a.terms[i].lessThan(b.terms[i]))\r\n                                return false;\r\n                        }\r\n                        return true;\r\n                    };\r\n\r\n                    var s1 = symbol1.tBase(t_map).sort(init_sort),\r\n                            s2 = symbol2.tBase(t_map).sort(init_sort);\r\n                    var target = is_larger(s1[0], s2[0]) && s1[0].count > s2[0].count ? s2 : s1; //since the num is already larger than we can get the det from denom\r\n                    var det = get_det(target);//we'll begin by assuming that this will let us know which term \r\n                    var quotient = [];\r\n                    if(det) {\r\n                        var lead_var = det[1];\r\n                        var can_divide = function (a, b) {\r\n                            if(a[0].sum.equals(b[0].sum))\r\n                                return a.length >= b.length;\r\n                            return true;\r\n                        };\r\n\r\n                        var try_better_lead_var = function (s1, s2, lead_var) {\r\n                            var checked = [];\r\n                            for(var i = 0; i < s1.length; i++) {\r\n                                var t = s1[i];\r\n                                for(var j = 0; j < t.terms.length; j++) {\r\n                                    var cf = checked[j], tt = t.terms[j];\r\n                                    if(i === 0)\r\n                                        checked[j] = tt; //add the terms for the first one\r\n                                    else if(cf && !cf.equals(tt))\r\n                                        checked[j] = undefined;\r\n                                }\r\n                            }\r\n                            for(var i = 0; i < checked.length; i++) {\r\n                                var t = checked[i];\r\n                                if(t && !t.equals(0))\r\n                                    return i;\r\n                            }\r\n                            return lead_var;\r\n                        };\r\n                        var sf = function (a, b) {\r\n                            var l1 = a.len(), l2 = b.len();\r\n                            var blv = b.terms[lead_var], alv = a.terms[lead_var];\r\n                            if(l2 > l1 && blv.greaterThan(alv))\r\n                                return l2 - l1;\r\n                            return blv.subtract(alv);\r\n                        };\r\n\r\n                        //check to see if there's a better lead_var\r\n                        lead_var = try_better_lead_var(s1, s2, lead_var);\r\n                        //reorder both according to the max power\r\n                        s1.sort(sf); //sort them both according to the leading variable power\r\n                        s2.sort(sf);\r\n\r\n                        //try to adjust if den is larger\r\n                        var fdt = s2[0], fnt = s1[0];\r\n\r\n                        var den = new MVTerm(new Frac(1), [], fnt.map);\r\n                        if(fdt.sum.greaterThan(fnt.sum) && fnt.len() > 1) {\r\n                            for(var i = 0; i < fnt.terms.length; i++) {\r\n                                var d = fdt.terms[i].subtract(fnt.terms[i]);\r\n                                if(!d.equals(0)) {\r\n                                    var nd = d.add(new Frac(1));\r\n                                    den.terms[i] = d;\r\n                                    for(var j = 0; j < s1.length; j++) {\r\n                                        s1[j].terms[i] = s1[j].terms[i].add(nd);\r\n                                    }\r\n                                }\r\n                                else\r\n                                    den.terms[i] = new Frac(0);\r\n                            }\r\n                        }\r\n\r\n                        var dividend_larger = is_larger(s1[0], s2[0]);\r\n\r\n                        var safety = 0;\r\n                        var max = 200;\r\n\r\n                        while(dividend_larger && can_divide(s1, s2)) {\r\n                            if(safety++ > max) {\r\n                                throw new core.exceptions.InfiniteLoopError('Unable to compute!');\r\n                            }\r\n\r\n                            var q = s1[0].divide(s2[0]);\r\n\r\n                            quotient.push(q); //add what's divided to the quotient\r\n                            s1.shift();//the first one is guaranteed to be gone so remove from dividend\r\n                            for(var i = 1; i < s2.length; i++) { //loop through the denominator\r\n                                var t = s2[i].multiply(q).generateImage(),\r\n                                        l2 = s1.length;\r\n                                //if we're subtracting from 0\r\n                                if(l2 === 0) {\r\n                                    t.coeff = t.coeff.neg();\r\n                                    s1.push(t);\r\n                                    s1.sort(sf);\r\n                                }\r\n\r\n                                for(var j = 0; j < l2; j++) {\r\n                                    var cur = s1[j];\r\n                                    if(cur.getImg() === t.getImg()) {\r\n                                        cur.coeff = cur.coeff.subtract(t.coeff);\r\n                                        if(cur.coeff.equals(0)) {\r\n                                            core.Utils.remove(s1, j);\r\n                                            j--; //adjust the iterator\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                    if(j === l2 - 1) {\r\n                                        t.coeff = t.coeff.neg();\r\n                                        s1.push(t);\r\n                                        s1.sort(sf);\r\n                                    }\r\n                                }\r\n                            }\r\n                            dividend_larger = is_larger(s1[0], s2[0]);\r\n\r\n                            if(!dividend_larger && s1.length >= s2.length) {\r\n                                //One more try since there might be a terms that is larger than the LT of the divisor\r\n                                for(var i = 1; i < s1.length; i++) {\r\n                                    dividend_larger = is_larger(s1[i], s2[0]);\r\n                                    if(dividend_larger) {\r\n                                        //take it from its current position and move it to the front\r\n                                        s1.unshift(core.Utils.remove(s1, i));\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    quot = reconvert(quotient);\r\n                    rem = reconvert(s1);\r\n\r\n                    if(typeof den !== 'undefined') {\r\n                        den = den.toSymbol();\r\n                        quot = _.divide(quot, den.clone());\r\n                        rem = _.divide(rem, den);\r\n                    }\r\n                }\r\n\r\n                //put back the functions\r\n                if(parse_funcs) {\r\n                    quot = _.parse(quot.text(), subs);\r\n                    rem = _.parse(rem.text(), subs);\r\n                }\r\n\r\n                return [quot, rem];\r\n            }\r\n            catch(e) {\r\n                return fail;\r\n            }\r\n\r\n        },\r\n        line: function (v1, v2, x) {\r\n            if(core.Utils.isArray(v1))\r\n                v1 = core.Utils.convertToVector(v1);\r\n            if(core.Utils.isArray(v2))\r\n                v2 = core.Utils.convertToVector(v2);\r\n            x = _.parse(x || 'x');\r\n            if(!core.Utils.isVector(v1) || !core.Utils.isVector(v2))\r\n                _.error('Line expects a vector! Received \"' + v1 + '\" & \"' + v2 + '\"');\r\n            var dx = _.subtract(v2.e(1).clone(), v1.e(1).clone()),\r\n                    dy = _.subtract(v2.e(2).clone(), v1.e(2).clone()),\r\n                    m = _.divide(dy, dx),\r\n                    a = _.multiply(x, m.clone()),\r\n                    b = _.multiply(v1.e(1).clone(), m);\r\n            return _.add(_.subtract(a, b), v1.e(2).clone());\r\n        },\r\n        PartFrac: {\r\n            createTemplate: function (den, denom_factors, f_array, v) {\r\n                //clean up the denominator function by factors so it reduces nicely\r\n                den = __.Factor.factor(den);\r\n\r\n                //clean up factors. This is so inefficient but factors are wrapped in parens for safety\r\n                den.each(function (x, key) {\r\n                    if(x.group === FN && x.fname === '' && x.args[0].group === S) {\r\n                        var y = x.args[0];\r\n                        if(this.symbols) {\r\n                            delete this.symbols[key];\r\n                            this.symbols[y.value] = y;\r\n                        }\r\n                        else {\r\n                            den = x.args[0];\r\n                        }\r\n                    }\r\n                });\r\n\r\n                var factors, factors_vec, f, p, deg, degrees, m;\r\n                factors = denom_factors.collectFactors();\r\n                factors_vec = []; //a vector for the template\r\n                degrees = [];\r\n                m = new Symbol(1);\r\n\r\n                for(var i = 0; i < factors.length; i++) { //loop through the factors\r\n                    var factor = Symbol.unwrapPARENS(factors[i]);\r\n                    //if in he for P^n where P is polynomial and n = integer\r\n                    if(factor.power.greaterThan(1)) {\r\n                        p = Number(factor.power);\r\n                        f = factor.clone().toLinear(); //remove the power so we have only the function\r\n                        deg = Number(__.degree(f, v)); //get the degree of f\r\n                        //expand the factor\r\n                        for(var j = 0; j < p; j++) {\r\n                            var efactor = _.pow(f.clone(), new Symbol(j + 1));\r\n                            f_array.push(efactor.clone());\r\n                            var d = _.divide(den.clone(), efactor.clone());\r\n                            degrees.push(deg);\r\n                            factors_vec.push(d);\r\n                        }\r\n                    }\r\n                    /*\r\n                     Possible bug.\r\n                     Removed: causes 1/(20+24*x+4*x^2) to result in (-1/64)*(5+x)^(-1)+(1/64)*(1+x)^(-1)\r\n                     else if(factor.isConstant('all')) {\r\n                     m = _.multiply(m, factor);\r\n                     }\r\n                     */\r\n                    else {\r\n                        //get the degree of the factor so we tack it on tot he factor. This should probably be an array\r\n                        //but for now we note it on the symbol\r\n                        deg = Number(__.degree(factor, v));\r\n                        f_array.push(factor);\r\n                        var d = _.divide(den.clone(), factor.clone());\r\n                        d = _.expand(Symbol.unwrapPARENS(d));\r\n                        degrees.push(deg);\r\n                        factors_vec.push(d);\r\n                    }\r\n                }\r\n                //put back the constant\r\n                f_array = f_array.map(function (x) {\r\n                    return _.multiply(x, m.clone());\r\n                });\r\n                return [f_array, factors_vec, degrees];\r\n            },\r\n            partfrac: function (symbol, v, as_array) {\r\n\r\n                var vars = variables(symbol);\r\n\r\n                v = v || _.parse(vars[0]); //make wrt optional and assume first variable\r\n                try {\r\n                    var num, den, factors, tfactors, ofactors, nterms, degrees,\r\n                            dterms, max, M, c, powers, div, r, factors_vec, ks,\r\n                            template, tfactors;\r\n                    num = _.expand(symbol.getNum());\r\n                    den = _.expand(symbol.getDenom().toUnitMultiplier());\r\n                    //move the entire multipier to the numerator\r\n                    num.multiplier = symbol.multiplier;\r\n                    //we only have a meaningful change if n factors > 1. This means that\r\n                    //the returned group will be a CB\r\n                    //collect the terms wrt the x\r\n                    nterms = num.groupTerms(v);\r\n                    //divide out wholes if top is larger\r\n                    if(Number(__.degree(num, v)) >= Number(__.degree(den, v))) {\r\n                        div = __.div(num.clone(), _.expand(den.clone()));\r\n                        r = div[0]; //remove the wholes\r\n                        num = div[1]; //work with the remainder\r\n                        nterms = num.groupTerms(v); //recalculate the nterms\r\n                    }\r\n                    else\r\n                        r = new Symbol(0);\r\n\r\n                    if(Number(__.degree(den, v)) === 1) {\r\n                        var q = _.divide(num, den);\r\n                        if(as_array)\r\n                            return [r, q];\r\n                        return _.add(r, q);\r\n                    }\r\n                    //first factor the denominator. This means that the strength of this\r\n                    //algorithm depends on how well we can factor the denominator. \r\n                    ofactors = __.Factor.factor(den);\r\n                    //create the template. This method will create the template for solving \r\n                    //the partial fractions. So given x/(x-1)^2 the template creates A/(x-1)+B/(x-1)^2\r\n                    template = __.PartFrac.createTemplate(den.clone(), ofactors, [], v);\r\n                    tfactors = template[0]; //grab the factors\r\n                    factors_vec = template[1]; //grab the factor vectors\r\n                    degrees = template[2]; //grab the degrees\r\n                    //make note of the powers of each term\r\n                    powers = [nterms.length];\r\n                    //create the dterms vector\r\n                    dterms = [];\r\n                    factors = [];\r\n                    ks = [];\r\n                    var factor, deg;\r\n                    factors_vec.map(function (x, idx) {\r\n                        factor = tfactors[idx];\r\n                        deg = degrees[idx];\r\n                        for(var i = 0; i < deg; i++) {\r\n                            factors.push(factor.clone());\r\n                            var k = Symbol.create(v, i);\r\n                            var t = _.expand(_.multiply(x, k.clone())).groupTerms(v);\r\n                            //make a note of the power which corresponds to the length of the array\r\n                            var p = t.length;\r\n                            powers.push(p);\r\n                            dterms.push(t);\r\n                            ks.push(k.clone());\r\n                        }\r\n                    });\r\n                    //get the max power\r\n                    max = core.Utils.arrayMax(powers);\r\n\r\n                    //fill the holes and create a matrix\r\n                    c = new core.Matrix(core.Utils.fillHoles(nterms, max)).transpose();\r\n                    //for each of the factors we do the same\r\n                    M = new core.Matrix();\r\n                    for(var i = 0; i < dterms.length; i++) {\r\n                        M.elements.push(core.Utils.fillHoles(dterms[i], max));\r\n                    }\r\n\r\n                    //solve the system of equations\r\n                    var partials = _.multiply(M.transpose().invert(), c);\r\n                    //the results are backwards to reverse it\r\n                    //partials.elements.reverse();\r\n                    //convert it all back\r\n                    var retval = as_array ? [r] : r;\r\n                    partials.each(function (e, i) {\r\n                        var term = _.multiply(ks[i], _.divide(e, factors[i]));\r\n                        if(as_array)\r\n                            retval.push(term);\r\n                        else\r\n                            retval = _.add(retval, term);\r\n                    });\r\n\r\n                    //done\r\n                    return retval;\r\n                }\r\n                catch(e) {\r\n                    //try to group symbols\r\n                    try {\r\n                        if(symbol.isComposite()) {\r\n                            //group denominators\r\n                            var denominators = {};\r\n\r\n                            symbol.each(function (x) {\r\n                                var d = x.getDenom();\r\n                                var n = x.getNum();\r\n                                var e = denominators[d];\r\n                                denominators[d] = e ? _.add(e, n) : n;\r\n                            });\r\n\r\n                            var t = new Symbol(0);\r\n\r\n                            for(var x in denominators) {\r\n                                t = _.add(t, _.divide(denominators[x], _.parse(x)));\r\n                            }\r\n\r\n                            symbol = t;\r\n                        }\r\n                    }\r\n                    catch(e2) {\r\n                    }\r\n                    ;\r\n                }\r\n                ;\r\n\r\n                return symbol;\r\n            }\r\n        },\r\n        degree: function (symbol, v, o) {\r\n            o = o || {\r\n                nd: [], //numeric\r\n                sd: [], //symbolic\r\n                depth: 0 //call depth\r\n            };\r\n\r\n            if(!v) {\r\n                var vars = variables(symbol);\r\n                //The user must specify the variable for multivariate\r\n                if(vars.length > 1)\r\n                    throw new Error('You must specify the variable for multivariate polynomials!');\r\n                //if it's empty then we're dealing with a constant\r\n                if(vars.length === 0)\r\n                    return new Symbol(0);\r\n                //assume the variable for univariate\r\n                v = _.parse(vars[0]);\r\n            }\r\n\r\n            //store the group\r\n            var g = symbol.group;\r\n            //we're going to trust the user and assume no EX. Calling isPoly \r\n            //would eliminate this but no sense in checking twice. \r\n            if(symbol.isComposite()) {\r\n                symbol = symbol.clone();\r\n                symbol.distributeExponent();\r\n                symbol.each(function (x) {\r\n                    o.depth++; //mark a depth increase\r\n                    __.degree(x, v, o);\r\n                    o.depth--; //we're back\r\n                });\r\n            }\r\n            else if(symbol.group === CB) {\r\n                symbol.each(function (x) {\r\n                    o.depth++;\r\n                    __.degree(x, v, o);\r\n                    o.depth++;\r\n                });\r\n            }\r\n            else if(g === EX && symbol.value === v.value) {\r\n                o.sd.push(symbol.power.clone());\r\n            }\r\n            else if(g === S && symbol.value === v.value) {\r\n                o.nd.push(_.parse(symbol.power));\r\n            }\r\n            else\r\n                o.nd.push(new Symbol(0));\r\n\r\n            //get the max out of the array\r\n            var deg = o.nd.length > 0 ? core.Utils.arrayMax(o.nd) : undefined;\r\n\r\n            if(o.depth === 0 && o.sd.length > 0) {\r\n                if(deg !== undefined)\r\n                    o.sd.unshift(deg);\r\n                return _.symfunction('max', o.sd);\r\n            }\r\n            if(!core.Utils.isSymbol(deg))\r\n                deg = _.parse(deg);\r\n            //return the degree\r\n            return deg;\r\n        },\r\n        /**\r\n         * Attempts to complete the square of a polynomial\r\n         * @param {type} symbol\r\n         * @param {type} v\r\n         * @param {type} raw\r\n         * @throws {Error} \r\n         * @returns {Object|Symbol[]}\r\n         */\r\n        sqComplete: function (symbol, v, raw) {\r\n            if(!core.Utils.isSymbol(v))\r\n                v = _.parse(v);\r\n            var stop = function (msg) {\r\n                msg = msg || 'Stopping';\r\n                throw new core.exceptions.ValueLimitExceededError(msg);\r\n            };\r\n            //if not CP then nothing to do\r\n            if(!symbol.isPoly(true))\r\n                stop('Must be a polynomial!');\r\n\r\n            //declare vars\r\n            var deg, a, b, c, d, e, coeffs, sign, br, sym, sqrt_a;\r\n\r\n            br = core.Utils.inBrackets;\r\n            //make a copy\r\n            symbol = symbol.clone();\r\n            deg = core.Algebra.degree(symbol, v); //get the degree of polynomial\r\n            //must be in form ax^2 +/- bx +/- c\r\n            if(!deg.equals(2))\r\n                stop('Cannot complete square for degree ' + deg);\r\n            //get the coeffs\r\n            coeffs = core.Algebra.coeffs(symbol, v);\r\n            a = coeffs[2];\r\n            //store the sign\r\n            sign = coeffs[1].sign();\r\n            //divide the linear term by two and square it\r\n            b = _.divide(coeffs[1], new Symbol(2));\r\n            //add the difference to the constant\r\n            c = _.pow(b.clone(), new Symbol(2));\r\n            if(raw)\r\n                return [a, b, d];\r\n            sqrt_a = math.sqrt(a);\r\n            e = _.divide(math.sqrt(c), sqrt_a.clone());\r\n            //calculate d which is the constant\r\n            d = _.subtract(coeffs[0], _.pow(e.clone(), new Symbol(2)));\r\n            //compute the square part\r\n            sym = _.parse(br(sqrt_a.clone() + '*' + v + (sign < 0 ? '-' : '+') + e));\r\n            return {\r\n                a: sym,\r\n                c: d,\r\n                f: _.add(_.pow(sym.clone(), new Symbol(2)), d.clone())\r\n            };\r\n        },\r\n        Simplify: {\r\n            strip: function (symbol) {\r\n                var c = _.parse(symbol.multiplier);\r\n                symbol.toUnitMultiplier();\r\n                var p = _.parse(symbol.power);\r\n                symbol.toLinear();\r\n                return [c, p, symbol];\r\n            },\r\n            unstrip: function (cp, symbol) {\r\n                var c = cp[0];\r\n                var p = cp[1];\r\n                return _.multiply(c, _.pow(symbol, p));\r\n            },\r\n            complexSimp: function (num, den) {\r\n                var ac, bd, bc, ad, cd, r1, r2, i1, i2;\r\n                r1 = num.realpart();\r\n                i1 = num.imagpart();\r\n                r2 = den.realpart();\r\n                i2 = den.imagpart();\r\n                //apply complex arithmatic rule\r\n                ac = _.multiply(r1.clone(), r2.clone());\r\n                bd = _.multiply(i1.clone(), i2.clone());\r\n                bc = _.multiply(r2.clone(), i1);\r\n                ad = _.multiply(r1, i2.clone());\r\n                cd = _.add(_.pow(r2, new Symbol(2)), _.pow(i2, new Symbol(2)));\r\n\r\n                return _.divide(_.add(_.add(ac, bd), _.multiply(_.subtract(bc, ad), Symbol.imaginary())), cd);\r\n            },\r\n            trigSimp: function (symbol) {\r\n                if(symbol.containsFunction(['cos', 'sin', 'tan'])) {\r\n                    symbol = symbol.clone();\r\n                    //remove power and multiplier\r\n                    var sym_array = __.Simplify.strip(symbol);\r\n                    symbol = sym_array.pop();\r\n                    //the default return value is the symbol\r\n                    var retval = symbol.clone();\r\n\r\n                    //rewrite the symbol\r\n                    if(symbol.group === CP) {\r\n                        var sym = new Symbol(0);\r\n                        symbol.each(function (x) {\r\n                            //rewrite the function\r\n                            var tr = __.Simplify.trigSimp(x.fnTransform());\r\n                            sym = _.add(sym, tr);\r\n                        }, true);\r\n\r\n                        //put back the power and multiplier and return\r\n                        retval = _.pow(_.multiply(new Symbol(symbol.multiplier), sym), new Symbol(symbol.power));\r\n                    }\r\n                    else if(symbol.group === CB) {\r\n\r\n                        var n = symbol.getNum();\r\n                        var d = symbol.getDenom();\r\n\r\n                        //try for tangent\r\n                        if(n.fname === 'sin' && d.fname === 'cos' && n.args[0].equals(d.args[0]) && n.power.equals(d.power)) {\r\n                            retval = _.parse(core.Utils.format('({0})*({1})*tan({2})^({3})', d.multiplier, n.multiplier, n.args[0], n.power));\r\n                        }\r\n                        if(retval.group === CB) {\r\n                            var t = new Symbol(1);\r\n                            retval.each(function (x) {\r\n                                if(x.fname === 'tan') {\r\n                                    x = _.parse(core.Utils.format('({0})*sin({1})^({2})/cos({1})^({2})', x.multiplier, __.Simplify.simplify(x.args[0]), x.power));\r\n                                }\r\n                                t = _.multiply(t, x);\r\n                            });\r\n                            retval = t;\r\n                        }\r\n                    }\r\n\r\n\r\n                    retval = __.Simplify.unstrip(sym_array, retval).distributeMultiplier();\r\n\r\n                    symbol = retval;\r\n                }\r\n\r\n                return symbol;\r\n            },\r\n            fracSimp: function (symbol) {\r\n                //try a quick simplify of imaginary numbers\r\n                var den = symbol.getDenom();\r\n                var num = symbol.getNum();\r\n\r\n                if(num.isImaginary() && den.isImaginary())\r\n                    symbol = __.Simplify.complexSimp(num, den);\r\n\r\n                if(symbol.isComposite()) {\r\n                    if(symbol.power > 1) {\r\n                        symbol = _.expand(symbol);\r\n                    }\r\n\r\n                    var symbols = symbol.collectSymbols();\r\n                    //assumption 1.\r\n                    //since it's a composite, it has a length of at least 1\r\n                    var retval, a, b, d1, d2, n1, n2, s, x, y, c, den, num;\r\n                    a = symbols.pop(); //grab the first symbol\r\n                    //loop through each term and make denominator common\r\n                    while(symbols.length) {\r\n                        b = symbols.pop(); //grab the second symbol\r\n                        d1 = _.parse(a.getDenom());\r\n                        d2 = _.parse(b.getDenom());\r\n                        n1 = a.getNum();\r\n                        n2 = b.getNum();\r\n                        c = _.multiply(d1.clone(), d2.clone());\r\n                        x = _.multiply(n1, d2);\r\n                        y = _.multiply(n2, d1);\r\n                        s = _.add(x, y);\r\n                        a = _.divide(s, c);\r\n                    }\r\n                    den = _.expand(a.getDenom());\r\n                    num = _.expand(a.getNum());\r\n                    //simplify imaginary\r\n                    if(num.isImaginary() && den.isImaginary()) {\r\n                        retval = __.Simplify.complexSimp(num, den);\r\n                    }\r\n                    else {\r\n                        retval = _.divide(num, den);\r\n                    }\r\n\r\n                    //we've already hit the simplest form so return that\r\n                    if(retval.equals(symbol)) {\r\n                        return symbol;\r\n                    }\r\n\r\n                    //otherwise simplify it some more\r\n                    return __.Simplify.simplify(retval);\r\n                }\r\n                return symbol;\r\n            },\r\n            ratSimp: function (symbol) {\r\n                if(symbol.group === CB) {\r\n                    var den = symbol.getDenom();\r\n                    var num = symbol.getNum().distributeMultiplier();\r\n                    var d = __.Simplify.fracSimp(den);\r\n                    var n = __.Simplify.fracSimp(num);\r\n                    symbol = _.divide(n, d);\r\n                }\r\n                return symbol;\r\n            },\r\n            sqrtSimp: function (symbol, sym_array) {\r\n                var retval;\r\n                if(symbol.isSQRT()) {\r\n                    var factored = __.Factor.factor(symbol.args[0].clone());\r\n                    var m = _.parse(factored.multiplier);\r\n                    var sign = m.sign();\r\n\r\n                    var retval = _.sqrt(m.abs());\r\n                    var arg;\r\n\r\n                    if(isInt(retval)) {\r\n\r\n                        if(factored.group === CB) {\r\n                            var rem = new Symbol(1);\r\n\r\n                            factored.each(function (x) {\r\n                                if(x.group === N) {\r\n                                    var trial = _.sqrt(x.clone());\r\n\r\n                                    // Multiply back sqrt if it's an integer otherwise just put back the number\r\n                                    if(isInt(trial)) {\r\n                                        retval = _.multiply(retval, trial);\r\n                                    }\r\n                                    else {\r\n                                        rem = _.multiply(rem, x);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    rem = _.multiply(rem, x);\r\n                                }\r\n\r\n                            });\r\n                            var t = _.multiply(rem, _.parse(sign));\r\n                            arg = _.sqrt(t.clone());\r\n\r\n                            // Expand if it's imaginary\r\n                            if(arg.isImaginary) {\r\n                                arg = _.sqrt(_.expand(t.clone()));\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Strip the multiplier\r\n                            arg = _.sqrt(factored.clone().toUnitMultiplier());\r\n                        }\r\n                        return _.multiply(retval, arg);\r\n\r\n                    }\r\n\r\n                }\r\n                else if(symbol.isComposite() && symbol.isLinear()) {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, __.Simplify.sqrtSimp(x));\r\n                    }, true);\r\n                    // Put back the multiplier\r\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\r\n                }\r\n                else if(symbol.group === CB) {\r\n                    retval = _.parse(symbol.multiplier);\r\n                    symbol.each(function (x) {\r\n                        var simp = __.Simplify.sqrtSimp(x);\r\n                        retval = _.multiply(retval, simp);\r\n\r\n                    }, true);\r\n                    // Put back the power\r\n                    retval = _.pow(retval, _.parse(symbol.power));\r\n                }\r\n\r\n                return retval ? retval : _.parse(symbol);\r\n            },\r\n            /**\r\n             * Unused. The goal is to substitute out patterns but it currently doesn't work.\r\n             * @param {Symbol} symbol\r\n             * @return {Array} The symbol and the matched patterns\r\n             */\r\n            patternSub: function (symbol) {\r\n                var patterns = {};\r\n\r\n                var has_CP = function (symbol) {\r\n                    var found = false;\r\n                    symbol.each(function (x) {\r\n                        if(x.group === CP) {\r\n                            found = true;\r\n                        }\r\n                        else if(x.symbols) {\r\n                            found = has_CP(x);\r\n                        }\r\n                    });\r\n\r\n                    return found;\r\n                };\r\n\r\n                var collect = function (sym) {\r\n                    // We loop through each symbol looking for anything in the simplest\r\n                    // form of ax+byz+...\r\n                    sym.each(function (x) {\r\n                        // Items of group N,P,S, need to apply\r\n                        if(!x.symbols && x.group !== FN) {\r\n                            return;\r\n                        }\r\n\r\n                        // Check to see if it has any symbols of group CP\r\n                        // Get the patterns in that symbol instead if it has anything of group CP\r\n                        if(has_CP(x)) {\r\n                            collect(x);\r\n                        }\r\n                        else {\r\n                            if(!patterns[x.value]) {\r\n                                var u = core.Utils.getU(symbol);\r\n                                // Get a u value and mark it for subsitution\r\n                                patterns[x.value] = u;\r\n                                symbol = symbol.sub(x.value, u);\r\n                            }\r\n                        }\r\n                    }, true);\r\n                };\r\n\r\n                // Collect a list of patterns\r\n                collect(symbol);\r\n\r\n                return [symbol, patterns];\r\n            },\r\n            simplify: function (symbol) {\r\n                //remove the multiplier to make calculation easier;\r\n                var sym_array = __.Simplify.strip(symbol);\r\n                symbol = sym_array.pop();\r\n                //remove gcd from denominator\r\n                symbol = __.Simplify.fracSimp(symbol);\r\n                //nothing more to do\r\n                if(symbol.isConstant() || symbol.group === core.groups.S) {\r\n                    sym_array.push(symbol);\r\n                    var ret = __.Simplify.unstrip(sym_array, symbol);\r\n                    return ret;\r\n                }\r\n\r\n                //var patterns;\r\n\r\n                var simplified = symbol.clone(); //make a copy\r\n\r\n                //[simplified, patterns] = __.Simplify.patternSub(symbol);\r\n\r\n                // Simplify sqrt within the symbol\r\n//                simplified = __.Simplify.sqrtSimp(simplified, sym_array);\r\n\r\n                // Try trig simplificatons e.g. cos(x)^2+sin(x)^2\r\n                simplified = __.Simplify.trigSimp(simplified);\r\n\r\n                // Simplify common denominators\r\n                simplified = __.Simplify.ratSimp(simplified);\r\n\r\n                // First go for the \"cheapest\" simplification which may eliminate \r\n                // your problems right away. factor -> evaluate. Remember\r\n                // that there's no need to expand since factor already does that\r\n\r\n                simplified = __.Factor.factor(simplified);\r\n\r\n                //If the simplfied is a sum then we can make a few more simplifications\r\n                //e.g. simplify(1/(x-1)+1/(1-x)) as per issue #431\r\n                if(simplified.group === core.groups.CP && simplified.isLinear()) {\r\n                    var m = simplified.multiplier.clone();\r\n                    simplified.toUnitMultiplier(); //strip the multiplier\r\n                    var r = new Symbol(0);\r\n                    //return the sum of simplifications\r\n                    simplified.each(function (x) {\r\n                        var s = __.Simplify.simplify(x);\r\n                        r = _.add(r, s);\r\n                    });\r\n                    simplified = r;\r\n                    //put back the multiplier\r\n                    r.multiplier = r.multiplier.multiply(m);\r\n                }\r\n\r\n                //place back multiplier and return\r\n                var retval = __.Simplify.unstrip(sym_array, simplified);\r\n\r\n                // Back substitute\r\n                /*\r\n                 for(var x in patterns) {\r\n                 retval = retval.sub(patterns[x], x);\r\n                 }\r\n                 */\r\n\r\n                return retval;\r\n            }\r\n        },\r\n\r\n        Classes: {\r\n            Polynomial: Polynomial,\r\n            Factors: Factors,\r\n            MVTerm: MVTerm\r\n        }\r\n    };\r\n\r\n    // Add a link to simplify\r\n    core.Expression.prototype.simplify = function () {\r\n        return __.Simplify.simplify(this.symbol);\r\n    };\r\n\r\n    nerdamer.useAlgebraDiv = function () {\r\n        var divide = __.divideFn = _.divide;\r\n        var calls = 0; //keep track of how many calls were made\r\n        _.divide = function (a, b) {\r\n            calls++;\r\n            var ans;\r\n            if(calls === 1) //check if this is the first call. If it is use algebra divide\r\n                ans = core.Algebra.divide(a, b);\r\n            else //otherwise use parser divide\r\n                ans = divide(a, b);\r\n            calls = 0; //reset the number of calls back to none\r\n            return ans;\r\n        };\r\n    };\r\n\r\n    nerdamer.useParserDiv = function () {\r\n        if(__.divideFn)\r\n            _.divide = __.divideFn;\r\n        delete __.divideFn;\r\n    };\r\n\r\n    nerdamer.register([\r\n        {\r\n            name: 'factor',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Factor.factor;\r\n            }\r\n        },\r\n        {\r\n            name: 'simplify',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Simplify.simplify;\r\n            }\r\n        },\r\n        {\r\n            name: 'gcd',\r\n            visible: true,\r\n            numargs: [1, ],\r\n            build: function () {\r\n                return __.gcd;\r\n            }\r\n        },\r\n        {\r\n            name: 'lcm',\r\n            visible: true,\r\n            numargs: [1, ],\r\n            build: function () {\r\n                return __.lcm;\r\n            }\r\n        },\r\n        {\r\n            name: 'roots',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.roots;\r\n            }\r\n        },\r\n        {\r\n            name: 'divide',\r\n            visible: true,\r\n            numargs: 2,\r\n            build: function () {\r\n                return __.divide;\r\n            }\r\n        },\r\n        {\r\n            name: 'div',\r\n            visible: true,\r\n            numargs: 2,\r\n            build: function () {\r\n                return __.div;\r\n            }\r\n        },\r\n        {\r\n            name: 'partfrac',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.PartFrac.partfrac;\r\n            }\r\n        },\r\n        {\r\n            name: 'deg',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.degree;\r\n            }\r\n        },\r\n        {\r\n            name: 'coeffs',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                var f = function () {\r\n                    var coeffs = __.coeffs.apply(__, arguments);\r\n                    return new core.Vector(coeffs);\r\n                };\r\n                return f;\r\n            }\r\n        },\r\n        {\r\n            name: 'line',\r\n            visible: true,\r\n            numargs: [2, 3],\r\n            build: function () {\r\n                return __.line;\r\n            }\r\n        },\r\n        {\r\n            name: 'sqcomp',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                var f = function (x, v) {\r\n                    try {\r\n                        v = v || variables(x)[0];\r\n                        var sq = __.sqComplete(x.clone(), v);\r\n                        return sq.f;\r\n                    }\r\n                    catch(e) {\r\n                        return x;\r\n                    }\r\n                };\r\n                return f;\r\n            }\r\n        }\r\n    ]);\r\n    nerdamer.updateAPI();\r\n})();","/* global module */\r\n\r\n/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\nif((typeof module) !== 'undefined' && typeof nerdamer === 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Algebra.js');\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            Frac = core.Frac,\r\n            Settings = core.Settings,\r\n            isSymbol = core.Utils.isSymbol,\r\n            FN = core.groups.FN,\r\n            Symbol = core.Symbol,\r\n            text = core.Utils.text,\r\n            inBrackets = core.Utils.inBrackets,\r\n            isInt = core.Utils.isInt,\r\n            format = core.Utils.format,\r\n            even = core.Utils.even,\r\n            evaluate = core.Utils.evaluate,\r\n            N = core.groups.N,\r\n            S = core.groups.S,\r\n            FN = core.groups.FN,\r\n            PL = core.groups.PL,\r\n            CP = core.groups.CP,\r\n            CB = core.groups.CB,\r\n            EX = core.groups.EX,\r\n            P = core.groups.P,\r\n            LOG = Settings.LOG,\r\n            EXP = 'exp',\r\n            ABS = 'abs',\r\n            SQRT = 'sqrt',\r\n            SIN = 'sin',\r\n            COS = 'cos',\r\n            TAN = 'tan',\r\n            SEC = 'sec',\r\n            CSC = 'csc',\r\n            COT = 'cot',\r\n            ASIN = 'asin',\r\n            ACOS = 'acos',\r\n            ATAN = 'atan',\r\n            ASEC = 'asec',\r\n            ACSC = 'acsc',\r\n            ACOT = 'acot',\r\n            SINH = 'sinh',\r\n            COSH = 'cosh',\r\n            TANH = 'tanh',\r\n            CSCH = 'csch',\r\n            SECH = 'sech',\r\n            COTH = 'coth',\r\n            ASECH = 'asech',\r\n            ACSCH = 'acsch',\r\n            ACOTH = 'acoth';\r\n\r\n    //custom errors\r\n    function NoIntegralFound(msg) {\r\n        this.message = msg || \"\";\r\n    }\r\n    NoIntegralFound.prototype = new Error();\r\n\r\n    //Preparations\r\n    Symbol.prototype.hasIntegral = function () {\r\n        return this.containsFunction('integrate');\r\n    };\r\n    //transforms a function\r\n    Symbol.prototype.fnTransform = function () {\r\n        if(this.group !== FN)\r\n            return this;\r\n        var retval, a = this.args[0];\r\n        var m = new Symbol(this.multiplier);\r\n        var sym = this.clone().toUnitMultiplier();\r\n        if(this.isLinear()) {\r\n            switch(this.fname) {\r\n                case SINH:\r\n                    retval = _.parse(format('(e^({0})-e^(-({0})))/2', a));\r\n                    break;\r\n                case COSH:\r\n                    retval = _.parse(format('(e^({0})+e^(-({0})))/2', a));\r\n                    break;\r\n                case TANH:\r\n                    retval = _.parse(format('(e^({0})-e^(-({0})))/(e^({0})+e^(-({0})))', a));\r\n                    break;\r\n                case TAN:\r\n                    retval = _.parse(format('sin({0})/cos({0})', a));\r\n                    break;\r\n                case CSC:\r\n                    retval = _.parse(format('1/sin({0})', a));\r\n                    break;\r\n                case SEC:\r\n                    retval = _.parse(format('1/cos({0})', a));\r\n                    break;\r\n                default:\r\n                    retval = sym;\r\n            }\r\n        }\r\n        else if(this.power.equals(2)) {\r\n            switch(this.fname) {\r\n                case SIN:\r\n                    retval = _.parse(format('1/2-cos(2*({0}))/2', a));\r\n                    break;\r\n                case COS:\r\n                    retval = _.parse(format('1/2+cos(2*({0}))/2', a));\r\n                    break;\r\n                case TAN:\r\n                    //retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))', a));\r\n                    retval = _.parse(format('sin({0})^2/cos({0})^2', a));\r\n                    break;\r\n                case COSH:\r\n                    retval = _.parse(format('1/2+cosh(2*({0}))/2', a));\r\n                    break;\r\n                case SINH:\r\n                    retval = _.parse(format('-1/2+cosh(2*({0}))/2', a));\r\n                    break;\r\n                case TANH:\r\n                    retval = _.parse(format('(1+cosh(2*({0})))/(-1+cosh(2*({0})))', a));\r\n                    break;\r\n                case SEC:\r\n                    retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))+1', a));\r\n                    break;\r\n                default:\r\n                    retval = sym;\r\n            }\r\n        }\r\n        else if(this.fname === SEC) {\r\n            retval = _.parse(format('1/cos({0})^({1})', this.args[0], this.power));\r\n        }\r\n        else if(this.fname === CSC) {\r\n            retval = _.parse(format('1/sin({0})^({1})', this.args[0], this.power));\r\n        }\r\n        else if(this.fname === TAN) {\r\n            if(this.power.lessThan(0)) {\r\n                retval = _.parse(format('cos({0})^(-({1}))/sin({0})^({1})', this.args[0], this.power.negate()));\r\n            }\r\n            else {\r\n                retval = _.parse(format('sin({0})^({1})/cos({0})^({1})', this.args[0], this.power));\r\n            }\r\n        }\r\n        else if(this.fname === SIN && this.power.lessThan(0)) {\r\n            retval = _.parse(format('csc({0})^(-({1}))', this.args[0], this.power.negate()));\r\n        }\r\n        else if(this.fname === COS && this.power.lessThan(0)) {\r\n            retval = _.parse(format('sec({0})^(-({1}))', this.args[0], this.power.negate()));\r\n        }\r\n        else if(this.fname === SIN && this.power.equals(3)) {\r\n            retval = _.parse(format('(3*sin({0})-sin(3*({0})))/4', this.args[0]));\r\n        }\r\n        else if(this.fname === COS && this.power.equals(3)) {\r\n            retval = _.parse(format('(cos(3*({0}))+3*cos({0}))/4', this.args[0]));\r\n        }\r\n        //cos(a*x)^(2*n) or sin(a*x)^(2*n)\r\n        else if((this.fname === COS || this.fname === SIN) && even(this.power)) {\r\n            var n = this.power / 2;\r\n            //convert to a double angle\r\n            var double_angle = _.pow(this.clone().toLinear(), _.parse(2)).fnTransform();\r\n            //raise to the n and expand\r\n            var transformed = _.expand(_.pow(double_angle, _.parse(n)));\r\n\r\n            retval = new Symbol(0);\r\n\r\n            transformed.each(function (s) {\r\n                var t = s.fnTransform();\r\n                retval = _.add(retval, t);\r\n            }, true);\r\n        }\r\n        else\r\n            retval = sym;\r\n\r\n        return _.multiply(retval, m);\r\n    };\r\n\r\n    Symbol.prototype.hasTrig = function () {\r\n        if(this.isConstant(true) || this.group === S)\r\n            return false;\r\n        if(this.fname && (core.Utils.in_trig(this.fname) || core.Utils.in_inverse_trig(this.fname)))\r\n            return true;\r\n        if(this.symbols) {\r\n            for(var x in this.symbols)\r\n                if(this.symbols[x].hasTrig())\r\n                    return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    core.Expression.prototype.hasIntegral = function () {\r\n        return this.symbol.hasIntegral();\r\n    };\r\n    /**\r\n     * Attempts to rewrite a symbol under one common denominator\r\n     * @param {Symbol} symbol \r\n     */\r\n    core.Utils.toCommonDenominator = function (symbol) {\r\n        //transform x/a+x -> (ax+x)/a\r\n        if(symbol.isComposite() && symbol.isLinear()) {\r\n            var m = new Symbol(symbol.multiplier);\r\n            var denominator = new Symbol(1);\r\n            var numerator = new Symbol(0);\r\n            symbol.each(function (x) {\r\n                denominator = _.multiply(denominator, x.getDenom());\r\n            }, true);\r\n\r\n            //remove the denomitor in each term\r\n            symbol.each(function (x) {\r\n                var num = x.getNum();\r\n                var den = x.getDenom();\r\n                var factor = _.multiply(num, _.divide(denominator.clone(), den));\r\n                numerator = _.add(numerator, factor);\r\n            });\r\n            var retval = _.multiply(m, core.Algebra.divide(_.expand(numerator), _.expand(denominator)));\r\n            return retval;\r\n        }\r\n        return symbol;\r\n    };\r\n    //A function to check if a function name is an inverse trig function\r\n    core.Utils.in_inverse_trig = function (x) {\r\n        var inv_trig_fns = [ASIN, ACOS, ATAN, ACSC, ASEC, ACOT];\r\n        return inv_trig_fns.indexOf(x) !== -1;\r\n    };\r\n    //A function to check if a function name is a trig function\r\n    core.Utils.in_trig = function (x) {\r\n        var trig_fns = [COS, SIN, TAN, SEC, CSC, COT];\r\n        return trig_fns.indexOf(x) !== -1;\r\n    };\r\n\r\n    core.Utils.in_htrig = function (x) {\r\n        var trig_fns = [SINH, COSH, TANH, ACSCH, ASECH, ACOTH];\r\n        return trig_fns.indexOf(x) !== -1;\r\n    };\r\n\r\n    // Matrix functions\r\n    core.Matrix.jacobian = function (eqns, vars) {\r\n        var jacobian = new core.Matrix();\r\n        //get the variables if not supplied\r\n        if(!vars) {\r\n            vars = core.Utils.arrayGetVariables(eqns);\r\n        }\r\n\r\n        vars.forEach(function (v, i) {\r\n            eqns.forEach(function (eq, j) {\r\n                var e = core.Calculus.diff(eq.clone(), v);\r\n                jacobian.set(j, i, e);\r\n            });\r\n        });\r\n\r\n        return jacobian;\r\n    };\r\n\r\n    core.Matrix.prototype.max = function () {\r\n        var max = new Symbol(0);\r\n        this.each(function (x) {\r\n            var e = x.abs();\r\n            if(e.gt(max))\r\n                max = e;\r\n        });\r\n        return max;\r\n    };\r\n\r\n    core.Matrix.cMatrix = function (value, vars) {\r\n        var m = new core.Matrix();\r\n        //make an initial guess\r\n        vars.forEach(function (v, i) {\r\n            m.set(i, 0, _.parse(value));\r\n        });\r\n        return m;\r\n    };\r\n\r\n    var all_functions = core.Utils.all_functions = function (arr) {\r\n        for(var i = 0, l = arr.length; i < l; i++)\r\n            if(arr[i].group !== FN)\r\n                return false;\r\n        return true;\r\n    },\r\n            cosAsinBtransform = core.Utils.cosAsinBtranform = function (symbol1, symbol2) {\r\n                var a, b;\r\n                a = symbol1.args[0];\r\n                b = symbol2.args[0];\r\n                return _.parse(format('(sin(({0})+({1}))-sin(({0})-({1})))/2', a, b));\r\n            },\r\n            cosAsinAtransform = core.Utils.cosAsinAtranform = function (symbol1, symbol2) {\r\n                //TODO: temporary fix for integrate(e^x*sin(x)*cos(x)^2).\r\n                //we technically know how to do this transform but more is needed for correct output\r\n                if(Number(symbol2.power) !== 1)\r\n                    return _.multiply(symbol1, symbol2);\r\n                var a;\r\n                a = symbol1.args[0];\r\n                return _.parse(format('(sin(2*({0})))/2', a));\r\n            },\r\n            sinAsinBtransform = core.Utils.cosAsinBtranform = function (symbol1, symbol2) {\r\n                var a, b;\r\n                a = symbol1.args[0];\r\n                b = symbol2.args[0];\r\n                return _.parse(format('(cos(({0})+({1}))-cos(({0})-({1})))/2', a, b));\r\n            },\r\n            trigTransform = core.Utils.trigTransform = function (arr) {\r\n                var map = {}, symbol, t,\r\n                        retval = new Symbol(1);\r\n                for(var i = 0, l = arr.length; i < l; i++) {\r\n                    symbol = arr[i];\r\n\r\n                    if(symbol.group === FN) {\r\n                        var fname = symbol.fname;\r\n\r\n                        if(fname === COS && map[SIN]) {\r\n\r\n                            if(map[SIN].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = cosAsinBtransform(symbol, map[SIN]);\r\n                            }\r\n                            else {\r\n                                t = cosAsinAtransform(symbol, map[SIN]);\r\n                            }\r\n                            delete map[SIN];\r\n\r\n                            retval = _.multiply(retval, t);\r\n                        }\r\n                        else if(fname === SIN && map[COS]) {\r\n                            if(map[COS].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = cosAsinBtransform(symbol, map[COS]);\r\n                            }\r\n                            else {\r\n                                t = cosAsinAtransform(symbol, map[COS]);\r\n                            }\r\n                            delete map[COS];\r\n\r\n                            retval = _.multiply(retval, t);\r\n                        }\r\n                        else if(fname === SIN && map[SIN]) {\r\n                            if(map[SIN].args[0].toString() !== symbol.args[0].toString()) {\r\n                                t = sinAsinBtransform(symbol, map[SIN]);\r\n                                delete map[SIN];\r\n                            }\r\n                            else {\r\n                                //This should actually be redundant code but let's put just in case\r\n                                t = _.multiply(symbol, map[SIN]);\r\n                                delete map[SIN];\r\n                            }\r\n\r\n                            retval = t;\r\n                        }\r\n                        else {\r\n                            map[fname] = symbol;\r\n                        }\r\n                    }\r\n                    else\r\n                        retval = _.multiply(retval, symbol);\r\n                }\r\n\r\n                //put back the remaining functions\r\n                for(var x in map)\r\n                    retval = _.multiply(retval, map[x]);\r\n\r\n                return retval;\r\n\r\n            };\r\n\r\n    core.Settings.integration_depth = 10;\r\n\r\n    core.Settings.max_lim_depth = 10;\r\n\r\n    var __ = core.Calculus = {\r\n\r\n        version: '1.4.6',\r\n\r\n        sum: function (fn, index, start, end) {\r\n            if(!(index.group === core.groups.S))\r\n                throw new core.exceptions.NerdamerTypeError('Index must be symbol. ' + text(index) + ' provided');\r\n            index = index.value;\r\n            var retval;\r\n            if(core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\r\n                var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\r\n                start = Number(start);\r\n                end = Number(end);\r\n                retval = core.Utils.block(modifier, function () {\r\n                    var f = fn.text(),\r\n                            subs = {'~': true}, //lock subs. Is this even being used?\r\n                            retval = new core.Symbol(0);\r\n\r\n                    for(var i = start; i <= end; i++) {\r\n                        subs[index] = new Symbol(i);\r\n                        var ans = _.parse(f, subs);\r\n                        retval = _.add(retval, ans);\r\n                    }\r\n                    return retval;\r\n                });\r\n            }\r\n            else {\r\n                retval = _.symfunction('sum', arguments);\r\n            }\r\n\r\n            return retval;\r\n        },\r\n        product: function (fn, index, start, end) {\r\n            if(!(index.group === core.groups.S))\r\n                throw new core.exceptions.NerdamerTypeError('Index must be symbol. ' + text(index) + ' provided');\r\n            index = index.value;\r\n            var retval;\r\n            if(core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\r\n                var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\r\n                retval = core.Utils.block(modifier, function () {\r\n                    start = Number(start);\r\n                    end = Number(end.multiplier);\r\n\r\n                    var f = fn.text(),\r\n                            subs = {},\r\n                            retval = new core.Symbol(1);\r\n\r\n                    for(var i = start; i <= end; i++) {\r\n                        subs[index] = new Symbol(i);\r\n                        retval = _.multiply(retval, _.parse(f, subs));\r\n                    }\r\n                    return retval;\r\n                });\r\n            }\r\n            else {\r\n                retval = _.symfunction('product', arguments);\r\n            }\r\n\r\n            return retval;\r\n        },\r\n        diff: function (symbol, wrt, nth) {\r\n            if(core.Utils.isVector(symbol)) {\r\n                var vector = new core.Vector([]);\r\n                symbol.each(function (x) {\r\n                    vector.elements.push(__.diff(x, wrt, nth));\r\n                });\r\n                return vector;\r\n            }\r\n            else if(core.Utils.isMatrix(symbol)) {\r\n                var matrix = new core.Matrix();\r\n                symbol.each(function (x, i, j) {\r\n                    matrix.set(i, j, __.diff(x, wrt, nth));\r\n                });\r\n                return matrix;\r\n            }\r\n\r\n            var d = isSymbol(wrt) ? wrt.text() : wrt;\r\n            //the nth derivative\r\n            nth = isSymbol(nth) ? nth.multiplier : nth || 1;\r\n\r\n            if(d === undefined)\r\n                d = core.Utils.variables(symbol)[0];\r\n\r\n            //unwrap sqrt\r\n            if(symbol.group === FN && symbol.fname === SQRT) {\r\n                var s = symbol.args[0],\r\n                        sp = symbol.power.clone();\r\n                //these groups go to zero anyway so why waste time?\r\n                if(s.group !== N || s.group !== P) {\r\n                    s.power = isSymbol(s.power) ? _.multiply(s.power, _.multiply(new Symbol(1 / 2)), sp) : s.power.multiply(new Frac(0.5)).multiply(sp);\r\n                    s.multiplier = s.multiplier.multiply(symbol.multiplier);\r\n                }\r\n\r\n                symbol = s;\r\n            }\r\n\r\n            if(symbol.group === FN && !isSymbol(symbol.power)) {\r\n                var a = derive(_.parse(symbol));\r\n                var b = __.diff(symbol.args[0].clone(), d);\r\n                symbol = _.multiply(a, b);//chain rule\r\n            }\r\n            else {\r\n                symbol = derive(symbol);\r\n            }\r\n\r\n            if(nth > 1) {\r\n                nth--;\r\n                symbol = __.diff(symbol, wrt, nth);\r\n            }\r\n\r\n            return symbol;\r\n\r\n            // Equivalent to \"derivative of the outside\".\r\n            function polydiff(symbol) {\r\n                if(symbol.value === d || symbol.contains(d, true)) {\r\n                    symbol.multiplier = symbol.multiplier.multiply(symbol.power);\r\n                    symbol.power = symbol.power.subtract(new Frac(1));\r\n                    if(symbol.power.equals(0)) {\r\n                        symbol = Symbol(symbol.multiplier);\r\n                    }\r\n                }\r\n\r\n                return symbol;\r\n            }\r\n            \r\n            function derive(symbol) {\r\n                var g = symbol.group, a, b, cp;\r\n\r\n                if(g === N || g === S && symbol.value !== d || g === P) {\r\n                    symbol = Symbol(0);\r\n                }\r\n                else if(g === S) {\r\n                    symbol = polydiff(symbol);\r\n                }\r\n                else if(g === CB) {\r\n                    var m = symbol.multiplier.clone();\r\n                    symbol.toUnitMultiplier();\r\n                    var retval = _.multiply(product_rule(symbol), polydiff(symbol));\r\n                    retval.multiplier = retval.multiplier.multiply(m);\r\n                    return retval;\r\n                }\r\n                else if(g === FN && symbol.power.equals(1)) {\r\n                    // Table of known derivatives\r\n                    switch(symbol.fname) {\r\n                        case LOG:\r\n                            cp = symbol.clone();\r\n                            symbol = symbol.args[0].clone();//get the arguments\r\n                            symbol.power = symbol.power.negate();\r\n                            symbol.multiplier = cp.multiplier.divide(symbol.multiplier);\r\n                            break;\r\n                        case COS:\r\n                            //cos -> -sin\r\n                            symbol.fname = SIN;\r\n                            symbol.multiplier.negate();\r\n                            break;\r\n                        case SIN:\r\n                            //sin -> cos\r\n                            symbol.fname = COS;\r\n                            break;\r\n                        case TAN:\r\n                            //tan -> sec^2\r\n                            symbol.fname = SEC;\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case SEC:\r\n                            // Use a clone if this gives errors\r\n                            symbol = qdiff(symbol, TAN);\r\n                            break;\r\n                        case CSC:\r\n                            symbol = qdiff(symbol, '-cot');\r\n                            break;\r\n                        case COT:\r\n                            symbol.fname = CSC;\r\n                            symbol.multiplier.negate();\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case ASIN:\r\n                            symbol = _.parse('(sqrt(1-(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case ACOS:\r\n                            symbol = _.parse('-(sqrt(1-(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case ATAN:\r\n                            symbol = _.parse('(1+(' + text(symbol.args[0]) + ')^2)^(-1)');\r\n                            break;\r\n                        case ABS:\r\n                            m = symbol.multiplier.clone();\r\n                            symbol.toUnitMultiplier();\r\n                            //depending on the complexity of the symbol it's easier to just parse it into a new symbol\r\n                            //this should really be readdressed soon\r\n                            b = symbol.args[0].clone();\r\n                            b.toUnitMultiplier();\r\n                            symbol = _.parse(inBrackets(text(symbol.args[0])) + '/abs' + inBrackets(text(b)));\r\n                            symbol.multiplier = m;\r\n                            break;\r\n                        case 'parens':\r\n                            //see product rule: f'.g goes to zero since f' will return zero. This way we only get back\r\n                            //1*g'\r\n                            symbol = Symbol(1);\r\n                            break;\r\n                        case 'cosh':\r\n                            //cosh -> -sinh\r\n                            symbol.fname = 'sinh';\r\n                            break;\r\n                        case 'sinh':\r\n                            //sinh -> cosh\r\n                            symbol.fname = 'cosh';\r\n                            break;\r\n                        case TANH:\r\n                            //tanh -> sech^2\r\n                            symbol.fname = SECH;\r\n                            symbol.power = new Frac(2);\r\n                            break;\r\n                        case SECH:\r\n                            // Use a clone if this gives errors\r\n                            symbol = qdiff(symbol, '-tanh');\r\n                            break;\r\n                        case CSCH:\r\n                            var arg = String(symbol.args[0]);\r\n                            return _.parse('-coth(' + arg + ')*csch(' + arg + ')');\r\n                            break;\r\n                        case COTH:\r\n                            var arg = String(symbol.args[0]);\r\n                            return _.parse('-csch(' + arg + ')^2');\r\n                            break;\r\n                        case 'asinh':\r\n                            symbol = _.parse('(sqrt(1+(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case 'acosh':\r\n                            symbol = _.parse('(sqrt(-1+(' + text(symbol.args[0]) + ')^2))^(-1)');\r\n                            break;\r\n                        case 'atanh':\r\n                            symbol = _.parse('(1-(' + text(symbol.args[0]) + ')^2)^(-1)');\r\n                            break;\r\n                        case ASECH:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1/(' + arg + ')^2-1)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACOTH:\r\n                            symbol = _.parse('-1/((' + symbol.args[0] + ')^2-1)');\r\n                            break;\r\n                        case ACSCH:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1/(' + arg + ')^2+1)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ASEC:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('1/(sqrt(1-1/(' + arg + ')^2)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACSC:\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('-1/(sqrt(1-1/(' + arg + ')^2)*(' + arg + ')^2)');\r\n                            break;\r\n                        case ACOT:\r\n                            symbol = _.parse('-1/((' + symbol.args[0] + ')^2+1)');\r\n                            break;\r\n                        case 'S':\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('sin((pi*(' + arg + ')^2)/2)');\r\n                            break;\r\n                        case 'C':\r\n                            var arg = String(symbol.args[0]);\r\n                            symbol = _.parse('cos((pi*(' + arg + ')^2)/2)');\r\n                            break;\r\n                        case 'Si':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('sin(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Shi':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('sinh(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Ci':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('cos(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Chi':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('cosh(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Ei':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('e^(' + arg + ')/(' + arg + ')');\r\n                            break;\r\n                        case 'Li':\r\n                            var arg = symbol.args[0];\r\n                            symbol = _.parse('1/' + Settings.LOG + '(' + arg + ')');\r\n                            break;\r\n                        case 'erf':\r\n                            symbol = _.parse('(2*e^(-(' + symbol.args[0] + ')^2))/sqrt(pi)');\r\n                            break;\r\n                        case 'atan2':\r\n                            var x_ = String(symbol.args[0]),\r\n                                    y_ = String(symbol.args[1]);\r\n                            symbol = _.parse('(' + y_ + ')/((' + y_ + ')^2+(' + x_ + ')^2)');\r\n                            break;\r\n                        case 'sign':\r\n                            symbol = new Symbol(0);\r\n                            break;\r\n                        case 'sinc':\r\n                            symbol = _.parse(format('(({0})*cos({0})-sin({0}))*({0})^(-2)', symbol.args[0]));\r\n                            break;\r\n                        case Settings.LOG10:\r\n                            symbol = _.parse('1/((' + symbol.args[0] + ')*' + Settings.LOG + '(10))');\r\n                            break;\r\n                        default:\r\n                            symbol = _.symfunction('diff', [symbol, wrt]);\r\n                    }\r\n                }\r\n                else if(g === EX || g === FN && isSymbol(symbol.power)) {\r\n                    var value;\r\n                    if(g === EX) {\r\n                        value = symbol.value;\r\n                    }\r\n                    else if(g === FN && symbol.contains(d)) {\r\n                        value = symbol.fname + inBrackets(text(symbol.args[0]));\r\n                    }\r\n                    else {\r\n                        value = symbol.value + inBrackets(text(symbol.args[0]));\r\n                    }\r\n                    a = _.multiply(_.parse(LOG + inBrackets(value)), symbol.power.clone());\r\n                    b = __.diff(_.multiply(_.parse(LOG + inBrackets(value)), symbol.power.clone()), d);\r\n                    symbol = _.multiply(symbol, b);\r\n                }\r\n                else if(g === FN && !symbol.power.equals(1)) {\r\n                    b = symbol.clone();\r\n                    b.toLinear();\r\n                    b.toUnitMultiplier();\r\n                    symbol = _.multiply(polydiff(symbol.clone()), derive(b));\r\n                }\r\n                else if(g === CP || g === PL) {\r\n                    // Note: Do not use `parse` since this puts back the sqrt and causes a bug as in #610. Use clone.\r\n                    var c = symbol.clone();\r\n                    var result = new Symbol(0);\r\n                    for(var x in symbol.symbols) {\r\n                        result = _.add(result, __.diff(symbol.symbols[x].clone(), d));\r\n                    }\r\n                    symbol = _.multiply(polydiff(c), result);\r\n                }\r\n\r\n                symbol.updateHash();\r\n\r\n                return symbol;\r\n            }\r\n            ;\r\n\r\n            function qdiff(symbol, val, altVal) {\r\n                return _.multiply(symbol, _.parse(val + inBrackets(altVal || text(symbol.args[0]))));\r\n            }\r\n            ;\r\n\r\n            function product_rule(symbol) {\r\n                //grab all the symbols within the CB symbol\r\n                var symbols = symbol.collectSymbols(),\r\n                        result = new Symbol(0),\r\n                        l = symbols.length;\r\n                //loop over all the symbols\r\n                for(var i = 0; i < l; i++) {\r\n                    var df = __.diff(symbols[i].clone(), d);\r\n                    for(var j = 0; j < l; j++) {\r\n                        //skip the symbol of which we just pulled the derivative\r\n                        if(i !== j) {\r\n                            //multiply out the remaining symbols\r\n                            df = _.multiply(df, symbols[j].clone());\r\n                        }\r\n                    }\r\n                    //add the derivative to the result\r\n                    result = _.add(result, df);\r\n                }\r\n                return result; //done\r\n            }\r\n            ;\r\n        },\r\n        integration: {\r\n            u_substitution: function (symbols, dx) {\r\n                function try_combo(a, b, f) {\r\n                    var d = __.diff(b, dx);\r\n                    var q = f ? f(a, b) : _.divide(a.clone(), d);\r\n                    if(!q.contains(dx, true))\r\n                        return q;\r\n                    return null;\r\n                }\r\n                function do_fn_sub(fname, arg) {\r\n                    var subbed = __.integrate(_.symfunction(fname, [new Symbol(u)]), u, 0);\r\n                    subbed = subbed.sub(new Symbol(u), arg);\r\n                    subbed.updateHash();\r\n                    return subbed;\r\n                }\r\n\r\n                var a = symbols[0].clone(),\r\n                        b = symbols[1].clone(),\r\n                        g1 = a.group,\r\n                        g2 = b.group,\r\n                        //may cause problems if person is using this already. Will need\r\n                        //to find algorithm for detecting conflict\r\n                        u = '__u__',\r\n                        Q;\r\n                if(g1 === FN && g2 !== FN) {\r\n                    //e.g. 2*x*cos(x^2)\r\n                    var arg = a.args[0];\r\n                    Q = try_combo(b, arg.clone());\r\n                    if(Q)\r\n                        return _.multiply(Q, do_fn_sub(a.fname, arg));\r\n                    Q = try_combo(b, a);\r\n                    if(Q) {\r\n                        return __.integration.poly_integrate(a);\r\n                    }\r\n                }\r\n                else if(g2 === FN && g1 !== FN) {\r\n                    //e.g. 2*(x+1)*cos((x+1)^2\r\n                    var arg = b.args[0];\r\n                    Q = try_combo(a, arg.clone());\r\n                    if(Q)\r\n                        return _.multiply(Q, do_fn_sub(b.fname, arg));\r\n                }\r\n                else if(g1 === FN && g2 === FN) {\r\n                    Q = try_combo(a.clone(), b.clone());\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                    Q = try_combo(b.clone(), a.clone());\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                }\r\n                else if(g1 === EX && g2 !== EX) {\r\n                    var p = a.power;\r\n                    Q = try_combo(b, p.clone());\r\n                    if(!Q) {\r\n                        //one more try\r\n                        var dc = __.integration.decompose_arg(p.clone(), dx);\r\n                        //consider the possibility of a^x^(n-1)*x^n dx\r\n                        var xp = __.diff(dc[2].clone(), dx);\r\n                        var dc2 = __.integration.decompose_arg(xp.clone(), dx);\r\n                        //if their powers equal, so if dx*p == b\r\n                        if(_.multiply(dc[1], dc2[1]).power.equals(b.power)) {\r\n                            var m = _.divide(dc[0].clone(), dc2[0].clone());\r\n\r\n                            var new_val = _.multiply(m.clone(), _.pow(new Symbol(a.value), _.multiply(dc[0], new Symbol(u))));\r\n                            new_val = _.multiply(new_val, new Symbol(u));\r\n                            return __.integration.by_parts(new_val, u, 0, {}).sub(u, dc[1].clone());\r\n                        }\r\n\r\n                    }\r\n                    var integrated = __.integrate(a.sub(p.clone(), new Symbol(u)), u, 0),\r\n                            retval = _.multiply(integrated.sub(new Symbol(u), p), Q);\r\n\r\n\r\n                    return retval;\r\n                }\r\n                else if(g2 === EX && g1 !== EX) {\r\n                    var p = b.power;\r\n                    Q = try_combo(a, p.clone());\r\n                    var integrated = __.integrate(b.sub(p, new Symbol(u)), u, 0);\r\n                    return _.multiply(integrated.sub(new Symbol(u), p), Q);\r\n                }\r\n                else if(a.isComposite() || b.isComposite()) {\r\n                    var f = function (a, b) {\r\n                        var d = __.diff(b, dx);\r\n                        var A = core.Algebra.Factor.factor(a),\r\n                                B = core.Algebra.Factor.factor(d);\r\n                        var q = _.divide(A, B);\r\n                        return q;\r\n                    };\r\n                    var f1 = a.isComposite() ? a.clone().toLinear() : a.clone(),\r\n                            f2 = b.isComposite() ? b.clone().toLinear() : b.clone();\r\n                    Q = try_combo(f1.clone(), f2.clone(), f);\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(b), Q);\r\n                    Q = try_combo(f2.clone(), f1.clone(), f);\r\n                    if(Q)\r\n                        return _.multiply(__.integration.poly_integrate(a), Q);\r\n                }\r\n            },\r\n            //simple integration of a single polynomial x^(n+1)/(n+1)\r\n            poly_integrate: function (x) {\r\n                var p = x.power.toString(),\r\n                        m = x.multiplier.toDecimal(),\r\n                        s = x.toUnitMultiplier().toLinear();\r\n                if(Number(p) === -1) {\r\n                    return _.multiply(new Symbol(m), _.symfunction(LOG, [s]));\r\n                }\r\n                return _.parse(format('({0})*({1})^(({2})+1)/(({2})+1)', m, s, p));\r\n            },\r\n            //If we're just spinning wheels we want to stop. This is why we \r\n            //wrap integration in a try catch block and call this to stop.\r\n            stop: function (msg) {\r\n                msg = msg || 'Unable to compute integral!';\r\n                core.Utils.warn(msg);\r\n                throw new NoIntegralFound(msg);\r\n            },\r\n            partial_fraction: function (input, dx, depth, opt) {\r\n                //TODO: This whole thing needs to be rolled into one but for now I'll leave it as two separate parts\r\n                if(!isSymbol(dx))\r\n                    dx = _.parse(dx);\r\n\r\n                var result, partial_fractions;\r\n                result = new Symbol(0);\r\n                partial_fractions = core.Algebra.PartFrac.partfrac(input, dx);\r\n\r\n                if(partial_fractions.group === CB && partial_fractions.isLinear()) {\r\n                    //perform a quick check to make sure that all partial fractions are linear\r\n                    partial_fractions.each(function (x) {\r\n                        if(!x.isLinear())\r\n                            __.integration.stop();\r\n                    });\r\n                    partial_fractions.each(function (x) {\r\n                        result = _.add(result, __.integrate(x, dx, depth, opt));\r\n                    });\r\n                }\r\n                else {\r\n                    result = _.add(result, __.integrate(partial_fractions, dx, depth, opt));\r\n                }\r\n                return result;\r\n            },\r\n            get_udv: function (symbol) {\r\n                var parts = [[/*L*/], [/*I*/], [/*A*/], [/*T*/], [/*E*/]];\r\n                //first we sort them \r\n                var setSymbol = function (x) {\r\n                    var g = x.group;\r\n                    if(g === FN) {\r\n                        var fname = x.fname;\r\n                        if(core.Utils.in_trig(fname) || core.Utils.in_htrig(fname))\r\n                            parts[3].push(x);\r\n                        else if(core.Utils.in_inverse_trig(fname))\r\n                            parts[1].push(x);\r\n                        else if(fname === LOG)\r\n                            parts[0].push(x);\r\n                        else {\r\n                            __.integration.stop();\r\n                        }\r\n                    }\r\n                    else if(g === S || x.isComposite() && x.isLinear() || g === CB && x.isLinear()) {\r\n                        parts[2].push(x);\r\n                    }\r\n                    else if(g === EX || x.isComposite() && !x.isLinear())\r\n                        parts[4].push(x);\r\n                    else\r\n                        __.integration.stop();\r\n                };\r\n\r\n                if(symbol.group === CB)\r\n                    symbol.each(function (x) {\r\n                        setSymbol(Symbol.unwrapSQRT(x, true));\r\n                    });\r\n                else\r\n                    setSymbol(symbol);\r\n                var u, dv = new Symbol(1);\r\n                //compile u and dv\r\n                for(var i = 0; i < 5; i++) {\r\n                    var part = parts[i], t,\r\n                            l = part.length;\r\n                    if(l > 0) {\r\n                        if(l > 1) {\r\n                            t = new Symbol(1);\r\n                            for(var j = 0; j < l; j++)\r\n                                t = _.multiply(t, part[j].clone());\r\n                        }\r\n                        else\r\n                            t = part[0].clone();\r\n\r\n                        if(!u) {\r\n                            u = t;//the first u encountered gets chosen\r\n                            u.multiplier = u.multiplier.multiply(symbol.multiplier); //the first one gets the mutliplier\r\n                        }\r\n                        else\r\n                            dv = _.multiply(dv, t); //everything else belongs to dv\r\n                    }\r\n                }\r\n\r\n                return [u, dv];\r\n            },\r\n\r\n            trig_sub: function (symbol, dx, depth, opt, parts, symbols) {\r\n                parts = parts || __.integration.decompose_arg(symbol.clone().toLinear(), dx);\r\n                var b = parts[3],\r\n                        ax = parts[2],\r\n                        a = parts[0],\r\n                        x = parts[1];\r\n                if(x.power.equals(2) && a.greaterThan(0)) {\r\n                    //use tan(x)\r\n                    var t = core.Utils.getU(symbol), //get an appropriate u\r\n                            u = _.parse(TAN + inBrackets(t)), //u\r\n                            du = _.parse(SEC + inBrackets(t) + '^2'), //du\r\n                            f = _.multiply(symbol.sub(x, u), du);\r\n                    var integral = __.integrate(f, t, depth, opt).sub(u, x);\r\n                    core.Utils.clearU(u);\r\n                    return integral;\r\n                }\r\n            },\r\n\r\n            by_parts: function (symbol, dx, depth, o) {\r\n                o.previous = o.previous || [];\r\n                var udv, u, dv, du, v, vdu, uv, retval, integral_vdu, m, c, vdu_s;\r\n                //first LIATE\r\n                udv = __.integration.get_udv(symbol);\r\n                u = udv[0];\r\n                dv = udv[1];\r\n                du = Symbol.unwrapSQRT(_.expand(__.diff(u.clone(), dx)), true);\r\n                c = du.clone().stripVar(dx);\r\n                //strip any coefficients\r\n                du = _.divide(du, c.clone());\r\n                v = __.integrate(dv.clone(), dx, depth || 0);\r\n                vdu = _.multiply(v.clone(), du);\r\n                vdu_s = vdu.toString();\r\n                //currently only supports e^x*(some trig)\r\n                if(o.previous.indexOf(vdu_s) !== -1 && (core.Utils.in_trig(u.fname)) && dv.isE()) {\r\n                    //We're going to exploit the fact that vdu can never be constant\r\n                    //to work out way out of this cycle. We'll return the length of\r\n                    //the this.previous array until we're back at level one\r\n                    o.is_cyclic = true;\r\n                    //return the integral. \r\n                    return new Symbol(1);\r\n                }\r\n                else\r\n                    o.previous.push(vdu_s);\r\n\r\n                uv = _.multiply(u, v);\r\n                //clear the multiplier so we're dealing with a bare integral\r\n                m = vdu.multiplier.clone();\r\n                vdu.toUnitMultiplier();\r\n                integral_vdu = _.multiply(__.integrate(vdu.clone(), dx, depth, o), c);\r\n                integral_vdu.multiplier = integral_vdu.multiplier.multiply(m);\r\n                retval = _.subtract(uv, integral_vdu);\r\n                //we know that there cannot be constants so they're a holdover from a cyclic integral\r\n                if(o.is_cyclic) {\r\n                    //start popping the previous stack so we know how deep in we are\r\n                    o.previous.pop();\r\n                    if(o.previous.length === 0) {\r\n                        retval = _.expand(retval);\r\n                        var rem = new Symbol(0);\r\n                        retval.each(function (x) {\r\n                            if(!x.contains(dx))\r\n                                rem = _.add(rem, x.clone());\r\n                        });\r\n                        //get the actual uv\r\n                        retval = _.divide(_.subtract(retval, rem.clone()), _.subtract(new Symbol(1), rem));\r\n                    }\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            /*\r\n             * dependents: [Solve, integrate]\r\n             */\r\n            decompose_arg: core.Utils.decompose_fn\r\n        },\r\n        //TODO: nerdamer.integrate('-e^(-a*t)*sin(t)', 't') -> gives incorrect output\r\n        integrate: function (original_symbol, dt, depth, opt) {\r\n            //assume integration wrt independent variable if expression only has one variable\r\n            if(!dt) {\r\n                var vars = core.Utils.variables(original_symbol);\r\n                if(vars.length === 1)\r\n                    dt = vars[0];\r\n                //defaults to x\r\n                dt = dt || 'x';\r\n            }\r\n            //add support for integrating vectors\r\n            if(core.Utils.isVector(original_symbol)) {\r\n                var vector = new core.Vector([]);\r\n                original_symbol.each(function (x) {\r\n                    vector.elements.push(__.integrate(x, dt));\r\n                });\r\n                return vector;\r\n            }\r\n            if(!isNaN(dt))\r\n                _.error('variable expected but received ' + dt);\r\n            //get rid of constants right away\r\n            if(original_symbol.isConstant(true))\r\n                return _.multiply(original_symbol.clone(), _.parse(dt));\r\n\r\n            //configurations options for integral. This is needed for tracking extra options\r\n            //e.g. cyclic integrals or additional settings\r\n            opt = opt || {};\r\n            return core.Utils.block('PARSE2NUMBER', function () {\r\n                //make a note of the original symbol. Set only if undefined\r\n                depth = depth || 0;\r\n                var dx = isSymbol(dt) ? dt.toString() : dt,\r\n                        //we don't want the symbol in sqrt form. x^(1/2) is prefererred\r\n                        symbol = Symbol.unwrapSQRT(original_symbol.clone(), true),\r\n                        g = symbol.group,\r\n                        retval;\r\n\r\n                try {\r\n                    //We stop integration after x amount of recursive calls\r\n                    if(++depth > core.Settings.integration_depth)\r\n                        __.integration.stop('Maximum depth reached. Exiting!');\r\n\r\n                    //constants. We first eliminate anything that doesn't have dx. Everything after this has \r\n                    //to have dx or else it would have been taken care of below\r\n                    if(!symbol.contains(dx, true)) {\r\n                        retval = _.multiply(symbol.clone(), _.parse(dx));\r\n                    }\r\n                    //e.g. 2*x\r\n                    else if(g === S) {\r\n                        retval = __.integration.poly_integrate(symbol, dx, depth);\r\n                    }\r\n                    else if(g === EX) {\r\n                        if(symbol.previousGroup === FN && !(symbol.fname === 'sqrt' || symbol.fname === Settings.PARENTHESIS))\r\n                            __.integration.stop();\r\n                        //check the base\r\n                        if(symbol.contains(dx) && symbol.previousGroup !== FN) {\r\n                            //if the symbol also contains dx then we stop since we currently \r\n                            //don't know what to do with it e.g. x^x\r\n                            if(symbol.power.contains(dx))\r\n                                __.integration.stop();\r\n                            else {\r\n                                var t = __.diff(symbol.clone().toLinear(), dx);\r\n                                if(t.contains(dx))\r\n                                    __.integration.stop();\r\n                                //since at this point it's the base only then we do standard single poly integration\r\n                                //e.g. x^y\r\n                                retval = __.integration.poly_integrate(symbol, dx, depth);\r\n                            }\r\n                        }\r\n                        //e.g. a^x or 9^x\r\n                        else {\r\n                            var a = __.diff(symbol.power.clone(), dx);\r\n                            if(a.contains(dx)) {\r\n                                var aa = a.stripVar(dx),\r\n                                        x = _.divide(a.clone(), aa.clone());\r\n                                if(x.group === S && x.isLinear()) {\r\n                                    aa.multiplier = aa.multiplier.divide(new Frac(2));\r\n                                    return _.parse(format('({2})*(sqrt(pi)*erf(sqrt(-{0})*{1}))/(2*sqrt(-{0}))', aa, dx, symbol.multiplier));\r\n                                }\r\n                                else\r\n                                    __.integration.stop();\r\n                            }\r\n                            if(symbol.isE()) {\r\n                                if(a.isLinear())\r\n                                    retval = symbol;\r\n                                else {\r\n                                    if(a.isE() && a.power.group === S && a.power.power.equals(1))\r\n                                        retval = _.multiply(_.symfunction('Ei', [symbol.power.clone()]), symbol.power);\r\n                                    else\r\n                                        __.integration.stop();\r\n                                }\r\n                            }\r\n                            else {\r\n                                var d = _.symfunction(LOG, [_.parse(symbol.value)]);\r\n                                retval = _.divide(symbol, d);\r\n                            }\r\n                            retval = _.divide(retval, a);\r\n                        }\r\n                    }\r\n                    else if(symbol.isComposite() && symbol.isLinear()) {\r\n                        var m = _.parse(symbol.multiplier);\r\n                        symbol.toUnitMultiplier();\r\n                        retval = new Symbol(0);\r\n                        symbol.each(function (x) {\r\n                            retval = _.add(retval, __.integrate(x, dx, depth));\r\n                        });\r\n                        retval = _.multiply(m, retval);\r\n                    }\r\n                    else if(g === CP) {\r\n                        if(symbol.power.greaterThan(1))\r\n                            symbol = _.expand(symbol);\r\n                        if(symbol.power.equals(1)) {\r\n                            retval = new Symbol(0);\r\n                            symbol.each(function (x) {\r\n                                retval = _.add(retval, __.integrate(x, dx, depth));\r\n                            }, true);\r\n                        }\r\n                        else {\r\n                            var p = Number(symbol.power),\r\n                                    m = symbol.multiplier.clone();//temporarily remove the multiplier\r\n                            symbol.toUnitMultiplier();\r\n                            var //below we consider the form ax+b\r\n                                    fn = symbol.clone().toLinear(), //get just the pure function without the power\r\n                                    decomp = __.integration.decompose_arg(fn, dx),\r\n                                    //I have no idea why I used bx+a and not ax+b. TODO change this to something that makes sense\r\n                                    b = decomp[3],\r\n                                    ax = decomp[2],\r\n                                    a = decomp[0],\r\n                                    x = decomp[1];\r\n                            if(p === -1 && x.group !== PL && x.power.equals(2)) {\r\n                                var b_is_positive = isInt(b) ? b > 0 : true;\r\n                                //we can now check for atan\r\n                                if(x.group === S && x.power.equals(2) && b_is_positive) {\r\n                                    ////then we have atan\r\n                                    //abs is redundants since the sign appears in both denom and num.\r\n                                    var unwrapAbs = function (s) {\r\n                                        var result = new Symbol(1);\r\n                                        s.each(function (x) {\r\n                                            result = _.multiply(result, x.fname === 'abs' ? x.args[0] : x);\r\n                                        });\r\n                                        return result;\r\n                                    };\r\n                                    var A = a.clone(),\r\n                                            B = b.clone();\r\n                                    A = _.pow(A, new Symbol(1 / 2));\r\n                                    B = _.pow(B, new Symbol(1 / 2));\r\n                                    //unwrap abs\r\n\r\n                                    var d = _.multiply(unwrapAbs(B), unwrapAbs(A)),\r\n                                            f = _.symfunction(ATAN, [_.divide(_.multiply(a, x.toLinear()), d.clone())]);\r\n                                    retval = _.divide(f, d);\r\n                                }\r\n                                else if(x.group === S && x.isLinear()) {\r\n                                    retval = _.divide(__.integration.poly_integrate(symbol), a);\r\n                                }\r\n                                else {\r\n                                    //1/(x^4+1)\r\n                                    if(x.power.equals(4)) {\r\n                                        //https://www.freemathhelp.com/forum/threads/55678-difficult-integration-int-1-(1-x-4)-dx\r\n                                        var A, B, C, D, E, F, f1, f2, f3, f4, L1, L2;\r\n                                        var br = inBrackets;\r\n                                        //apply rule: ax^4+b = (√ax^2+√2∜a∜bx+√b)(√ax^2-√2∜a∜bx+√b)\r\n                                        //get quadratic factors\r\n                                        A = _.parse(SQRT + br(a) + '*' + dx + '^2');\r\n                                        B = _.parse(SQRT + br(2) + '*' + br(a) + '^' + br('1/4') + '*' + br(b) + '^' + br('1/4') + '*' + dx);\r\n                                        C = _.parse(SQRT + br(b));\r\n                                        f1 = _.add(_.add(A.clone(), B.clone()), C.clone());\r\n                                        f2 = _.add(_.subtract(A, B), C);\r\n                                        //calculate numerators: [D+E, D-E] -> [√2*b^(3/4)+√b∜ax, √2*b^(3/4)-√b∜ax]\r\n                                        D = _.parse(SQRT + br(2) + '*' + br(b) + '^' + br('3/4'));\r\n                                        E = _.parse(SQRT + br(b) + '*' + br(b) + '^' + br('1/4') + '*' + dx);\r\n                                        //let F = 2b√2∜b\r\n                                        F = _.parse(2 + '*' + br(b) + '*' + SQRT + br(2) + '*' + br(b) + '^' + br('1/4'));\r\n                                        //calculate the factors\r\n                                        L1 = _.divide(_.subtract(D.clone(), E.clone()), _.multiply(F.clone(), f2));\r\n                                        L2 = _.divide(_.add(D, E), _.multiply(F, f1.clone()));\r\n                                        retval = _.add(\r\n                                                __.integrate(L1, dx, depth, opt),\r\n                                                __.integrate(L2, dx, depth, opt)\r\n                                                );\r\n                                    }\r\n                                    else\r\n                                        //let's try partial fractions\r\n                                        retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                }\r\n                            }\r\n                            else if(p === -1 / 2) {\r\n                                //detect asin and atan\r\n                                if(x.group === S && x.power.equals(2)) {\r\n                                    if(ax.multiplier.lessThan(0) && !b.multiplier.lessThan(0)) {\r\n                                        a.negate();\r\n                                        //it's asin\r\n                                        if(b.isConstant() && a.isConstant()) {\r\n                                            var d = _.symfunction(SQRT, [a.clone()]),\r\n                                                    d2 = _.symfunction(SQRT, [_.multiply(a.clone(), b)]);\r\n                                            retval = _.divide(_.symfunction(ASIN, [_.divide(ax.toLinear(), d2)]), d);\r\n                                        }\r\n                                        //I'm not sure about this one. I'm trusting Wolfram Alpha here\r\n                                        else {\r\n                                            var sqrt_a = _.symfunction(SQRT, [a]),\r\n                                                    sqrt_ax = _.multiply(sqrt_a.clone(), x.clone().toLinear());\r\n                                            retval = _.divide(_.symfunction(ATAN, [_.divide(sqrt_ax, _.symfunction(SQRT, [fn.clone()]))]), sqrt_a);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        /*WHAT HAPPENS HERE???? e.g. integrate(3/sqrt(-a+b*x^2),x) or integrate(3/sqrt(a+b*x^2),x)*/\r\n                                        __.integration.stop();\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    //This would be a case like 1/(sqrt(1-x^3) or 1/(1-(x+1)^2)\r\n                                    __.integration.stop();\r\n                                }\r\n                            }\r\n                            else if(p === 1/2 && x.power.equals(2) && a.greaterThan(0)) {\r\n                                // TODO: Revisit\r\n                                __.integration.stop();\r\n                            }\r\n                            else {\r\n                                if(x.isLinear() && x.group !== PL)\r\n                                    retval = _.divide(__.integration.poly_integrate(symbol), a);\r\n                                else if(x.power.equals(2) && a.greaterThan(0)) {\r\n                                    var sqa, sqb, aob, bsqi, n, integral, u, v, uv;\r\n                                    //1/(a*x^2+b^2)^n\r\n                                    //strip the value of b so b = 1\r\n                                    sqa = _.parse(SQRT + inBrackets(a)); //strip a so b = 1\r\n                                    sqb = _.parse(SQRT + inBrackets(b));\r\n                                    aob = _.multiply(sqa.clone(), sqb.clone()).invert();\r\n                                    bsqi = _.pow(b, new Symbol(symbol.power));\r\n                                    uv = core.Utils.getU(symbol);\r\n                                    u = _.multiply(aob, x.clone().toLinear());\r\n                                    v = _.parse(ATAN + inBrackets(u));\r\n                                    //the conversion will be 1+tan(x)^2 -> sec(x)^2\r\n                                    //since the denominator is now (sec(x)^2)^n and the numerator is sec(x)^2 \r\n                                    //then the remaining sec will be (n-1)*2;\r\n                                    var n = (Math.abs(symbol.power) - 1) * 2;\r\n                                    //1/sec(x)^n can now be converted to cos(x)^n and we can pull the integral of that\r\n                                    var integral = __.integrate(_.parse(COS + inBrackets(uv) + '^' + n));\r\n                                    core.Utils.clearU(uv);\r\n                                    return _.multiply(integral.sub(uv, v), bsqi);\r\n                                }\r\n                                else {\r\n                                    if(symbol.group !== CB && !symbol.power.lessThan(0)) {\r\n                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                    }\r\n                                    else {\r\n                                        var f = symbol.clone().toLinear();\r\n                                        var factored = core.Algebra.Factor.factor(f);\r\n                                        var was_factored = factored.toString() !== f.toString();\r\n                                        if(core.Algebra.degree(f, _.parse(dx)).equals(2) && !was_factored) {\r\n                                            try {\r\n                                                var f1, fx, u, sq;\r\n                                                sq = core.Algebra.sqComplete(f, dx);\r\n                                                u = core.Utils.getU(f);\r\n                                                f1 = sq.f.sub(sq.a, u);\r\n                                                fx = _.pow(f1, _.parse(symbol.power));\r\n                                                retval = __.integrate(fx, u).sub(u, sq.a);\r\n                                            }\r\n                                            catch(e) {\r\n                                                __.integration.stop();\r\n                                            }\r\n                                        }\r\n                                        else\r\n                                            retval = __.integration.partial_fraction(symbol, dx, depth, opt);\r\n                                    }\r\n                                }\r\n                            }\r\n                            retval.multiplier = retval.multiplier.multiply(m);\r\n                        }\r\n                    }\r\n                    else if(g === FN) {\r\n                        var arg = symbol.args[0],\r\n                                m = symbol.multiplier.clone();\r\n                        symbol.toUnitMultiplier();\r\n                        var decomp = __.integration.decompose_arg(arg, dx);\r\n                        //easies way I can think of to get the coefficient and to make sure\r\n                        //that the symbol is linear wrt dx. I'm not actually trying to get the \r\n                        //derivative\r\n                        var a = decomp[0],\r\n                                x = decomp[1],\r\n                                fname = symbol.fname;\r\n                        //log is a special case that can be handled with integration by parts\r\n                        if(fname === LOG || (fname === ASIN || fname === ACOS || fname === ATAN && x.isLinear())) {\r\n                            /*integration by parts */\r\n                            var p = symbol.power.toString();\r\n                            if(isInt(p))\r\n                                depth = depth - p; //it needs more room to find the integral\r\n\r\n                            if(!arg.isComposite())\r\n                                retval = _.multiply(_.parse(m), __.integration.by_parts(symbol, dx, depth, opt));\r\n                            else {\r\n                                //integral u du\r\n                                var u = core.Utils.getU(symbol);\r\n                                var f = _.pow(_.parse(LOG + inBrackets(u)), new Symbol(p));\r\n                                var du = __.diff(arg, dx);\r\n                                var u_du = _.multiply(f, du);\r\n                                var integral = __.integrate(u_du, u, depth, opt);\r\n                                retval = _.multiply(_.parse(m), integral.sub(u, arg));\r\n                            }\r\n\r\n                        }\r\n                        else if(fname === TAN && symbol.power.lessThan(0)) {\r\n                            //convert to cotangent\r\n                            var sym = symbol.clone();\r\n                            sym.power.negate();\r\n                            sym.fname = COT;\r\n                            return _.multiply(_.parse(m), __.integrate(sym, dx, depth));\r\n                        }\r\n                        else {\r\n                            if(!a.contains(dx, true) && symbol.isLinear()) { //perform a deep search for safety\r\n                                //first handle the special cases \r\n                                if(fname === ABS) {\r\n                                    //REVISIT **TODO**\r\n                                    var x = _.divide(arg.clone(), a.clone());\r\n                                    if(x.group === S && !x.power.lessThan(0)) {\r\n                                        if(core.Utils.even(x.power)) {\r\n                                            retval = __.integrate(arg, dx, depth);\r\n                                        }\r\n                                        else {\r\n                                            var integrated = __.integrate(x, dx, depth);\r\n                                            integrated.power = integrated.power.subtract(new Frac(1));\r\n                                            retval = _.multiply(_.multiply(_.symfunction(ABS, [x.toLinear()]), integrated), a);\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                        __.integration.stop();\r\n                                }\r\n                                else {\r\n                                    var ag = symbol.args[0].group,\r\n                                            decomposed = __.integration.decompose_arg(arg, dx);\r\n\r\n                                    if(!(ag === CP || ag === S || ag === CB) || !decomposed[1].power.equals(1) || arg.hasFunc())\r\n                                        __.integration.stop();\r\n                                    /**TODO**/ //ASIN, ACOS, ATAN\r\n                                    switch(fname) {\r\n                                        case COS:\r\n                                            retval = _.symfunction(SIN, [arg]);\r\n                                            break;\r\n                                        case SIN:\r\n                                            retval = _.symfunction(COS, [arg]);\r\n                                            retval.negate();\r\n                                            break;\r\n                                        case TAN:\r\n                                            retval = _.parse(format(Settings.LOG + '(sec({0}))', arg));\r\n                                            break;\r\n                                        case SEC:\r\n                                            retval = _.parse(format(Settings.LOG + '(tan({0})+sec({0}))', arg));\r\n                                            break;\r\n                                        case CSC:\r\n                                            retval = _.parse(format('-' + Settings.LOG + '(csc({0})+cot({0}))', arg));\r\n                                            break;\r\n                                        case COT:\r\n                                            retval = _.parse(format(Settings.LOG + '(sin({0}))', arg));\r\n                                            break;\r\n                                        case SINH:\r\n                                            retval = _.symfunction(COSH, [arg]);\r\n                                            break;\r\n                                        case COSH:\r\n                                            retval = _.symfunction(SINH, [arg]);\r\n                                            break;\r\n                                        case TANH:\r\n                                            retval = _.parse(format(Settings.LOG + '(cosh({0}))', arg));\r\n                                            break;\r\n                                        case ASEC:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACSC:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACOT:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                            //inverse htrig\r\n                                        case ASECH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACSCH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                        case ACOTH:\r\n                                            retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            break;\r\n                                            //end inverse htrig\r\n                                            //htrigh\r\n                                        case SECH:\r\n                                            retval = _.parse(format('atan(sinh({0}))', arg));\r\n                                            break;\r\n                                        case CSCH:\r\n                                            retval = _.parse(format(Settings.LOG + '(tanh(({0})/2))', arg));\r\n                                            break;\r\n                                        case COTH:\r\n                                            retval = _.parse(format(Settings.LOG + '(sinh({0}))', arg));\r\n                                            break;\r\n                                            //end htrig\r\n                                        case EXP:\r\n                                            retval = __.integrate(_.parse(format('e^({0})', arg)), dx, depth);\r\n                                            break;\r\n                                        case 'S':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            var b_ = dc[3];\r\n                                            retval = _.parse(format('(cos((1/2)*pi*(({1})+({0})*({2}))^2)+pi*(({1})+({0})*({2}))*S(({1})+({0})*({2})))/(({0})*pi)', a_, b_, x));\r\n                                            break;\r\n                                        case 'C':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            var b_ = dc[3];\r\n                                            retval = _.parse(format('(pi*(({1})+({0})*({2}))*C(({1})+({0})*({2}))-sin((1/2)*pi*(({1})+({0})*({2}))^2))/(({0})*pi)', a_, b_, x_));\r\n                                            break;\r\n                                        case 'erf':\r\n                                            var arg = symbol.args[0].clone(),\r\n                                                    dc = __.integration.decompose_arg(arg, dx),\r\n                                                    x_ = dc[1],\r\n                                                    a_ = dc[0];\r\n                                            retval = _.parse(format('e^(-(({2}))^2)/(({0})*sqrt(pi))+(1/({0})+({1}))*erf(({2}))', a_, x_, arg));\r\n                                            break;\r\n                                        case 'sign':\r\n                                            retval = _.multiply(symbol.clone(), arg.clone());\r\n                                            break;\r\n                                        default:\r\n                                            __.integration.stop();\r\n                                    }\r\n\r\n                                    retval = _.divide(retval, a);\r\n                                }\r\n                            }\r\n                            else if(x.isLinear()) {\r\n                                if(fname === COS || fname === SIN) {\r\n                                    var p = Number(symbol.power);\r\n                                    //check to see if it's negative and then just transform it to sec or csc\r\n                                    if(p < 0) {\r\n                                        symbol.fname = fname === SIN ? CSC : SEC;\r\n                                        symbol.invert().updateHash();\r\n                                        retval = __.integrate(symbol, dx, depth);\r\n                                    }\r\n                                    else {\r\n                                        var arg = symbol.args[0],\r\n                                                rd = symbol.clone(), //cos^(n-1)\r\n                                                rd2 = symbol.clone(), //cos^(n-2)\r\n                                                q = new Symbol((p - 1) / p), //\r\n                                                na = _.multiply(a.clone(), new Symbol(p)).invert(); //1/(n*a)\r\n                                        rd.power = rd.power.subtract(new Frac(1));\r\n                                        rd2.power = rd2.power.subtract(new Frac(2));\r\n\r\n                                        var t = _.symfunction(fname === COS ? SIN : COS, [arg.clone()]);\r\n                                        if(fname === SIN)\r\n                                            t.negate();\r\n                                        retval = _.add(_.multiply(_.multiply(na, rd), t), _.multiply(q, __.integrate(_.parse(rd2), dx, depth)));\r\n                                    }\r\n                                }\r\n                                //tan(x)^n or cot(x)^n\r\n                                else if(fname === TAN || fname === COT) {\r\n                                    //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\r\n                                    if(symbol.args[0].isLinear(dx)) {\r\n                                        var n = symbol.power.subtract(new Frac(1)).toString(),\r\n                                                r = symbol.clone().toUnitMultiplier(),\r\n                                                w = _.parse(format((fname === COT ? '-' : '') + '1/({2}*{0})*{3}({1})^({0})', n, arg, a, fname));\r\n                                        r.power = r.power.subtract(new Frac(2));\r\n                                        if(r.power.equals(0))\r\n                                            r = _.parse(r);\r\n                                        retval = _.subtract(w, __.integrate(r, dx, depth));\r\n                                    }\r\n                                }\r\n                                //sec(x)^n or csc(x)^n\r\n                                else if(fname === SEC || fname === CSC) {\r\n                                    //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\r\n                                    var n1 = symbol.power.subtract(new Frac(1)).toString(),\r\n                                            n2 = symbol.power.subtract(new Frac(2)).toString(),\r\n                                            f2 = fname === SEC ? TAN : COT,\r\n                                            r = symbol.clone().toUnitMultiplier(),\r\n                                            parse_str = format((fname === CSC ? '-' : '') + '1/({0}*{1})*{4}({3})^({2})*{5}({3})', a, n1, n2, arg, fname, f2),\r\n                                            w = _.parse(parse_str);\r\n                                    r.power = r.power.subtract(new Frac(2));\r\n                                    if(r.power.equals(0))\r\n                                        r = _.parse(r);\r\n                                    retval = _.add(w, _.multiply(new Symbol(n2 / n1), __.integrate(r, dx, depth)));\r\n                                }\r\n                                else if((fname === COSH || fname === SINH) && symbol.power.equals(2)) {\r\n                                    retval = __.integrate(symbol.fnTransform(), dx, depth);\r\n                                }\r\n                                else\r\n                                    __.integration.stop();\r\n                            }\r\n                            else\r\n                                __.integration.stop();\r\n\r\n                            retval.multiplier = retval.multiplier.multiply(m);\r\n                        }\r\n                    }\r\n                    else if(g === PL) {\r\n                        retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                    }\r\n                    else if(g === CB) {\r\n                        var den = symbol.getDenom();\r\n                        if(den.group === S)\r\n                            symbol = _.expand(symbol);\r\n\r\n                        //separate the coefficient since all we care about are symbols containing dx\r\n                        var coeff = symbol.stripVar(dx);\r\n                        //now get only those that apply\r\n                        var cfsymbol = _.divide(symbol.clone(), coeff.clone()); //a coeff free symbol\r\n                        //peform a correction for stripVar. This is a serious TODO!\r\n                        if(coeff.contains(dx)) {\r\n                            cfsymbol = _.multiply(cfsymbol, coeff);\r\n                            coeff = new Symbol(1);\r\n                        }\r\n\r\n                        //if we only have one symbol left then let's not waste time. Just pull the integral\r\n                        //and let the chips fall where they may\r\n                        if(cfsymbol.group !== CB) {\r\n                            if(cfsymbol.equals(1)) {\r\n                                return __.integrate(_.expand(symbol), dx, depth);\r\n                            }\r\n\r\n                            //only factor for multivariate which are polynomials\r\n                            if(cfsymbol.clone().toLinear().isPoly(true) && core.Utils.variables(cfsymbol).length > 1) {\r\n                                cfsymbol = core.Algebra.Factor.factor(cfsymbol);\r\n                            }\r\n\r\n                            retval = __.integrate(cfsymbol, dx, depth);\r\n                        }\r\n                        else {\r\n                            //we collect the symbols and sort them descending group, descending power, descending alpabethically\r\n                            var symbols = cfsymbol.collectSymbols().sort(function (a, b) {\r\n                                if(a.group === b.group) {\r\n                                    if(Number(a.power) === Number(b.power))\r\n                                        if(a < b)\r\n                                            return 1; //I want sin first\r\n                                        else\r\n                                            return -1;\r\n                                    return b.power - a.power; //descending power\r\n                                }\r\n                                return b.group - a.group; //descending groups\r\n                            }).map(function (x) {\r\n                                var unwrapped = Symbol.unwrapSQRT(x, true);\r\n                                if(unwrapped.fname === EXP) {\r\n                                    return _.parse(format('({1})*e^({0})', unwrapped.args[0], unwrapped.multiplier));\r\n                                }\r\n                                return unwrapped;\r\n                            });\r\n                            var l = symbols.length;\r\n                            if(symbol.power < 0) {\r\n                                if(l === 2) {\r\n                                    return __.integrate(_.expand(symbol), dx, depth, opt);\r\n                                }\r\n                            }\r\n                            //otherwise the denominator is one lumped together symbol \r\n                            else {\r\n                                //generate an image for \r\n                                if(l === 2) {\r\n                                    //try u substitution\r\n                                    try {\r\n                                        retval = __.integration.u_substitution(symbols, dx);\r\n                                    }\r\n                                    catch(e) {/* failed :`(*/\r\n                                        ;\r\n                                    }\r\n\r\n                                    if(!retval) {\r\n                                        //no success with u substitution so let's try known combinations\r\n                                        //are they two functions\r\n                                        var g1 = symbols[0].group,\r\n                                                g2 = symbols[1].group,\r\n                                                sym1 = symbols[0],\r\n                                                sym2 = symbols[1],\r\n                                                fn1 = sym1.fname,\r\n                                                fn2 = sym2.fname;\r\n                                        //reset the symbol minus the coeff\r\n                                        symbol = _.multiply(sym1.clone(), sym2.clone());\r\n                                        if(g1 === FN && g2 === FN) {\r\n                                            if(fn1 === LOG || fn2 === LOG) {\r\n                                                retval = __.integration.by_parts(symbol.clone(), dx, depth, opt);\r\n                                            }\r\n                                            else {\r\n                                                symbols.sort(function (a, b) {\r\n                                                    return b.fname > a.fname;\r\n                                                });\r\n                                                var arg1 = sym1.args[0];\r\n                                                //make sure the arguments are suitable. We don't know how to integrate non-linear arguments\r\n                                                if(!arg1.isLinear() || !(arg1.group === CP || arg1.group === CB || arg1.group === S))\r\n                                                    __.integration.stop();\r\n\r\n                                                var decomp = __.integration.decompose_arg(arg1, dx);\r\n                                                x = decomp[1],\r\n                                                        a = decomp[0];\r\n                                                if(!x.isLinear()) //again... linear arguments only wrt x\r\n                                                    __.integration.stop();\r\n\r\n                                                //they have to have the same arguments and then we have cleared all the check to \r\n                                                //make sure we can integrate FN & FN\r\n                                                var arg2 = sym2.args[0];\r\n                                                //make sure that their argument matches\r\n                                                if(arg1.equals(arg2)) {\r\n                                                    if(fn1 === SIN && fn2 === COS || fn1 === COS && fn2 === SIN) {\r\n                                                        if(sym1.power.lessThan(0))\r\n                                                            __.integration.stop();//we don't know how to handle, sin(x)^n/cos(x)^m where m > n,  yet\r\n                                                        //if it's in the form sin(x)^n*cos(x)^n then we can just return tan(x)^n which we know how to integrate\r\n                                                        if(fn1 === SIN && sym1.power.add(sym2.power).equals(0)) {\r\n                                                            sym1.fname = TAN;\r\n                                                            sym1.updateHash();\r\n                                                            retval = __.integrate(sym1, dx, depth);\r\n                                                        }\r\n                                                        else {\r\n                                                            if(even(sym1.power) && fn2 === COS && sym2.power.lessThan(0)) {\r\n                                                                //transform sin^(2*n) to (1-cos^2)^n\r\n                                                                var n = Number(sym1.power) / 2,\r\n                                                                        new_sym = _.parse(format('(1-cos({0})^2)^({1})', sym1.args[0], n));\r\n                                                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\r\n                                                            }\r\n                                                            else if(even(sym1.power) && fn2 === SIN && sym2.power.lessThan(0)) {\r\n                                                                //transform cos^(2*n) to (1-sin^2)^n\r\n                                                                var n = Number(sym1.power) / 2,\r\n                                                                        new_sym = _.parse(format('(1-sin({0})^2)^({1})', sym1.args[0], n));\r\n                                                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\r\n                                                            }\r\n                                                            else {\r\n                                                                var p1_even = core.Utils.even(sym1.power),\r\n                                                                        p2_even = core.Utils.even(sym2.power);\r\n                                                                retval = new Symbol(0);\r\n                                                                if(!p1_even || !p2_even) {\r\n                                                                    var u, r, trans;\r\n                                                                    //since cos(x) is odd it carries du. If sin was odd then it would be the other way around\r\n                                                                    //know that p1 satifies the odd portion in this case. If p2 did than it would contain r\r\n                                                                    if(!p1_even) {\r\n                                                                        //u = sin(x)\r\n                                                                        u = sym2;\r\n                                                                        r = sym1;\r\n                                                                    }\r\n                                                                    else {\r\n                                                                        u = sym1;\r\n                                                                        r = sym2;\r\n                                                                    }\r\n                                                                    //get the sign of du. In this case r carries du as stated before and D(cos(x),x) = -sin(x)\r\n                                                                    var sign = u.fname === COS ? -1 : 1,\r\n                                                                            n = r.power,\r\n                                                                            //remove the du e.g. cos(x)^2*sin(x)^3 dx -> cos(x)^2*sin(x)^2*sin(x). We're left with two \r\n                                                                            //even powers afterwards which can be transformed\r\n                                                                            k = (n - 1) / 2,\r\n                                                                            //make the transformation cos(x)^2 = 1 - sin(x)^2\r\n                                                                            trans = _.parse('(1-' + u.fname + core.Utils.inBrackets(arg1) + '^2)^' + k),\r\n                                                                            sym = _.expand(_.multiply(new Symbol(sign), _.multiply(u.clone(), trans)));\r\n                                                                    //we can now just loop through and integrate each since it's now just a polynomial with functions\r\n                                                                    sym.each(function (x) {\r\n                                                                        retval = _.add(retval, __.integration.poly_integrate(x.clone()));\r\n                                                                    });\r\n                                                                }\r\n                                                                else {\r\n                                                                    //performs double angle transformation\r\n                                                                    var double_angle = function (symbol) {\r\n                                                                        var p = symbol.power,\r\n                                                                                k = p / 2, e;\r\n                                                                        if(symbol.fname === COS)\r\n                                                                            e = '((1/2)+(cos(2*(' + symbol.args[0] + '))/2))^' + k;\r\n                                                                        else\r\n                                                                            e = '((1/2)-(cos(2*(' + symbol.args[0] + '))/2))^' + k;\r\n\r\n                                                                        return _.parse(e);\r\n                                                                    };\r\n                                                                    //they're both even so transform both using double angle identities and we'll just\r\n                                                                    //be able to integrate by the sum of integrals\r\n                                                                    var a = double_angle(sym1),\r\n                                                                            b = double_angle(sym2),\r\n                                                                            t = _.multiply(a, b);\r\n                                                                    var sym = _.expand(t);\r\n                                                                    sym.each(function (x) {\r\n                                                                        retval = _.add(retval, __.integrate(x, dx, depth));\r\n                                                                    });\r\n                                                                    return _.multiply(retval, coeff);\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                    //tan(x)*sec(x)^n \r\n                                                    else if(fn1 === SEC && fn2 === TAN && x.isLinear() && sym2.isLinear()) {\r\n                                                        retval = _.parse(format('sec({0})^({1})/({1})', sym1.args[0], sym1.power));\r\n                                                    }\r\n                                                    else if(fn1 === TAN && fn2 === SEC && x.isLinear()) {\r\n                                                        //remaining: tan(x)^3*sec(x)^6\r\n                                                        if(sym1.isLinear() && sym2.isLinear()) {\r\n                                                            retval = _.divide(_.symfunction(SEC, [arg1.clone()]), a);\r\n                                                        }\r\n                                                        else if(even(sym1.power)) {\r\n                                                            var p = Number(sym1.power) / 2;\r\n                                                            //transform tangent\r\n                                                            var t = _.parse(format('(sec({0})^2-1)^({1})', sym1.args[0], p));\r\n                                                            retval = __.integrate(_.expand(_.multiply(t, sym2)), dx, depth);\r\n                                                        }\r\n                                                        else\r\n                                                            __.integration.stop();\r\n                                                    }\r\n                                                    else if(fn1 === SEC && fn2 === COS) {\r\n                                                        sym1.fname = COS;\r\n                                                        sym1.invert().updateHash();\r\n                                                        retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\r\n                                                    }\r\n                                                    else if(fn1 === SIN && fn2 === CSC) {\r\n                                                        sym2.fname = SIN;\r\n                                                        sym2.invert().updateHash();\r\n                                                        retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\r\n                                                    }\r\n                                                    //tan/cos\r\n                                                    else if(fn1 === TAN && (fn2 === COS || fn2 === SIN) && sym2.power.lessThan(0)) {\r\n                                                        var t = _.multiply(sym1.fnTransform(), sym2);\r\n                                                        retval = __.integrate(_.expand(t), dx, depth);\r\n                                                    }\r\n                                                    else {\r\n                                                        var t = _.multiply(sym1.fnTransform(), sym2.fnTransform());\r\n                                                        retval = __.integrate(_.expand(t), dx, depth);\r\n                                                    }\r\n                                                }\r\n                                                //TODO: In progress\r\n                                                else if((fn1 === SIN || fn1 === COS) && (fn2 === SIN || fn2 === COS)) {\r\n\r\n                                                    if(sym1.isLinear() && sym2.isLinear()) {\r\n                                                        //if in the form cos(a*x)*sin(b*x)\r\n                                                        if(sym1.args[0].isLinear() && sym2.args[0].isLinear()) {\r\n                                                            //use identity (sin(b*x+a*x)+sin(b*x-a*x))/2\r\n                                                            var ax, bx;\r\n                                                            if(fn2 === SIN) {\r\n                                                                ax = sym1.args[0];\r\n                                                                bx = sym2.args[0];\r\n                                                            }\r\n                                                            else {\r\n                                                                bx = sym1.args[0];\r\n                                                                ax = sym2.args[0];\r\n                                                            }\r\n\r\n                                                            //make the transformation\r\n                                                            f = _.parse(format('(sin(({1})+({0}))+sin(({1})-({0})))/2', ax.toString(), bx.toString()));\r\n\r\n                                                            //integrate it\r\n                                                            retval = __.integrate(f, dx, depth);\r\n                                                        }\r\n                                                        else {\r\n                                                            var transformed = trigTransform(symbols);\r\n                                                            retval = __.integrate(_.expand(transformed), dx, depth);\r\n                                                        }\r\n                                                    }\r\n                                                    else {\r\n                                                        var transformed = new Symbol(1);\r\n                                                        symbols.map(function (sym) {\r\n                                                            var s = sym.fnTransform();\r\n                                                            transformed = _.multiply(transformed, s);\r\n                                                        });\r\n                                                        var t = _.expand(transformed);\r\n\r\n                                                        retval = __.integrate(t, dx, depth);\r\n\r\n                                                        if(retval.hasIntegral()) {\r\n                                                            retval = __.integrate(trigTransform(transformed.collectSymbols()), dx, depth);\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                else {\r\n                                                    __.integration.stop();\r\n                                                }\r\n\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === FN && g2 === S) {\r\n                                            var sym1_is_linear = sym1.isLinear();\r\n                                            if(sym1.fname === COS && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Ci', [sym1.args[0]]);\r\n                                            else if(sym1.fname === COS && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === COSH && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Chi', [sym1.args[0]]);\r\n                                            else if(sym1.fname === COSH && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === SIN && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Si', [sym1.args[0]]);\r\n                                            else if(sym1.fname === SIN && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === SINH && sym1_is_linear && sym2.power.equals(-1))\r\n                                                retval = _.symfunction('Shi', [sym1.args[0]]);\r\n                                            else if(sym1.fname === SINH && sym2.power.equals(-1)) {\r\n                                                retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === LOG && sym2.power.equals(-1)) {\r\n                                                //log(x)^n/x = log(x)^(n+1)/(n+1)\r\n                                                retval = __.integration.poly_integrate(sym1, dx, depth);\r\n                                            }\r\n                                            else if(sym1.fname === 'erf') {\r\n                                                if(sym2.power.equals(1)) {\r\n                                                    var dc = __.integration.decompose_arg(sym1.args[0], dx),\r\n                                                            a_ = dc[0],\r\n                                                            x_ = dc[1],\r\n                                                            arg = sym1.args[0].toString();\r\n                                                    retval = _.parse(format('(e^(-(({2}))^2)*(sqrt(pi)*e^((({2}))^2)*(2*({0})^2*({1})^2-3)*erf(({2}))+2*({0})*({1})-2))/(4*sqrt(pi)*({0})^2)', a_, x_, arg))\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                //since group S is guaranteed convergence we need not worry about tracking depth of integration\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === EX && g2 === S) {\r\n                                            var x = fn1 === LOG ? __.integration.decompose_arg(sym1.args[0], dx)[1] : null;\r\n                                            if(sym1.isE() && (sym1.power.group === S || sym1.power.group === CB) && sym2.power.equals(-1)) {\r\n                                                retval = _.symfunction('Ei', [sym1.power.clone()]);\r\n                                            }\r\n                                            else if(fn1 === LOG && x.value === sym2.value) {\r\n                                                retval = __.integration.poly_integrate(sym1, dx, depth);\r\n                                            }\r\n                                            else\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                        }\r\n                                        else if(g1 === PL && g2 === S) {\r\n                                            //first try to reduce the top\r\n                                            if(sym2.value === sym1.value && sym1.power.equals(-1)) {\r\n                                                //find the lowest power in the denominator\r\n                                                var pd = Math.min.apply(null, core.Utils.keys(sym1.symbols));\r\n                                                //get the lowest common value between denominator and numerator\r\n                                                var pc = Math.min(pd, sym2.power);\r\n                                                //reduce both denominator and numerator by that factor\r\n                                                var factor = sym2.clone();\r\n                                                factor.power = new Frac(pc);\r\n                                                sym2 = _.divide(sym2, factor.clone()); //reduce the denominator\r\n                                                var t = new Symbol(0);\r\n                                                sym1.each(function (x) {\r\n                                                    t = _.add(t, _.divide(x.clone(), factor.clone()));\r\n                                                });\r\n                                                t.multiplier = sym1.multiplier;\r\n                                                symbol = _.divide(sym2, t);\r\n                                            }\r\n                                            else {\r\n                                                symbol = _.expand(symbol);\r\n                                            }\r\n                                            retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                        }\r\n                                        else if(g1 === CP && g2 === S) {\r\n                                            var f = sym1.clone().toLinear(),\r\n                                                    f_is_linear = core.Algebra.degree(f, _.parse(dx)).equals(1);\r\n                                            //handle cases x^(2*n)/sqrt(1-x^2)\r\n                                            if(sym1.power.equals(-1 / 2)) {\r\n                                                var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx);\r\n                                                var a = decomp[0].negate(),\r\n                                                        x = decomp[1],\r\n                                                        b = decomp[3],\r\n                                                        p1 = Number(sym1.power),\r\n                                                        p2 = Number(sym2.power);\r\n                                                if(isInt(p2) && core.Utils.even(p2) && x.power.equals(2)) {\r\n                                                    //if the substitution \r\n                                                    var c = _.divide(_.multiply(_.pow(b.clone(), new Symbol(2)),\r\n                                                            _.symfunction(SQRT, [_.divide(b.clone(), a.clone())])),\r\n                                                            _.pow(a.clone(), new Symbol(2)));\r\n                                                    c = _.multiply(c, _.symfunction(SQRT, [b]).invert());\r\n                                                    var dummy = _.parse('sin(u)');\r\n                                                    dummy.power = dummy.power.multiply(sym2.power);\r\n                                                    var integral = __.integrate(dummy, 'u', depth);\r\n                                                    var bksub = _.parse(ASIN + '(' + SQRT + '(' + a + '/' + b + ')*' + dx + ')');\r\n                                                    retval = _.multiply(c, integral.sub(new Symbol('u'), bksub));\r\n                                                }\r\n                                                else if(p1 === -1 / 2) {\r\n                                                    var u_transform = function (f, u) {\r\n                                                        var integral = _.parse(__.integrate(f, dx, depth, opt).sub(dx, format(u, dx)));\r\n                                                        if(!integral.hasIntegral())\r\n                                                            return integral;\r\n                                                    }\r\n                                                    if(p2 === -1) {\r\n                                                        retval = u_transform(\r\n                                                                _.expand(_.expand(_.pow(_.multiply(sym1.invert(), sym2.invert()), new Symbol(2)))).invert(),\r\n                                                                'sqrt(1-1/({0})^2)'\r\n                                                                );\r\n                                                    }\r\n                                                    else if(p2 === -2) {\r\n                                                        //apply transformation to see if it matches asin(x)\r\n                                                        retval = u_transform(\r\n                                                                _.sqrt(_.expand(_.divide(_.pow(symbol, new Symbol(2)).invert(), _.pow(new Symbol(dx), new Symbol(2))).negate())).invert(),\r\n                                                                'sqrt(1-1/({0})^2)'\r\n                                                                );\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            else if(sym1.power.equals(-1) && sym2.isLinear() && f_is_linear) {\r\n                                                retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                            }\r\n                                            else if(!sym1.power.lessThan(0) && isInt(sym1.power)) {\r\n                                                //sum of integrals\r\n                                                var expanded = _.expand(sym1);\r\n                                                retval = new Symbol(0);\r\n                                                expanded.each(function (x) {\r\n                                                    if(x.group === PL) {\r\n                                                        x.each(function (y) {\r\n                                                            retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), y), dx, depth));\r\n                                                        });\r\n                                                    }\r\n                                                    else\r\n                                                        retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), x), dx, depth));\r\n                                                });\r\n                                            }\r\n                                            else if(sym1.power.lessThan(-2)) {\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                            else if(sym1.power.lessThan(0) && sym2.power.greaterThan(1)) {\r\n                                                var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\r\n                                                        a = decomp[0].negate(),\r\n                                                        x = decomp[1],\r\n                                                        b = decomp[3],\r\n                                                        fn = sym1.clone().toLinear();\r\n\r\n                                                if(x.group !== PL && x.isLinear()) {\r\n                                                    var p = Number(sym2.power),\r\n                                                            du = '_u_',\r\n                                                            u = new Symbol(du),\r\n                                                            //pull the integral with the subsitution\r\n                                                            U = _.expand(_.divide(_.pow(_.subtract(u.clone(), b.clone()), new Symbol(p)), u.clone())),\r\n                                                            scope = {};\r\n\r\n                                                    //generate a scope for resubbing the symbol\r\n                                                    scope[du] = fn;\r\n                                                    var U2 = _.parse(U, scope);\r\n                                                    retval = __.integrate(U2, dx, 0);\r\n                                                }\r\n                                                else if(sym2.power.greaterThan(x.power) || sym2.power.equals(x.power)) {\r\n\r\n                                                    //factor out coefficients\r\n                                                    var factors = new core.Algebra.Classes.Factors();\r\n                                                    sym1 = core.Algebra.Factor.coeffFactor(sym1.invert(), factors);\r\n                                                    var div = core.Algebra.divide(sym2, sym1);\r\n                                                    //it assumed that the result will be of group CB\r\n                                                    if(div.group !== CB) {\r\n                                                        retval = new Symbol(0);\r\n                                                        div.each(function (t) {\r\n                                                            retval = _.add(retval, __.integrate(t, dx, depth));\r\n                                                        });\r\n                                                        //put back the factors\r\n                                                        factors.each(function (factor) {\r\n                                                            retval = _.divide(retval, factor);\r\n                                                        });\r\n\r\n                                                        retval = _.expand(retval);\r\n                                                    }\r\n                                                    else {\r\n                                                        //try something else\r\n                                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                                    }\r\n                                                }\r\n                                                else\r\n                                                    retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                            }\r\n                                            else {\r\n                                                //handle cases such as (1-x^2)^(n/2)*x^(m) where n is odd ___ cracking knuckles... This can get a little hairy \r\n                                                if(sym1.power.den.equals(2)) {\r\n                                                    //assume the function is in the form (a^2-b*x^n)^(m/2)\r\n                                                    var dc = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\r\n                                                            //using the above definition\r\n                                                            a = dc[3], x = dc[1], b = dc[0], bx = dc[2];\r\n                                                    if(x.power.equals(2) && b.lessThan(0)) { //if n is even && b is negative\r\n                                                        //make a equal 1 so we can do a trig sub\r\n                                                        if(!a.equals(1)) { //divide a out of everything\r\n                                                            //move a to the coeff\r\n                                                            coeff = _.multiply(coeff, _.pow(a, new Symbol(2)));\r\n                                                        }\r\n                                                        var u = dx;\r\n                                                        var c = _.divide(_.pow(b.clone().negate(), new Symbol(1 / 2)), _.pow(a, new Symbol(1 / 2))),\r\n                                                                du = _.symfunction(COS, [new Symbol(u)]),\r\n                                                                cosn = _.pow(_.symfunction(COS, [new Symbol(u)]), new Symbol(sym1.power.num)),\r\n                                                                X = _.pow(_.symfunction(SIN, [new Symbol(u)]), new Symbol(sym2.power)),\r\n                                                                val = _.multiply(_.multiply(cosn, du), X),\r\n                                                                integral = __.integrate(val, u, depth);\r\n                                                        //but remember that u = asin(sqrt(b)*a*x)\r\n                                                        retval = integral.sub(u, _.symfunction(ASIN, [_.multiply(new Symbol(dx), c)]));\r\n                                                    }\r\n                                                    else {\r\n                                                        retval = __.integration.partial_fraction(symbol, dx, depth, opt);\r\n                                                    }\r\n                                                }\r\n                                                else if(f_is_linear) {\r\n                                                    retval = __.integration.partial_fraction(symbol, dx, depth);\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n                                        else if(sym1.isComposite() && sym2.isComposite()) {\r\n                                            //sum of integrals\r\n                                            retval = new Symbol(0);\r\n                                            if(sym1.power.greaterThan(0) && sym2.power.greaterThan(0)) {\r\n                                                //combine and pull the integral of each\r\n                                                var sym = _.expand(symbol);\r\n                                                sym.each(function (x) {\r\n                                                    retval = _.add(retval, __.integrate(x, dx, depth));\r\n                                                }, true);\r\n                                            }\r\n                                            else {\r\n                                                var p1 = Number(sym1.power),\r\n                                                        p2 = Number(sym2.power);\r\n                                                if(p1 < 0 && p2 > 0) {\r\n                                                    //swap\r\n                                                    var t = sym1;\r\n                                                    sym1 = sym2;\r\n                                                    sym2 = t;\r\n                                                }\r\n                                                if(p1 === -1 && p2 === -1) {\r\n                                                    retval = __.integration.partial_fraction(symbol, dx);\r\n                                                }\r\n                                                else {\r\n                                                    sym1.each(function (x) {\r\n                                                        var k = _.multiply(x, sym2.clone());\r\n                                                        var integral = __.integrate(k, dx, depth);\r\n                                                        retval = _.add(retval, integral);\r\n                                                    });\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        else if(g1 === CP && symbols[0].power.greaterThan(0)) {\r\n                                            sym1 = _.expand(sym1);\r\n                                            retval = new Symbol(0);\r\n                                            sym1.each(function (x) {\r\n                                                retval = _.add(retval, __.integrate(_.multiply(x, sym2.clone()), dx, depth));\r\n                                            }, true);\r\n                                        }\r\n                                        else if(g1 === FN && g2 === EX && core.Utils.in_htrig(sym1.fname)) {\r\n                                            sym1 = sym1.fnTransform();\r\n                                            retval = __.integrate(_.expand(_.multiply(sym1, sym2)), dx, depth);\r\n                                        }\r\n                                        else if(g1 === FN && g2 === CP || g2 === FN && g1 === CP) {\r\n                                            if(g2 === FN && g1 === CP) {\r\n                                                var t = sym1;\r\n                                                sym1 = sym2;\r\n                                                sym2 = t; //swap\r\n                                            }\r\n                                            var du, sym2_clone, p, q, sa, sb;\r\n                                            du = Symbol.unwrapSQRT(__.diff(sym1.clone(), dx), true);\r\n                                            sym2_clone = Symbol.unwrapSQRT(sym2, true);\r\n                                            if(du.power.equals(sym2_clone.power)) {\r\n                                                p = new Symbol(sym2.power);\r\n                                                sa = du.clone().toLinear();\r\n                                                sb = sym2.clone().toLinear();\r\n                                                q = core.Algebra.divide(sa.toLinear(), sb);\r\n                                                if(q.isConstant()) {\r\n                                                    var nq = _.pow(q, p.negate());\r\n                                                    retval = _.multiply(nq, __.integration.poly_integrate(sym1.clone()));\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            var syma = sym1.clone().toLinear();\r\n                                            var symb = sym2.clone().toLinear();\r\n                                            if(g1 === EX && g2 === EX && sym1.power.contains(dx) && sym2.power.contains(dx)\r\n                                                    && !syma.contains(dx) && !symb.contains(dx)) {\r\n                                                retval = _.parse(format('(({0})^(({2})*({4}))*({1})^(({3})*({4})))/(log(({0})^({2}))+log(({1})^({3})))',\r\n                                                        syma.toString(),\r\n                                                        symb.toString(),\r\n                                                        sym1.power.multiplier.toString(),\r\n                                                        sym2.power.multiplier.toString(),\r\n                                                        dx\r\n                                                        ));\r\n                                            }\r\n                                            else\r\n                                                retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(l === 3 && (symbols[2].group === S && symbols[2].power.lessThan(2) || symbols[0].group === CP)) {\r\n                                    var first = symbols[0];\r\n                                    if(first.group === CP) { //TODO {support higher powers of x in the future}\r\n                                        if(first.power.greaterThan(1))\r\n                                            first = _.expand(first);\r\n                                        var r = _.multiply(symbols[1], symbols[2]);\r\n                                        retval = new Symbol(0);\r\n                                        first.each(function (x) {\r\n                                            var t = _.multiply(x, r.clone());\r\n                                            var intg = __.integrate(t, dx, depth);\r\n                                            retval = _.add(retval, intg);\r\n                                        }, true);\r\n                                    }\r\n                                    else {\r\n                                        //try integration by parts although technically it will never work\r\n                                        retval = __.integration.by_parts(symbol, dx, depth, opt);\r\n                                    }\r\n\r\n                                }\r\n                                else if(all_functions(symbols)) {\r\n                                    var t = new Symbol(1);\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        t = _.multiply(t, symbols[i].fnTransform());\r\n                                    }\r\n                                    t = _.expand(t);\r\n                                    retval = __.integrate(t, dx, depth);\r\n                                }\r\n                                else {\r\n                                    //one more go\r\n                                    var transformed = trigTransform(symbols);\r\n                                    retval = __.integrate(_.expand(transformed), dx, depth);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                        retval = _.multiply(retval, coeff);\r\n                    }\r\n                    //if an integral was found then we return it\r\n                    if(retval)\r\n                        return retval;\r\n                }\r\n\r\n                catch(error) {\r\n                    //do nothing if it's a NoIntegralFound error otherwise let it bubble\r\n                    if(!(error instanceof NoIntegralFound || error instanceof core.exceptions.DivisionByZero))\r\n                        throw error;\r\n                }\r\n\r\n                //no symbol found so we return the integral again\r\n                return _.symfunction('integrate', [original_symbol, dt]);\r\n            }, false);\r\n        },\r\n        defint: function (symbol, from, to, dx) {\r\n            dx = dx || 'x'; //make x the default variable of integration\r\n            var get_value = function (integral, vars, point) {\r\n                try {\r\n                    return _.parse(integral, vars);\r\n                }\r\n                catch(e) {\r\n                    //it failed for some reason so return the limit\r\n                    var lim = __.Limit.limit(integral, dx, point);\r\n                    return lim;\r\n                }\r\n            };\r\n\r\n            var vars = core.Utils.variables(symbol),\r\n                    hasTrig = symbol.hasTrig();\r\n            var retval, integral;\r\n\r\n            // Fix #593 - Only assume the first variable if dx is not defined.\r\n            if(vars.length === 1 && !dx)\r\n                dx = vars[0];\r\n\r\n            if(!hasTrig) {\r\n                integral = __.integrate(symbol, dx);\r\n            }\r\n\r\n            if(!hasTrig && !integral.hasIntegral()) {\r\n                var upper = {},\r\n                        lower = {},\r\n                        a, b;\r\n                upper[dx] = to;\r\n                lower[dx] = from;\r\n\r\n                a = get_value(integral, upper, to, dx);\r\n                b = get_value(integral, lower, from, dx);\r\n                retval = _.subtract(a, b);\r\n            }\r\n            else if(vars.length === 1 && from.isConstant() && to.isConstant()) {\r\n\r\n                var f = core.Utils.build(symbol);\r\n                retval = new Symbol(core.Math2.num_integrate(f, Number(from), Number(to)));\r\n            }\r\n            else\r\n                retval = _.symfunction('defint', [symbol, from, to, dx]);\r\n            return retval;\r\n        },\r\n\r\n        Limit: {\r\n            interval: function (start, end) {\r\n                return _.parse(format('[{0}, {1}]', start, end));\r\n            },\r\n            diverges: function () {\r\n                return __.Limit.interval('-Infinity', 'Infinity');\r\n            },\r\n            divide: function (f, g, x, lim, depth) {\r\n                if(depth++ > Settings.max_lim_depth) {\r\n                    return;\r\n                }\r\n\r\n                var fin = f.clone(), gin = g.clone();\r\n\r\n                //But first a little \"cheating\". x/|x| ends up in an infinite loop since the d/dx |x| -> x/|x|\r\n                //To break this loop we simply provide the answer. Keep in mind that currently limit only provides\r\n                //the two-sided limit.\r\n                //Known limit\r\n                if(g.fname === ABS) {\r\n                    var sign = f.sign();\r\n                    var lim_sign = lim.sign();\r\n\r\n                    if(lim.isInfinity)\r\n                        return _.multiply(new Symbol(sign), new Symbol(lim_sign));\r\n\r\n                    else if(lim.equals(0)) {\r\n                        var fm = _.parse(f.multiplier);\r\n                        var gm = _.parse(g.multiplier);\r\n                        return _.divide(_.multiply(fm, __.Limit.interval('-1', '1')), gm);\r\n                    }\r\n                    else {\r\n                        //TODO: Support more limits\r\n                        __.Limit.diverges();\r\n                    }\r\n                }\r\n\r\n                var isInfinity = function (L) {\r\n                    if(core.Utils.isVector(L)) {\r\n                        for(var i = 0; i < L.elements.length; i++)\r\n                            if(!L.elements[i].isInfinity)\r\n                                return false;\r\n                        return true;\r\n                    }\r\n                    return L.isInfinity;\r\n                };\r\n\r\n                var equals = function (L, v) {\r\n                    if(core.Utils.isVector(L)) {\r\n                        return false;\r\n                    }\r\n                    return L.equals(v);\r\n                };\r\n\r\n                var retval;\r\n                do {\r\n                    var lim1 = evaluate(__.Limit.limit(f.clone(), x, lim, depth));\r\n                    var lim2 = evaluate(__.Limit.limit(g.clone(), x, lim, depth));\r\n\r\n                    //if it's in indeterminate form apply L'Hospital's rule\r\n                    var indeterminate = isInfinity(lim1) && isInfinity(lim2) || equals(lim1, 0) && equals(lim2, 0);\r\n                    //pull the derivatives\r\n                    if(indeterminate) {\r\n                        var ft = __.diff(f.clone(), x);\r\n                        var gt = __.diff(g.clone(), x);\r\n\r\n                        var t_symbol = _.expand(_.divide(ft, gt));\r\n                        f = t_symbol.getNum();\r\n                        g = t_symbol.getDenom();\r\n\r\n                    }\r\n                }\r\n                while(indeterminate)\r\n\r\n                //REMEMBER: \r\n                //- 1/cos(x)\r\n                //n/0 is still possible since we only checked for 0/0\r\n                var den_is_zero = lim2.equals(0);\r\n                var p = Number(gin.power);\r\n\r\n                if(lim.isConstant(true) && den_is_zero) {\r\n                    retval = Symbol.infinity(core.Utils.even(p) && lim1.lessThan(0) ? -1 : undefined);\r\n                }\r\n                else if(den_is_zero) {\r\n                    retval = __.Limit.diverges();\r\n                }\r\n                else {\r\n                    retval = _.divide(lim1, lim2);\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            rewriteToLog: function (symbol) {\r\n                var p = symbol.power.clone();\r\n                symbol.toLinear();\r\n                return _.pow(new Symbol('e'), _.multiply(p, _.symfunction(Settings.LOG + '', [symbol])));\r\n            },\r\n            getSubbed: function (f, x, lim) {\r\n                var retval;\r\n                //1. rewrite EX with base e\r\n                if(f.group === EX) {\r\n                    f = __.rewriteToLog(f);\r\n                }\r\n                //2. try simple substitution\r\n                try {\r\n                    retval = f.sub(x, lim);\r\n                }\r\n                catch(e) {\r\n                    //Nope. No go, so just return the unsubbed function so we can test the limit instead.\r\n                    retval = f;\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            isInterval: function (limit) {\r\n                return core.Utils.isVector(limit);\r\n            },\r\n            isConvergent: function (limit) {\r\n                //it's not convergent if it lies on the interval -Infinity to Infinity\r\n                if(\r\n                        //It lies on the interval -Infinity to Infinity\r\n                        __.Limit.isInterval(limit) && limit.elements[0].isInfinity && limit.elements[1].isInfinity ||\r\n                        //We weren't able to calculate the limit\r\n                        limit.containsFunction('limit')\r\n                        ) {\r\n                    return false; //Then no\r\n                }\r\n                return true; //It is\r\n            },\r\n            limit: function (symbol, x, lim, depth) {\r\n                //Simplify the symbol\r\n                if(symbol.isLinear() && symbol.isComposite()) {\r\n\r\n                    //Apply sum of limits\r\n                    var limit = new Symbol(0);\r\n                    symbol.each(function (s) {\r\n                        limit = _.add(limit, __.Limit.limit(s, x, lim, depth));\r\n                    }, true);\r\n\r\n                    return limit;\r\n                }\r\n                ;\r\n\r\n                symbol = core.Algebra.Simplify.simplify(symbol);\r\n\r\n                depth = depth || 1;\r\n\r\n                if(depth++ > Settings.max_lim_depth) {\r\n                    return;\r\n                }\r\n\r\n                //store the multiplier\r\n                var m = _.parse(symbol.multiplier);\r\n                //strip the multiplier\r\n                symbol.toUnitMultiplier();\r\n                try {\r\n                    //https://en.wikipedia.org/wiki/List_of_limits\r\n                    var retval;\r\n                    //we try the simplest option first where c is some limit\r\n                    //lim a as x->c = a where c \r\n                    if(symbol.isConstant(true)) {\r\n                        retval = symbol;\r\n                    }\r\n                    else {\r\n                        var point = {};\r\n                        point[x] = lim;\r\n                        //lim x as x->c = c where c\r\n\r\n                        try {\r\n\r\n                            //evaluate the function at the given limit\r\n                            var t = _.parse(symbol.sub(x, lim), point);\r\n\r\n                            //a constant or infinity is known so we're done\r\n                            if(t.isConstant(true) || t.isInfinity)\r\n                                retval = t;\r\n\r\n                        }\r\n                        catch(e) { /*Nothing. Maybe we tried to divide by zero.*/\r\n                        }\r\n                        ;\r\n\r\n                        if(!retval) {\r\n                            //split the symbol in the numerator and the denominator\r\n                            var num = symbol.getNum();\r\n                            var den = symbol.getDenom();\r\n\r\n                            if(den.isConstant(true)) {\r\n                                //We still don't have a limit so we generate tests.\r\n                                if(symbol.group === EX) {\r\n                                    //https://en.wikipedia.org/wiki/List_of_limits\r\n                                    //Speed boost for exponentials by detecting patterns\r\n                                    var f = symbol.clone().toLinear();\r\n                                    var p = symbol.power.clone();\r\n                                    var _num = f.getNum();\r\n                                    var _den = f.getDenom();\r\n                                    var fn = core.Utils.decompose_fn(_den, x, true);\r\n                                    //start detection of pattern (x/(x+1))^x\r\n                                    if(_num.group === S && _num.multiplier.isOne() && fn.ax.group === S && fn.b.isConstant(true) && fn.a.isOne() && fn.b.isConstant(true)) {\r\n                                        retval = _.parse(format('(1/e^({0}))', fn.b));\r\n                                    }\r\n                                    else {\r\n                                        var symbol_ = __.Limit.rewriteToLog(symbol.clone());\r\n                                        //get the base\r\n                                        var pow = symbol_.power.clone();\r\n                                        var base = symbol_.clone().toLinear();\r\n                                        var lim_base = __.Limit.limit(base, x, lim, depth);\r\n                                        var lim_pow = __.Limit.limit(pow, x, lim, depth);\r\n                                        retval = _.pow(lim_base, lim_pow);\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === FN && symbol.args.length === 1) {\r\n                                    var evaluates;\r\n                                    //Squeeze theorem lim f(g(x)) = lim f(lim g))\r\n                                    var arg = __.Limit.limit(symbol.args[0], x, lim, depth);\r\n                                    if(core.Utils.isVector(arg)) {\r\n                                        //get the limit over that interval\r\n                                        retval = arg.map(function (e) {\r\n                                            var clone = symbol.clone();\r\n                                            clone.args[0] = e;\r\n                                            return __.Limit.limit(_.symfunction(symbol.fname, [e]), x, lim, depth);\r\n                                        });\r\n\r\n                                        return _.multiply(m, retval);\r\n                                    }\r\n                                    //if the argument is constant then we're done\r\n                                    else if(arg.isConstant(true)) {\r\n\r\n                                        //double check that it evaluates\r\n                                        var trial = _.symfunction(symbol.fname, [arg]);\r\n                                        //trial evaluation\r\n                                        try {\r\n                                            evaluate(trial);\r\n                                            evaluates = true;\r\n                                        }\r\n                                        catch(e) {\r\n\r\n                                            evaluates = false;\r\n                                        }\r\n                                    }\r\n                                    if(evaluates) {\r\n                                        retval = trial;\r\n                                    }\r\n                                    else {\r\n                                        //if the limit converges. We'll deal with non-convergent ones later\r\n                                        if(__.Limit.isConvergent(arg)) {\r\n                                            if(symbol.fname === LOG) {\r\n                                                switch(arg.toString()) {\r\n                                                    //lim -> 0\r\n                                                    case '0':\r\n                                                        retval = Symbol.infinity().negate();\r\n                                                        break;\r\n                                                    case 'Infinity':\r\n                                                        retval = Symbol.infinity();\r\n                                                        break;\r\n                                                    case '-Infinity':\r\n                                                        retval = Symbol.infinity();\r\n                                                        break;\r\n                                                }\r\n                                            }\r\n                                            else if((symbol.fname === COS || symbol.fname === SIN) && lim.isInfinity) {\r\n                                                retval = __.Limit.interval(-1, 1);\r\n                                            }\r\n                                            else if((symbol.fname === TAN)) {\r\n                                                var s_arg = symbol.args[0];\r\n                                                var n = s_arg.getNum();\r\n                                                var d = s_arg.getDenom();\r\n                                                var pi = n.toUnitMultiplier();\r\n                                                if(lim.isInfinity || pi.equals('pi') && d.equals(2)) {\r\n                                                    retval = divergent();\r\n                                                }\r\n                                            }\r\n                                            else if(symbol.fname === Settings.FACTORIAL) {\r\n                                                if(arg.isInfinity)\r\n                                                    return Symbol.infinity();\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === S) {\r\n                                    if(symbol.power > 0)\r\n                                        //these functions always converge to the limit\r\n                                        return _.parse(symbol, point);\r\n                                    else {\r\n                                        //we're dealing with 1/x^n but remember that infinity has already been dealt\r\n                                        //with by substitution\r\n                                        if(core.Utils.even(symbol.power)) {\r\n                                            //even powers converge to infinity\r\n                                            retval = Symbol.infinity();\r\n                                        }\r\n                                        else {\r\n                                            //odd ones don't\r\n                                            retval = __.Limit.diverges();\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if(symbol.group === CB) {\r\n\r\n                                    var lim1, lim2;\r\n                                    //loop through all the symbols\r\n                                    //thus => lim f*g*h = lim (f*g)*h = (lim f*g)*(lim h)\r\n                                    //symbols of lower groups are generally easier to differentiatee so get them to the right by first sorting\r\n                                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                                        return a.group - b.group;\r\n                                    });\r\n\r\n                                    var f = symbols.pop();\r\n                                    //calculate the first limit so we can keep going down the list\r\n                                    lim1 = evaluate(__.Limit.limit(f, x, lim, depth));\r\n\r\n                                    //reduces all the limits one at a time\r\n                                    while(symbols.length) {\r\n                                        //get the second limit\r\n                                        var g = symbols.pop();\r\n                                        //get the limit of g\r\n                                        lim2 = evaluate(__.Limit.limit(g, x, lim, depth));\r\n\r\n                                        //if the limit is in indeterminate form aplly L'Hospital by inverting g and then f/(1/g)\r\n                                        if((lim1.isInfinity || !__.Limit.isConvergent(lim1) && lim2.equals(0) || lim1.equals(0) && __.Limit.isConvergent(lim2))) {\r\n                                            if(g.containsFunction(LOG)) {\r\n                                                //swap them\r\n                                                g = [f, f = g][0];\r\n                                            }\r\n                                            //invert the symbol\r\n                                            g.invert();\r\n\r\n                                            // Product of infinities\r\n                                            if(lim1.isInfinity && lim2.isInfinity) {\r\n                                                lim1 = Symbol.infinity()\r\n                                            }\r\n                                            else {\r\n                                                lim1 = __.Limit.divide(f, g, x, lim, depth);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            //lim f*g = (lim f)*(lim g)\r\n                                            lim1 = _.multiply(lim1, lim2);\r\n                                            //let f*g equal f and h equal g \r\n                                            f = _.multiply(f, g);\r\n                                        }\r\n                                    }\r\n\r\n                                    //Done, lim1 is the limit we're looking for     \r\n                                    retval = lim1;\r\n                                }\r\n                                else if(symbol.isComposite()) {\r\n                                    var _lim;\r\n                                    if(!symbol.isLinear())\r\n                                        symbol = _.expand(symbol);\r\n                                    //Apply lim f+g = (lim f)+(lim g)\r\n                                    retval = new Symbol(0);\r\n\r\n                                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                                        return b.group - a.group;\r\n                                    });\r\n\r\n                                    var _symbols = [];\r\n                                    //Analyze the functions first\r\n                                    var fns = new Symbol(0);\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        var sym = symbols[i].clone();\r\n                                        if(sym.group === FN || sym.group === CB && sym.hasFunc()) {\r\n                                            fns = _.add(fns, sym);\r\n                                        }\r\n                                        else\r\n                                            _symbols.push(sym);\r\n                                    }\r\n                                    _symbols.unshift(fns);\r\n\r\n                                    //make sure that we didn't just repackage the exact same symbol\r\n                                    if(_symbols.length !== 1) {\r\n                                        symbols = _symbols;\r\n                                    }\r\n\r\n                                    for(var i = 0, l = symbols.length; i < l; i++) {\r\n                                        var sym = symbols[i];\r\n                                        //If the addition of the limits is undefined then the limit diverges so return -infinity to infinity\r\n                                        try {\r\n                                            _lim = __.Limit.limit(sym, x, lim, depth);\r\n                                        }\r\n                                        catch(e) {\r\n                                            _lim = __.Limit.diverges();\r\n                                        }\r\n\r\n                                        try {\r\n                                            retval = _.add(retval, _lim);\r\n                                        }\r\n                                        catch(e) {\r\n                                            if(depth++ > Settings.max_lim_depth) {\r\n                                                return;\r\n                                            }\r\n                                            ;\r\n                                            retval = __.Limit.limit(__.diff(symbol, x), x, lim, depth);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                retval = __.Limit.divide(num, den, x, lim, depth);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //if we still don't have a solution\r\n                    if(!retval)\r\n                        //return it symbolically\r\n                        retval = _.symfunction('limit', [symbol, x, lim]);\r\n                }\r\n                catch(e) {\r\n                    //if all else fails return the symbolic function\r\n                    retval = _.symfunction('limit', [symbol, x, lim]);\r\n                }\r\n\r\n                return _.multiply(m, retval);\r\n            }\r\n        },\r\n        Fresnel: {\r\n            S: function (x) {\r\n                if(x.isConstant(true)) {\r\n                    return __.defint(_.parse('sin(pi*x^2/2)'), Symbol(0), x, 'x');\r\n                }\r\n                return _.symfunction('S', arguments);\r\n            },\r\n            C: function (x) {\r\n                if(x.isConstant(true)) {\r\n                    return __.defint(_.parse('cos(pi*x^2/2)'), Symbol(0), x, 'x');\r\n                }\r\n                return _.symfunction('C', arguments);\r\n            }\r\n        }\r\n    };\r\n\r\n    nerdamer.register([\r\n        {\r\n            name: 'diff',\r\n            visible: true,\r\n            numargs: [1, 3],\r\n            build: function () {\r\n                return __.diff;\r\n            }\r\n        },\r\n        {\r\n            name: 'sum',\r\n            visible: true,\r\n            numargs: 4,\r\n            build: function () {\r\n                return __.sum;\r\n            }\r\n        },\r\n        {\r\n            name: 'product',\r\n            visible: true,\r\n            numargs: 4,\r\n            build: function () {\r\n                return __.product;\r\n            }\r\n        },\r\n        {\r\n            name: 'integrate',\r\n            visible: true,\r\n            numargs: [1, 2],\r\n            build: function () {\r\n                return __.integrate;\r\n            }\r\n        },\r\n        {\r\n            name: 'defint',\r\n            visible: true,\r\n            numargs: [3, 4],\r\n            build: function () {\r\n                return __.defint;\r\n            }\r\n        },\r\n        {\r\n            name: 'S',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Fresnel.S;\r\n            }\r\n        },\r\n        {\r\n            name: 'C',\r\n            visible: true,\r\n            numargs: 1,\r\n            build: function () {\r\n                return __.Fresnel.C;\r\n            }\r\n        },\r\n        {\r\n            name: 'limit',\r\n            visible: true,\r\n            numargs: [3, 4],\r\n            build: function () {\r\n                return __.Limit.limit;\r\n            }\r\n        }\r\n    ]);\r\n    //link registered functions externally\r\n    nerdamer.updateAPI();\r\n\r\n})();","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * License : MIT\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global module */\r\n\r\nif((typeof module) !== 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Calculus');\r\n    require('./Algebra');\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            Symbol = core.Symbol,\r\n            format = core.Utils.format,\r\n            isVector = core.Utils.isVector,\r\n            isArray = core.Utils.isArray,\r\n            Vector = core.Vector,\r\n            S = core.groups.S,\r\n            EX = core.groups.EX,\r\n            CP = core.groups.CP,\r\n            CB = core.groups.CB,\r\n            FN = core.groups.FN;\r\n    core.Settings.Laplace_integration_depth = 40;\r\n\r\n\r\n    Symbol.prototype.findFunction = function (fname) {\r\n        //this is what we're looking for\r\n        if(this.group === FN && this.fname === fname)\r\n            return this.clone();\r\n        var found;\r\n        if(this.symbols)\r\n            for(var x in this.symbols) {\r\n                found = this.symbols[x].findFunction(fname);\r\n                if(found)\r\n                    break;\r\n            }\r\n\r\n        return found;\r\n    };\r\n\r\n    var __ = core.Extra = {\r\n        version: '1.4.2',\r\n        //http://integral-table.com/downloads/LaplaceTable.pdf\r\n        //Laplace assumes all coefficients to be positive\r\n        LaPlace: {\r\n            //Using: integral_0^oo f(t)*e^(-s*t) dt\r\n            transform: function (symbol, t, s) {\r\n                symbol = symbol.clone();\r\n\r\n                t = t.toString();\r\n                //First try a lookup for a speed boost\r\n                symbol = Symbol.unwrapSQRT(symbol, true);\r\n                var retval,\r\n                        coeff = symbol.stripVar(t),\r\n                        g = symbol.group;\r\n\r\n                symbol = _.divide(symbol, coeff.clone());\r\n\r\n                if(symbol.isConstant() || !symbol.contains(t, true)) {\r\n                    retval = _.parse(format('({0})/({1})', symbol, s));\r\n                }\r\n                else if(g === S && core.Utils.isInt(symbol.power)) {\r\n                    var n = String(symbol.power);\r\n                    retval = _.parse(format('factorial({0})/({1})^({0}+1)', n, s));\r\n                }\r\n                else if(symbol.group === S && symbol.power.equals(1 / 2)) {\r\n                    retval = _.parse(format('sqrt(pi)/(2*({0})^(3/2))', s));\r\n                }\r\n                else if(symbol.isComposite()) {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, __.LaPlace.transform(x, t, s));\r\n                    }, true);\r\n                }\r\n                else if(symbol.isE() && (symbol.power.group === S || symbol.power.group === CB)) {\r\n                    var a = symbol.power.stripVar(t);\r\n                    retval = _.parse(format('1/(({1})-({0}))', a, s));\r\n                }\r\n                else {\r\n                    var fns = ['sin', 'cos', 'sinh', 'cosh'];\r\n                    //support for symbols in fns with arguments in the form a*t or n*t where a = symbolic and n = Number\r\n                    if(symbol.group === FN && fns.indexOf(symbol.fname) !== -1 && (symbol.args[0].group === S || symbol.args[0].group === CB)) {\r\n                        var a = symbol.args[0].stripVar(t);\r\n\r\n                        switch(symbol.fname) {\r\n                            case 'sin':\r\n                                retval = _.parse(format('({0})/(({1})^2+({0})^2)', a, s));\r\n                                break;\r\n                            case 'cos':\r\n                                retval = _.parse(format('({1})/(({1})^2+({0})^2)', a, s));\r\n                                break;\r\n                            case 'sinh':\r\n                                retval = _.parse(format('({0})/(({1})^2-({0})^2)', a, s));\r\n                                break;\r\n                            case 'cosh':\r\n                                retval = _.parse(format('({1})/(({1})^2-({0})^2)', a, s));\r\n                                break;\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        //Try to integrate for a solution\r\n                        //we need at least the Laplace integration depth\r\n                        var depth_is_lower = core.Settings.integration_depth < core.Settings.Laplace_integration_depth;\r\n\r\n                        if(depth_is_lower) {\r\n                            var integration_depth = core.Settings.integration_depth; //save the depth\r\n                            core.Settings.integration_depth = core.Settings.Laplace_integration_depth; //transforms need a little more room\r\n                        }\r\n\r\n                        core.Utils.block('PARSE2NUMBER', function () {\r\n                            var u = t;\r\n                            var sym = symbol.sub(t, u);\r\n                            var integration_expr = _.parse('e^(-' + s + '*' + u + ')*' + sym);\r\n                            retval = core.Calculus.integrate(integration_expr, u);\r\n                            if(retval.hasIntegral())\r\n                                return _.symfunction('laplace', arguments);\r\n//                                _.error('Unable to compute transform');\r\n                            retval = retval.sub(t, 0);\r\n                            retval = _.expand(_.multiply(retval, new Symbol(-1)));\r\n                            retval = retval.sub(u, t);\r\n                        }, false);\r\n\r\n                        retval = core.Utils.block('PARSE2NUMBER', function () {\r\n                            return _.parse(retval);\r\n                        }, true);\r\n\r\n                        if(depth_is_lower)//put the integration depth as it was\r\n                            core.Settings.integration_depth = integration_depth;\r\n                    }\r\n\r\n                }\r\n\r\n                return _.multiply(retval, coeff);\r\n            },\r\n            inverse: function (symbol, s_, t) {\r\n                var input_symbol = symbol.clone();\r\n                return core.Utils.block('POSITIVE_MULTIPLIERS', function () {\r\n                    //expand and get partial fractions\r\n                    if(symbol.group === CB) {\r\n                        symbol = core.Algebra.PartFrac.partfrac(_.expand(symbol), s_);\r\n                    }\r\n\r\n                    if(symbol.group === S || symbol.group === CB || symbol.isComposite()) {\r\n                        var finalize = function () {\r\n                            //put back the numerator\r\n                            retval = _.multiply(retval, num);\r\n                            retval.multiplier = retval.multiplier.multiply(symbol.multiplier);\r\n                            //put back a\r\n                            retval = _.divide(retval, f.a);\r\n                        };\r\n                        var num, den, s, retval, f, p, m, den_p, fe;\r\n                        //remove the multiplier\r\n                        m = symbol.multiplier.clone();\r\n                        symbol.toUnitMultiplier();\r\n                        //get the numerator and denominator\r\n                        num = symbol.getNum();\r\n                        den = symbol.getDenom().toUnitMultiplier();\r\n\r\n                        //TODO: Make it so factor doesn't destroy pi\r\n                        //num = core.Algebra.Factor.factor(symbol.getNum());\r\n                        //den = core.Algebra.Factor.factor(symbol.getDenom().invert(null, true));\r\n\r\n                        if(den.group === CP) {\r\n                            den_p = den.power.clone();\r\n                            den.toLinear();\r\n                        }\r\n                        else {\r\n                            den_p = new core.Frac(1);\r\n                        }\r\n\r\n                        //convert s to a string\r\n                        s = s_.toString();\r\n                        //split up the denominator if in the form ax+b\r\n                        f = core.Utils.decompose_fn(den, s, true);\r\n                        //move the multiplier to the numerator\r\n                        fe = core.Utils.decompose_fn(_.expand(num.clone()), s, true);\r\n                        num.multiplier = num.multiplier.multiply(m);\r\n                        //store the parts in variables for easy recognition \r\n                        //check if in the form t^n where n = integer\r\n                        if((den.group === S || den.group === CB) && f.x.value === s && f.b.equals(0) && core.Utils.isInt(f.x.power)) {\r\n                            var fact, p;\r\n                            p = f.x.power - 1;\r\n                            fact = core.Math2.factorial(p);\r\n                            //  n!/s^(n-1)\r\n                            retval = _.divide(_.pow(t, new Symbol(p)), new Symbol(fact));\r\n                            //wrap it up\r\n                            finalize();\r\n                        }\r\n                        else if(den.group === CP && den_p.equals(1)) {\r\n                            if(f.x.group === core.groups.PL && core.Algebra.degree(den).equals(2)) {\r\n                                // Possibly in the form 1/(s^2+2*s+1)\r\n                                // Try factoring to get it in a more familiar form{\r\n                                // Apply inverse of F(s-a)\r\n                                var completed = core.Algebra.sqComplete(den, s);\r\n                                var u = core.Utils.getU(den);\r\n                                // Get a for the function above\r\n                                var a = core.Utils.decompose_fn(completed.a, s, true).b;\r\n                                var tf = __.LaPlace.inverse(_.parse(`1/((${u})^2+(${completed.c}))`), u, t);\r\n                                retval = _.multiply(tf, _.parse(`(${m})*e^(-(${a})*(${t}))`));\r\n                            }\r\n                            else {\r\n                                // a/(b*s-c) -> ae^(-bt)\r\n                                if(f.x.isLinear() && !num.contains(s)) {\r\n                                    t = _.divide(t, f.a.clone());\r\n\r\n                                    // Don't add factorial of one or zero\r\n                                    var p = den_p - 1;\r\n                                    var fact = p === 0 || p === 1 ? '1' : `(${den_p}-1)!`\r\n                                    retval = _.parse(format('(({0})^({3}-1)*e^(-(({2})*({0}))/({1})))/(({4})*({1})^({3}))', t, f.a, f.b, den_p, fact));\r\n                                    //wrap it up\r\n                                    finalize();\r\n                                }\r\n                                else {\r\n                                    if(f.x.group === S && f.x.power.equals(2)) {\r\n                                        if(!num.contains(s)) {\r\n                                            retval = _.parse(format('(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/sqrt(({2})*({3}))', t, num, f.a, f.b));\r\n                                        }\r\n                                        // a*s/(b*s^2+c^2)\r\n                                        else {\r\n                                            var a = new Symbol(1);\r\n                                            if(num.group === CB) {\r\n                                                var new_num = new Symbol(1);\r\n                                                num.each(function (x) {\r\n                                                    if(x.contains(s))\r\n                                                        new_num = _.multiply(new_num, x);\r\n                                                    else\r\n                                                        a = _.multiply(a, x);\r\n                                                });\r\n                                                num = new_num;\r\n                                            }\r\n\r\n                                            //we need more information about the denominator to decide\r\n                                            var f2 = core.Utils.decompose_fn(num, s, true);\r\n                                            var fn1, fn2, a_has_sin, b_has_cos, a_has_cos, b_has_sin;\r\n                                            fn1 = f2.a;\r\n                                            fn2 = f2.b;\r\n                                            a_has_sin = fn1.containsFunction('sin');\r\n                                            a_has_cos = fn1.containsFunction('cos');\r\n                                            b_has_cos = fn2.containsFunction('cos');\r\n                                            b_has_sin = fn2.containsFunction('sin');\r\n                                            if(f2.x.value === s && f2.x.isLinear() && !((a_has_sin && b_has_cos) || (a_has_cos || b_has_sin))) {\r\n                                                retval = _.parse(format('(({1})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})', t, f2.a, f.a, f.b));\r\n                                            }\r\n                                            else {\r\n                                                if(a_has_sin && b_has_cos) {\r\n                                                    var sin, cos;\r\n                                                    sin = fn1.findFunction('sin');\r\n                                                    cos = fn2.findFunction('cos');\r\n                                                    //who has the s?\r\n                                                    if(sin.args[0].equals(cos.args[0]) && !sin.args[0].contains(s)) {\r\n                                                        var b, c, d, e;\r\n                                                        b = _.divide(fn2, cos.toUnitMultiplier()).toString();\r\n                                                        c = sin.args[0].toString();\r\n                                                        d = f.b;\r\n                                                        e = _.divide(fn1, sin.toUnitMultiplier());\r\n                                                        exp = '(({1})*({2})*cos({3})*sin(sqrt({4})*({0})))/sqrt({4})+({1})*sin({3})*({5})*cos(sqrt({4})*({0}))';\r\n                                                        retval = _.parse(format(exp, t, a, b, c, d, e));\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if(f.x.power.num && f.x.power.num.equals(3) && f.x.power.den.equals(2) && num.contains('sqrt(pi)') && !num.contains(s) && num.isLinear()) {\r\n                            var b = _.divide(num.clone(), _.parse('sqrt(pi)'));\r\n                            retval = _.parse(format('(2*({2})*sqrt({0}))/({1})', t, f.a, b, num));\r\n                        }\r\n                        else if(den_p.equals(2) && f.x.power.equals(2)) {\r\n                            var a, d, exp;\r\n                            if(!num.contains(s)) {\r\n                                a = _.divide(num, new Symbol(2));\r\n                                exp = '(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({3})*sqrt(({2})*({3})))-(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*({3}))';\r\n                                retval = _.parse(format(exp, t, a, f.a, f.b));\r\n                            }\r\n                            else {\r\n                                // Decompose the numerator to check value of s\r\n                                f2 = core.Utils.decompose_fn(_.expand(num.clone()), s, true);\r\n                                if(f2.x.isComposite()) {\r\n                                    var s_terms = [];\r\n                                    //first collect the factors e.g. (a)(bx)(cx^2+d)\r\n                                    var symbols = num.collectSymbols(function (x) {\r\n                                        x = Symbol.unwrapPARENS(x);\r\n                                        var t = core.Utils.decompose_fn(x, s, true);\r\n                                        t.symbol = x;\r\n                                        return t;\r\n                                    }).\r\n                                            //then sort them by power hightest to lowest\r\n                                            sort(function (a, b) {\r\n                                                var p1, p2;\r\n                                                p1 = a.x.value !== s ? 0 : a.x.power;\r\n                                                p2 = b.x.value !== s ? 0 : b.x.power;\r\n                                                return p2 - p1;\r\n                                            });\r\n                                    a = new Symbol(-1);\r\n                                    // Grab only the ones which have s\r\n                                    for(var i = 0; i < symbols.length; i++) {\r\n                                        var fc = symbols[i];\r\n                                        if(fc.x.value === s)\r\n                                            s_terms.push(fc);\r\n                                        else\r\n                                            a = _.multiply(a, fc.symbol);\r\n                                    }\r\n                                    // The following 2 assumptions are made\r\n                                    // 1. since the numerator was factored above then each s_term has a unique power\r\n                                    // 2. because the terms are sorted by descending powers then the first item \r\n                                    //    has the highest power\r\n                                    // We can now check for the next type s(s^2-a^2)/(s^2+a^2)^2\r\n                                    if(s_terms[0].x.power.equals(2) && s_terms[1].x.power.equals(1) && s_terms[1].b.equals(0) && !s_terms[0].b.equals(0)) {\r\n                                        b = s_terms[0].a.negate();\r\n                                        exp = '-(({1})*({2})*({5})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))/' +\r\n                                                '(2*({4})^2*sqrt(({4})*({5})))-(({1})*({3})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))' +\r\n                                                '/(2*({4})*sqrt(({4})*({5})))+(({1})*({2})*cos((sqrt(({4})*({5}))*({0}))/({4})))/({4})^2';\r\n                                        retval = _.parse(format(exp, t, a, b, s_terms[0].b, f.a, f.b));\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if(f2.x.isLinear()) {\r\n                                        a = _.divide(f2.a, new Symbol(2));\r\n                                        exp = '(({1})*({0})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))';\r\n                                        retval = _.parse(format(exp, t, a, f.a, f.b));\r\n                                    }\r\n                                    else if(f2.x.power.equals(2)) {\r\n                                        if(f2.b.equals(0)) {\r\n                                            a = _.divide(f2.a, new Symbol(2));\r\n                                            exp = '(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2';\r\n                                            retval = _.parse(format(exp, t, a, f.a, f.b));\r\n                                        }\r\n                                        else {\r\n                                            a = _.divide(f2.a, new Symbol(2));\r\n                                            d = f2.b.negate();\r\n                                            exp = '-((({2})*({4})-2*({1})*({3}))*sin((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3})*sqrt(({2})*({3})))+' +\r\n                                                    '(({4})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3}))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2';\r\n                                            retval = _.parse(format(exp, t, a, f.a, f.b, d));\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if(symbol.isComposite()) {\r\n                            // 1/(s+1)^2\r\n                            if(den_p.equals(2) && f.x.group === S) {\r\n                                retval = _.parse(`(${m})*(${t})*e^(-(${f.b})*(${t}))`);\r\n                            }\r\n                            else {\r\n                                retval = new Symbol(0);\r\n\r\n                                symbol.each(function (x) {\r\n                                    retval = _.add(retval, __.LaPlace.inverse(x, s_, t));\r\n                                }, true);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if(!retval) {\r\n                        retval = _.symfunction('ilt', [input_symbol, s_, t]);\r\n                    }\r\n\r\n                    return retval;\r\n                }, true);\r\n            }\r\n        },\r\n        Statistics: {\r\n            frequencyMap: function (arr) {\r\n                var map = {};\r\n                //get the frequency map\r\n                for(var i = 0, l = arr.length; i < l; i++) {\r\n                    var e = arr[i],\r\n                            key = e.toString();\r\n                    if(!map[key]) //default it to zero\r\n                        map[key] = 0;\r\n                    map[key]++; //increment\r\n                }\r\n                return map;\r\n            },\r\n            sort: function (arr) {\r\n                return arr.sort(function (a, b) {\r\n                    if(!a.isConstant() || !b.isConstant())\r\n                        _.error('Unable to sort! All values must be numeric');\r\n                    return a.multiplier.subtract(b.multiplier);\r\n                });\r\n            },\r\n            count: function (arr) {\r\n                return new Symbol(arr.length);\r\n            },\r\n            sum: function (arr, x_) {\r\n                var sum = new Symbol(0);\r\n                for(var i = 0, l = arr.length; i < l; i++) {\r\n                    var xi = arr[i].clone();\r\n                    if(x_) {\r\n                        sum = _.add(_.pow(_.subtract(xi, x_.clone()), new Symbol(2)), sum);\r\n                    }\r\n                    else\r\n                        sum = _.add(xi, sum);\r\n                }\r\n\r\n                return sum;\r\n            },\r\n            mean: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.mean.apply(this, args[0].elements);\r\n                return  _.divide(__.Statistics.sum(args), __.Statistics.count(args));\r\n            },\r\n            median: function () {\r\n                var args = [].slice.call(arguments), retval;\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.median.apply(this, args[0].elements);\r\n                try {\r\n                    var sorted = __.Statistics.sort(args);\r\n                    var l = args.length;\r\n                    if(core.Utils.even(l)) {\r\n                        var mid = l / 2;\r\n                        retval = __.Statistics.mean(sorted[mid - 1], sorted[mid]);\r\n                    }\r\n                    else\r\n                        retval = sorted[Math.floor(l / 2)];\r\n                }\r\n                catch(e) {\r\n                    retval = _.symfunction('median', args);\r\n                }\r\n                return retval;\r\n            },\r\n            mode: function () {\r\n                var args = [].slice.call(arguments),\r\n                        retval;\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.mode.apply(this, args[0].elements);\r\n\r\n                var map = __.Statistics.frequencyMap(args);\r\n\r\n                //the mode of 1 item is that item as per issue #310 (verified by Happypig375). \r\n                if(core.Utils.keys(map).length === 1)\r\n                    retval = args[0];\r\n                else {\r\n                    //invert by arraning them according to their frequency\r\n                    var inverse = {};\r\n                    for(var x in map) {\r\n                        var freq = map[x];\r\n                        //check if it's in the inverse already\r\n                        if(!(freq in inverse))\r\n                            inverse[freq] = x;\r\n                        else {\r\n                            var e = inverse[freq];\r\n                            //if it's already an array then just add it\r\n                            if(isArray(e))\r\n                                e.push(x);\r\n                            //convert it to and array\r\n                            else\r\n                                inverse[freq] = [x, inverse[freq]];\r\n                        }\r\n                    }\r\n                    //the keys now represent the maxes. We want the max of those keys\r\n                    var max = inverse[Math.max.apply(null, core.Utils.keys(inverse))];\r\n                    //check it's an array. If it is then map over the results and convert \r\n                    //them to Symbol\r\n                    if(isArray(max)) {\r\n                        retval = _.symfunction('mode', max.sort());\r\n                    }\r\n                    else\r\n                        retval = _.parse(max);\r\n                }\r\n\r\n                return retval;\r\n            },\r\n            gVariance: function (k, args) {\r\n                var x_ = __.Statistics.mean.apply(__.Statistics, args),\r\n                        sum = __.Statistics.sum(args, x_);\r\n                return _.multiply(k, sum);\r\n            },\r\n            variance: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.variance.apply(this, args[0].elements);\r\n                var k = _.divide(new Symbol(1), __.Statistics.count(args));\r\n                return __.Statistics.gVariance(k, args);\r\n            },\r\n            sampleVariance: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.sampleVariance.apply(this, args[0].elements);\r\n\r\n                var k = _.divide(new Symbol(1), _.subtract(__.Statistics.count(args), new Symbol(1)));\r\n                return __.Statistics.gVariance(k, args);\r\n            },\r\n            standardDeviation: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.standardDeviation.apply(this, args[0].elements);\r\n                return _.pow(__.Statistics.variance.apply(__.Statistics, args), new Symbol(1 / 2));\r\n            },\r\n            sampleStandardDeviation: function () {\r\n                var args = [].slice.call(arguments);\r\n                //handle arrays\r\n                if(isVector(args[0]))\r\n                    return __.Statistics.sampleStandardDeviation.apply(this, args[0].elements);\r\n                return _.pow(__.Statistics.sampleVariance.apply(__.Statistics, args), new Symbol(1 / 2));\r\n            },\r\n            zScore: function (x, mean, stdev) {\r\n                return _.divide(_.subtract(x, mean), stdev);\r\n            }\r\n        },\r\n        Units: {\r\n            table: {\r\n                foot: '12 inch',\r\n                meter: '100 cm',\r\n                decimeter: '10 cm',\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    nerdamer.register([\r\n        {\r\n            name: 'laplace',\r\n            visible: true,\r\n            numargs: 3,\r\n            build: function () {\r\n                return __.LaPlace.transform;\r\n            }\r\n        },\r\n        {\r\n            name: 'ilt',\r\n            visible: true,\r\n            numargs: 3,\r\n            build: function () {\r\n                return __.LaPlace.inverse;\r\n            }\r\n        },\r\n        //statistical\r\n        {\r\n            name: 'mean',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.mean;\r\n            }\r\n        },\r\n        {\r\n            name: 'median',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.median;\r\n            }\r\n        },\r\n        {\r\n            name: 'mode',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.mode;\r\n            }\r\n        },\r\n        {\r\n            name: 'smpvar',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.sampleVariance;\r\n            }\r\n        },\r\n        {\r\n            name: 'variance',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.variance;\r\n            }\r\n        },\r\n        {\r\n            name: 'smpstdev',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.sampleStandardDeviation;\r\n            }\r\n        },\r\n        {\r\n            name: 'stdev',\r\n            visible: true,\r\n            numargs: -1,\r\n            build: function () {\r\n                return __.Statistics.standardDeviation;\r\n            }\r\n        },\r\n        {\r\n            name: 'zscore',\r\n            visible: true,\r\n            numargs: 3,\r\n            build: function () {\r\n                return __.Statistics.zScore;\r\n            }\r\n        }\r\n    ]);\r\n\r\n    //link registered functions externally\r\n    nerdamer.updateAPI();\r\n}());\r\n\r\n// Added for all.min.js\r\nif((typeof module) !== 'undefined') {\r\n    module.exports = nerdamer;\r\n};","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n/* global module */\r\n\r\nif((typeof module) !== 'undefined') {\r\n    var nerdamer = require('./nerdamer.core.js');\r\n    require('./Calculus.js');\r\n    require('./Algebra.js');\r\n}\r\n\r\n(function () {\r\n    //handle imports\r\n    var core = nerdamer.getCore(),\r\n            _ = core.PARSER,\r\n            _A = core.Algebra,\r\n            _C = core.Calculus,\r\n            explode = _C.integration.decompose_arg,\r\n            evaluate = core.Utils.evaluate,\r\n            remove = core.Utils.remove,\r\n            format = core.Utils.format,\r\n            build = core.Utils.build,\r\n            knownVariable = core.Utils.knownVariable,\r\n            Symbol = core.Symbol,\r\n            isSymbol = core.Utils.isSymbol,\r\n            variables = core.Utils.variables,\r\n            S = core.groups.S,\r\n            PL = core.groups.PL,\r\n            CB = core.groups.CB,\r\n            CP = core.groups.CP,\r\n            FN = core.groups.FN,\r\n            Settings = core.Settings,\r\n            range = core.Utils.range,\r\n            isArray = core.Utils.isArray;\r\n\r\n\r\n    // The search radius for the roots\r\n    core.Settings.SOLVE_RADIUS = 1000;\r\n    // The maximum number to fish for on each side of the zero\r\n    core.Settings.ROOTS_PER_SIDE = 10;\r\n    // Covert the number to multiples of pi if possible\r\n    core.Settings.make_pi_conversions = false;\r\n    // The step size\r\n    core.Settings.STEP_SIZE = 0.1;\r\n    // The epsilon size\r\n    core.Settings.EPSILON = 1e-13;\r\n    //the maximum iterations for Newton's method\r\n    core.Settings.MAX_NEWTON_ITERATIONS = 200;\r\n    //the maximum number of time non-linear solve tries another jump point\r\n    core.Settings.MAX_NON_LINEAR_TRIES = 12;\r\n    //the amount of iterations the function will start to jump at\r\n    core.Settings.NON_LINEAR_JUMP_AT = 50;\r\n    //the size of the jump\r\n    core.Settings.NON_LINEAR_JUMP_SIZE = 100;\r\n    //the original starting point for nonlinear solving\r\n    core.Settings.NON_LINEAR_START = 0.01;\r\n    //When points are generated as starting points for Newton's method, they are sliced into small\r\n    //slices to make sure that we have convergence on the right point. This defines the \r\n    //size of the slice\r\n    core.Settings.NEWTON_SLICES = 200;\r\n    //The epsilon used in Newton's iteration\r\n    core.Settings.NEWTON_EPSILON = Number.EPSILON * 2;\r\n    //The distance in which two solutions are deemed the same\r\n    core.Settings.SOLUTION_PROXIMITY = 1e-14;\r\n    //Indicate wheter to filter the solutions are not\r\n    core.Settings.FILTER_SOLUTIONS = true;\r\n    //the maximum number of recursive calls\r\n    core.Settings.MAX_SOLVE_DEPTH = 10;\r\n    // The tolerance that's considered close enough to zero\r\n    core.Settings.ZERO_EPSILON = 1e-9;\r\n    // The maximum iteration for the bisection method incase of some JS strangeness\r\n    core.Settings.MAX_BISECTION_ITER = 2000;\r\n    // The tolerance for the bisection method\r\n    core.Settings.BI_SECTION_EPSILON = 1e-12;\r\n\r\n\r\n    core.Symbol.prototype.hasTrig = function () {\r\n        return this.containsFunction(['cos', 'sin', 'tan', 'cot', 'csc', 'sec']);\r\n    };\r\n\r\n    core.Symbol.prototype.hasNegativeTerms = function () {\r\n        if(this.isComposite()) {\r\n            for(var x in this.symbols) {\r\n                var sym = this.symbols[x];\r\n                if(sym.group === PL && sym.hasNegativeTerms() || this.symbols[x].power.lessThan(0))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /* nerdamer version 0.7.x and up allows us to make better use of operator overloading\r\n     * As such we can have this data type be supported completely outside of the core.\r\n     * This is an equation that has a left hand side and a right hand side\r\n     */\r\n    function Equation(lhs, rhs) {\r\n        if(rhs.isConstant() && lhs.isConstant() && !lhs.equals(rhs) || lhs.equals(core.Settings.IMAGINARY) && rhs.isConstant(true) || rhs.equals(core.Settings.IMAGINARY) && lhs.isConstant(true))\r\n            throw new core.exceptions.NerdamerValueError(lhs.toString() + ' does not equal ' + rhs.toString());\r\n        this.LHS = lhs; //left hand side\r\n        this.RHS = rhs; //right and side\r\n    }\r\n    ;\r\n\r\n    //UTILS ##!!\r\n\r\n    Equation.prototype = {\r\n        toString: function () {\r\n            return this.LHS.toString() + '=' + this.RHS.toString();\r\n        },\r\n        text: function (option) {\r\n            return this.LHS.text(option) + '=' + this.RHS.text(option);\r\n        },\r\n        toLHS: function (expand) {\r\n            expand = typeof expand === 'undefined' ? true : false;\r\n            var eqn;\r\n            if(!expand) {\r\n                eqn = this.clone();\r\n            }\r\n            else {\r\n                eqn = this.removeDenom();\r\n            }\r\n            var a = eqn.LHS;\r\n            var b = eqn.RHS;\r\n            \r\n            if(a.isConstant(true) && !b.isConstant(true)) {\r\n                // Swap them to avoid confusing parser and cause an infinite loop\r\n                [a, b] = [b, a];\r\n            }\r\n            var _t = _.subtract(a, b);\r\n            var retval = expand ? _.expand(_t) : _t;\r\n            \r\n            // Quick workaround for issue #636\r\n            // This basically borrows the removeDenom method from the Equation class. \r\n            // TODO: Make this function a stand-alone function\r\n            retval = new Equation(retval, new Symbol(0)).removeDenom().LHS;\r\n            \r\n            return retval;\r\n        },\r\n        removeDenom: function () {\r\n            var a = this.LHS.clone();\r\n            var b = this.RHS.clone();\r\n            //remove the denominator on both sides\r\n            var den = _.multiply(a.getDenom(), b.getDenom());\r\n            a = _.expand(_.multiply(a, den.clone()));\r\n            b = _.expand(_.multiply(b, den));\r\n            //swap the groups\r\n            if(b.group === CP && b.group !== CP) {\r\n                var t = a;\r\n                a = b;\r\n                b = t; //swap\r\n            }\r\n\r\n            //scan to eliminate denominators\r\n            if(a.group === CB) {\r\n                var t = new Symbol(a.multiplier),\r\n                        newRHS = b.clone();\r\n                a.each(function (y) {\r\n                    if(y.power.lessThan(0))\r\n                        newRHS = _.divide(newRHS, y);\r\n                    else\r\n                        t = _.multiply(t, y);\r\n                });\r\n                a = t;\r\n                b = newRHS;\r\n\r\n            }\r\n            else if(a.group === CP) {\r\n                //the logic: loop through each and if it has a denominator then multiply it out on both ends\r\n                //and then start over\r\n                for(var x in a.symbols) {\r\n                    var sym = a.symbols[x];\r\n                    if(sym.group === CB) {\r\n                        for(var y in sym.symbols) {\r\n                            var sym2 = sym.symbols[y];\r\n                            if(sym2.power.lessThan(0)) {\r\n                                return new Equation(\r\n                                        _.expand(_.multiply(sym2.clone().toLinear(), a)),\r\n                                        _.expand(_.multiply(sym2.clone().toLinear(), b))\r\n                                        );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return new Equation(a, b);\r\n        },\r\n        clone: function () {\r\n            return new Equation(this.LHS.clone(), this.RHS.clone());\r\n        },\r\n        sub: function (x, y) {\r\n            var clone = this.clone();\r\n            clone.LHS = clone.LHS.sub(x.clone(), y.clone());\r\n            clone.RHS = clone.RHS.sub(x.clone(), y.clone());\r\n            return clone;\r\n        },\r\n        isZero: function () {\r\n            return core.Utils.evaluate(this.toLHS()).equals(0);\r\n        },\r\n        latex: function (option) {\r\n            return [this.LHS.latex(option), this.RHS.latex(option)].join('=');\r\n        }\r\n    };\r\n    //overwrite the equals function\r\n    _.equals = function (a, b) {\r\n        return new Equation(a, b);\r\n    };\r\n\r\n    // Extend simplify\r\n    (function () {\r\n        var simplify = _.functions.simplify[0];\r\n        _.functions.simplify[0] = function (symbol) {\r\n            if(symbol instanceof Equation) {\r\n                symbol.LHS = simplify(symbol.LHS);\r\n                symbol.RHS = simplify(symbol.RHS);\r\n                return symbol;\r\n            }\r\n            // Just call the original simplify\r\n            return simplify(symbol);\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Sets two expressions equal\r\n     * @param {Symbol} symbol\r\n     * @returns {Expression}\r\n     */\r\n    core.Expression.prototype.equals = function (symbol) {\r\n        if(symbol instanceof core.Expression)\r\n            symbol = symbol.symbol; //grab the symbol if it's an expression\r\n        var eq = new Equation(this.symbol, symbol);\r\n        return eq;\r\n    };\r\n\r\n    core.Expression.prototype.solveFor = function (x) {\r\n        var symbol;\r\n        if(this.symbol instanceof Equation) {\r\n            //exit right away if we already have the answer\r\n            //check the LHS\r\n            if(this.symbol.LHS.isConstant() && this.symbol.RHS.equals(x))\r\n                return new core.Expression(this.symbol.LHS);\r\n\r\n            //check the RHS\r\n            if(this.symbol.RHS.isConstant() && this.symbol.LHS.equals(x))\r\n                return new core.Expression(this.symbol.RHS);\r\n\r\n            //otherwise just bring it to LHS\r\n            symbol = this.symbol.toLHS();\r\n        }\r\n        else {\r\n            symbol = this.symbol;\r\n        }\r\n\r\n        return solve(symbol, x).map(function (x) {\r\n            return new core.Expression(x);\r\n        });\r\n    };\r\n\r\n    core.Expression.prototype.expand = function () {\r\n        if(this.symbol instanceof Equation) {\r\n            var clone = this.symbol.clone();\r\n            clone.RHS = _.expand(clone.RHS);\r\n            clone.LHS = _.expand(clone.LHS);\r\n            return new core.Expression(clone);\r\n        }\r\n        return new core.Expression(_.expand(this.symbol));\r\n    };\r\n\r\n    core.Expression.prototype.variables = function () {\r\n        if(this.symbol instanceof Equation)\r\n            return core.Utils.arrayUnique(variables(this.symbol.LHS).concat(variables(this.symbol.RHS)));\r\n        return variables(this.symbol);\r\n    };\r\n\r\n\r\n\r\n    var setEq = function (a, b) {\r\n        return _.equals(a, b);\r\n    };\r\n\r\n    //link the Equation class back to the core\r\n    core.Equation = Equation;\r\n\r\n    //Loops through an array and attempts to fails a test. Stops if manages to fail.\r\n    var checkAll = core.Utils.checkAll = function (args, test) {\r\n        for(var i = 0; i < args.length; i++)\r\n            if(test(args[i]))\r\n                return false;\r\n        return true;\r\n    };\r\n\r\n    //version solve\r\n    var __ = core.Solve = {\r\n        version: '2.0.3',\r\n        solutions: [],\r\n        solve: function (eq, variable) {\r\n            var solution = solve(eq, String(variable));\r\n            return new core.Vector(solution);\r\n            //return new core.Vector(solve(eq.toString(), variable ? variable.toString() : variable));\r\n        },\r\n        /**\r\n         * Brings the equation to LHS. A string can be supplied which will be converted to an Equation\r\n         * @param {Equation|String} eqn\r\n         * @returns {Symbol}\r\n         */\r\n        toLHS: function (eqn, expand) {\r\n            if(isSymbol(eqn))\r\n                return eqn;\r\n            //If it's an equation then call its toLHS function instead\r\n            if(!(eqn instanceof Equation)) {\r\n                var es = eqn.split('=');\r\n                //convert falsey values to zero\r\n                es[1] = es[1] || '0';\r\n                eqn = new Equation(_.parse(es[0]), _.parse(es[1]));\r\n            }\r\n            return eqn.toLHS(expand);\r\n        },\r\n//        getSystemVariables: function(eqns) {\r\n//            vars = variables(eqns[0], null, null, true);\r\n//\r\n//            //get all variables\r\n//            for (var i = 1, l=eqns.length; i < l; i++)\r\n//                vars = vars.concat(variables(eqns[i]));\r\n//            //remove duplicates\r\n//            vars = core.Utils.arrayUnique(vars).sort();\r\n//            \r\n//            //done\r\n//            return vars;\r\n//        },\r\n        /**\r\n         * Solve a set of circle equations. \r\n         * @param {Symbol[]} eqns\r\n         * @returns {Array}\r\n         */\r\n        solveCircle: function (eqns, vars) {\r\n            // Convert the variables to symbols\r\n            var svars = vars.map(function (x) {\r\n                return _.parse(x)\r\n            });\r\n\r\n            var deg = [];\r\n\r\n            var solutions = [];\r\n\r\n            // Get the degree for the equations\r\n            for(var i = 0; i < eqns.length; i++) {\r\n                var d = [];\r\n                for(var j = 0; j < svars.length; j++) {\r\n                    d.push(Number(core.Algebra.degree(eqns[i], svars[j])));\r\n                }\r\n                // Store the total degree\r\n                d.push(core.Utils.arraySum(d, true));\r\n                deg.push(d);\r\n            }\r\n\r\n            var a = eqns[0];\r\n            var b = eqns[1];\r\n\r\n            if(deg[0][2] > deg[1][2]) {\r\n                [b, a] = [a, b];\r\n                [deg[1], deg[0]] = [deg[0], deg[1]];\r\n            }\r\n\r\n            // Only solve it's truly a circle\r\n            if(deg[0][0] === 1 && deg[0][2] === 2 && deg[1][0] === 2 && deg[1][2] === 4) {\r\n                // For clarity we'll refer to the variables as x and y\r\n                var x = vars[0];\r\n                var y = vars[1];\r\n\r\n                // We can now get the two points for y\r\n                var y_points = solve(_.parse(b, knownVariable(x, solve(_.parse(a), x)[0])), y).map(function (x) {\r\n                    return x.toString();\r\n                });\r\n\r\n                // Since we now know y we can get the two x points from the first equation\r\n                var x_points = [\r\n                    solve(_.parse(a, knownVariable(y, y_points[0])))[0].toString()\r\n                ];\r\n\r\n                if(y_points[1]) {\r\n                    x_points.push(solve(_.parse(a, knownVariable(y, y_points[1])))[0].toString());\r\n                }\r\n\r\n                if(Settings.SOLUTIONS_AS_OBJECT) {\r\n                    var solutions = {};\r\n                    solutions[x] = x_points;\r\n                    solutions[y] = y_points;\r\n                }\r\n                else {\r\n                    y_points.unshift(y);\r\n                    x_points.unshift(x);\r\n                    solutions = [x_points, y_points];\r\n                }\r\n            }\r\n\r\n            return solutions;\r\n        },\r\n        /**\r\n         * Solve a system of nonlinear equations\r\n         * @param {Symbol[]} eqns The array of equations\r\n         * @param {number} tries The maximum number of tries\r\n         * @param {number} start The starting point where to start looking for solutions\r\n         * @returns {Array}\r\n         */\r\n        solveNonLinearSystem: function (eqns, tries, start) {\r\n            if(tries < 0) {\r\n                return [];//can't find a solution\r\n            }\r\n\r\n            start = typeof start === 'undefined' ? core.Settings.NON_LINEAR_START : start;\r\n\r\n            //the maximum number of times to jump\r\n            var max_tries = core.Settings.MAX_NON_LINEAR_TRIES;\r\n\r\n            //halfway through the tries\r\n            var halfway = Math.floor(max_tries / 2);\r\n\r\n            //initialize the number of tries to 10 if not specified\r\n            tries = typeof tries === 'undefined' ? max_tries : tries;\r\n\r\n            //a point at which we check to see if we're converging. By inspection it seems that we can\r\n            //use around 20 iterations to see if we're converging. If not then we retry a jump of x\r\n            var jump_at = core.Settings.NON_LINEAR_JUMP_AT;\r\n\r\n            //we jump by this many points at each pivot point\r\n            var jump = core.Settings.NON_LINEAR_JUMP_SIZE;\r\n\r\n            //used to check if we actually found a solution or if we gave up. Assume we will find a solution.\r\n            var found = true;\r\n\r\n            var create_subs = function (vars, matrix) {\r\n                return vars.map(function (x, i) {\r\n                    return Number(matrix.get(i, 0));\r\n                });\r\n            };\r\n\r\n            var vars = core.Utils.arrayGetVariables(eqns);\r\n            var jacobian = core.Matrix.jacobian(eqns, vars, function (x) {\r\n                return build(x, vars);\r\n            }, true);\r\n\r\n            var max_iter = core.Settings.MAX_NEWTON_ITERATIONS;\r\n            var o, y, iters, xn1, norm, lnorm, xn, d;\r\n\r\n            var f_eqns = eqns.map(function (eq) {\r\n                return build(eq, vars);\r\n            });\r\n\r\n            var J = jacobian.map(function (e) {\r\n                return build(e, vars);\r\n            }, true);\r\n            //initial values\r\n            xn1 = core.Matrix.cMatrix(0, vars);\r\n\r\n            //initialize the c matrix with something close to 0. \r\n            var c = core.Matrix.cMatrix(start, vars);\r\n\r\n            iters = 0;\r\n\r\n            //start of algorithm\r\n            do {\r\n                //if we've reached the max iterations then exit\r\n                if(iters > max_iter) {\r\n                    break;\r\n                    found = false;\r\n                }\r\n\r\n                //set the substitution object\r\n                o = create_subs(vars, c);\r\n\r\n                //set xn\r\n                xn = c.clone();\r\n\r\n                //make all the substitutions for each of the equations\r\n                f_eqns.forEach(function (f, i) {\r\n                    c.set(i, 0, f.apply(null, o));\r\n                });\r\n\r\n                var m = new core.Matrix();\r\n                J.each(function (fn, i, j) {\r\n                    var ans = fn.apply(null, o);\r\n                    m.set(i, j, ans);\r\n                });\r\n\r\n                m = m.invert();\r\n\r\n                //preform the elimination\r\n                y = _.multiply(m, c).negate();\r\n\r\n                //the callback is to avoid overflow in the coeffient denonimator\r\n                //it converts it to a decimal and then back to a fraction. Some precision\r\n                //is lost be it's better than overflow. \r\n                d = y.subtract(xn1, function (x) {\r\n                    return _.parse(Number(x));\r\n                });\r\n\r\n                xn1 = xn.add(y, function (x) {\r\n                    return _.parse(Number(x));\r\n                });\r\n\r\n                //move c is now xn1\r\n                c = xn1;\r\n\r\n                //get the norm\r\n\r\n                //the expectation is that we're converging to some answer as this point regardless of where we start\r\n                //this may have to be adjusted at some point because of erroneous assumptions\r\n                if(iters >= jump_at) {\r\n                    //check the norm. If the norm is greater than one then it's time to try another point\r\n                    if(norm > 1) {\r\n                        //reset the start point at halway\r\n                        if(tries === halfway)\r\n                            start = 0;\r\n                        var sign = tries > halfway ? 1 : -1; //which side are we incrementing\r\n                        //we increment +n at one side and -n at the other. \r\n                        n = (tries % Math.floor(halfway)) + 1;\r\n                        //adjust the start point\r\n                        start += (sign * n * jump);\r\n                        //call restart\r\n                        return __.solveNonLinearSystem(eqns, --tries, start);\r\n                    }\r\n                }\r\n                lnorm = norm;\r\n                iters++;\r\n                norm = d.max();\r\n\r\n                //exit early. Revisit if we get bugs\r\n                if(Number(norm) === Number(lnorm)) {\r\n                    break;\r\n                }\r\n            }\r\n            while(Number(norm) >= Number.EPSILON)\r\n\r\n            //return a blank set if nothing was found;\r\n            if(!found)\r\n                return [];\r\n\r\n            //return c since that's the answer\r\n            return __.systemSolutions(c, vars, true, function (x) {\r\n                return core.Utils.round(Number(x), 14);\r\n            });\r\n        },\r\n        systemSolutions: function (result, vars, expand_result, callback) {\r\n            var solutions = core.Settings.SOLUTIONS_AS_OBJECT ? {} : [];\r\n\r\n            result.each(function (e, idx) {\r\n                var solution = (expand_result ? _.expand(e) : e).valueOf();\r\n                if(callback)\r\n                    solution = callback.call(e, solution);\r\n                var variable = vars[idx];\r\n                if(core.Settings.SOLUTIONS_AS_OBJECT) {\r\n                    solutions[variable] = solution;\r\n                }\r\n                else\r\n                    solutions.push([variable, solution]); /*NO*/\r\n            });\r\n            //done\r\n            return solutions;\r\n        },\r\n        /**\r\n         * Solves a system of equations by substitution. This is useful when\r\n         * no distinct solution exists. e.g. a line, plane, etc.\r\n         * @param {Array} eqns\r\n         * @returns {Array}\r\n         */\r\n        solveSystemBySubstitution: function (eqns) {\r\n            // Assume at least 2 equations. The function variables will just return an empty array if undefined is provided\r\n            var vars_a = variables(eqns[0]);\r\n            var vars_b = variables(eqns[1]);\r\n            // Check if it's a circle equation\r\n            if(eqns.length === 2 && vars_a.length === 2 && core.Utils.arrayEqual(vars_a, vars_b)) {\r\n                return __.solveCircle(eqns, vars_a);\r\n            }\r\n\r\n            return []; // return an empty set\r\n        },\r\n\r\n        //https://www.lakeheadu.ca/sites/default/files/uploads/77/docs/RemaniFinal.pdf\r\n        /**\r\n         * Solves a systems of equations\r\n         * @param {Array} eqns An array of equations\r\n         * @param {Array} var_array An array of variables\r\n         * @returns {Array|object}\r\n         */\r\n        solveSystem: function (eqns, var_array) {\r\n            //check if a var_array was specified\r\n            //nerdamer.clearVars();// this deleted ALL variables: not what we want\r\n            //parse all the equations to LHS. Remember that they come in as strings\r\n            for(var i = 0; i < eqns.length; i++)\r\n                eqns[i] = __.toLHS(eqns[i]);\r\n\r\n            var l = eqns.length,\r\n                    m = new core.Matrix(),\r\n                    c = new core.Matrix(),\r\n                    expand_result = false,\r\n                    vars;\r\n\r\n            if(typeof var_array === 'undefined') {\r\n                //check to make sure that all the equations are linear\r\n                if(!_A.allLinear(eqns)) {\r\n                    try {\r\n                        return __.solveNonLinearSystem(eqns);\r\n                    }\r\n                    catch(e) {\r\n                        if(e instanceof core.exceptions.DivisionByZero) {\r\n                            return __.solveSystemBySubstitution(eqns);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                vars = core.Utils.arrayGetVariables(eqns);\r\n                \r\n                // If the system only has one variable then we solve for the first one and \r\n                // then test the remaining equations with that solution. If any of the remaining\r\n                // equation fails then the system has no solution\r\n                if(vars.length === 1) {\r\n                    var n = 0,\r\n                        sol, e;\r\n                    do {\r\n                        var e = eqns[n].clone();\r\n                        \r\n                        if(n > 0) {\r\n                            e = e.sub(vars[0], sol[0]);\r\n                        }\r\n\r\n                        sol = solve(e, vars[0]);\r\n                        // Skip the first one\r\n                        if(n === 0) \r\n                            continue;\r\n                    }\r\n                    while(++n < eqns.length)\r\n                        \r\n                    // Format the output\r\n                    var solutions;\r\n                    if(Settings.SOLUTIONS_AS_OBJECT) {\r\n                        solutions = {};\r\n                        solutions[vars[0]] = sol;\r\n                    }\r\n                    else if(sol.length === 0) {\r\n                        solutions = sol; // No solutions\r\n                    }\r\n                    else {\r\n                        solutions = [vars[0], sol];\r\n                    }\r\n                        \r\n                    return solutions;\r\n                }\r\n                \r\n                // Deal with redundant equations as expressed in #562\r\n                // The fix is to remove all but the number of equations equal to the number\r\n                // of variables. We then solve those and then evaluate the remaining equations\r\n                // with those solutions. If the all equal true then those are just redundant\r\n                // equations and we can return the solution set.\r\n                if(vars.length < eqns.length) {\r\n                    var reduced = [];\r\n                    var n = eqns.length;\r\n                    for(var i = 0; i < n - 1; i++) {\r\n                        reduced.push(_.parse(eqns[i]));\r\n                    }\r\n\r\n                    var knowns = {};\r\n                    var solutions = __.solveSystem(reduced, vars);\r\n                    // The solutions may have come back as an array\r\n                    if(Array.isArray(solutions)) {\r\n                        solutions.forEach(function (sol) {\r\n                            knowns[sol[0]] = sol[1];\r\n                        });\r\n                    }\r\n                    else {\r\n                        knowns = solutions;\r\n                    }\r\n\r\n                    // Start by assuming they will all evaluate to zero. If even one fails\r\n                    // then all zero will be false\r\n                    var all_zero = true;\r\n                    // Check if the last solution evalutes to zero given these solutions\r\n                    for(var i = n - 1; i < n; i++) {\r\n                        if(!_.parse(eqns[i], knowns).equals(0)) {\r\n                            all_zero = false;\r\n                        }\r\n                    }\r\n\r\n                    if(all_zero) {\r\n                        return solutions;\r\n                    }\r\n                }\r\n\r\n                // deletes only the variables of the linear equations in the nerdamer namespace\r\n                for(var i = 0; i < vars.length; i++) {\r\n                    nerdamer.setVar(vars[i], \"delete\");\r\n                }\r\n                // TODO: move this to cMatrix or something similar\r\n                // populate the matrix\r\n                for(var i = 0; i < l; i++) {\r\n                    var e = eqns[i]; //store the expression\r\n                    // Iterate over the columns\r\n                    for(var j = 0; j < vars.length; j++) {\r\n                        var v = vars[j];\r\n                        var coeffs = [];\r\n                        e.each(function (x) {\r\n                            if(x.contains(v)) {\r\n                                coeffs = coeffs.concat(x.coeffs());\r\n                            }\r\n                        });\r\n\r\n                        var cf = core.Utils.arraySum(coeffs);\r\n                        m.set(i, j, cf);\r\n                    }\r\n\r\n                    //strip the variables from the symbol so we're left with only the zeroth coefficient\r\n                    //start with the symbol and remove each variable and its coefficient\r\n                    var num = e.clone();\r\n                    vars.map(function (e) {\r\n                        num = num.stripVar(e, true);\r\n                    });\r\n                    c.set(i, 0, num.negate());\r\n                }\r\n            }\r\n            else {\r\n                /**\r\n                 * The idea is that we loop through each equation and then expand it. Afterwards we loop\r\n                 * through each term and see if and check to see if it matches one of the variables.\r\n                 * When a match is found we mark it. No other match should be found for that term. If it\r\n                 * is we stop since it's not linear.\r\n                 */\r\n                vars = var_array;\r\n                expand_result = true;\r\n                for(i = 0; i < l; i++) {\r\n                    //prefill\r\n                    c.set(i, 0, new Symbol(0));\r\n                    var e = _.expand(eqns[i]).collectSymbols(); //expand and store\r\n                    //go trough each of the variables\r\n                    for(var j = 0; j < var_array.length; j++) {\r\n                        m.set(i, j, new Symbol(0));\r\n                        var v = var_array[j];\r\n                        //go through the terms and sort the variables\r\n                        for(var k = 0; k < e.length; k++) {\r\n                            var term = e[k],\r\n                                    check = false;\r\n                            for(var z = 0; z < var_array.length; z++) {\r\n                                //check to see if terms contain multiple variables\r\n                                if(term.contains(var_array[z])) {\r\n                                    if(check)\r\n                                        core.err('Multiple variables found for term ' + term);\r\n                                    check = true;\r\n                                }\r\n                            }\r\n                            //we made sure that every term contains one variable so it's safe to assume that if the\r\n                            //variable is found then the remainder is the coefficient.\r\n                            if(term.contains(v)) {\r\n                                var tparts = explode(remove(e, k), v);\r\n                                m.set(i, j, _.add(m.get(i, j), tparts[0]));\r\n                            }\r\n                        }\r\n                    }\r\n                    //all the remaining terms go to the c matrix\r\n                    for(k = 0; k < e.length; k++) {\r\n                        c.set(i, 0, _.add(c.get(i, 0), e[k]));\r\n                    }\r\n                }\r\n                //consider case (a+b)*I+u\r\n            }\r\n\r\n            //check if the system has a distinct solution\r\n            if(vars.length !== eqns.length || m.determinant().equals(0)) {\r\n                // solve the system by hand\r\n                //return __.solveSystemBySubstitution(eqns, vars, m, c);\r\n                throw new core.exceptions.SolveError('System does not have a distinct solution');\r\n            }\r\n\r\n            // Use M^-1*c to solve system\r\n            m = m.invert();\r\n            var result = m.multiply(c);\r\n            //correct the sign as per issue #410\r\n            if(core.Utils.isArray(var_array))\r\n                result.each(function (x) {\r\n                    return x.negate();\r\n                });\r\n\r\n            return __.systemSolutions(result, vars, expand_result);\r\n        },\r\n        /**\r\n         * The quadratic function but only one side.\r\n         * @param {Symbol} c\r\n         * @param {Symbol} b\r\n         * @param {Symbol} a\r\n         * @returns {Symbol}\r\n         */\r\n        quad: function (c, b, a) {\r\n            var discriminant = _.subtract(_.pow(b.clone(), Symbol(2)), _.multiply(_.multiply(a.clone(), c.clone()), Symbol(4)))/*b^2 - 4ac*/;\r\n            // Fix for #608\r\n            discriminant = _.expand(discriminant);\r\n            var det = _.pow(discriminant, Symbol(0.5));\r\n            var den = _.parse(_.multiply(new Symbol(2), a.clone()));\r\n            var retval = [\r\n                _.parse(format('(-({0})+({1}))/({2})', b, det, den)),\r\n                _.parse(format('(-({0})-({1}))/({2})', b, det, den))\r\n            ];\r\n\r\n            return retval;\r\n        },\r\n        /**\r\n         * The cubic equation\r\n         * http://math.stackexchange.com/questions/61725/is-there-a-systematic-way-of-solving-cubic-equations\r\n         * @param {Symbol} d_o\r\n         * @param {Symbol} c_o\r\n         * @param {Symbol} b_o\r\n         * @param {Symbol} a_o\r\n         * @returns {Array}\r\n         */\r\n        cubic: function (d_o, c_o, b_o, a_o) {\r\n            //convert everything to text\r\n            var a = a_o.text(), b = b_o.text(), c = c_o.text(), d = d_o.text();\r\n\r\n            var t = `(-(${b})^3/(27*(${a})^3)+(${b})*(${c})/(6*(${a})^2)-(${d})/(2*(${a})))`;\r\n            var u = `((${c})/(3*(${a}))-(${b})^2/(9*(${a})^2))`;\r\n            var v = `(${b})/(3*(${a}))`;\r\n            var x = `((${t})+sqrt((${t})^2+(${u})^3))^(1/3)+((${t})-sqrt((${t})^2+(${u})^3))^(1/3)-(${v})`;\r\n\r\n            // Convert a to one\r\n            var w = '1/2+sqrt(3)/2*i'; // Cube root of unity\r\n\r\n            return [\r\n                _.parse(x),\r\n                _.parse(`(${x})(${w})`),\r\n                _.parse(`(${x})(${w})^2`)\r\n            ];\r\n        },\r\n        /**\r\n         * The quartic equation\r\n         * @param {Symbol} e\r\n         * @param {Symbol} d\r\n         * @param {Symbol} c\r\n         * @param {Symbol} b\r\n         * @param {Symbol} a\r\n         * @returns {Array}\r\n         */\r\n        quartic: function (e, d, c, b, a) {\r\n            var scope = {};\r\n            core.Utils.arrayUnique(variables(a).concat(variables(b))\r\n                    .concat(variables(c)).concat(variables(d)).concat(variables(e)))\r\n                    .map(function (x) {\r\n                        scope[x] = 1;\r\n                    });\r\n            a = a.toString();\r\n            b = b.toString();\r\n            c = c.toString();\r\n            d = d.toString();\r\n            e = e.toString();\r\n            var p, q, D, D0, D1, Q, x1, x2, x3, x4;\r\n            /*var D = core.Utils.block('PARSE2NUMBER', function() {\r\n             return _.parse(format(\"256*({0})^3*({4})^3-192*({0})^2*({1})*({3})*({4})^2-128*({0})^2*({2})^2*({4})^2+144*({0})^2*({2})*({3})^2*({4})\"+\r\n             \"-27*({0})^2*({3})^4+144*({0})*({1})^2*({2})*({4})^2-6*({0})*({1})^2*({3})^2*({4})-80*({0})*({1})*({2})^2*({3})*({4})+18*({0})*({1})*({2})*({3})^3\"+\r\n             \"+16*({0})*({2})^4*({4})-4*({0})*({2})^3*({3})^2-27*({1})^4*({4})^2+18*({1})^3*({2})*({3})*({4})-4*({1})^3*({3})^3-4*({1})^2*({2})^3*({4})+({1})^2*({2})^2*({3})^2\", \r\n             a, b, c, d, e), scope);\r\n             });*/\r\n\r\n            p = _.parse(format(\"(8*({0})*({2})-3*({1})^2)/(8*({0})^2)\", a, b, c)).toString(); //a, b, c\r\n            q = _.parse(format(\"(({1})^3-4*({0})*({1})*({2})+8*({0})^2*({3}))/(8*({0})^3)\", a, b, c, d)).toString();//a, b, c, d, e\r\n            D0 = _.parse(format(\"12*({0})*({4})-3*({1})*({3})+({2})^2\", a, b, c, d, e)).toString(); //a, b, c, d, e\r\n            D1 = _.parse(format(\"2*({2})^3-9*({1})*({2})*({3})+27*({1})^2*({4})+27*({0})*({3})^2-72*({0})*({2})*({4})\", a, b, c, d, e)).toString(); //a, b, c, d, e\r\n            Q = _.parse(format(\"((({1})+(({1})^2-4*({0})^3)^(1/2))/2)^(1/3)\", D0, D1)).toString(); //D0, D1\r\n            S = _.parse(format(\"(1/2)*(-(2/3)*({1})+(1/(3*({0}))*(({2})+(({3})/({2})))))^(1/2)\", a, p, Q, D0)).toString(); //a, p, Q, D0\r\n            x1 = _.parse(format(\"-(({1})/(4*({0})))-({4})+(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x2 = _.parse(format(\"-(({1})/(4*({0})))-({4})-(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x3 = _.parse(format(\"-(({1})/(4*({0})))+({4})+(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            x4 = _.parse(format(\"-(({1})/(4*({0})))+({4})-(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\r\n            return [x1, x2, x3, x4];\r\n        },\r\n        /**\r\n         * Breaks the equation up in its factors and tries to solve the smaller parts\r\n         * @param {Symbol} symbol\r\n         * @param {String} solve_for\r\n         * @returns {Array}\r\n         */\r\n        divideAndConquer: function (symbol, solve_for) {\r\n            var sols = [];\r\n            //see if we can solve the factors\r\n            var factors = core.Algebra.Factor.factor(symbol);\r\n            if(factors.group === CB) {\r\n                factors.each(function (x) {\r\n                    x = Symbol.unwrapPARENS(x);\r\n                    sols = sols.concat(solve(x, solve_for));\r\n                });\r\n            }\r\n            return sols;\r\n        },\r\n        /**\r\n         * Attempts to solve the equation assuming it's a polynomial with numeric coefficients\r\n         * @param {Symbol} eq\r\n         * @param {String} solve_for\r\n         * @returns {Array}\r\n         */\r\n        csolve: function (eq, solve_for) {\r\n            return core.Utils.block('IGNORE_E', function () {\r\n                var f, p, pn, n, pf, r, theta, sr, sp, roots;\r\n                roots = [];\r\n                f = core.Utils.decompose_fn(eq, solve_for, true);\r\n                if(f.x.group === S) {\r\n                    p = _.parse(f.x.power);\r\n                    pn = Number(p);\r\n                    n = _.pow(_.divide(f.b.negate(), f.a), p.invert());\r\n                    pf = Symbol.toPolarFormArray(n);\r\n                    r = pf[0];\r\n                    theta = pf[1];\r\n                    sr = r.toString();\r\n                    sp = p.toString();\r\n                    var k, root, str;\r\n                    for(var i = 0; i < pn; i++) {\r\n                        k = i;\r\n                        str = format('({0})*e^(2*{1}*pi*{2}*{3})', sr, k, p, core.Settings.IMAGINARY);\r\n                        root = _.parse(str);\r\n                        roots.push(root);\r\n                    }\r\n                }\r\n                return roots;\r\n            }, true);\r\n        },\r\n        /**\r\n         * Generates starting points for the Newton solver given an expression at zero.\r\n         * It beings by check if zero is a good point and starts expanding by a provided step size. \r\n         * Builds on the fact that if the sign changes over an interval then a zero\r\n         * must exist on that interval\r\n         * @param {Symbol} symbol\r\n         * @param {Number} step\r\n         * @param {Array} points\r\n         * @returns {Array}\r\n         */\r\n        getPoints: function (symbol, step, points) {\r\n            step = step || 0.01;\r\n            points = points || [];\r\n            var f = build(symbol);\r\n            var x0 = 0;\r\n\r\n            var start = Math.round(x0),\r\n                    last = f(start),\r\n                    last_sign = last / Math.abs(last),\r\n                    rside = core.Settings.ROOTS_PER_SIDE, // the max number of roots on right side\r\n                    lside = rside; // the max number of roots on left side\r\n            // check around the starting point\r\n            points.push(Math.floor(start / 2)); //half way from zero might be a good start\r\n            points.push(Math.abs(start)); //|f(0)| could be a good start\r\n            points.push(start);//|f(0)| could be a good start\r\n            //adjust for log. A good starting point to include for log is 0.1\r\n            symbol.each(function (x) {\r\n                if(x.containsFunction(core.Settings.LOG))\r\n                    points.push(0.1);\r\n            });\r\n\r\n            var left = range(-core.Settings.SOLVE_RADIUS, start, step),\r\n                    right = range(start, core.Settings.SOLVE_RADIUS, step);\r\n\r\n            var test_side = function (side, num_roots) {\r\n                var xi, val, sign;\r\n                var hits = [];\r\n                for(var i = 0, l = side.length; i < l; i++) {\r\n                    xi = side[i]; //the point being evaluated\r\n                    val = f(xi);\r\n                    sign = val / Math.abs(val);\r\n                    //Don't add non-numeric values\r\n                    if(isNaN(val) || !isFinite(val) || hits.length > num_roots) {\r\n                        continue;\r\n                    }\r\n\r\n                    //compare the signs. The have to be different if they cross a zero\r\n                    if(sign !== last_sign) {\r\n                        hits.push(xi); //take note of the possible zero location\r\n                    }\r\n                    last_sign = sign;\r\n                }\r\n\r\n                points = points.concat(hits);\r\n            };\r\n\r\n            test_side(left, lside);\r\n            test_side(right, rside);\r\n\r\n            return points;\r\n        },\r\n        /**\r\n         * Implements the bisection method. Returns undefined in no solution is found\r\n         * @param {number} point\r\n         * @param {function} f\r\n         * @returns {undefined | number}\r\n         */\r\n        bisection: function (point, f) {\r\n            var left = point - 1;\r\n            var right = point + 1;\r\n            // First test if this point is even worth evaluating. It should\r\n            // be crossing the x axis so the signs should be different\r\n            if(Math.sign(f(left)) !== Math.sign(f(right))) {\r\n                var safety = 0;\r\n\r\n                var epsilon, middle;\r\n\r\n                do {\r\n                    epsilon = Math.abs(right - left);\r\n                    // Safety against an infinite loop\r\n                    if(safety++ > core.Settings.MAX_BISECTION_ITER || isNaN(epsilon)) {\r\n                        return;\r\n                    }\r\n                    // Calculate the middle point\r\n                    middle = (left + right) / 2;\r\n\r\n                    if(f(left) * f(middle) > 0) {\r\n                        left = middle;\r\n                    }\r\n                    else {\r\n                        right = middle;\r\n                    }\r\n                }\r\n                while(epsilon >= Settings.EPSILON);\r\n\r\n                var solution = (left + right) / 2;\r\n\r\n                // Test the solution to make sure that it's within tolerance\r\n                var x_point = f(solution);\r\n\r\n                if(!isNaN(x_point) && Math.abs(x_point) <= core.Settings.BI_SECTION_EPSILON) {\r\n                    // Returns too many junk solutions if not rounded at 13th place.\r\n                    return core.Utils.round(solution, 13);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Implements Newton's iterations. Returns undefined if no solutions if found\r\n         * @param {number} point\r\n         * @param {function} f\r\n         * @param {function} fp\r\n         * @returns {undefined|number}\r\n         */\r\n        Newton: function (point, f, fp) {\r\n            var maxiter = core.Settings.MAX_NEWTON_ITERATIONS,\r\n                    iter = 0;\r\n            //first try the point itself. If it's zero viola. We're done\r\n            var x0 = point, x;\r\n            do {\r\n                var fx0 = f(x0); //store the result of the function\r\n                //if the value is zero then we're done because 0 - (0/d f(x0)) = 0\r\n                if(x0 === 0 && fx0 === 0) {\r\n                    x = 0;\r\n                    break;\r\n                }\r\n\r\n                iter++;\r\n                if(iter > maxiter)\r\n                    return; //naximum iterations reached\r\n\r\n                x = x0 - fx0 / fp(x0);\r\n                var e = Math.abs(x - x0);\r\n                x0 = x;\r\n            }\r\n            while(e > Settings.NEWTON_EPSILON)\r\n\r\n            //check if the number is indeed zero. 1e-13 seems to give the most accurate results\r\n            if(Math.abs(f(x)) <= Settings.EPSILON)\r\n                return x;\r\n        },\r\n        rewrite: function (rhs, lhs, for_variable) {\r\n            lhs = lhs || new Symbol(0);\r\n            if(rhs.isComposite() && rhs.isLinear()) {\r\n                //try to isolate the square root\r\n                //container for the square roots\r\n                var sqrts = [];\r\n                //all else\r\n                var rem = [];\r\n                rhs.each(function (x) {\r\n                    x = x.clone();\r\n                    if(x.fname === 'sqrt' && x.contains(for_variable)) {\r\n                        sqrts.push(x);\r\n                    }\r\n                    else {\r\n                        rem.push(x);\r\n                    }\r\n                }, true);\r\n\r\n                if(sqrts.length === 1) {\r\n                    //move the remainder to the RHS\r\n                    lhs = _.expand(_.pow(_.subtract(lhs, core.Utils.arraySum(rem)), new Symbol(2)));\r\n                    //square both sides\r\n                    rhs = _.expand(_.pow(Symbol.unwrapSQRT(sqrts[0]), new Symbol(2)));\r\n                }\r\n            }\r\n            else {\r\n                rhs = Symbol.unwrapSQRT(_.expand(rhs)); //expand the term expression go get rid of quotients when possible\r\n            }\r\n\r\n            var c = 0, //a counter to see if we have all terms with the variable\r\n                    l = rhs.length;\r\n            //try to rewrite the whole thing\r\n            if(rhs.group === CP && rhs.contains(for_variable) && rhs.isLinear()) {\r\n                rhs.distributeMultiplier();\r\n                var t = new Symbol(0);\r\n                //first bring all the terms containing the variable to the lhs\r\n                rhs.each(function (x) {\r\n                    if(x.contains(for_variable)) {\r\n                        c++;\r\n                        t = _.add(t, x.clone());\r\n                    }\r\n                    else\r\n                        lhs = _.subtract(lhs, x.clone());\r\n                });\r\n                rhs = t;\r\n\r\n                //if not all the terms contain the variable so it's in the form\r\n                //a*x^2+x\r\n                if(c !== l) {\r\n                    return __.rewrite(rhs, lhs, for_variable);\r\n                }\r\n                else {\r\n                    return [rhs, lhs];\r\n                }\r\n            }\r\n            else if(rhs.group === CB && rhs.contains(for_variable) && rhs.isLinear()) {\r\n                if(rhs.multiplier.lessThan(0)) {\r\n                    rhs.multiplier = rhs.multiplier.multiply(new core.Frac(-1));\r\n                    lhs.multiplier = lhs.multiplier.multiply(new core.Frac(-1));\r\n                }\r\n                if(lhs.equals(0))\r\n                    return new Symbol(0);\r\n                else {\r\n                    var t = new Symbol(1);\r\n                    rhs.each(function (x) {\r\n                        if(x.contains(for_variable))\r\n                            t = _.multiply(t, x.clone());\r\n                        else\r\n                            lhs = _.divide(lhs, x.clone());\r\n                    });\r\n                    rhs = t;\r\n                    return __.rewrite(rhs, lhs, for_variable);\r\n\r\n                }\r\n            }\r\n            else if(!rhs.isLinear() && rhs.contains(for_variable)) {\r\n                var p = _.parse(rhs.power.clone().invert());\r\n                rhs = _.pow(rhs, p.clone());\r\n                lhs = _.pow(_.expand(lhs), p.clone());\r\n                return __.rewrite(rhs, lhs, for_variable);\r\n            }\r\n            else if(rhs.group === FN || rhs.group === S || rhs.group === PL) {\r\n                return [rhs, lhs];\r\n            }\r\n        },\r\n        sqrtSolve: function (symbol, v) {\r\n            var sqrts = new Symbol(0);\r\n            var rem = new Symbol(0);\r\n            if(symbol.isComposite()) {\r\n                symbol.each(function (x) {\r\n                    if(x.fname === 'sqrt' && x.contains(v)) {\r\n                        sqrts = _.add(sqrts, x.clone());\r\n                    }\r\n                    else {\r\n                        rem = _.add(rem, x.clone());\r\n                    }\r\n                });\r\n                //quick and dirty ATM\r\n                if(!sqrts.equals(0)) {\r\n                    var t = _.expand(_.multiply(_.parse(symbol.multiplier), _.subtract(_.pow(rem, new Symbol(2)), _.pow(sqrts, new Symbol(2)))));\r\n                    //square both sides\r\n                    var solutions = solve(t, v);\r\n                    //test the points. The dumb way of getting the answers\r\n                    solutions = solutions.filter(function (e) {\r\n                        if(e.isImaginary())\r\n                            return e;\r\n                        var subs = {};\r\n                        subs[v] = e;\r\n                        var point = evaluate(symbol, subs);\r\n                        if(point.equals(0))\r\n                            return e;\r\n                    });\r\n                    return solutions;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /*\r\n     * \r\n     * @param {String[]|String|Equation} eqns\r\n     * @param {String} solve_for\r\n     * @param {Array} solutions\r\n     * @param {Number} depth\r\n     * @param {String|Equation} fn\r\n     * @returns {Array}\r\n     */\r\n    var solve = function (eqns, solve_for, solutions, depth, fn) {\r\n        depth = depth || 0;\r\n\r\n        if(depth++ > Settings.MAX_SOLVE_DEPTH) {\r\n            return solutions;\r\n        }\r\n\r\n        //make preparations if it's an Equation\r\n        if(eqns instanceof Equation) {\r\n            //if it's zero then we're done\r\n            if(eqns.isZero()) {\r\n                return [new Symbol(0)];\r\n            }\r\n            //if the lhs = x then we're done\r\n            if(eqns.LHS.equals(solve_for) && !eqns.RHS.contains(solve_for)) {\r\n                return [eqns.RHS];\r\n            }\r\n            //if the rhs = x then we're done\r\n            if(eqns.RHS.equals(solve_for) && !eqns.LHS.contains(solve_for)) {\r\n                return [eqns.LHS];\r\n            }\r\n        }\r\n\r\n        //unwrap the vector since what we want are the elements\r\n        if(eqns instanceof core.Vector)\r\n            eqns = eqns.elements;\r\n        solve_for = solve_for || 'x'; //assumes x by default\r\n        //If it's an array then solve it as a system of equations\r\n        if(isArray(eqns)) {\r\n            return __.solveSystem.apply(undefined, arguments);\r\n        }\r\n\r\n        // Parse out functions. Fix for issue #300\r\n        // eqns = core.Utils.evaluate(eqns);\r\n        solutions = solutions || [];\r\n        //mark existing solutions as not to have duplicates\r\n        var existing = {};\r\n\r\n        // Easy fail. If it's a rational function and the denominator is zero\r\n        // the we're done. Issue #555\r\n        var known = {};\r\n        known[solve_for] = 0;\r\n        if(isSymbol(eqns) && evaluate(eqns.getDenom(), known).equals(0) === true) {\r\n            return solutions;\r\n        }\r\n\r\n        // Is usued to add solutions to set. \r\n        // TODO: Set is now implemented and should be utilized\r\n        var add_to_result = function (r, has_trig) {\r\n            var r_is_symbol = isSymbol(r);\r\n            if(r === undefined || typeof r === 'number' && isNaN(r))\r\n                return;\r\n            if(isArray(r)) {\r\n                r.forEach(function (sol) {\r\n                    add_to_result(sol);\r\n                });\r\n            }\r\n            else {\r\n                if(r.valueOf() !== 'null') {\r\n                    // Call the pre-add function if defined. This could be useful for rounding\r\n                    if(typeof core.Settings.PRE_ADD_SOLUTION === 'function') {\r\n                        r = core.Settings.PRE_ADD_SOLUTION(r);\r\n                    }\r\n\r\n                    if(!r_is_symbol) {\r\n                        r = _.parse(r);\r\n                    }\r\n                    // try to convert the number to multiples of pi\r\n                    if(core.Settings.make_pi_conversions && has_trig) {\r\n                        var temp = _.divide(r.clone(), new Symbol(Math.PI)),\r\n                                m = temp.multiplier,\r\n                                a = Math.abs(m.num),\r\n                                b = Math.abs(m.den);\r\n                        if(a < 10 && b < 10)\r\n                            r = _.multiply(temp, new Symbol('pi'));\r\n                    }\r\n\r\n                    // And check if we get a number otherwise we might be throwing out symbolic solutions.\r\n                    var r_str = r.toString();\r\n\r\n                    if(!existing[r_str]) {\r\n                        solutions.push(r);\r\n                    }\r\n                    // Mark the answer as seen\r\n                    existing[r_str] = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        // Maybe we get lucky. Try the point at the function. If it works we have a point\r\n        // If not it failed\r\n        if(eqns.group === S && eqns.contains(solve_for)) {\r\n            try {\r\n                var o = {};\r\n                o[solve_for] = 0;\r\n                evaluate(fn, o, 'numer');\r\n                add_to_result(new Symbol(0));\r\n            }\r\n            catch(e) {\r\n                // Do nothing;\r\n            }\r\n\r\n            return solutions;\r\n        }\r\n        if(eqns.group === CB) {\r\n            // It suffices to solve for the numerator\r\n            var num = eqns.getNum();\r\n\r\n            if(num.group === CB) {\r\n                var sf = String(solve_for); //everything else belongs to the coeff\r\n                //get the denominator and make sure it doesn't have x since we don't know how to solve for those\r\n                num.each(function (x) {\r\n                    if(x.contains(sf))\r\n                        solve(x, solve_for, solutions, depth, eqns);\r\n                });\r\n\r\n                return solutions;\r\n            }\r\n\r\n            return solve(num, solve_for, solutions, depth, fn);\r\n        }\r\n\r\n        if(eqns.group === FN && eqns.fname === 'sqrt') {\r\n            eqns = _.pow(Symbol.unwrapSQRT(eqns), new Symbol(2));\r\n        }\r\n        //pass in false to not expand equations such as (x+y)^5.\r\n        //It suffices to solve for the numerator since there's no value in the denominator which yields a zero for the function\r\n        var eq = (core.Utils.isSymbol(eqns) ? eqns : __.toLHS(eqns, false)).getNum(),\r\n                vars = core.Utils.variables(eq), //get a list of all the variables\r\n                numvars = vars.length;//how many variables are we dealing with\r\n\r\n        //it sufficient to solve (x+y) if eq is (x+y)^n since 0^n\r\n        if(core.Utils.isInt(eq.power) && eq.power > 0) {\r\n            eq = _.parse(eq).toLinear();\r\n        }\r\n\r\n        //if we're dealing with a single variable then we first check if it's a \r\n        //polynomial (including rationals).If it is then we use the Jenkins-Traubb algorithm.     \r\n        //Don't waste time\r\n        if(eq.group === S || eq.group === CB && eq.contains(solve_for)) {\r\n            return [new Symbol(0)];\r\n        }\r\n        //force to polynomial. We go through each and then we look at what it would \r\n        //take for its power to be an integer\r\n        //if the power is a fractional we divide by the fractional power\r\n        var fractionals = {},\r\n                cfact;\r\n\r\n        var correct_denom = function (symbol) {\r\n            symbol = _.expand(symbol, {\r\n                expand_denominator: true,\r\n                expand_functions: true\r\n            });\r\n            var original = symbol.clone(); //preserve the original\r\n\r\n            if(symbol.symbols) {\r\n                for(var x in symbol.symbols) {\r\n                    var sym = symbol.symbols[x];\r\n\r\n                    //get the denominator of the sub-symbol\r\n                    var den = sym.getDenom();\r\n\r\n                    if(!den.isConstant(true) && symbol.isComposite()) {\r\n                        var t = new Symbol(0);\r\n                        symbol.each(function (e) {\r\n                            t = _.add(t, _.multiply(e, den.clone()));\r\n                        });\r\n\r\n                        return correct_denom(_.multiply(_.parse(symbol.multiplier), t));\r\n                    }\r\n\r\n                    var parts = explode(sym, solve_for);\r\n                    var is_sqrt = parts[1].fname === core.Settings.SQRT;\r\n                    var v = Symbol.unwrapSQRT(parts[1]);\r\n                    var p = v.power.clone();\r\n                    //circular logic with sqrt. Since sqrt(x) becomes x^(1/2) which then becomes sqrt(x), this continues forever\r\n                    //this needs to be terminated if p = 1/2\r\n                    if(!isSymbol(p) && !p.equals(1 / 2)) {\r\n                        if(p.den.gt(1)) {\r\n                            if(is_sqrt) {\r\n                                symbol = _.subtract(symbol, sym.clone());\r\n                                symbol = _.add(symbol, _.multiply(parts[0].clone(), v));\r\n                                return correct_denom(symbol);\r\n                            }\r\n                            var c = fractionals[p.den];\r\n                            fractionals[p.den] = c ? c++ : 1;\r\n                        }\r\n                        else if(p.sign() === -1) {\r\n                            var factor = _.parse(solve_for + '^' + Math.abs(p)); //this\r\n                            //unwrap the symbol's denoniator\r\n                            symbol.each(function (y, index) {\r\n                                if(y.contains(solve_for)) {\r\n                                    symbol.symbols[index] = _.multiply(y, factor.clone());\r\n                                }\r\n                            });\r\n                            fractionals = {};\r\n                            return correct_denom(_.parse(symbol));\r\n                        }\r\n                        else if(sym.group === PL) {\r\n                            var min_p = core.Utils.arrayMin(core.Utils.keys(sym.symbols));\r\n                            if(min_p < 0) {\r\n                                var factor = _.parse(solve_for + '^' + Math.abs(min_p));\r\n                                var corrected = new Symbol(0);\r\n                                original.each(function (x) {\r\n                                    corrected = _.add(corrected, _.multiply(x.clone(), factor.clone()));\r\n                                }, true);\r\n                                return corrected;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return symbol;\r\n        };\r\n\r\n\r\n        //separate the equation\r\n        var separate = function (eq) {\r\n            var lhs = new Symbol(0),\r\n                    rhs = new Symbol(0);\r\n            eq.each(function (x) {\r\n                if(x.contains(solve_for, true))\r\n                    lhs = _.add(lhs, x.clone());\r\n                else\r\n                    rhs = _.subtract(rhs, x.clone());\r\n            });\r\n            return [lhs, rhs];\r\n        };\r\n\r\n        __.inverseFunctionSolve = function (name, lhs, rhs) {\r\n            //ax+b comes back as [a, x, ax, b];\r\n            var parts = explode(lhs.args[0], solve_for);\r\n            //check if x is by itself\r\n            var x = parts[1];\r\n            if(x.group === S) {\r\n                return _.divide(_.symfunction(name, [_.divide(rhs, _.parse(lhs.multiplier))]), parts[0]);\r\n            }\r\n\r\n        };\r\n\r\n        //first remove any denominators\r\n        eq = correct_denom(eq);\r\n\r\n        if(eq.equals(0))\r\n            return [eq];\r\n        //correct fractionals. I can only handle one type right now\r\n        var fkeys = core.Utils.keys(fractionals);\r\n        if(fkeys.length === 1) {\r\n            //make a note of the factor\r\n            cfact = fkeys[0];\r\n            eq.each(function (x, index) {\r\n                if(x.contains(solve_for)) {\r\n                    var parts = explode(x, solve_for);\r\n                    var v = parts[1];\r\n                    var p = v.power;\r\n                    if(p.den.gt(1)) {\r\n                        v.power = p.multiply(new core.Frac(cfact));\r\n                        eq.symbols[index] = _.multiply(v, parts[0]);\r\n                    }\r\n                }\r\n            });\r\n            eq = _.parse(eq);\r\n        }\r\n\r\n        //try for nested sqrts as per issue #486\r\n        add_to_result(__.sqrtSolve(eq, solve_for));\r\n\r\n        //polynomial single variable\r\n        if(numvars === 1) {\r\n            if(eq.isPoly(true)) {\r\n                //try to factor and solve\r\n                var factors = new core.Algebra.Classes.Factors();\r\n\r\n                core.Algebra.Factor.factor(eq, factors);\r\n                //if the equation has more than one symbolic factor then solve those individually\r\n                if(factors.getNumberSymbolics() > 1) {\r\n                    for(var x in factors.factors) {\r\n                        add_to_result(solve(factors.factors[x], solve_for));\r\n                    }\r\n                }\r\n                else {\r\n                    var coeffs = core.Utils.getCoeffs(eq, solve_for),\r\n                            deg = coeffs.length - 1,\r\n                            was_calculated = false;\r\n                    if(vars[0] === solve_for) {\r\n                        //check to see if all the coefficients are constant\r\n                        if(checkAll(coeffs, function (x) {\r\n                            return x.group !== core.groups.N;\r\n                        })) {\r\n                            var roots = core.Algebra.proots(eq);\r\n                            //if all the roots are integers then return those\r\n                            if(checkAll(roots, function (x) {\r\n                                return !core.Utils.isInt(x);\r\n                            })) {\r\n                                //roots have been calculates\r\n                                was_calculated = true;\r\n                                roots.map(function (x) {\r\n                                    add_to_result(new Symbol(x));\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        if(!was_calculated) {\r\n                            eqns = _.parse(eqns);\r\n                            if(eqns instanceof core.Equation)\r\n                                eqns = eqns.toLHS();\r\n\r\n                            //we can solve algebraically for degrees 1, 2, 3. The remainder we switch to Jenkins-\r\n                            if(deg === 1)\r\n                                add_to_result(_.divide(coeffs[0], coeffs[1].negate()));\r\n                            else if(deg === 2) {\r\n                                add_to_result(_.expand(__.quad.apply(undefined, coeffs)));\r\n                            }\r\n\r\n                            else if(deg === 3) {\r\n                                var solutions = []; //set to blank\r\n                                //first try to factor and solve\r\n                                var factored = core.Algebra.Factor.factor(eqns);\r\n\r\n                                //if it was successfully factored\r\n                                var solutions = [];\r\n                                if(solutions.length > 0)\r\n                                    add_to_result(solutions);\r\n                                else\r\n                                    add_to_result(__.cubic.apply(undefined, coeffs));\r\n                            }\r\n\r\n                            else {\r\n                                /*\r\n                                 var sym_roots = csolve(eq, solve_for); \r\n                                 if(sym_roots.length === 0)\r\n                                 sym_roots = divnconsolve(eq, solve_for);\r\n                                 if(sym_roots.length > 0) \r\n                                 add_to_result(sym_roots);\r\n                                 else\r\n                                 */\r\n                                _A.proots(eq).map(add_to_result);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                try {\r\n                    // Attempt Newton\r\n                    // Since it's not a polynomial then we'll try to look for a solution using Newton's method\r\n                    var has_trig = eq.hasTrig();\r\n                    // we get all the points where a possible zero might exist.\r\n                    var points1 = __.getPoints(eq, 0.1);\r\n                    var points2 = __.getPoints(eq, 0.05);\r\n                    var points3 = __.getPoints(eq, 0.01);\r\n                    var points = core.Utils.arrayUnique(points1.concat(points2).concat(points3)).sort(function (a, b) {\r\n                        return a - b;\r\n                    });\r\n                    var i, point, solution;\r\n\r\n                    // Compile the function\r\n                    var f = build(eq.clone());\r\n\r\n                    // First try to eliminate some points using bisection\r\n                    var t_points = [];\r\n                    for(i = 0; i < points.length; i++) {\r\n                        point = points[i];\r\n\r\n                        // See if there's a solution at this point\r\n                        solution = __.bisection(point, f);\r\n\r\n                        // If there's no solution then add it to the array for further investigation\r\n                        if(typeof solution === 'undefined') {\r\n                            t_points.push(point);\r\n                            continue;\r\n                        }\r\n\r\n                        // Add the solution to the solution set\r\n                        add_to_result(solution, has_trig);\r\n                    }\r\n\r\n                    // Reset the points to the remaining points\r\n                    points = t_points;\r\n\r\n                    // Build the derivative and compile a function\r\n                    var d = _C.diff(eq.clone());\r\n                    var fp = build(d);\r\n                    for(i = 0; i < points.length; i++) {\r\n                        point = points[i];\r\n\r\n                        add_to_result(__.Newton(point, f, fp), has_trig);\r\n                    }\r\n                    solutions.sort();\r\n                }\r\n                catch(e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //The idea here is to go through the equation and collect the coefficients\r\n            //place them in an array and call the quad or cubic function to get the results\r\n            if(!eq.hasFunc(solve_for) && eq.isComposite()) {\r\n                try {\r\n                    var factored = core.Algebra.Factor.factor(eq.clone());\r\n\r\n                    if(factored.group === CB) {\r\n                        factored.each(function (x) {\r\n                            add_to_result(solve(x, solve_for));\r\n                        });\r\n                    }\r\n                    else {\r\n                        var coeffs = core.Utils.getCoeffs(eq, solve_for);\r\n\r\n                        var l = coeffs.length,\r\n                                deg = l - 1; //the degree of the polynomial\r\n                        //get the denominator and make sure it doesn't have x\r\n\r\n                        //handle the problem based on the degree\r\n                        switch(deg) {\r\n                            case 0:\r\n                                var separated = separate(eq);\r\n                                var lhs = separated[0],\r\n                                        rhs = separated[1];\r\n                                \r\n                                if(lhs.group === core.groups.EX) {\r\n                                    var log = core.Settings.LOG;\r\n                                    var expr_str = `${log}((${rhs})/(${lhs.multiplier}))/${log}(${lhs.value})/${lhs.power.multiplier}`;\r\n                                    add_to_result(_.parse(expr_str));\r\n                                }\r\n                                break;\r\n                            case 1:\r\n                                //nothing to do but to return the quotient of the constant and the LT\r\n                                //e.g. 2*x-1\r\n                                add_to_result(_.divide(coeffs[0], coeffs[1].negate()));\r\n                                break;\r\n                            case 2:\r\n                                add_to_result(__.quad.apply(undefined, coeffs));\r\n                                break;\r\n                            case 3:\r\n                                add_to_result(__.cubic.apply(undefined, coeffs));\r\n                                break;\r\n                            case 4:\r\n                                add_to_result(__.quartic.apply(undefined, coeffs));\r\n                                break;\r\n                            default:\r\n                                add_to_result(__.csolve(eq, solve_for));\r\n                                if(solutions.length === 0)\r\n                                    add_to_result(__.divideAndConquer(eq, solve_for));\r\n                        }\r\n\r\n                        if(solutions.length === 0) {\r\n                            //try factoring\r\n                            add_to_result(solve(factored, solve_for, solutions, depth));\r\n                        }\r\n                    }\r\n\r\n                }\r\n                catch(e) { /*something went wrong. EXITING*/\r\n                    ;\r\n                }\r\n            }\r\n            else {\r\n                try {\r\n                    var rw = __.rewrite(eq, null, solve_for);\r\n                    var lhs = rw[0];\r\n                    var rhs = rw[1];\r\n                    if(lhs.group === FN) {\r\n                        if(lhs.fname === 'abs') {\r\n                            add_to_result([rhs.clone(), rhs.negate()]);\r\n                        }\r\n                        else if(lhs.fname === 'sin') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('asin', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === 'cos') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('acos', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === 'tan') {\r\n                            //asin\r\n                            add_to_result(__.inverseFunctionSolve('atan', lhs, rhs));\r\n                        }\r\n                        else if(lhs.fname === core.Settings.LOG) {\r\n                            //ax+b comes back as [a, x, ax, b];\r\n                            var parts = explode(lhs.args[0], solve_for);\r\n                            //check if x is by itself\r\n                            var x = parts[1];\r\n                            if(x.group === S) {\r\n                                rhs = _.divide(_.subtract(_.pow(lhs.args.length > 1 ? lhs.args[1] : new Symbol('e'), _.divide(rhs, _.parse(lhs.multiplier))), parts[3]), parts[0]);\r\n                                var eq = new Equation(x, rhs).toLHS();\r\n                                add_to_result(solve(eq, solve_for));\r\n                            }\r\n                        }\r\n                        else\r\n                            add_to_result(_.subtract(lhs, rhs));\r\n                    }\r\n                    else {\r\n                        var neq = new Equation(lhs, rhs).toLHS(); //create a new equation\r\n\r\n                        if(neq.equals(eq))\r\n                            throw new Error('Stopping. No stop condition exists');\r\n                        add_to_result(solve(neq, solve_for));\r\n                    }\r\n                }\r\n                catch(error) {\r\n                    //Let's try this another way\r\n                    try {\r\n                        //1. if the symbol is in the form a*b*c*... then the solution is zero if \r\n                        //either a or b or c is zero.\r\n                        if(eq.group === CB)\r\n                            add_to_result(0);\r\n                        else if(eq.group === CP) {\r\n                            var separated = separate(eq);\r\n                            var lhs = separated[0],\r\n                                    rhs = separated[1];\r\n\r\n                            //reduce the equation\r\n                            if(lhs.group === core.groups.EX && lhs.value === solve_for) {\r\n                                //change the base of both sides\r\n                                var p = lhs.power.clone().invert();\r\n                                add_to_result(_.pow(rhs, p));\r\n                            }\r\n                        }\r\n                    }\r\n                    catch(error) {\r\n                        ;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(cfact) {\r\n            solutions = solutions.map(function (x) {\r\n                return _.pow(x, new Symbol(cfact));\r\n            });\r\n        }\r\n\r\n        // Perform some cleanup but don't do it agains arrays, etc\r\n        // Check it actually evaluates to zero\r\n        if(isSymbol(eqns)) {\r\n            var knowns = {};\r\n            solutions = solutions.filter(function (x) {\r\n                try {\r\n                    knowns[solve_for] = x;\r\n                    var zero = Number(evaluate(eqns, knowns));\r\n\r\n                    // Allow symbolic answers\r\n                    if(isNaN(zero)) {\r\n                        return true;\r\n                    }\r\n                    return true;\r\n                }\r\n                catch(e) {\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n\r\n        return solutions;\r\n    };\r\n\r\n    //Register the functions for external use\r\n    nerdamer.register([\r\n        {\r\n            name: 'solveEquations',\r\n            parent: 'nerdamer',\r\n            numargs: -1,\r\n            visible: true,\r\n            build: function () {\r\n                return solve; //comment out to return a vector\r\n                /*\r\n                 return function() {\r\n                 return core.Utils.convertToVector(solve.apply(null, arguments));\r\n                 };\r\n                 */\r\n            }\r\n        },\r\n        {\r\n            name: 'solve',\r\n            parent: 'Solve',\r\n            numargs: 2,\r\n            visible: true,\r\n            build: function () {\r\n                return core.Solve.solve;\r\n            }\r\n        },\r\n        {\r\n            name: 'setEquation',\r\n            parent: 'Solve',\r\n            visible: true,\r\n            build: function () {\r\n                return setEq;\r\n            }\r\n        }\r\n    ]);\r\n    nerdamer.updateAPI();\r\n})();","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\r\n//externals ====================================================================\r\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\r\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\r\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\r\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\r\n\r\nvar nerdamer = (function (imports) {\r\n    \"use strict\"; \r\n\r\n//version ======================================================================\r\n    var version = '1.1.13';\r\n\r\n//inits ========================================================================\r\n    var _ = new Parser(); //nerdamer's parser\r\n\r\n    //import bigInt\r\n    var bigInt = imports.bigInt;\r\n    var bigDec = imports.bigDec;\r\n\r\n    //set the precision to js precision\r\n    bigDec.set({\r\n        precision: 250\r\n    });\r\n\r\n    var Groups = {};\r\n\r\n    //container of pregenerated primes\r\n    var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113\r\n                , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\r\n        257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\r\n        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\r\n        563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\r\n        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\r\n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\r\n        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,\r\n        1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,\r\n        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,\r\n        1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\r\n        1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,\r\n        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\r\n        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\r\n\r\n//Settings =====================================================================\r\n    var CUSTOM_OPERATORS = {};\r\n\r\n    var Settings = {\r\n        //Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\r\n        callPeekers: false,\r\n\r\n        //the max number up to which to cache primes. Making this too high causes performance issues\r\n        init_primes: 1000,\r\n\r\n        exclude: [],\r\n        //If you don't care about division by zero for example then this can be set to true.\r\n        //Has some nasty side effects so choose carefully.\r\n        suppress_errors: false,\r\n        //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\r\n        //cos(9) for convenience but parse to number will always try to return a number if set to true.\r\n        PARSE2NUMBER: false,\r\n        //this flag forces the a clone to be returned when add, subtract, etc... is called\r\n        SAFE: false,\r\n        //the symbol to use for imaginary symbols\r\n        IMAGINARY: 'i',\r\n        //the modules used to link numeric function holders\r\n        FUNCTION_MODULES: [Math],\r\n        //Allow certain characters\r\n        ALLOW_CHARS: ['π'],\r\n        //Allow nerdamer to convert multi-character variables\r\n        USE_MULTICHARACTER_VARS: true,\r\n        //Allow changing of power operator\r\n        POWER_OPERATOR: '^',\r\n        //The variable validation regex\r\n        //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\r\n        VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\r\n        // The regex used to determine which characters should be included in implied multiplication\r\n        IMPLIED_MULTIPLICATION_REGEX: /([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi,\r\n        //Aliases\r\n        ALIASES: {\r\n            'π': 'pi',\r\n            '∞': 'Infinity'\r\n        },\r\n        POSITIVE_MULTIPLIERS: false,\r\n        //Cached items\r\n        CACHE: {},\r\n        //Print out warnings or not\r\n        SILENCE_WARNINGS: false,\r\n        // Precision\r\n        PRECISION: 21,\r\n        // The Expression defaults to this value for decimal places\r\n        EXPRESSION_DECP: 19,\r\n        // The text function defaults to this value for decimal places\r\n        DEFAULT_DECP: 16,\r\n        //function mappings\r\n        VECTOR: 'vector',\r\n        PARENTHESIS: 'parens',\r\n        SQRT: 'sqrt',\r\n        ABS: 'abs',\r\n        FACTORIAL: 'factorial',\r\n        DOUBLEFACTORIAL: 'dfactorial',\r\n        //reference pi and e\r\n        LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +\r\n                '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\r\n        LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +\r\n                '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\r\n        PI: Math.PI,\r\n        E: Math.E,\r\n        LOG: 'log',\r\n        LOG10: 'log10',\r\n        LOG10_LATEX: 'log_{10}',\r\n        MAX_EXP: 200000,\r\n        //The number of scientific place to round to\r\n        SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\r\n        //True if ints should not be converted to\r\n        SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true\r\n    };\r\n\r\n    (function () {\r\n        Settings.CACHE.roots = {};\r\n        var x = 40,\r\n                y = 40;\r\n        for(var i = 2; i <= x; i++) {\r\n            for(var j = 2; j <= y; j++) {\r\n                var nthpow = bigInt(i).pow(j);\r\n                Settings.CACHE.roots[nthpow + '-' + j] = i;\r\n            }\r\n        }\r\n    })();\r\n\r\n    //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\r\n    //The groups that help with organizing during parsing. Note that for FN is still a function even\r\n    //when it's raised to a symbol, which typically results in an EX\r\n    var N = Groups.N = 1, // A number\r\n            P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5).\r\n            S = Groups.S = 3, // A single variable e.g. x.\r\n            EX = Groups.EX = 4, // An exponential\r\n            FN = Groups.FN = 5, // A function\r\n            PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2\r\n            CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y\r\n            CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\r\n\r\n    var CONST_HASH = Settings.CONST_HASH = '#';\r\n\r\n    var PARENTHESIS = Settings.PARENTHESIS;\r\n\r\n    var SQRT = Settings.SQRT;\r\n\r\n    var ABS = Settings.ABS;\r\n\r\n    var FACTORIAL = Settings.FACTORIAL;\r\n\r\n    var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\r\n\r\n    //the storage container \"memory\" for parsed expressions\r\n    var EXPRESSIONS = [];\r\n\r\n    //variables\r\n    var VARS = {};\r\n\r\n    //the container used to store all the reserved functions\r\n    var RESERVED = [];\r\n\r\n    var WARNINGS = [];\r\n\r\n    /**\r\n     * Use this when errors are suppressible\r\n     * @param {String} msg\r\n     * @param {object} ErrorObj\r\n     */\r\n    var err = function (msg, ErrorObj) {\r\n        if(!Settings.suppress_errors) {\r\n            if(ErrorObj)\r\n                throw new ErrorObj(msg);\r\n            else\r\n                throw new Error(msg);\r\n        }\r\n    };\r\n\r\n//Utils ========================================================================\r\n    var customError = function (name) {\r\n        var E = function (message) {\r\n            this.name = name;\r\n            this.message = message !== undefined ? message : '';\r\n            var error = new Error(this.message);\r\n            error.name = this.name;\r\n            this.stack = error.stack;\r\n        }; //create an empty error\r\n        E.prototype = Object.create(Error.prototype);\r\n        return E;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if value is one of nerdamer's reserved names\r\n     * @param {String} value\r\n     * @return boolean\r\n     */\r\n    var isReserved = function (value) {\r\n        return RESERVED.indexOf(value) !== -1;\r\n    };\r\n\r\n    /**\r\n     * Checks to see that all symbols in array are the same\r\n     * @param {Symbol[]} arr\r\n     * @returns {bool}\r\n     */\r\n    var allSame = function (arr) {\r\n        var last = arr[0];\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            if(!arr[i].equals(last))\r\n                return false;\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to pass warnings or low severity errors about the library\r\n     * @param msg\r\n     */\r\n    var warn = function (msg) {\r\n        WARNINGS.push(msg);\r\n        if(Settings.SHOW_WARNINGS && console && console.warn) {\r\n            console.warn(msg);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Enforces rule: \"must start with a letter or underscore and\r\n     * can have any number of underscores, letters, and numbers thereafter.\"\r\n     * @param name The name of the symbol being checked\r\n     * @param {String} typ - The type of symbols that's being validated\r\n     * @throws {Exception}  - Throws an exception on fail\r\n     */\r\n    var validateName = function (name, typ) {\r\n        typ = typ || 'variable';\r\n        if(Settings.ALLOW_CHARS.indexOf(name) !== -1)\r\n            return;\r\n        var regex = Settings.VALIDATION_REGEX;\r\n        if(!(regex.test(name))) {\r\n            throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Convert number from scientific format to decimal format\r\n     * @param {Number} num\r\n     */\r\n    var scientificToDecimal = function (num) {\r\n        var nsign = Math.sign(num);\r\n        //remove the sign\r\n        num = Math.abs(num);\r\n        //if the number is in scientific notation remove it\r\n        if(/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\r\n            var zero = '0',\r\n                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent\r\n                    e = parts.pop(), //store the exponential part\r\n                    l = Math.abs(e), //get the number of zeros\r\n                    sign = e / l,\r\n                    coeff_array = parts[0].split('.');\r\n            if(sign === -1) {\r\n                l = l - coeff_array[0].length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\r\n                }\r\n                else {\r\n                    num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\r\n                }\r\n            }\r\n            else {\r\n                var dec = coeff_array[1];\r\n                if(dec)\r\n                    l = l - dec.length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\r\n                }\r\n                else {\r\n                    num = coeff_array.join('') + new Array(l + 1).join(zero);\r\n                }\r\n            }\r\n        }\r\n\r\n        return nsign < 0 ? '-' + num : num;\r\n    };\r\n    /**\r\n     * Checks if number is a prime number\r\n     * @param {Number} n - the number to be checked\r\n     */\r\n    var isPrime = function (n) {\r\n        var q = Math.floor(Math.sqrt(n));\r\n        for(var i = 2; i <= q; i++) {\r\n            if(n % i === 0)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Generates an object with known variable value for evaluation\r\n     * @param {String} variable\r\n     * @param {any} value Any stringifyable object\r\n     * @returns {Object} \r\n     */\r\n    var knownVariable = function (variable, value) {\r\n        var o = {};\r\n        o[variable] = value;\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Checks if n is a number\r\n     * @param {any} n\r\n     */\r\n    var isNumber = function (n) {\r\n        return /^\\d+\\.?\\d*$/.test(n);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if an array contains only numeric values\r\n     * @param {Array} arr\r\n     */\r\n    var allNumeric = function (arr) {\r\n        for(var i = 0; i < arr.length; i++)\r\n            if(!isNumber(arr[i]))\r\n                return false;\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks to see if a number or Symbol is a fraction\r\n     * @param {Number|Symbol} num\r\n     * @returns {boolean}\r\n     */\r\n    var isFraction = function (num) {\r\n        if(isSymbol(num))\r\n            return isFraction(num.multiplier.toDecimal());\r\n        return (num % 1 !== 0);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Symbol\r\n     * @param {Object} obj\r\n     */\r\n    var isSymbol = function (obj) {\r\n        return (obj instanceof Symbol);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Expression\r\n     * @param {Object} obj\r\n     */\r\n    var isExpression = function (obj) {\r\n        return (obj instanceof Expression);\r\n    };\r\n\r\n    /**\r\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\r\n     * names are then returned in alphabetical order.\r\n     * @param {Symbol} obj\r\n     * @param {Boolean} poly\r\n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\r\n     * automatically. In the future this will be a Collector object.\r\n     * @returns {String[]} - An array containing variable names\r\n     */\r\n    var variables = function (obj, poly, vars) {\r\n        vars = vars || {\r\n            c: [],\r\n            add: function (value) {\r\n                if(this.c.indexOf(value) === -1 && isNaN(value))\r\n                    this.c.push(value);\r\n            }\r\n        };\r\n\r\n        if(isSymbol(obj)) {\r\n            var group = obj.group,\r\n                    prevgroup = obj.previousGroup;\r\n            if(group === EX)\r\n                variables(obj.power, poly, vars);\r\n\r\n            if(group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\r\n                for(var x in obj.symbols) {\r\n                    variables(obj.symbols[x], poly, vars);\r\n                }\r\n            }\r\n            else if(group === S || prevgroup === S) {\r\n                //very crude needs fixing. TODO\r\n                if(!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))\r\n                    vars.add(obj.value);\r\n            }\r\n            else if(group === PL || prevgroup === PL) {\r\n                variables(firstObject(obj.symbols), poly, vars);\r\n            }\r\n            else if(group === EX) {\r\n                if(!isNaN(obj.value))\r\n                    vars.add(obj.value);\r\n                variables(obj.power, poly, vars);\r\n            }\r\n            else if(group === FN && !poly) {\r\n                for(var i = 0; i < obj.args.length; i++) {\r\n                    variables(obj.args[i], poly, vars);\r\n                }\r\n            }\r\n        }\r\n\r\n        return vars.c.sort();\r\n    };\r\n\r\n    /**\r\n     * Returns the sum of an array\r\n     * @param {Array} arr\r\n     * @param {boolean} toNumber\r\n     * @returns {Symbol}\r\n     */\r\n    var arraySum = function (arr, toNumber) {\r\n        var sum = new Symbol(0);\r\n        for(var i = 0; i < arr.length; i++) {\r\n            var x = arr[i];\r\n            // Convert to symbol if not\r\n            sum = _.add(sum, !isSymbol(x) ? _.parse(x) : x);\r\n        }\r\n\r\n        return toNumber ? Number(sum) : sum;\r\n    };\r\n\r\n    /**\r\n     * Separates out the variables into terms of variabls.\r\n     * e.g. x+y+x*y+sqrt(2)+pi returns\r\n     * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\r\n     * @param {type} symbol\r\n     * @param {type} o\r\n     * @returns {undefined}\r\n     * @throws {Error} for expontentials\r\n     */\r\n    var separate = function (symbol, o) {\r\n        symbol = _.expand(symbol);\r\n        o = o || {};\r\n        var insert = function (key, sym) {\r\n            if(!o[key])\r\n                o[key] = new Symbol(0);\r\n            o[key] = _.add(o[key], sym.clone());\r\n        };\r\n        symbol.each(function (x) {\r\n            if(x.isConstant('all')) {\r\n                insert('constants', x);\r\n            }\r\n            else if(x.group === S) {\r\n                insert(x.value, x);\r\n            }\r\n            else if(x.group === FN && (x.fname === ABS || x.fname === '')) {\r\n                separate(x.args[0]);\r\n            }\r\n            else if(x.group === EX || x.group === FN) {\r\n                throw new Error('Unable to separate. Term cannot be a function!');\r\n            }\r\n            else {\r\n                insert(variables(x).join(' '), x);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Fills holes in an array with zero symbol or generates one with n zeroes\r\n     * @param {Array} arr\r\n     * @param {Number} n\r\n     */\r\n    var fillHoles = function (arr, n) {\r\n        n = n || arr.length;\r\n        for(var i = 0; i < n; i++) {\r\n            var sym = arr[i];\r\n            if(!sym)\r\n                arr[i] = new Symbol(0);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Checks to see if the object provided is a Vector\r\n     * @param {Object} obj\r\n     */\r\n    var isVector = function (obj) {\r\n        return (obj instanceof Vector);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Matrix\r\n     * @param {Object} obj\r\n     */\r\n    var isMatrix = function (obj) {\r\n        return (obj instanceof Matrix);\r\n    };\r\n\r\n    var isSet = function (obj) {\r\n        return (obj instanceof Set);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is in group N\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isNumericSymbol = function (symbol) {\r\n        return symbol.group === N || symbol.group === P;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is a variable with no multiplier nor power\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isVariableSymbol = function (symbol) {\r\n        return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Array\r\n     * @param {Object} arr\r\n     */\r\n    var isArray = function (arr) {\r\n        return Array.isArray(arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an integer\r\n     * @param {Number} num\r\n     */\r\n    var isInt = function (num) {\r\n        return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\r\n    };\r\n\r\n    /**\r\n     * @param {Number|Symbol} obj\r\n     * @returns {boolean}\r\n     */\r\n    var isNegative = function (obj) {\r\n        if(isSymbol(obj)) {\r\n            obj = obj.multiplier;\r\n        }\r\n        return obj.lessThan(0);\r\n    };\r\n    /**\r\n     * Safely stringify object\r\n     * @param o\r\n     */\r\n    var stringify = function (o) {\r\n        if(!o)\r\n            return o;\r\n        return String(o);\r\n    };\r\n\r\n    /**\r\n     * @param {String} str\r\n     * @returns {String} - returns a formatted string surrounded by brackets\r\n     */\r\n    var inBrackets = function (str) {\r\n        return '(' + str + ')';\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace parts of string\r\n     * @param {String} str - The original string\r\n     * @param {Integer} from - The starting index\r\n     * @param {Integer} to - The ending index\r\n     * @param {String} with_str - The replacement string\r\n     * @returns {String} - A formatted string\r\n     */\r\n    var stringReplace = function (str, from, to, with_str) {\r\n        return str.substr(0, from) + with_str + str.substr(to, str.length);\r\n    };\r\n\r\n    /**\r\n     * the Parser uses this to check if it's allowed to convert the obj to type Symbol\r\n     * @param {Object} obj\r\n     * @returns {boolean}\r\n     */\r\n    var customType = function (obj) {\r\n        return obj !== undefined && obj.custom;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if numbers are both negative or are both positive\r\n     * @param {Number} a\r\n     * @param {Number} b\r\n     * @returns {boolean}\r\n     */\r\n    var sameSign = function (a, b) {\r\n        return (a < 0) === (b < 0);\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace multiple occurences in a string. Takes multiple arguments\r\n     * @example format('{0} nice, {0} sweet', 'something')\r\n     * //returns 'something nice, something sweet'\r\n     */\r\n    var format = function () {\r\n        var args = [].slice.call(arguments),\r\n                str = args.shift();\r\n        var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\r\n            var arg = args[index];\r\n            return typeof arg === 'function' ? arg() : arg;\r\n        });\r\n\r\n        return new_str;\r\n    };\r\n\r\n    /**\r\n     * Generates an array with values within a range. Multiplies by a step if provided\r\n     * @param {Number} start\r\n     * @param {Number} end\r\n     * @param {Number} step\r\n     */\r\n    var range = function (start, end, step) {\r\n        var arr = [];\r\n        step = step || 1;\r\n        for(var i = start; i <= end; i++)\r\n            arr.push(i * step);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of all the keys in an array\r\n     * @param {Object} obj\r\n     * @returns {Array}\r\n     */\r\n    var keys = Object.keys;\r\n\r\n    /**\r\n     * Returns the first encountered item in an object. Items do not have a fixed order in objects\r\n     * so only use if you need any first random or if there's only one item in the object\r\n     * @param {Object} obj\r\n     * @param {String} key Return this key as first object\r\n     * @param {Boolean} both\r\n     * @returns {*}\r\n     */\r\n    var firstObject = function (obj, key, both) {\r\n        for(var x in obj)\r\n            break;\r\n        if(key)\r\n            return x;\r\n        if(both)\r\n            return {\r\n                key: x,\r\n                obj: obj[x]\r\n            };\r\n        return obj[x];\r\n    };\r\n\r\n    /**\r\n     * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\r\n     * @param {Symbol} sym1\r\n     * @param {Symbol} sym2\r\n     * @param {String[]} vars - an optional array of variables to use\r\n     * @returns {bool}\r\n     */\r\n    var compare = function (sym1, sym2, vars) {\r\n        var n = 5; //a random number between 1 and 5 is good enough\r\n        var scope = {}; // scope object with random numbers generated using vars\r\n        var comparison;\r\n        for(var i = 0; i < vars.length; i++)\r\n            scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\r\n        block('PARSE2NUMBER', function () {\r\n            comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\r\n        });\r\n        return comparison;\r\n    };\r\n\r\n    /**\r\n     * Is used to set a user defined function using the function assign operator\r\n     * @param {String} name\r\n     * @param {String[]} params_array\r\n     * @param {String} body\r\n     * @returns {Boolean}\r\n     */\r\n    var setFunction = function (name, params_array, body) {\r\n        validateName(name);\r\n        if(!isReserved(name)) {\r\n            params_array = params_array || variables(_.parse(body));\r\n            // The function gets set to PARSER.mapped function which is just\r\n            // a generic function call.\r\n            _.functions[name] = [_.mapped_function, params_array.length, {\r\n                    name: name,\r\n                    params: params_array,\r\n                    body: body\r\n                }];\r\n\r\n            return body;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Returns the minimum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMax = function (arr) {\r\n        return Math.max.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Returns the maximum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMin = function (arr) {\r\n        return Math.min.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if two arrays are equal\r\n     * @param {Array} arr1 \r\n     * @param {Array} arr2 \r\n     */\r\n    var arrayEqual = function (arr1, arr2) {\r\n        arr1.sort();\r\n        arr2.sort();\r\n\r\n        // The must be of the same length\r\n        if(arr1.length === arr2.length) {\r\n            for(var i = 0; i < arr1.length; i++) {\r\n                // If any two items don't match we're done\r\n                if(arr1[i] !== arr2[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Otherwise they're equal\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Clones array with clonable items\r\n     * @param {Array} arr\r\n     * @returns {Array}\r\n     */\r\n    var arrayClone = function (arr) {\r\n        var new_array = [], l = arr.length;\r\n        for(var i = 0; i < l; i++)\r\n            new_array[i] = arr[i].clone();\r\n        return new_array;\r\n    };\r\n\r\n    /**\r\n     * Fills numbers between array values\r\n     * @param {Numbers[]} arr\r\n     * @param {Integer} slices\r\n     */\r\n    var arrayAddSlices = function (arr, slices) {\r\n        slices = slices || 20;\r\n        var retval = [];\r\n        var c, delta, e;\r\n        retval.push(arr[0]); //push the beginning\r\n        for(var i = 0; i < arr.length - 1; i++) {\r\n            c = arr[i];\r\n            delta = arr[i + 1] - c; //get the difference\r\n            e = delta / slices; //chop it up in the desired number of slices\r\n            for(var j = 0; j < slices; j++) {\r\n                c += e; //add the mesh to the last slice\r\n                retval.push(c);\r\n            }\r\n        }\r\n\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * Gets nth roots of a number\r\n     * @param {Symbol} symbol\r\n     * @returns {Vector}\r\n     */\r\n    var nroots = function (symbol) {\r\n        var a, b;\r\n\r\n        if(symbol.group === FN && symbol.fname === '') {\r\n            a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n            b = _.parse(symbol.power);\r\n        }\r\n        else if(symbol.group === P) {\r\n            a = _.parse(symbol.value);\r\n            b = _.parse(symbol.power);\r\n        }\r\n\r\n        if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {\r\n            var _roots = [];\r\n\r\n            var parts = Symbol.toPolarFormArray(evaluate(symbol));\r\n            var r = parts[0];\r\n\r\n            //var r = _.parse(a).abs().toString();\r\n\r\n            //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n            var x = _.arg(a);\r\n            var n = b.multiplier.den.toString();\r\n            var p = b.multiplier.num.toString();\r\n\r\n            var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\r\n\r\n            for(var i = 0; i < n; i++) {\r\n                var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n            }\r\n            return Vector.fromArray(_roots);\r\n        }\r\n        else if(symbol.isConstant(true, true)) {\r\n            var sign = symbol.sign();\r\n            var x = evaluate(symbol.abs());\r\n            var root = _.sqrt(x);\r\n\r\n            var _roots = [root.clone(), root.negate()];\r\n\r\n            if(sign < 0)\r\n                _roots = _roots.map(function (x) {\r\n                    return _.multiply(x, Symbol.imaginary());\r\n                });\r\n\r\n        }\r\n        else {\r\n            _roots = [_.parse(symbol)];\r\n        }\r\n\r\n        return Vector.fromArray(_roots);\r\n    };\r\n\r\n    /**\r\n     * Sorts and array given 2 parameters\r\n     * @param {String} a\r\n     * @param {String} b\r\n     */\r\n    var comboSort = function (a, b) {\r\n        var l = a.length,\r\n                combined = []; //the linker\r\n        for(var i = 0; i < a.length; i++) {\r\n            combined.push([a[i], b[i]]); //create the map\r\n        }\r\n\r\n        combined.sort(function (x, y) {\r\n            return x[0] - y[0];\r\n        });\r\n\r\n        var na = [], nb = [];\r\n\r\n        for(i = 0; i < l; i++) {\r\n            na.push(combined[i][0]);\r\n            nb.push(combined[i][1]);\r\n        }\r\n\r\n        return [na, nb];\r\n    };\r\n    /**\r\n     * TODO: Pick a more descriptive name and better description\r\n     * Breaks a function down into it's parts wrt to a variable, mainly coefficients\r\n     * Example a*x^2+b wrt x\r\n     * @param {Symbol} fn\r\n     * @param {String} wrt\r\n     * @param {bool} as_obj\r\n     */\r\n    var decompose_fn = function (fn, wrt, as_obj) {\r\n        wrt = String(wrt); //convert to string\r\n        var ax, a, x, b;\r\n        if(fn.group === CP) {\r\n            var t = _.expand(fn.clone()).stripVar(wrt);\r\n            ax = _.subtract(fn.clone(), t.clone());\r\n            b = t;\r\n        }\r\n        else\r\n            ax = fn.clone();\r\n        a = ax.stripVar(wrt);\r\n        x = _.divide(ax.clone(), a.clone());\r\n        b = b || new Symbol(0);\r\n        if(as_obj)\r\n            return {\r\n                a: a,\r\n                x: x,\r\n                ax: ax,\r\n                b: b\r\n            };\r\n        return [a, x, ax, b];\r\n    };\r\n    /**\r\n     * Rounds a number up to x decimal places\r\n     * @param {Number} x\r\n     * @param {Number} s\r\n     */\r\n    var nround = function (x, s) {\r\n        if(isInt(x)) {\r\n            if(x >= Number.MAX_VALUE)\r\n                return x.toString();\r\n            return Number(x);\r\n        }\r\n\r\n        s = typeof s === 'undefined' ? 14 : s;\r\n        return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\r\n    };\r\n\r\n    /**\r\n     * Is used for u-substitution. Gets a suitable u for substitution. If for\r\n     * instance a is used in the symbol then it keeps going down the line until\r\n     * one is found that's not in use. If all letters are taken then it\r\n     * starts appending numbers.\r\n     * IMPORTANT! It assumes that the substitution will be undone\r\n     * beore the user gets to interact with the object again.\r\n     * @param {Symbol} symbol\r\n     */\r\n    var getU = function (symbol) {\r\n        //start with u\r\n        var u = 'u', //start with u\r\n                v = u, //init with u\r\n                c = 0, //postfix number\r\n                vars = variables(symbol);\r\n        //make sure this variable isn't reserved and isn't in the variable list\r\n        while(!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))\r\n            v = u + c++;\r\n        //get an empty slot. It seems easier to just push but the\r\n        //problem is that we may have some which are created by clearU\r\n        for(var i = 0, l = RESERVED.length; i <= l; i++)\r\n            //reserved cannot equals false or 0 so we can safely check for a falsy type\r\n            if(!RESERVED[i]) {\r\n                RESERVED[i] = v; //reserve the variable\r\n                break;\r\n            }\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Clears the u variable so it's no longer reserved\r\n     * @param {String} u\r\n     */\r\n    var clearU = function (u) {\r\n        var indx = RESERVED.indexOf(u);\r\n        if(indx !== -1)\r\n            RESERVED[indx] = undefined;\r\n    };\r\n\r\n    /**\r\n     * Loops through each item in object and calls function with item as param\r\n     * @param {Object|Array} obj\r\n     * @param {Function} fn\r\n     */\r\n    var each = function (obj, fn) {\r\n        if(isArray(obj)) {\r\n            var l = obj.length;\r\n            for(var i = 0; i < l; i++)\r\n                fn.call(obj, i);\r\n        }\r\n        else {\r\n            for(var x in obj)\r\n                if(obj.hasOwnProperty(x))\r\n                    fn.call(obj, x);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an even number\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var even = function (num) {\r\n        return num % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a fraction is divisible by 2\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var evenFraction = function (num) {\r\n        return 1 / (num % 1) % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Strips duplicates out of an array\r\n     * @param {Array} arr\r\n     */\r\n    var arrayUnique = function (arr) {\r\n        var l = arr.length, a = [];\r\n        for(var i = 0; i < l; i++) {\r\n            var item = arr[i];\r\n            if(a.indexOf(item) === -1)\r\n                a.push(item);\r\n        }\r\n        return a;\r\n    };\r\n\r\n    /**\r\n     * Gets all the variables in an array of Symbols\r\n     * @param {Symbol[]} arr \r\n     */\r\n    var arrayGetVariables = function (arr) {\r\n        var vars = variables(arr[0], null, null, true);\r\n\r\n        //get all variables\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            vars = vars.concat(variables(arr[i]));\r\n        //remove duplicates\r\n        vars = arrayUnique(vars).sort();\r\n\r\n        //done\r\n        return vars;\r\n    };\r\n\r\n    /**\r\n     * Removes duplicates from an array. Returns a new array\r\n     * @param {Array} arr\r\n     * @param {Function} condition\r\n     */\r\n    var removeDuplicates = function (arr, condition) {\r\n        var conditionType = typeof condition;\r\n\r\n        if(conditionType !== 'function' || conditionType === 'undefined') {\r\n            condition = function (a, b) {\r\n                return a === b;\r\n            };\r\n        }\r\n\r\n        var seen = [];\r\n\r\n        while(arr.length) {\r\n            var a = arr[0];\r\n            //only one element left so we're done\r\n            if(arr.length === 1) {\r\n                seen.push(a);\r\n                break;\r\n            }\r\n            var temp = [];\r\n            seen.push(a); //we already scanned these\r\n            for(var i = 1; i < arr.length; i++) {\r\n                var b = arr[i];\r\n                //if the number is outside the specified tolerance\r\n                if(!condition(a, b))\r\n                    temp.push(b);\r\n            }\r\n            //start over with the remainder\r\n            arr = temp;\r\n        }\r\n\r\n        return seen;\r\n    };\r\n\r\n    /**\r\n     * Reserves the names in an object so they cannot be used as function names\r\n     * @param {Object} obj\r\n     */\r\n    var reserveNames = function (obj) {\r\n        var add = function (item) {\r\n            if(RESERVED.indexOf(item) === -1)\r\n                RESERVED.push(item);\r\n        };\r\n\r\n        if(typeof obj === 'string')\r\n            add(obj);\r\n        else {\r\n            each(obj, function (x) {\r\n                add(x);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Removes an item from either an array or an object. If the object is an array, the index must be\r\n     * specified after the array. If it's an object then the key must be specified\r\n     * @param {Object|Array} obj\r\n     * @param {Integer} indexOrKey\r\n     */\r\n    var remove = function (obj, indexOrKey) {\r\n        var result;\r\n        if(isArray(obj)) {\r\n            result = obj.splice(indexOrKey, 1)[0];\r\n        }\r\n        else {\r\n            result = obj[indexOrKey];\r\n            delete obj[indexOrKey];\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a temporary block in which one of the global settings is temporarily modified while\r\n     * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\r\n     * answer for a period you would set PARSE2NUMBER to true in the block.\r\n     * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\r\n     * @param {String} setting - The setting being accessed\r\n     * @param {Function} f\r\n     * @param {boolean} opt - The value of the setting in the block\r\n     * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\r\n     */\r\n    var block = function (setting, f, opt, obj) {\r\n        var current_setting = Settings[setting];\r\n        Settings[setting] = opt === undefined ? true : !!opt;\r\n        var retval = f.call(obj);\r\n        Settings[setting] = current_setting;\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * provide a mechanism for accessing functions directly. Not yet complete!!!\r\n     * Some functions will return undefined. This can maybe just remove the\r\n     * function object at some point when all functions are eventually\r\n     * housed in the global function object. Returns ALL parser available\r\n     * functions. Parser.functions may not contain all functions\r\n     */\r\n    var importFunctions = function () {\r\n        var o = {};\r\n        for(var x in _.functions)\r\n            o[x] = _.functions[x][0];\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\r\n     * @param {Array|object} obj\r\n     */\r\n    var arguments2Array = function (obj) {\r\n        return [].slice.call(obj);\r\n    };\r\n\r\n    /**\r\n     * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\r\n     * each nth term by x^n.\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} wrt\r\n     */\r\n    var getCoeffs = function (symbol, wrt, info) {\r\n        var coeffs = [];\r\n        //we loop through the symbols and stick them in their respective\r\n        //containers e.g. y*x^2 goes to index 2\r\n        symbol.each(function (term) {\r\n            if(term.contains(wrt)) {\r\n                //we want only the coefficient which in this case will be everything but the variable\r\n                //e.g. a*b*x -> a*b if the variable to solve for is x\r\n                var coeff = term.stripVar(wrt),\r\n                        x = _.divide(term.clone(), coeff.clone()),\r\n                        p = x.power.toDecimal();\r\n            }\r\n            else {\r\n                coeff = term;\r\n                p = 0;\r\n            }\r\n            var e = coeffs[p];\r\n            //if it exists just add it to it\r\n            coeffs[p] = e ? _.add(e, coeff) : coeff;\r\n\r\n        }, true);\r\n\r\n        for(var i = 0; i < coeffs.length; i++)\r\n            if(!coeffs[i])\r\n                coeffs[i] = new Symbol(0);\r\n        //fill the holes\r\n        return coeffs;\r\n    };\r\n\r\n    /**\r\n     * As the name states. It forces evaluation of the expression\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} o\r\n     */\r\n    var evaluate = function (symbol, o) {\r\n        return block('PARSE2NUMBER', function () {\r\n            return _.parse(symbol, o);\r\n        }, true);\r\n    };\r\n\r\n    /**\r\n     * Converts an array to a vector. Consider moving this to Vector.fromArray\r\n     * @param {String[]|String|Symbol|Number|Number[]} x\r\n     */\r\n    var convertToVector = function (x) {\r\n        if(isArray(x)) {\r\n            var vector = new Vector([]);\r\n            for(var i = 0; i < x.length; i++)\r\n                vector.elements.push(convertToVector(x[i]));\r\n            return vector;\r\n        }\r\n        //Ensure that a nerdamer ready object is returned\r\n        if(!isSymbol(x))\r\n            return _.parse(x);\r\n        return x;\r\n    };\r\n\r\n    /**\r\n     * Generates prime numbers up to a specified number\r\n     * @param {Number} upto\r\n     */\r\n    var generatePrimes = function (upto) {\r\n        //get the last prime in the array\r\n        var last_prime = PRIMES[PRIMES.length - 1] || 2;\r\n        //no need to check if we've already encountered the number. Just check the cache.\r\n        for(var i = last_prime; i < upto; i++) {\r\n            if(isPrime(i))\r\n                PRIMES.push(i);\r\n        }\r\n    };\r\n    /**\r\n     * Checks to see if all arguments are numbers\r\n     * @param {object} args\r\n     */\r\n    var allNumbers = function (args) {\r\n        for(var i = 0; i < args.length; i++)\r\n            if(args[i].group !== N)\r\n                return false;\r\n        return true;\r\n    };\r\n    /*\r\n     * Checks if all arguments aren't just all number but if they\r\n     * are constants as well e.g. pi, e.\r\n     * @param {object} args\r\n     */\r\n    var allConstants = function (args) {\r\n        for(var i = 0; i < args.length; i++) {\r\n            if(args[i].isPi() || args[i].isE())\r\n                continue;\r\n            if(!args[i].isConstant(true))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to multiply two expression in expanded form\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     */\r\n    var mix = function (a, b, opt) {\r\n        // Flip them if b is a CP or PL and a is not\r\n        if(b.isComposite() && !a.isComposite() || b.isLinear() && !a.isLinear()) {\r\n            [a, b] = [b, a];\r\n        }\r\n        // A temporary variable to hold the expanded terms\r\n        var t = new Symbol(0);\r\n        if(a.isLinear()) {\r\n            a.each(function (x) {\r\n                // If b is not a PL or a CP then simply multiply it\r\n                if(!b.isComposite()) {\r\n                    var term = _.multiply(_.parse(x), _.parse(b));\r\n                    t = _.add(t, _.expand(term, opt));\r\n                }\r\n                // Otherwise multiply out each term.\r\n                else if(b.isLinear()) {\r\n                    b.each(function (y) {\r\n                        var term = _.multiply(_.parse(x), _.parse(y));\r\n                        var expanded = _.expand(_.parse(term), opt);\r\n                        t = _.add(t, expanded);\r\n                    }, true);\r\n                }\r\n                else {\r\n                    t = _.add(t, _.multiply(x, _.parse(b)));\r\n                }\r\n            }, true);\r\n        }\r\n        else {\r\n            // Just multiply them together\r\n            t = _.multiply(a, b);\r\n        }\r\n\r\n        // The expanded function is now t\r\n        return t;\r\n    };\r\n\r\n//Exceptions ===================================================================\r\n    //Is thrown for division by zero\r\n    var DivisionByZero = customError('DivisionByZero');\r\n    // Is throw if an error occured during parsing\r\n    var ParseError = customError('ParseError');\r\n    // Is thrown if the expression results in undefined\r\n    var UndefinedError = customError('UndefinedError');\r\n    // Is throw input is out of the function domain\r\n    var OutOfFunctionDomainError = customError('OutOfFunctionDomainError');\r\n    // Is throw if a function exceeds x amount of iterations\r\n    var MaximumIterationsReached = customError('MaximumIterationsReached');\r\n    // Is thrown if the parser receives an incorrect type\r\n    var NerdamerTypeError = customError('NerdamerTypeError');\r\n    // Is thrown if bracket parity is not correct\r\n    var ParityError = customError('ParityError');\r\n    // Is thrown if an unexpectd or incorrect operator is encountered\r\n    var OperatorError = customError('OperatorError');\r\n    // Is thrown if an index is out of range.\r\n    var OutOfRangeError = customError('OutOfRangeError');\r\n    // Is thrown if dimensions are incorrect. Mostly for matrices\r\n    var DimensionError = customError('DimensionError');\r\n    // Is thrown if variable name violates naming rule\r\n    var InvalidVariableNameError = customError('InvalidVariableNameError');\r\n    // Is thrown if the limits of the library are exceeded for a function\r\n    // This can be that the function become unstable passed a value\r\n    var ValueLimitExceededError = customError('ValueLimitExceededError');\r\n    // Is throw if the value is an incorrect LH or RH value\r\n    var NerdamerValueError = customError('NerdamerValueError');\r\n    // Is thrown if the value is an incorrect LH or RH value\r\n    var SolveError = customError('SolveError');\r\n    // Is thrown for an infinite loop\r\n    var InfiniteLoopError = customError('InfiniteLoopError');\r\n    // Is thrown if an operator is found when there shouldn't be one\r\n    var UnexpectedTokenError = customError('UnexpectedTokenError');\r\n\r\n    var exceptions = {\r\n        DivisionByZero: DivisionByZero,\r\n        ParseError: ParseError,\r\n        OutOfFunctionDomainError: OutOfFunctionDomainError,\r\n        UndefinedError: UndefinedError,\r\n        MaximumIterationsReached: MaximumIterationsReached,\r\n        NerdamerTypeError: NerdamerTypeError,\r\n        ParityError: ParityError,\r\n        OperatorError: OperatorError,\r\n        OutOfRangeError: OutOfRangeError,\r\n        DimensionError: DimensionError,\r\n        InvalidVariableNameError: InvalidVariableNameError,\r\n        ValueLimitExceededError: ValueLimitExceededError,\r\n        NerdamerValueError: NerdamerValueError,\r\n        SolveError: SolveError,\r\n        InfiniteLoopError: InfiniteLoopError,\r\n        UnexpectedTokenError: UnexpectedTokenError\r\n    };\r\n//Math2 ========================================================================\r\n    //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\r\n    //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the\r\n    //functions within are pretty self-explanatory.\r\n    //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\r\n    var Math2 = {\r\n        csc: function (x) {\r\n            return 1 / Math.sin(x);\r\n        },\r\n        sec: function (x) {\r\n            return 1 / Math.cos(x);\r\n        },\r\n        cot: function (x) {\r\n            return 1 / Math.tan(x);\r\n        },\r\n        acsc: function (x) {\r\n            return Math.asin(1 / x);\r\n        },\r\n        asec: function (x) {\r\n            return Math.acos(1 / x);\r\n        },\r\n        acot: function (x) {\r\n            return (Math.PI / 2) - Math.atan(x);\r\n        },\r\n        // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\r\n        erf: function (x) {\r\n            var t = 1 / (1 + 0.5 * Math.abs(x));\r\n            var result = 1 - t * Math.exp(-x * x - 1.26551223 +\r\n                    t * (1.00002368 +\r\n                            t * (0.37409196 +\r\n                                    t * (0.09678418 +\r\n                                            t * (-0.18628806 +\r\n                                                    t * (0.27886807 +\r\n                                                            t * (-1.13520398 +\r\n                                                                    t * (1.48851587 +\r\n                                                                            t * (-0.82215223 +\r\n                                                                                    t * (0.17087277)))))))))\r\n                    );\r\n            return x >= 0 ? result : -result;\r\n        },\r\n        diff: function (f) {\r\n            var h = 0.001;\r\n\r\n            var derivative = function (x) {\r\n                return (f(x + h) - f(x - h)) / (2 * h);\r\n            };\r\n\r\n            return derivative;\r\n        },\r\n        median: function (...values) {\r\n            values.sort(function (a, b) {\r\n                return a - b;\r\n            });\r\n\r\n            var half = Math.floor(values.length / 2);\r\n\r\n            if(values.length % 2)\r\n                return values[half];\r\n\r\n            return (values[half - 1] + values[half]) / 2.0;\r\n        },\r\n        /*\r\n         * Reverses continued fraction calculation\r\n         * @param {obj} contd\r\n         * @returns {Number}\r\n         */\r\n        fromContinued: function (contd) {\r\n            var arr = contd.fractions.slice();\r\n            var e = 1 / arr.pop();\r\n            for(var i = 0, l = arr.length; i < l; i++) {\r\n                e = 1 / (arr.pop() + e);\r\n            }\r\n            return contd.sign * (contd.whole + e);\r\n        },\r\n        /*\r\n         * Calculates continued fractions\r\n         * @param {Number} n\r\n         * @param {Number} x The number of places\r\n         * @returns {Number}\r\n         */\r\n        continuedFraction: function (n, x) {\r\n            x = x || 20;\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            var absn = Math.abs(n); /*get the absolute value of the number*/\r\n            var whole = Math.floor(absn); /*get the whole*/\r\n            var ni = absn - whole; /*subtract the whole*/\r\n            var c = 0; /*the counter to keep track of iterations*/\r\n            var done = false;\r\n            var epsilon = 1e-14;\r\n            var max = 1e7;\r\n            var e, w;\r\n            var retval = {\r\n                whole: whole,\r\n                sign: sign,\r\n                fractions: []\r\n            };\r\n            /*start calculating*/\r\n            while(!done && ni !== 0) {\r\n                /*invert and get the whole*/\r\n                e = 1 / ni;\r\n                w = Math.floor(e);\r\n                if(w > max) {\r\n                    /*this signals that we may have already gone too far*/\r\n                    var d = Math2.fromContinued(retval) - n;\r\n                    if(d <= Number.EPSILON)\r\n                        break;\r\n                }\r\n                /*add to result*/\r\n                retval.fractions.push(w);\r\n                /*move the ni to the decimal*/\r\n                ni = e - w;\r\n                /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\r\n                if(ni <= epsilon || c >= x - 1)\r\n                    done = true;\r\n                c++;\r\n            }\r\n            /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\r\n            var idx = retval.fractions.length - 1;\r\n            if(retval.fractions[idx] === 1) {\r\n                retval.fractions.pop();\r\n                /*increase the last one by one*/\r\n                retval.fractions[--idx]++;\r\n            }\r\n            return retval;\r\n        },\r\n        bigpow: function (n, p) {\r\n            if(!(n instanceof Frac))\r\n                n = Frac.create(n);\r\n            if(!(p instanceof Frac))\r\n                p = Frac.create(p);\r\n            var retval = new Frac(0);\r\n            if(p.isInteger()) {\r\n                retval.num = n.num.pow(p.toString());\r\n                retval.den = n.den.pow(p.toString());\r\n            }\r\n            else {\r\n                var num = Frac.create(Math.pow(n.num, p.num));\r\n                var den = Frac.create(Math.pow(n.den, p.num));\r\n\r\n                retval.num = Math2.nthroot(num, p.den.toString());\r\n                retval.den = Math2.nthroot(den, p.den);\r\n            }\r\n            return retval;\r\n        },\r\n        //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\r\n        gamma: function (z) {\r\n            var g = 7;\r\n            var C = [\r\n                0.99999999999980993,\r\n                676.5203681218851,\r\n                -1259.1392167224028,\r\n                771.32342877765313,\r\n                -176.61502916214059,\r\n                12.507343278686905,\r\n                -0.13857109526572012,\r\n                9.9843695780195716e-6,\r\n                1.5056327351493116e-7]\r\n                    ;\r\n\r\n            if(z < 0.5)\r\n                return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));\r\n            else {\r\n                z -= 1;\r\n\r\n                var x = C[0];\r\n                for(var i = 1; i < g + 2; i++)\r\n                    x += C[i] / (z + i);\r\n\r\n                var t = z + g + 0.5;\r\n                return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\r\n            }\r\n        },\r\n        //factorial\r\n        bigfactorial: function (x) {\r\n            var retval = new bigInt(1);\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval.times(i);\r\n            return new Frac(retval);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Logarithm#Calculation\r\n        bigLog: function (x) {\r\n            var CACHE = [\"-253631954333118718762629409109262279926288908775918712466601196032/39970093576053625963957478139049824030906352922262642968060706375\", \"0\", \"24553090145869607172412918483124184864289170814122579923404694986469653261608528681589949629750677407356463601998534945057511664951799678336/35422621391945757431676178435630229283255250779216421054188228659061954317501699707236864189383591478024245495110561124597124995986978302375\", \"369017335340917140706044240090243368728616279239227943871048759140274862131699550043150713059889196223917527172547/335894053932612728969975338549993764554481173661218585876475837409922537622385232776657791604345125227005476864000\", \"24606853025626737903121303930100462245506322607985779603220820323211395607931699126390918477501325805513849611930008427268176602460462988972957593458726734897129954728102144/17750092415977639787139561330326170936321452137635322313122938207611787444311735251389066106937796085669460151963285086542745859461943369606018450213014148175716400146484375\", \"399073568781976806715759409052286641738926636328983929439450824555613704676637191564699164303012247386095942144825603522401740680808466858044/247958349743620302021733249049411604982786755454514947379317600613433680222511897950658049325685140346169718465773927872179874971908848116625\", \"1468102989495846944084741146947295378041808701256909016224309866143294556551407470861354311593351276612463858816796714569499021375899793849136855085849133702029337910502448189055357182595424959360/819363879309286303497217527375463120404739098260200279520788950777458900438307356738082930586032462601215802636320993648007907724899611296693997216938989854861043298494990214825163523387600982777\", \"5896704855274661767824574093605344871722790278354431422729640950821239030785642943033153793245906863203822369276271050164634206965056233097479117980782641839669/3030306850569309344013726745100070601277982132543905537366562638553198167007159067544789592089960911065181606283478843359856123992707598685058297067179343872000\", \"76631772943534985713873427262830314617912556928476573358548256872141516989538374761909611879922349479420014771499018155447198112155515453671128814488139633810493264352294560043912066253026059140653027326566801398784/36852092933388988649396042883218509607503204211148493545892849595498822817623842579026942621098851631842754395231561679671400197056377380063233740202370686144673585955581403046886083948450136247134308381940165804875\", \"3159076083816399509754948610929467278257473888282947311280653574634802580912280940686954763313882823327077171624015737719617373932318151594325834524000275847475866299387913048/1437757485694188822758304467756419845842037623148461107362957994816554782989250555362514354661961482939226272309026092009962414616417412938087494467254146002233028411865234375\", \"22266067259907364984531611601870291368272674573653403965630628996687370994139884833897773468149149664829922302484782423514167405397665098388400450149078982462318781750661005833037235183394221496186539779712428265837926417581952/9670030144664428565128962309657100138096047028794689249320859276197340398920725569428532293373676415359965773460364494998334259893079003125373872108770534788283842907318071170285038777091588292539102269617376180390982915567375\", \"14604654564989239958569331443385369522850975185358647132770022716433280072271007767111036877803328768910274400515590151934676819262085211828028638417329558229123989556376108454497813055/6090614019162516693013973409650613208227889078878781039105047015752493519149314227721984436973374032279421344818329285207124280297611253861173835238379831004010748379874393292231671808\", \"1901241885407696031217292877862925220917660047127261026827869027159993239567933534052663335498281439239753018507182016153657409777749792228538380379703411298411623469292891476969894084838876001545818141543890273256985768690847587711270930688/765116019778838839812655402103512685695769161212360553099732689795578904762091216998790589926057819838537805856579109910198553330075924857419395160755642371550113347465300208422126945265887065434116781678702741657275181694851670325469434625\", \"139459806786604751793737926146840623607010208216289543036026206208962059593900745886202214788747453279179283344350478734275973878932538430194363355795823581315329311220701640235653288975569812161436/54371368534412517053056101353618694718215711767266376573138772968257303578467926450212293233332401067673270853953399269852376592855992724934941173346260129257754416412476202526978443681584633116375\", \"1045669091124493070709683241190022970908640501171378776604126771144008324358233819560649021940145166254659028524319517244711645162132513416238958170819347361185944945680269442845829390112062101255500836072082817820950448463314034677353723256969344/396228259004446234921310936915931611736815598535963504660076315228798989932959459406702091180060429080345146735173591749448509810270759531977278642135591672189002006272326131885315743181289970885337574780897529347356567086535505950450897216796875\", \"9912919238915437302006264477931031611447467070103973106567538528951878797932559935860738745374437522819124347510590800370471910492338584284092534264608801221235029062881964101996762011296996851893455828946521/3660537472668264151218961634689665210933936249986285290553357254224360417386515311493310199319523687171757653216994741150377508234317025158302057758196429623723072084157928224798322861732880034847243894784000\", \"9263710175433181746575186369318246002919895649622127410824041370079225200282403368319370743363303164313395723904510539050157032684710468364067204876434546848634842333436957245275217583248805993142227630297924119330553308466662488683624783307023014909360640/3341177182697517248552428837661919299725031035849865632511882688786226888137634168024976033652753689210700218163621739078534353578510364301481093730054725078138658805025014615651043313990684347632166030359086885561104034510990826655289288319840595753002771\", \"5116082230713622171832327542439052727465114322479570603905499496221224653983960598946033081212909066917137546065542953865612718836914393275681318667667521726785633638189373998191090501201427906618075889744489190209584/1805752553736060443820406101277706970767657006346276183748749630179442318063568286372320188433843729960294965366346522303898609655762491623098453269916163621089005711823488749297418113474056676109581110715068124438875\", \"246569125619713282434448566970352231845414317018379160824176638351574938993535464763890962336882760882398479702237564384291290459961036068916857265499633061660562532011248501476114401629839742058389195725393702000011860799793778295606988057303225493814005789533570432/85307063020836305797178273029353623060860009152114361453434032434699636078115114412588719432277441055049132559782203988387794711585368296817222565434951256788867244687081233632650953850383220864394261763844194948389861147622944651546912394593164406926489862036343375\", \"133672026303452911046163998480860917119290576658330909785707604886881155606725822685088929236266583416708668502760907677019598002175122453170574729028452721476464728566191464897928696630979863154661704374206171469014225143/45398130975270785045482567762871405072140548998125471025451666500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"6041693953360002800224091673336562508913199995987479264605216252220579740134601435770085920869376641180763419907442721705887169884230643795126568815123647603047739799302562095542459344811429882053086550900803768964612193941424128649976704727183797495759082741166938351872/2016766992122395667828553277997478570503475626107286343497917705446132017125079612756035254750822860815515899557855166824523851779156336235294914777307802256439645525835223691751931866188957324792276149549076500784191791380803500156776088683900346065830066370370083309875\", \"705868391597244582764749229356331441978820024796066870551110486625729826111158236686696326058778874201639006234449557592353247542995871491078308187261304930042019640830629526023972693107193897009168955674240659026247094657679060/231848642748474339277532000336338632910990823562381469441716922006107433404523316252618490265927265734670539384485699132080062215196462178933963957679882342083893417545858074378754089719547920901917516016346211301054206383643383\", \"101832160604157943093944673541651013907278188571533075311673249923948856034633446617630054761681006062910980371900782781226979391765818325065031889334563981235894369036439929651260587335544056975715076598739977065390678221999918899003881778449092038750712969437519295878491018112/32944277910571666002449086492515464541550138004002141571670657643770713783329063548790202120805341989608877739811787937782240802963962520261844114327432160788193314874913687387269408387417806176202979244637915812905426565263196954203487934225589622864145960079736633434831996625\", \"10655703119271468913597640479490594180964700448340778168715956712130636958373270202484276402718566314881119559090842449610957974112230306343486091910217340665146602598568991520563987490686996746558858366002301982443029430290679385551/3398412687366638541233365137084722368200311117891192348532156645374786104142009695796409107380345795998400850838706661851176885183144928701608654514812261697598380070746520197171576610572921007069104300695592751543563472456384512000\", \"1903039332876763837419920240543738799531131775028971323439870868730321221615515008394327723508670975623498588291298064320786970626232668956372004004897872810230178526101184611242511193415796638694370503100219710864543168952682617801833318493436174387568067811938490953495819438108686336/598806534367503338307287246320963280558134937382149405305466709787179429317914803617527827862441615350396864359976273212272586892074799651088317544101755361439294687323233086696182687664637422796995789967075271448560870681210580691574924544896656175563265378514188341796398162841796875\", \"525573915563826130963525826191411949262846916750432019596028344808298471293378917508549164993368392834023782480702893643486699787870059946429810070222126260200026332874480239090370088123833491499400991181659445914352500247596757005142623368/163278727324937389095822405034435687776345799835442022795533783889356344755225815267819508608559076191292900367982490827396869405536484846115955581043091229202052407483776587687967125885665493681707461345895999542381476164157058393971431375\", \"9263815657177858787273494705338516861045771674838057329170239610953039987023429736752079544014780707408666628475997291124805562998227296677616204140605356257712022384368492575381355563976330347792504605666631512343447560301417325154003481040250148561839861837778597346623630046623751094400/2843321709948499955095590862256744532227698001408929142548057792217790532624003190447363578048562448168721539177458065482170148482375585867230123873178100117094533143052886527452665480614620123764036974180917207421482431983407742154634391264619615289225747664532332469783301704643254076601\", \"407959339726114455622180187758753007349209016396248763075759257357925636039752474207685682218422721827857994768023399625060206708378433960993946156803948655098667156937949174400873748557248801874735834957795040139401560494087476967548060208243867/123780218751812156744401121690996305978134694678934447237402511116731459214498784497436358160964198336874043702652746834763131444030185151143987331404604087778514863973633941401826334750268416015224906056576641018962863645043976537664227639296000\", \"2547676391598917379516698439971914695230548782904479778605691338364453606537643088857116141939170899135026552016969320061900926954008522781162186995856580955090548471448276736878300717869625651893741316530109438876067419826217901657017506157997588944233677467357220316084583383623602865379325184/764562034757392298786420374672266498815021229519853724850874576419885380830752931701831256959159800764672605004880389358601658343203513177084389490286723240185146570925957286083025676875197029662038213216541352875570101363668917766225709569356861275434470568767077844675593176178611021135573625\", \"186545352286463730559933346565311535598243666022232037054735807289501173444103692309735768703898330430135399033529355360391658728987379385732098960609744313878477967971557204207043802935782878745271859468248704012618254203101767841517569443555143252/55399179641621656233589820996143825959365789093262978988289445625153099592463372579496245442338653053662134699646413817866770218574795378644415019944304868289119443774932782235638737888469746745621382139263856603239588594078668393194675445556640625\", \"664884440164786473344854955309049113269357314957985265728106924238588705533437169796551912202931185746193155801905841712503407258166135075966280435780812714252670362202091663287095423712596462690753468682634261029392794173636943978404002804413009590005984736612421172979101972556772005594499779860608/195485517776407145286424460448995460754674039560651791192647586550615878988380153730602665795647187884543361218962125172808792176382956599256188706636727418572541254480798303566840010217729386905041217793614214518363859058348249961790104618910877813067510758225302884815410347238200133693756493703875\", \"2614957283934314904315471338485451166053664494383241929385424599389309215073267052860464009981063483440201193771607520572077231889699858482582363845275452280606276949653970992719332472370351170732899676316967244504534154616036371979031399425846100527685/761493664432749089312665480773496290658029971027686543404885407644062485746072719559288231362060149626237939029641098328278650939665665969011529293869562636656650999759724704272743235210867676873525147820749560155294022488994426729939894753293900972032\", \"124843380518493746761140367283007507854364503961156704095198010255465940085534099747297600085903814014415830785663764373057896014399822131175202342399536439284123918855893825207202244831315575594886675813256448846863723093240955901916229136393454605455444105444987028391748121054399538064686074523506176/36022228212051654395480210378626648518430280334458144892889271272122662467638331091863215146548048144675657239846337165813938424387499358852301016926312083940212100001220180762189978024821166744964908871443681332664798940660421469519997746775275873085770018269706847741064037876137315001228315806659875\", \"827992369063043155578730871896750570951766628472810506926098505028264552046829097082095665194000002802661600196840639204300804225352337632259980703832713031790922485730615305441309917696044954289187837653933158950774246017223571461858939407386087081525130831392/236805932823686534991153393869288530368011574665859226704279685567723830696754821658770176385138917722808377962346690757191122309876922069867472518117628639913077442806147910884267694879089753138429767401700283014143248445966474839193628309668702223994071394625\", \"17347276886878323736540051321582548724378497839789943634071026331001588645519865992773157565595886250230140452154269197770615097377486013097979087647774513500701793885978192218455687078883766086309728287172567466406449372659680040183273634701092561727514713494914793425407149186041796935055187281744386432/4919325621804683623339606849970832094714371903709195539440424738973575902329797546592497378000858196173718145883783709223158260700365224756081275272021856393735663399552166737690038832550853145831185979094979556715294990257315369124065787473707136464772247917156232366320267601622617803514003753662109375\", \"137984231830526866236186357461458917020538108058615632801298091031540729111527734872044790487396302545910108285921421417358113055522725197998483383380192391312304647004240060970929072498293210057120617332323445379424867965764749534125081131327565507524502163460761/38810445792642817561168950890315210470940006613819790543653745327778579787694809782601777514116858514049585074667085399925278459138508514838268321349069481334967221455722811414399738756151414906092225265355449011152267068726417045644222323488445626292574879744000\", \"746567120547823334914136339633766098626636643449144032626270358619125402826113269699709721071135471625588981126637674402048519990010499180844665151971356149292818375448504122545400227696621572263621729512461528550588108384619064912224884465737417596190735966915167530332762203074440688676123756162572829692160/208334337057923929636884170505570363171441147899816815785150954417598643614152856767186132467069365605496210036171429712485182162940460120834349006784956522600679357307849981862006710239311750261522832996877712350330290831638640913932265004107623954913155144975252743257846945609734368518424172846119306643431\", \"64649371728330695076928013661001819989330953381731372450140483779536126948957993261299287753791770622512248630224724990234903928056275080682537641377393210728546364176267034339221558641084730052304770498929958838997239635790469536857863963589118888238069738647239076/17903951498200212327802847425913723358452100686246224008745414214690047078122925247086521362329833307849817944645647750649290248110509395628305970523384831671737569872597295947593410067364379687588919135621621162007748635920864926867870502568935739725312687094047375\", \"2454918942158003099688922026016393688092399295166304634317616773083386087532869193458590448918958337530406410803840837646465522656670050113548208618655070231274778592766244282964463702354872753657766121825196898916725498553882689210280080206627916046484942827487726300822318764058084323314109595329304407466188383616/674880185931325925966586583820010578979699141814417326552629206140252348822939845006845669570885271576698771404162512001549922909048916000017837898649100825976232784446638776021483802989797501705685620612986771521390439936066527738682396560462899753657942715306792783283782238662155922082005591512296007820682995125\", \"74018558041066162916454010680594042518462756234254788158141115244349044958441521749277686851928706433556285971088455226217644009628399441967508838553345152310730562224910795446341601049647392069373970101491741830623078126344928804029524181578945586663110848142571149861/20204153620006780689923328634586091101021423979622170579036140596085566172775051595588438592742563923428900864000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"2127032036758045513335690185608563023954009095206088224487365541995326714285119384743928987635752931664240752323937321097955456543854943206092931247498833001499955456190701695430459583885125382086777607021670447795321669948733328973350279846928613949120929250312666393359442423066212311060931469017737106028339882830848/576612418511902928757340062840968526862381326698309578771238715462180282212422302261044980131594522407066369222998903808960617461164985318633518680304995784614308979881735537678182134128319596636920719106506829571072447362052319438091347699720147003209417806230149598345068078717948025207635448205253184540936478445125\", \"35289653975561083576641954928762116897061274899517309102784750384002335187117263273488751066569234386120759866204372398611196356888479036949053282301027789530999737306501029700128744408015642211359442183943916106790666114870974212159410284751571905275610921784716184508440/9503006066880728386808143045924119024212377150217533250562188228062174064693375135306438120385877320162710918716613546077156389583384656340709638430674364232343609717735574035535102953482366914421205216675248471695111720986346092738728929878538430662191272737183832556131\", \"102633551023964794485575491065909467125458972250222581133681080524371507544152979467328048718122409841060527545925136196267751819689935599599321090571687632103850847605493223603751038996548520557330016046032671961857623066292962260173840972332108111505971231021442896036760967107060309991355545554631003681544611731245475968/27459658121882266328752886605529964804078316737648012166874496015808620265471203512606463219297059547428855195782384236337998738233668399173746663289852416697917397644234441300570212555870401420579737973722145663287124151049692290432756231390864184491891697469874600345958989433125942336757049639797225309327019275689074625\", \"10034393558388390065766795008210457368713365491566387292163814915435906649268119060550511145023450790393353937124495488860451123302412204483570913557762460385297770427946219119911920640306914453207097103853766023934602534502476962159682750262143380527529536498215384467975023/2667919902603322771586358077760621955455470781865624844984169443739075976572061827709528710108877015489050369589117491611045518221354793418884447632063538994046714401229510497599783726376490260140723032102883617341970952663947646017489439179953454964374887388652792446976000\", \"248528145263843375390386172800048509380966183384567983242213959113927668429802237067505890436957693495616107089384741585283620097982859345081736730899912519273262934785992235852866637878831878448348444611412764161078458068549719800733237024285525816723480868704742804077255242682077291713092790250511567621735004237450946304/65676865669148624809340872151906045781446981664561196686217551358486802274698228825404698950974939545099727242259547145392352658637333562345477931951890984276718673618736565926663528625796412420753961231404680876558659735251469326707567479071881966875336951133475135427640218972722939427821842173216282390058040618896484375\", \"7805448718805635696495809414501206964843262114470109146341305656318015059743127114324245035489577134938579856003956861881125856595981500593426840968087618241785931128978516340812066502964561231235073012672356530509663384739132686548934288703179479011016719045530855033205271548/2050525178024039744126592505352202216905491833360272553169520915020715464206141942151086176509423406413311520838568324134077402841030113427309725873344806030836314500267104070131451720947531994814710189000076651895520222646974590481497382830325485174899169093049299764813276375\", \"3355325071293197839434119105039673324264765809771192815982246040415580387729382404624613875653005261578877047405365032178619450963731719777167015959920645055600439987161800547901539269321100559393048973255388860193948274255340335876890491746900991668165565729269698196233805991206691196045182214641935483083662356666996922240/876402579119117579582569839757462461050855174353108858954282915644790659429341853404829661899850841645529640454766173209897510988090318303454542547519850473808789222552969933222203420847859171250332350076509996295844203965564448154484566493395403967626596213792922784509892086361572955175655987334882030766001799867659814117\", \"218871061991045868372866381545267589365410350294028138778572466235486397478028823720846191998825628156716190463263492304639890659254282445466806224943413446008645087186307985343574807361972238230520975439736199291019544576443791916302825193643774360055545186783819367378492631806297/56849560726416896431557940314760680962653658127458002233782028041537121216487790008085876994020812492987733987414743604239935223783349870516284048368761617736127892160849065895223288023531930411718807065209903593668117085505482007061969339237404945180379460053180570404846043136000\", \"5008685108365226931582937964451700746853986170633433728409171904803795018146152804690759530990140552460596075588463394200510044617816085275660078502126507209302951286606953039953843685800941558212440519542602092919776366067720586295390886070120828199562643208637974347390938772070049344991272621102622931576339988103674070876518912/1293888539680354282541277646947380627241979967611883341823378331667976045287311988103163380651334828012840330710760757271860219584371109472132211215957402251594055009937397184768184517621978947384029376766290498101728971145633139541827544539988344772578184316843734267915665730981857376872622787627370859411909330227080697966353375\", \"15388340113525711660227566446101909585796746979396093776960989868457211684028149502578116456785221720682202816140911944661051001675127262774824593420825587319436537346311831003212424497488485098543512314062112948777572038731823948224734505930748371522309451168088057190162878224801232/3954220582960831691377435160890656173654063611768428458807273708040518769541211737927975894584024448193835165167801976423275767590502552964407494549049777006346189436817215329891530811451811864579644894987864267389290848598289794977382504890216219362031324635609053075313568115234375\", \"5099039333987561374222193551155323470675617979816941646196895589439391685938046865391119484510329634015275893520725135141878751153360264368353595348921951280561029028912953500944814771064409611917475818956659775131751121312316084465321917769679881052144364834485866477379437705913911371481828140817759401117780199246301705600020671104/1303503600297679371136943454060319958680553228879031326679449263682048703103464872914972900105569835004878963701599765030590097739639045890060548760692125546754294514068052902543220382104483822438283040090444827980927544440984823535260277595466339403795403200720622852069244768910603820007632395190204569927612348189089161551951106625\", \"4902837141334073026145827027361937996261324349722726869116185158777439337041263482852376194988371853413467559557923410949898048139830183335197992754748294810838187068126867611615800383834975563313220497573778480109264178673389149671194149749735833378557143135481387904961537942569904075/1247045310545991266291285730016853118981099516935251861146038369985109288084420528171217942065832292739130145780833406014673689119563698528225048800794718789218267628507713621235056538202070171596177775095071513194885568843375526804796016261173388452184505503341132236719484809714335744\", \"38114743522716832107917466438257616720476488812538316101658139632867788464381862291240727309611460187159930652186486096300862388591521625093237019662273764387591494074792574929490381910446287947994150655077877204446864004067956087975012773988833339521775463977233068498404144221045837190392670308437391686081418318624745039402145439223552/9647001083383999453668111809775451078976046488746916070976218645431946648087171586252172936600115032316383427265217993193444199863138429602138841976586190525451324093772097241349417938578878934577091671046050326087898259692917931230974174799815198493279413438192301437068820185757869608523761456160341754512329264442115351926967120404125\", \"573695055225225727008803730767518906490704995929177617646275646884555707960986625481944101622708415415988844740028718027554452662358957933526173824325955904005404113684003841990198157072540659184995738719040024647370869010473254071681533880576462368600901824622431045529064651675640055917092/144509482511118816399089096021290587489594541280398871255876563615464628718527634679330291741479135415168539765887291789615790513527330600394937614433502341116068305347468133950204152174094704092402978083370792135432486240914953928188835819767755172666693219213868545854371103120604946200875\", \"23876960329653589647925126180903391687666378233201794403339630995420215267415575142266707357255726330536094448314199602616026935251126469221925945960901748679919435908556550271504767784553484434363646489174587463466333864577705745452492395785557425904735048180164697040313528831173448025400634629163795223739061661461986923675833880378496/5986312408594306954013526197465608559068621248896320652512228238115589875514604632230098997609482248000888567135685167138762172475788060284232459813998201719590208742091697294562538265829954186149162974972471533202880368317237508987477069872431064075005305838801862900501819963793062041081601844759452202282545840716920793056488037109375\", \"58168289917567723171226992383559866214094157894992327555495441698028867727845766488121900626912848698952863438654895252811583144479300382761129433911280049009362667380001406579175563745824368613319103673817094498117944856004415812877213722455299491145649879676787079744410765053845551958756701/14517067289347903655500020160671113450349743650636953726251191692074385521975132268313263723831804150872238173602847065423463131917373356798750100313145228608894881457107689499956903046984443545789053438946050974567665049237414588435796381674590098629779384355275820782532479708807512981504000\", \"728621890568281859295409481422447012528302594365693410763821707074444799793690738137592101239862736313347273167450056625929591960610208335290882047413011571781161008296084630072829079783328937418641417642857196346026366370059522990813537731394823630207433267854616768658990289454635793326766697884798538576055949457122067828153655416688640/181030730759516991863708593747964787874073354051675597050399087612142539517308720603687322924426591889179726492403913356461908748733972707460063017057809060190437917851790767968877215795679844983288935075688219234885360839984681619084834228226744165610073685719017596630302462070188937998558312507638434329299017584329479516410907786681093\", \"86855946923438322218622470067224691860808273886184997065663554841573982963995340977083049132518812923329423480393306918856650577072525633920456721265953575424233701929892019410099166322511413146891121248381648145391642571638857576890568882512129960291171866772665863159474602604647289052079991768/21485753507365901947528588896402264670781310878547726104482740647554738151100954835784115119035980523529677083504495839730499664052882400915208251594384038810917282207449860876251558307288700200910747338758723324686939379138206117634546981163355060740270734146780942696291669461182599512320099625\", \"2158989152301022938148680102142188531448821359505188055264665167313418619665693092337665573150374231484840948447637297247277576415460889296724813940128955070240137590073233263168835678714131062764247434144994737610229909964847568491446606012581370840699582055341626266533733744293929658949697805855362114229666626620766245630122333733703618176/531794915405164005613733454597931482878479882704956110685223892325074211694837836221759995948610212818642789132749082430059593652854659130217225506942675608692701447738732031302987802196501895840510235161825501235133794449421919927396142470196961877376701957829921152848178076410141813926924749057304222282687697297216661687583257901415465125\", \"139432548574396829074586704387656697097760057897628994548358619815052936481650396157428747411173567801047221928593253479330480454469358220685854351236980383914223693722868233819483137401339800304943891968050399345430243790898955416907228948287367356990263740207046902209563417267686591994743547621/34201151688775214071963206765436083445901621442002061707492082843232231754829227303539041286301398668437202547003300396162741375435703188500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"11008517174872833286150985180322584448162884832099344969609291070844193524816852920942383850580217443209402836100467940651581092350600329145627967515818684442171571156446321228596914355704205623857871497315955269266498229823278800717909321269179839084452384509142712677235552103459737790674103994445173074670347080506698168482564009465276165824768/2689223396936080856855299215659204161946704205931885125148201643087176556822542895325191478283706585400237901215485150928036895428721912118467760766508162631903585126377676412573187912443878232521444786090510891599171741773242011017926658231638022943018461086517502584854390836347781674626615709751386455292026775663545470794167629144456268750125\", \"16108638074211260588800537540680707641986073914251424878121255234668558067988171568946079848860335948991834525552515669040163026131919804987340113244760738846884911038097907756220945883750502673899084880578229601870882631165510396775126850307838505063922101682333806284668762825609556049426829531780/3919363961344261777100658318137884299575193089462944554282218278496298610828757650104922583359642384253066896538203596057302203635134833545580869871333892935330950583664400555463557735723364497947986885146043017010159347046389604172186788902608216894094289769850517098027486468084407618748895626853\", \"34420755849180279597302103726180110022640946692592540634353734157479505420320000324260530767186132260970572450489530034440214259559325114511265075416512316229177952140217732655405289808326341696986755141965043719344169685611217958619102774617224847284122901023774956887687026904767714958090256282893003000752947427857703259704682455375442735857024/8342030311716679826889917494957593165464748884572298173556257652389845294530325764837124998293398445804458613956489096007564811101361266196542129764287084823604897187311540561857741285793447174119667215803837719660675298308873496219385226998078648428368061868944322478384684509466965129972030932418920415308276430355882329457342937549162000252625\", \"345888075261020004071220843714060353763382280664960929903544964118831237876694384053904571498830068831026644303797377762345709976595360421502594656308937649239978525713471393570536680412814805076323426256584504251728507416368609420882442293831684681071553766603478479006495757222912500012444787804577811/83505703731469734628961395063481893801938371516752417759131774530720075262459158384433785006689548434701904106312038822969658455364219435022841597243178757423598248565463985786213156556523685666430799283870548238467817226915680747412191245046634279766450629886904716776719219698922088211154187845632000\", \"1061717830619177527082296723099890392273896386613997004874669053445943252046748251883532634529759169500795452576392700472771365240996842610207274128102329096619028487369622001737128463631016494371635687841733644339636164570819431573829173533941056258744442930643735587780907310433371453992062647737259587563398111688659657406089003293576961475848704/255359631537215747979895955806995352799574790340218399351168178555478073997876110889483456972687438702262017800167048243754141722496276537685853311434069991222324039005160057724073156957530106623908696241268268096879569794431919729620178375212905203484165745866913773304319069321426245521467122472046370356725530914587807274074293673038482666015625\", \"274122944106300296738399632684955400761495830361663966466225652918683099779465438024846903286816813856490888796372134557295699980528187779624865098445756013563535339056233912394908544185885547842235097677765325396255649207317018754967666450708249125316192200151505568416495274671679500594656671785202496/65687592621976546250581560102201535533608158256953087745856906437400149205693427285162333502528793675585022025602144243543064185647792948495372442630333800126269123531636800213405254045262127593759539706750242430153456891792533267948231185296091297979933562727112487057234422009426868531651634706262125\", \"7842680480716516803148821198697967237136721860017131244266974996267074742248599085253569637183007740566941125452215834642683053334607896723447140851344501084122965014242091312411884985569341166545074688756440728922408743841592658677792796881188604773469108807869960161395759837407978596679911066586626885830991556090978327508459276025943279064965688960/1872528612245648675720382138045071131304652050696842872529163720558126655075937845539792108048310219395746259570506175902206215101518698490144716531697689534559827422735649881381597761684154409796315455445459537515308174919488497154409643876490472215352056502193150125644288086294418253309947229151074464928874881827227706992859640236086417889990541889\", \"5300824422251242070074569186825929119848111723012841627275830216301188228660779008353049603527567784119877706984722171178137272986345560485784907345500893648715341273841147320288851034078863843374665850852481747000237834238703248634174397792745914847774297223176674917912406659831206869442510948965571661/1261140476013707338477604677428573831791396352814802149994640617701773078174882455512668089072441176857892331468691160991310474734143842336092636848492066592397892638052212250229129355009939118431643425836944282456647571558383755315238500832868535816144280088644939696339160092963629012001958205063168000\", \"2220223718762215584659309059880106334425515875615107369399767892051551634000614327272260081056973863669004224981561870246078120862256383581012183852291444462730018546753183156982897386563561418424093883164027305254176874653780425452987066512563140531367766900610414277825262239199580925879453806414860409441845631158680721091621460775043562065815179617536/526383206607841251253861841374779803798480623722760367843070466043030228662340154304405180907941079883976168609082254331465595267209149963786388600028701073430773581228212441424400748220833542964971495005714483235359479470452593264280645360131482713147116366500300066771223383007216182988263355451923333319170174755334598973202740108032097242475554128875\", \"521891797109626296684891455959263713257353500867652268541535940159815152120871142196535233326890353914761242025931373491906127275561002910157909306979093246574207104081108188995072105948138299097848175016082947174156278439986705241571619793059501724269644447572323501261424770743329858038040685313621446524/123310256826873923765604825413207481739886340225713108649758575106598510022338480189649787216845041382860899099250547657534972156328080736149239332330143771138115695598493059325064119176038137294863053148618656356436332991079150723235214278848602671333076219529535123842212129829931654967367649078369140625\", \"66086044538329677372986118727999622900471937619891337714357792768200341519193500393739322894033303245376225584865369486696276607060432449792893028061817203932068085863800494054274423512956136695211796751845295921015953538329385253280866669403169919614982155350899648626481405781514434761541281229159396787287553493046927448595964103589100429722948913403008/15562137339474350565671240515273666798063901504051979980452491653975250630723677279081058884163396938548780856293034775459223871281049026140999055923743471466471830572672766633086347312178711643724485955576579988182546105048041649947277672869613992334541438784737993706482731696809943027528882927942967419447250586964258807454003775693567366165507144866375\", \"335377615394100148751647837967017467711612297170079949298328061159559939969228226474615711044891085626519877634842694983669611974807129333052471799687426665556738316626171408219730853872410792831871526174987402129691897433888027072807302411474690613948951673562473758814664346259109886876538510453475290967835/78715592752271462306588358880337347638000605031000575876214116610339827495261512281635361568951675037834544811575026718101166562072917855004822606752296233435017284127594847656529606648345533195437635894948829857913798336356647286032372695130461573940500785137424365840081503133157308796505622439791698116608\", \"20090879701618729602554170716780970848925039917987945471322994867171660307998603515745066411687983450400412739285577269751603921163835619296822801840348319742203974023505186187060251544248644338412667631232247108675504629538319425769464277309915502144443973397371136256151336255138506001292355330875114245901820438821732843540725116728866301271466614762497024/4700223519410528857298732096729483544820841497820611795617923063440946097326817340637303431283005509904481323205480729806879570430868897342398783028649633951362398196137429076844504529051072393709154483678349272930361110568616112723747726853614661953537957117231900032044221535502745676310313569997665352252492568100075191900969170979460298189170486601502625\", \"2904778979985524171206573028445379872240558084236464200857594814631031581387804621371822074061289363372523364167184697785570324832815972970658633551879143187709707164796663015180877412717910872234647704536817108676736661804878068078543241390828229923424191204586313620612539678930999769543756218765870513049986792/677408099044823641581658869221044375312077929976719183424865834811543737800956896926637625166844372424044003929341361734886232742770909683021563822987505236295727478159938135467975522336774471915167606673489722102077041330652185811196423400701795791669780695158730756241178262962515917389382302757366325768069625\", \"31270155809329751863885224732454397292230969002004953832354065319735530624996254695453061851449600345977646455072512400760539747054003851289540339425848681804190284451253462663731135337775088379954403740058084949675460445909826322297817535400604180338201322667139062500269285493417563095365899631360901732684124930296643108551710704785906431324876072470231424/7269578038000504017073007978844992319987411732848567116655821196644382777088703228960020894756722675887473977480537577509061256138261063926845643360849217556370868752909531088361229374467207196928745673402380473721018157327193509586295879051411183657185176812738231456253321187419224704301236205478184115996135940848503487199394612616742961108684539794921875\", \"432538822079707760382094121020421735679118830363764570640789368235407853152380328891350816400541189148550353337874309885334920995713154225799660601389784410911658967499100610376065640785585342035058364676314084595283850213942576431310823836792440218271879354669291052589804956435743500204185107215929849054782893113/100246574739326291035824954677502591279343311051719151327066341370995390423713403739043396503785261917771859220535505691760472395306543276314938287868734009582906895763073519374099272340577921671298878837400921045252035507925021904954445172372479744465666760762909731237634082051855588025732494461939980856983552000\", \"1914333673689206389116942789116917579088664511118582610293383428712902211612554212779880638065888518488492298586641997844141510832940409501694726851666478650414191249534733087933879981733561565249818572204932715347752949087800778646065986244657260832234479202201129845117955957242616947361016603702640821256099895469088229339240402478576285854783063612307200/442333801076281757298117784528962837115323835962460661601905131618341609371649347131724700192551574625400701487125984359494804828935577124602622582550626336986871791407398609915208114339012374456785705161994343348351473385887949809051796407340988735853810174589261300681030826392672282630613354461927208579993042968520650313621522933214063366558703422757071\", \"5704691626402072213006354545292364761246893919997531024861408248746241619817955824682639582830486790618668221530365426203424888737658778881721063941495350237419723855000515747725926735319471480027293210991869255971365522170749568996651406002311020883635577590045650037569906001924971041810547543163363976464780729932/1314240362076792592671773873754757443276256223533339004339330559325754574023619698171225777585408160438834449576526997055649849875516310105297894855264038450585295422343454458568152668980131977005808840141079502436391909349182185596381509091427752151860204235071122788499996991078935216686010888734471173124487937875\", \"451219364084386208718456142329444023337343409261545444643031014769484085278440612677813682892926852469540118625738238137458321112005189595703619178533263706811689687213128887082197330137502064260105387500552856851972124172206996205919556553246133218441769325133725631665593372188755090094541462474970525820334385058333756591222492801647110594428922046641945259392/103648250172203340865458115839764297558925693061798169434516001775068769911768281084188883278842546791612199025413573394167639925287068809631958006622842716869211374513136766899877504136929177267362862319748507372147243911522667591375015611312165464514308451222180272935398828092646393830572838772085366567154646425598388620105539619174837489536378605144891769625\", \"1591076564577634575701791393842535460875733974464805197283632670013516183281542903377750304419996681222758401497321278555686661981435637461350320471258386388843198706277657208526372100698700615835733712519332548607115875288787602084336341594576426630670911478276101702119972195558314357975365863803265163991961173/364433108410193393847203348728981296285742202617988970384277162225847256295865554341611171460436362780497179090329831885853324392923449579538286804729856000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"5307507148709435807261229345132535134848030343901300324623409721698217134932866488937772986386501538026693956121121771089740095760486362654754229904633476234090792827930433598453200536551779789049352131005222659995845427680686677324963223653949277037520711609343166926627713758990384011274777087968799793410506391884872456420041494598273703914689586637995139580794368/1212244290381524115082005575105703496583315188540177702780216570265159923654197746388568151706509243638302707511238539845531608313334248788980188054651601536067740709977678222790481348003085034888244447626347312094586389347535167903408519024105748523384932942441843118813819781347089702286481924493361058339731949844620763272778960860509570622673048786968660129650125\", \"3046577098843580578619955603029073328361298436129791931304665777036152915858575282362742008136721284817899542475666054101957899858138590963789072530710775790433466847100422875906866496318804986202089528198912098377828580031852152997907433335176267300286466072997014023120087988748396598176622765923059385876855303940720/693911859077752895978833241338902695755528613729508555938416419864772385336777924892434701804078893822446727762077537955240605927550548046309823051841326355655848406646248595628715185413852040295631448250459076043816328082561248420925930431777502622148019371383254316636979070731427737764160145097293260938978413488819\", \"155310926743873343426312607182060072939030765297630534544899230213054714482456829198485999782086944271490229412707980997432528653509945301574794242118433868747172279224118534460563400440670015323324602117517342201640016853927923976796453577048995243600967202462466681112804476672348206491490513419336308575442086511015101999847896197546900512764233674747415844045184/35278162986589659300679088538176070649273991865663041616088851923111175518405117391134863644540911005782372831496121355954470744169969774540892096320978686548284501139861783292226140413769665461494668479430833892857992401391262903582109993838728281915806394747833588629467613308837196269424421131934859079260185052081536487462257809987002198437182539441349474426375\", \"46729591025621874782758519074451728476386657576036360734358719976400940301493939192083339293779149127132651616972817165172116269307276487158069293114860391502484125554406945249728802484128756924044633825692779783425628292959170597009935305429239702926898931975023598456207165067568919757902764815108751735753431153581849/10585868084079030838651390738371141142245086465033459640458366146849314274285871375459898014414833295804139979016362796357043372316321872357817727821559232353993714062535883074661734509440994664726425399880995133711038483607773782532430879196405793694658185175583691180757783597895616920432527125993118171361116684288000\", \"3736372348124144720852190769710129461145889011598636925228657393934132828633132357232883470466940330848177425542748100211498184494252714616379450272611850068867816250209867530921278645286769418080018709947826876461419654782341309127709703626401211996255743831998918894661053669189312375159058718767082163156988766821194002596331826150321864927832618126580509732359424/844176851007504003627016945212023239308348428094023437269532743221937069345682900884618378849283002998220513307273333096775669556093005637615012750733216460458689282791632437851364674879152695438589692227159038555722539345972833161146108367329370564838671791241431125003401861887477969954740544092178721327724620450947646209914621007186497081420384347438812255859375\", \"1258774755828991281578968023382624723772927642002016270484090409043454336040857926581316994594109169123354553321469500848146015719851609220423736153365139804086413284787598253618361769125996755159571523632747129480387254164008968993734442164892486441152227433281625391753702577143985047832519062595123255569172968685060844/283659859661671181526547833415653453506477950678651675193210969173130116121017723360258249430884213011988678011357458727603413521688184521573094783291496368005697481333739504490647194454695504722542014845706216224432373442438242355188461951883454664693262684873988061018976711201351382163527093784753398257094429403691625\", \"84932063355292829988908961192574710493098897148701473172754949846455626381329456661808566365329266898990829247446356970454502007127269708487563279536825277374133681167235811080298134899629580318813382668399644553111080625918213250223197440426147821225593304993621451053135332451997633132772608233430131400186571793929377129211228689703376067763625568623535588709576320/19089978133324852910950469658566458037096027722326716800113107848115231563787455584278193954518442601810776347091253561956877155673550458955562102935555510392954425196165785410319126098393353878286400877305164869548380670204577544630353859009177051698096136470072137579698473017257397949994722015089768745013713383769765609613514021200888647472804720456494757423299627\", \"802638881530832431828249604040579750916118423833791608589560402449036920165704012070349537114920882938466635598602387718300074733476150548724726460209016834416094317724261857969955414000155807312852092720310159572547644569797512233899495300028159721348599816083166712365215075728968005941610056018023633235372936903015771583/179951197386119079732438617407921535065140503043429174394605652913879982486051627760652197484142547447000508189455126493868229565647284332735552462525598465192073558793335913005459266977086104359621022691931002488052727597513413492393525660272900161375677499228252863529934576881596384036401784035248649026076581302370304000\", \"25208742399375362881099811032135575360109715964024747212026245529087599633280142314962581193303683759605084995818253124445773115574470717199218828756449187055537877478033129862600982068782249943150019637186466260707552416433010545437321814115233841687700051830170191107127799355485920046505591193770164750886037885397478191534797655616745528343172318318678405576430544896/5637713398995569614196397857525646325234056219513202928587580534159596897880731043336790273040813044077153051260989730372846713618900145444802234629922717464041261370803598799826604841654608724727320798324006129524610666235998113655193642594744544226880944882342204407750193512869672849910003246504052298022468012594459974209940607450480609190841893267203392880360823875\", \"732332637178584560220688900268566130246820235956768724845747830959547501950765063982943061181526237061809052444110437930100210105274824607344902764184151030827266142225894655531497849161692760385938786736436977268616029862577293984376170905024712952813234949508186306774257035535805330366742322777611063402455261391021097128/163377988152179636922409938163005948596822656868040662831003991395905185823836089887990201522673196719628247106777881741843786365701135555917263285268753605514812568258179391272113405920369587922702002732667842511108732068683407168090725712401954314293193572654347237716691784386690948494003094992876867763698101043701171875\", \"22391374854299462107923583267570593886002658786775211597896252879708753450794332301142909715845151746786016535157797023153041007263258732991465037648536702217273897876864351559736449481285518249846264600935543582562018874574655740660800634883403597181876364712521253650744197321080655028374602772696770227741610874399454362583980465225235674816785988164157351243193265401728/4983275997188967758382167867656806681565521964135131710678447245984239733544941881418957694612909599261843693554043504855207170782744518943778096768859337980470219783210191765678908537645270392500777411134164918803949155037581108678968701961544979451081836872425574123683574475790997414488641534074873248802450108535183413970057319247033379016606809226547805269752123746375\", \"21252344995592269775107236774689012760750850598567799560343535731251766780016530978663079386453430272698006977668063208502408607227544322945446079708000304179073184745623740466334127867464883762843346619853325415963062181018736410570113171387891518398846617197097407612852037905687899800932343156979591740310928257766081697645/4718515378484509142377558412184183991357747235892194234377932213613746008373918923611236346330189287336493794499188640380975364991548794341177060325509698404571318037298112293926833877103554546466055612498927474225619680186119313129604319096374924037870803554153458104225741255753314955115645304948564151765516183663634546688\", \"76703085666560609319365659209445044957052359500745196718269665234646121134787807938680787341023203786904308047981099228357850016602203539979246579454229078497537148799349353250167621935384193502383187510928609818011142642954550330069991570983902841318203794113898871515702445720207144863877026526025447819537396146822201819435536435835285098485990260677737192230985069824/16989892821104122916312992616665764943723222199277412857053896319814438961475117951904867066845412639236790762432996309717924037467863024360211163971190006272168845197000304328480920483651558672879967350982199768255256753110375467976246339260326422891913564151453729285191351273342206198366624882195135056176502724912849575385576554208844814085228696838834665339811027625\", \"40153831166521391225489894857551838468150576827129133168972859441122728710165233865309084872159583787083130713473702296122465319276461991457173085312407612757280915853584698420083436946976844240063731333638150599017886937783470942007376523947840104246927580254612991191040951001539641947153847776050138532219595746056076776809812/8873576113581065493273519627544307418139908640325227196912114520903505426722086265723900326735989771660987609604507503750212298754414472822477243293638486047313990878348820573874809636084574108909615044524663712495422565151340037564156235745628465172219286664653343193162657374410926171153516871765680561505768223660055617934625\", \"200736374277835272485186523480177159453030082779872429648449412313247640312479214261681899286513818912991945046297334418102711629933437654377760028476767482162031641781499114859553677502002901248124750539270235098492377826240319766677856465093871367817683734079621359186477306173620331748496369122143019303740252461824523590096923561928354020960176605008889579578495073283712/44259440065125442964014453739391594153290923937737136823355312892557975399035370631521014554980129291582486968083228888083079118116286312583989433037097397252506140224404130371160608365777625538148303917306340620019882928744151294738308047800711028158277500317134537540772759486365658024194428796846364486187105343266398338060080611643110071184992193593643605709075927734375\", \"488459049325494693259159444507437983381645757291858092983371672334043029615965882574409808932509285079401239403272414271652617474184321852388397021836909585659327974611273820676128650810907598106588433939541654215766888212287311943387232664417347883717203611092450971786083806323404432266197250919880225892099146722474124874256523/107455855466267410923480140898552598306699341366032095904938430084768624148829473848763761936703072253841751966906142283640379336131083461646777390874405323298406517250231389493084918065243079819898691146841695350589992171102939046740169198394671965069747042621265775948217054519855346617967866614303497258042439052681849864192000\", \"8430374068596413768975326329313648683222744787097373111477788794692418932056901235174019333392845529821722488982447683794746518712070635063397464904489452840169472596494433874412726723065560358405027764015273789053064830528919091414531400589850704395887250756457780868677553068164933299802944396576360356896758745030955907258232257358056931680617626606715393885378887657377280/1850480358582748412767893656294669486390769246349349706200869446679212812264400876685764762211659843658541567071977813110496329850010288179702589501255367345935389050373021591572539260951149696801665953123597521983257852207280970577287472932167362521740230973547070264273850381896786822127290397075758780174083415923482640313277341120938690594859118603017930500014640169211239\", \"58273615882491925540881784328370957720539797010816130007322211512070634295154626813477498607761260613353633996451797686143131893884559909668805628269959901044961666535533876340116728982072626875010391195372759135469446048394835148654407846242721443845351855234347422256700864370273092971804207514736924787577569355949601385705517152/12763172138328432984573837529764902730448666594097466544652830703737195804747682450548488162227364538052585484418491914323658215406327363805353540266048943197822838925184942600367647278764952826664684839953902567694832690683467635727409976388280092262839126779730168889686628630302519063225007497707028600865624133968363921915016625\", \"2685278694947152969468407055109959900160804835228466214479525891103128459065131221736713585038130737099067040196326815283171857977706979990467444622550497565521863441617001097354649972660183038850033950647594754644997436624623325003537308428828750008305464174443210079059253920383411910911594636045517662796811001285984447671371943267419151220518726940455756833040934506414133888/586864816044968996825907488721678304211296267371936463272955488077666796280028127333229453342355554450708284934221461946991556216095213627059047984199091625921432110913096253352065238765240063555347292393427726758010888546427415276046238297382474708612526770055488323003698641493939145624184943388159614111350839555141202024991876221874110644879676602924730506882384603409121625\", \"27700345710264347957758638741952394530538598225904772664391173119594616680996031886665218221392453628824570256438960349220263575741495285780845399187013582169907518462437966962923592601721119258663490655013419675469864809004562272799012227293974254329929404036071055528766397079743200179924243479370594973626764330855493789112414191/6040997839051213541001279276287478343874107660287651711609067205111574718442229224212245187655300348484144001298428958025052162253854676210451657425437588244676589965820312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"80160269787574270953020489212619791839643207793889009503234879683494928396231769167082355143564723274576166638869430572977442020236299319718643894871736539109822173538266278165276591962215927816541165548699380129014840956895931285215480350321259054359835472320394089646764361802445068798451796525897304221529850133401768027469126408090577121172238802281079916258951770135485696/17444957084936455555074876721808241311651668802091828589911310253709517226715880722948267977560381436307152342821304525073651379763144281678911047276389231713860392794975453518107055568765009486973017341479560154792340888780337029481646046233967923289468141293699236815196553819373828280398488966665994092877680860643266914861837639322607761804740256920429518434353839878280875\", \"2352816897072623416220002134476921108405735955266703519252095150412419264317091785317803024028565851487861978477208755211589867803009700996828082850796103789009194767813611798769297617674631277847910238088040257037678126316866517601388289837575778165301828137259948173292658462765645645868094197736382683775415645307647043205988394700/510973411316690313485681833991645423802776865720580280058344111363363091616558230182669376841383375321912553771027107891991318313938505988903735114191313214327683449514676737796942389784957658395806951715454372568523597420866050825822028817422805046287798054682484158011143949412956697442991898914560191411624040490122951328364833797\", \"6403295584873165688372907494046202150046769667837790834896334486679541887567517050446119511695248926941383207478170182650927368177009669717288184903306689332746127845953193587519575304974203099873732502605739219028995266139383163062837007982999189114810534856227848568800302527760100163350814120545587074865568436789021082619398126713943637898657861949091545516403987546145915409024/1387794272010111535893205703999712437783041553900341112488641528986385462810448493444968969845352401058333929711237978223214186693177251566069419805757440174840170213159651962686467523533938145629444468366235554597245713128812532716616087753947246800626006504878203666972651384731498770435755225220796872155249202960801768048854869001310722927230237083418017482134588865244642658875\", \"82993247683514419570466529457059660634483860665557779709153549045427987672829778520201315148149878525274005978368939092115193636113741972236218502664881450367443614971109677363668874484696543982239492409231870942414193419634675024621942196087473557914167832058111113476295926250739099284241826553737074679953551191767148712684157318697/17950946423927357725787689855263532224005643859095168852729513034456208872420513601894508438640531171097082516559962755244698695622824386001219435651555513795509616906355363573638916895074349491513539093024980575852693293474288638209680085037286354050958859425647536735341886663074581909148323105020337857959651624760873736590065664000\", \"584891611376763781852144397260140844977346305541197362434227194779766612939978629636198589818106137319267243431810481928639442343946346034433828599323416877248326356345631611148749005937144684862502198147087702668524450709118588741606955966569427636630159793409544653944608958808602551061186799401212712216156799273254257486955348236914237644151956226336750212957092204830385441792/126256710861549838395499078249922986417488985866522660521294610280820007499099176190820291214370699289977888813109514854178180265382471972583921477022411657285850911270389720508719377071949050253246021921916685716353393018411683757067093259101151481189635423399611625009617884983318141463140199839724797412514785751549277231259345923662499623640886881048572831787168979644775390625\", \"4743054867460856425399742072925732465660626340183690464743217147109403130730445842673866624947360862438925194786600531200056131309608642363389833474026007798643235346104937733349791667694862514383520689594596660275306247615314272223660862212527346572811422915223417783887717426641317921972456913534338708745549252254865615725859881457906376/1021840037832289788284691535543138164288462770384961802287250236519983887262771944174557087207566030730743075334169628971336358708580124427857321953981475719503574867471090607795242192417162791762511940848493176847925838738242153177311649130718886794249673254183907621449520415060660496225939963471753122766421338241291756892571824984344625\", \"3784664074155769467702999785016514468281913375341134899878893061325465790589101335015569840325786070795267055386681356241209412947116340524588831510768864231937929260236754881829005065056310226407358204278658699999612596866156294195316867934035877283950841910726224355461522065773816109849107487214275801829843762482082803559183694631856772777313673086715631547326400170962722842240/813783281473223559981291694175087508812520505931454895884442580280342455516154674683217348039336712901850738745276445107477919518905155156380620466135946654952837573797479076027688866326359448543065305071605591497778941561986579230698384305536224430794233462949056326864499827444363206162251104552740175503996670997705423888382328014210171324376593090187604268086334796245552762333\", \"1946671258536842642381655747294621776070051525209940130115769153666368932042152311477746728678182920842238801763565726086459485050237860693394471644023999467670017470376746609892484192072297938254898880354014176373253875722410186683852253828299669530022166361304397631667133689128358365296701757782382475692465977794960109690362462330857/417774039698408581013003883929127512062321623871486379101498968145670269174833505080260389860863417408848209525427705249526516766731427603641806256289098209429110794311660844125377702016056984573671024035213045475132134896835814746425864304907974005950155657789157496389234919107772201305672421982198984613601511388413381215220924416000\", \"328578487723377153600821813410631465225159589727320893988991729306688663770697528156625398176929288628930496338036815910669579019719633124832162035588583242320537435554101841406566009219059042888412893352417446437227440076869427577701706713564212185163005644118869496869980925214424591264870388237079776503547314587137721633918824664946974571838634860386893404364499977966899068777016064/70382695927096628347637455030970644630942872888311870124896575877585692281624151103204551947776906510366521972834357031777287506848887607457751667816514216907338309372900327919413372044625602555866294337672022362865161523684052940126509854895320132828009551012639156341878073682501185688461720664801829933689280752623773789373199210473995823367199793407048741191786377993390965297664875\", \"2617201476921368517857942326432090876874414269689140439151907982631768946799200744678055980827789859579196832718849393046147656447672531861353456343821196812881882023188898815179947651274131166835133965629115749368441605680383605331300030886676081418867305170012032824011912531673468215561506423833911621270680104083533917562622600478548/559567121085534865189976875600841717161617153776904752351231210970240323460800785728739412474960421770806162360125774000625035522428160837855944215417821324758873127567654244465281354654299068546570789547691342609793050301258532586131013585959164719533123826201937801986942606844854123769532447570107525081084531848318874835968017578125\", \"636225736038986537559880265988431731529837451289737542395494683393492040808565905376235074534207026537145408562785279823547657299565440309510931336394031904920056464959974743525662459433889398003683078967642651812081450227654478095420306880762753401111260630654049389197602389949892636943971690212484981672010398108426002137114819838399222096538921225458913266993881960732663394566024064/135776510176793971074115131648637508758953050390591773574951317807919051619690313331192027871176160424663811116849856489187562728496099757910540362703888937768555824513740118941387831822900198029266206334350448626733139136083404404120210893986654422850183837974770675600952078956326317698998103770833069712616832650406225828969036781514645731022616236082175582937900731419575337473384125\", \"266695771933124633677367149389643417608461366874310588884377151539325854547826373711099517873721616543570605935954334944030816383858485296542260152894035979141266909050267414072982042090341712035518685997484257326212454742816979806460287972757626105526907510197321350895873473656215941034605746494172316089636216915825022339855304925515685/56811706665210352283362623728191218698295056176625217939528332247537278605113496147630185544004654583441448319260578659922931798845493756189402805173037491645434052737405379674607517658118427614090338938517963215812444779184193933749520313676564187507594274551791388039139409235056119788261689087831209441779870873305232021728002651979776\", \"3511806683161697708497547617957719390189982761002154386881580160856792742952365159764830433511949678304281539875366378131195670004345568047690216126001067194904446295336734931691743477531830892015690816210752795806120303198745685394015161323982229908105397857791180342330098240702332072396030780386362735967021055250450666535422528637737695053315137238368787607412459874094164027214953984/746741569878639983491390741637813989978804202898438708743258000150996080386381281307609038830698579358879333079215327202911977568726258527646560497079622703052765164031089590965199628534477381843079892123440214378949632707668935001371616475282883095939750704292616758568964786737752325652839226013335092148777788733453702438432279149298482004122593243860829060557386699231448957232420125\", \"499543951252504651717279461487337168721376180441322735807713499521878076780205427598086756686061009718016175215146305489885835839673419698751530207404115002383180054704927695269921072232395828258826213554806570423602966743337801741633869267620843626804016742412046844770601322513184123515405692795346790813502805238635003099976693786012816/106032986203682550514602969462803214831559442358811656484036951559991322084935692953211120289352600484987931812632505499612220494311324679562152078883141464406938524087376964935494245010636163705698220308243980789514815579319533341929989455211613890905485981353837321342730307819060825125980500975023479813757024395422041501208805339176375\", \"8540849722242122835873311629952985285477986765819584558233324868363310302206006773828897816547299245727087876984857726652932481899766510637403577175623031467933486823994040576431755172220921921877192006685053572215922347418846423419683723609799729359551828522978186208983138345476801247634773975311405913274552616037005854836040162212761099347518242200807692224460514057530656658616850816/1809694575992816440924165741094996511361288430727981159314194000585536832192004274726651828760263522962868944612215633976203596150606503849595633388319338251977160257979846235995654357082321611719654136058257458753105122024859078420173515189641515736029725847315662215778251370398007468665986604529263071981040014321717598469319370651877296085250322599247141397427185438573360443115234375\", \"51377057693118720457387330519321684810411289582445982078756989158447711080414032055843805733348558621949380554029375294451303430269197115810494758213980833379214402452992657502777067850631862453239349835215260705131864911194740832694498014048717871429797341104227759557199716944554347879767916801106279081864127192611546757627038037780244683/10867246748205139797826516105458406878398263495890048637741584969144406206902037615496936724683237700974333817527350121106320991054058406504571347680049945745432432384570515723033245430148177097144850158758462968940525568041926860856763884474605057056550146491001458649244094211354153171337463406192651150028767064600270112838159624568832000\", \"2517199821548153657910904242290029026229621935918771922146425373057248090467388430999870036608278542449661971830076845113363443421757278612394167195431759807908413353743377586893872930828548256216510734912027450642648789925142482023713336937258932978503310551945630359646777080073329099268529064437120002567758664419443374110941824106727218341795100740316967386497091058915066147604481280/531524260324016969370728057738851340792702640911631807178654723224511108065633433027773388768889035083734041289308124943130099580765995149865288328550751289346866467755881013217287175392101334538392596956248952430438673292186779006015549928829953979591250274457658042926539541422697852390294886719770034058916886894408015624288115732154492554105512936468520265305162358665491880968652687\", \"937159485027553069020805864547349554547661693803137696125140510201297417077233061462068930061915381468160677500445535971818609631674361074587732183297775728389124966713749450996643183965795829780345678634356741756033039293590264355732129789110416943789326482663579413229893878422643110852069225671783017610387570935863228248464396615988222968188/197552642195166614912991396771845374656891854357948006221100585931656016640982345159207601253599235265353060942313995345483862152489766993442419668492877390774016299878943454249209917002169480134131612530977452579520564400124908392339263545911443803619972765231094502745980083350567509014991735227390978850048088378721210219321877150756855372125\", \"5119346675109082499980756672052066247676641510661024682574296075659671743397880591881419516307292610449161239233139088348510165442597278965718490070997173182184417648987611422446347235659085092530927312760229499083348217392125906851921500360553758600756698605047197529446594606336369425040236883171542367713951500007600355406492128741649090501989105696576697387613035366083536629358444229248/1077349190930018641197987339365056771667455373500846354778079878558146320193384166982231171317419356136237346389570422332278447217033773023556383420372685049620361481309067017697564760747047839930422553324681218253359586320952896352245366885171583221864112040038531116947187482413031483309534553461613717398523132176948321964066833901215878133594739833910960843185464241840039390204295097875\", \"58469980853327028628854378052548435225264353747414624620847476036979290604604988637469977624105451959796142112200285366199247075503424204044884512269071061176877225315884188402954249683107639777479663275428465242905314418930053869461904934138752031124685541853599407727446896558064252696813370692668496452783003306386669962110734257851955001481/12284458784412533668960387046583440199646081362484321078872891438551639470826582933879934711861551014258493898870867541349962531447724393381011633785884743889445407749238183080941846528000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"632694338036291086868292541736272151517212971647680989553388199374739841494700315711180961760384484042159533979873604395621016272772109619401112452105475906812313548587880899058905419220497456502543971131226430775692744506047039958551641270070996110661036371362526401525207493270590999387476275629412687473362310414634469788979236895300129227082421021999210841384596617452097273320509348159488/132710874087075221626157136110978536488168313127228703025408943153782802265472978945703742152954881438058373686972477195846162708986982742647038014147903817539418442869011995988024638278746664230046452545499722614320284478925059527086663455478374200352375121910000967044366831275681254530914306064535110528723482282501358749001657608122307686482720926189537227492041135055090784059994118192625\", \"2022422468242151190347511883185841333968390991430363660248687284021524206079162212007263606819387821055183192871951076644707111802972354128011904720586729919826758651167984507804867954970064938022106484656560866447290934136610214175516487579122328055482392137619829739560923807880779865442016530712986750711199998190148885726144596663143651240/423528009127070458603837580844559347493775236970253513203186912091140251858605354218715508091394564000304400858761758838182654201653901408046974668599216804223721114331085507752600832390227068985693006017591304916519540245902645712532993889000048992026931475754508248265356181099817467608863068068953756055334213584649136541490530849577363647\", \"150542201776735231618709653388506394887777837646651406023174643241783006776019388336318216053045300417086929061565868663031237502137150880313922488106751241006715449458736723129545400133450376339156062387859536289694727635468338235084533552501618659272047966040838509286942825414463511175531001410923014751124732748099355476332649458471135027773371541572374016038525336728276024676601778299264/31475618522527975728853391146702172347290819252268551219771201846701658848754300838383637247014705706066050673096278897933831272607774110183488615338021656923433335661890414740664480671162459271850877855521869741833030384682549648626038314686632195158507693321505500888988183270276134667071014075017317692121986144742473139078857816578133693776368882596780120407949076129685719314703426278875\", \"162664351499283182546788129866259011542529017155637405328005084357078048074065548349602626724265307733005745244338982661090506394708170105916177679714664432754153795772811389612700051002336719842784098507498286260450939289109123759859710248621544296008356071415713931721102824434964336667980062728653562369697289761913925215639430496443820411811651/33956433298509232632327667206936379248172049619640091186698677954874297837764235300806836350019565970550533206216590639008637925266405524715041372407701947953283803854153876844320283735281209725651036513491246238622967031979233265136280687995181375582844780830517825595245506321879177965868747546127685256867456319112247572348416655367667187712000\", \"27228583713734183629451808889147559240254570554044667607519238865891084165382075658707675405673276615039702916443152954157535195508033284355580742761569101934821088036084480297442018005972653124248838420021440899368869744141698556359295489470499243402799483082406238128875386939389123336303631993557844565927960009744780823166462314116039469622216263221278402673028225214534859076857413557466368/5675134787340359276387085910732530678163604187009567576895331134521132071092293139167824957253050637085885426100206370974479279292804959049999647539684766632278449357893560561608633329561385765035738071726214510832066885156767060324427330401967034889966727638276371320401053302413136551142103678412692111973028587922399670456670380189570979581674699102934733563330382821732200682163238525390625\", \"1340937726818688387636018677960518622106989311577445614347061615417831160296369500704524022869612973331444242000788110133157689786976834913297544087249593601420972111789552905846168933014570399562460789075871112224533723259660967481288525220689577290386781169316008987012566216235876842757183233207943071523447855623001920854571597886491163165150556/279054368814522483241446594911968519760869180429079780837994812436395792594449929617293503975169489945136244602350941695478861584261665582123038340824700224583170270427163469762789603657025958695551448477050958557681299495041994050951692916032501884523150972841782658389836059236040091605838583126400660344344601879969354053137568588338096589095875\", \"8910951660339249479517731530773509037034977353457185453617569046885132434552771722727442649095007828468878374139001808825741829728375370140505088133244952288239619141544661695065318568074863317054989982620944602245967155400712702259180443238473885690297281525960618905625084639870407113029712510345262279507055197024677292523214467306898573956604928730377318210588837126450942086527893437954864000/1851573255256476362977604759655284263358595254392797078730401113550522214182030016660458780180636930591149034499142464357511158868625309442843792189394292787657774627425816694628839987456477799348874853555586931850788645677998004186437300173080088839930384424797706381282430208961565555953254145002318893188197561315855286173276564036402546798318351229978103276843822345004757661005876638005274037\", \"84997663352987536417038496128111159210386455419431137931308301989414462311135708114322046234708053448098538629166672456703651524480738219822858469100454933583774404032968304328859365484249897913676382909050450855222567147661842184538302991526635974158862033287154321908483007506326807469239745851379559259262425675035790574846229470041596801343087041/17634687575122715507915388096857069366146981156897230620371714518707518105157483283253374797127075689236298114335734874553183291806268149747826050838089931351158483980735336772879045027213982661634865556129548356487722537193914986994283729746578044621115589195066212043187229606921062007047940293972381121200723292297716621231320254309060321476608000\", \"1648849257486312935416274009474520589799750757877252390543329851029437452988499485179026845292068377957697884739052491455807688429630524210823560524122596610276957537756142278585091315141096146341773982302888007751632401090642472506538817998043326415693840862261701364114923327286462650797963969289743571514890723145251583881752876340628073395708716735192690808352188867334842743895738955762067968/341580411902962140529547622267381834425264893226447658723654120920549166416114849731588552578626041597847002946105459812230979900480135423787717825697955152193526724029890829615845314765605770060975538542976523177976182401820926854406945392167140347444433885786340415437006775075196031433365827874254477351374236932624514469241634422312990555534789607377023339236417434574755566856489013828206625\", \"4899626659231633406569362199187192352933567344960498139854460545644210119722856870634652562532083546344965166340063297647520613455037240144734014575196764021102614748218834054157165781057405100578668000290493431869797883155764963238760612333048336953434663867580862692267574574465371615023999531030446250351305046572267686566999209229202587258144318592/1013522377571209303732207048597964555261512342860326827024786500686692475697570284120359840724596444209277948648863014479460188496587721578075151793081823795161404110811480269106846359964436993190293615381593756076515012514100289406862487971220020752628653845345780766244842386136740768474703009091552043945843632199999007070800871588289737701416015625\", \"362903847358088423032098939589019598036593525722040887883164115981767777873860799955715587436566233010543937498922435963385091400670303956612881974450548904906949032005878241638546734597308786514086678561900713741746905742866635779432216761799371793260025549698865319760786921444505323758235164807966277024031605673481480590193724980659448692487108892154809490199414370023696404259691299614147712/74959603173756091922435708504751461448318819548943586676159545028063979695880930926805574951275602951047845904770828900645717477098988124553474616764040938121171776556999069351772286262529729056288451037717198273521810585868307402693261479298923209587143468206907278220909447483738730657438961435587752873879244136801168836767273934997417156543866722171766794171623224855358640156858606843576125\", \"8521348154958613550574095745596657249924328336262127244827955886474742319277424381360677655239017583606851483318951440691757875270001283229585075137091617073509041644097526047127618954293881264113694362598157456878784814696577083997902588926421675843291157049153701100218784481406086810264243143337016042301806376864424632290226377881206765051896745/1757584673254145109614914862134217345456065873908262753169404848658913774363650863904627183104777337461445063704655164325930891269843669860409763569362863600932267319335889540453302785099532688264425988677082044905948179153286276609910158854349711054144968131934713419772852663860893241364433872853338630216232313607969790083448433666334742108176384\", \"1802461420562646993856730082999823508145602238125054717836501201545920604020389361370931345491160549787411668288359013059160331370751496329806488246135100776263777863399096485894306306621852596694700845918608199329091852956315870664531614358379176680326508877329862713333336188556181470928613423972314983964578645688876556351433429494008513812136152576866650152623510296911708111085518974142728903424/371238439252064016214448115231139360835481920731625321084601566992497057371416121407293286027832357816257507287295719261141426130159269433199862002841433235955835172774430690352481806933860390015899973299268361513643524088242973968537595085600335021120523852420135081643310663869327371821064862449426404044951571585406092523478861879148545678639697679215289523234342337347529225543852787599016265125\", \"88795280670112240977945082069219541902481768504536167808816453021962616596410396813316064685579412429940019071114917828928080181638058444302439626425155946562362550070187433083541414569447612195370911498321149367969974762244140788494955146280201020345849385865084095189982291190135293114489407801749533448443222584092575861096946605418438181411489276/18262596223069549313969288693970246663726147886364354584825624311486557881239003216971630599389642752648815377795018130449384513824927138566203714891090017787258920529990523519479383032564209629983810866231367438270859421572641494420831435563580050954867101292568399107965982704216434467243223964964535464624988344342084084237484262612100980519602625\", \"752911409358158070688133336918078236438086521781731735123294741731669530734909563155732092406099003582749182967246236657021875488130304108082404134004381196925042617909108654109138702993903561036987511410396567636331465803949049946947888490287210013788802287247422993384874670368649616782837096233384279817294778916419067404863458318451722971117669642134894906235066332205740872938406767767019265664/154635332883086377656813458754577288834216641577439356891585125701020579768315520324293435008561626926046988056302745604248220408154454267643222328696606367409715369481567213640103076112146615938180089303294709009813772509602954514391675152597458428326644988225555987883250642389550531163153338541870029415077982539614784206119074702022117790679351778993541426110436276530890609137713909149169921875\", \"15286089077439918584953144558775765002061832952090847117286473868694909713791678395221438112006475047633028543501632631679316850512797978594476229228325228403849089079675681042224057234415951253954044235099139983386056610384489202589484570852048157272551098909455253037561994944665563291526597323199530997923272894119350512727802414680772513760081360291/3135161418037836259442831302977219750614726139657718770206960776514822107155928800694375522572523712277389679035632531727155957120566617736817225541673148354829212969778664144907503411589126111888917929495106029890532891919001138770210977012708107496187227751496980000137223047079127096028939624830654227758737339725345681745847598157538483308068864000\", \"17723482381737693269787076798246423310802126092500438681864673375704464394105734049099094818738115345706100191580982712146882034618103161268453808819471603805345990162762722549964406042295355916458624836894291267553138041035528315839108252422478610879301656207772491548742981990469454529537049123948604931661837539943536878260665617524824604291547373872716194154198824107266275716083848262625068958720/3630091565725887087605600771358216927099748013831912080380983545872077197366172619225751217619097657405660172801849926220948413919823038425519006413005998509677472226729295278652284861834178791332630676772284971762683579047508016687969040658592436230062049051143001484384767836353233324570686249824980508520186643477313941054900197268584495128610811273834192099099592687485176400539748616360799518357\", \"39160514032490258389003214587901781721548011632821053230881239001436341012396166857515197251499460842954863342641015306304854226194551189224721257664420778416733889030680295206179109679627522113592373938602737416822981698362363553492610842201005420727750505681358595340127099855823746410663750133019743170700888375554918213182862789028531284364877435896/8009919337434786244380818390213546866794958389603666737562053423775386173149395943310276429895991903753441584557917565343673605019989336264748588735390182130334278887642569515202100870042209261561001627386525182096090194076839370589780431326097965428311786635366819094633651297179987340498215947144870164066409654464551017761658775207392803825996394875\", \"18188388167811476762477659006849121912679763597132233588170406666718758511478154418948855160838212151370453213943784067796172102916618102024199200086478021533171984254799008541948973652219533819511807681148179806051835318645591102296256347927018942348574774821478499092054497390790734798143983945096982240517058861467440217558586822663985584775920517755909444876443211404222400335500608733284461685888/3715278241795087610941547133490827711133909145414878217965273061493740719983191775105550559905283733134189195190321643965858771461560130864714477448011225816210219450040558581571206711791272284197614810026220745160693898421068168630870850392739817340370146186703867097982858560347971281142766235850971837330222970900661653800041795020382847588362774677568059355238174402415384788280852059532958121625\", \"46353430636874284402376008361176880938798775506236714098123916668545331718677407145199311191108199195405139575147933283523305343027297808443653460575141799729554209181454676876263582758919969948546918471128299522715691694855904535448703118221685887195383025133924852224568922999317583667985459047407473419196367812949579858081181660610155317911318937349/9455890179897829052705408931064120820559254220394152447502395298827357144081378513080398823188243663943177539817982481713456798757563952162598464929784370305696420245648035222083207596797327498500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"13607414211126412689435920170832779523235279308039712294681570127241403406455725064605210473923965685858012114332021572088551127762628892611459785625407107300355287623761046438724706918300976102581928643740596336865698485838431972050267114940079353996100620311097561405192365496385584164725035842307146351211183443267583872067352881387294766804298681841402861626441205037637282007810811602289501477350144/2772205947240095684743358245950494400934136973845543049938212403703005150954425087866758842625041409060217562878157900197951382737615822655863548356735553650755342108183641353142157728364469706919993519071329069805875834057743793434164720370026073143626055293058601124362130539040404491770346043977106988100969901297669523170508321703496903672333781306743488573086901583022550356345156457496396749797875\", \"23264350093315690507131500726914401771633259602904894387312742275462601574788485574913195967854009886824436237740789910851843045306673524324611130536719802717912615609109285261163220007241492964833933975789257681755002054890453747803418465119567389315754801791950553304034666399677630030683759466627797123971742061866928213780452325847848901682792886840980/4733430508316851445525799359992627142007028326865116523033957869609125212251136452396410236930025876982265915963089597825393317909648054808274488356887197933393799241941120691826916741647173843634076299630884655997401370400734954098249519111198509015387869462198674657171808841005212058822254513429836457539629035675822719720295352508916898476137111981397\", \"538960934807826161927564251064896730663918579817797131801326848839524373936888402762331254883505157846659830555799909822861853145306547699817986010353774500545305596630924815657016569444824389893996399550343022444937690798126189162954188680257730893424775303801562327757655350002001080811866451425665301674688928515041429654624970707803336800125648742168380676815769457467038849213225206824671025803392/109517448833211208909213522579666376007937648875042608355810687327424621469323788799169718267715808580775296460944943658428295481347915131091297305260674731651980547668762317138753250458639043477453950774629862540017034566407286963562574188172753764978963685535201028286359818524519980885827473904574840285411260037264057197155527809916623487144493019982419606308144576939532055057697567269576800542875\", \"24451481554350251656598350124163983489544445991992661049829014268366250968046589127810466483349378560701491445658725080497078590986743512397927747885285095846398852574219367580068049729894667374214861939897557930527646930793431512683750733092448862551580494245486308114129295467976874843852138144539250235632985676953662288536669286915983261820949386845806781/4962240683851186225340479316959605207278948397833849899236383273145853045488131674290332609876751222112917095096150531825255611911377071887145019702433883343849119017643117746273523770961304609989779231048095665388209125939879595509516490230961558353074751312876252070889983946768175488341370453053495319823381943793679003096504200440997908071027962806272000\", \"166591964685609920525429719961758335887941461052357297159523350448241484106515158310298216150030768812873781356326923214637847449893575074813991141092681107583183275003570804134461187213143832123628701876041315736048451374824101256980832991214945762266748755723551899001458245164317581617731332466039757786839492869211248064662857987111284518155462148044812626055842061283907063784492325693994911811072/33765943466859756347231737285768516240749714264564410814839966011490233598006227246396923594069488496368994857718734549787000213944990695920130591750377483911116845697231074543526982580529937081378303555262933800375576494067959129682770065443667091668104132884375840812635624862495548888467575848428463895756394050252457592540570490061561616914443009224917652440212112452400106121785938739776611328125\", \"142464729519206642943985715465196065680101634264787375740459792619754842396453535646509170066091478069799080172299369994438836484938378991283020978342879057271045033903518255546705211647900945143546293360496661466657600494787228476009216508124736254967761901224547269496682078470378676865981855568197705507111970901389105723589666709580851611656838285777566736/28839643075889294346635430272525349651555039807615358795334663734940126053968249608601725991946342449660829847322517564370606746964714098508298705743689729306507554363954348780144675937510900983622836770223945538844314468550644543502501484521561567788992156632892028591678742014134130878101553633195551605796158103033794695984958987367799607407626319024034625\", \"380457154857422076784416625436182734840012277442496600178664323821064977485271288502806124740204295811759917468598315932331219906040253463960961995849761235911145436552991677050565022181516596464968316292789048809559129516930574340710998611088996508613850407294743457197519091160170604426002924022923388338999324182261954685794522778833029950214443271526469607532589775916381786492089432407550224137344640/76922142291839859196033215395526448408989799722090330866256930898223012427332209054699494033511478050536463051459450844520020426942553107946282832072826069342120835351421637970462054707566481086202287686453371483126873188020538661871147778312986131920021929455276187425940666580158173676284545586944833678819622895550345083175685846944633982680908505900099388037050135210936852210263717185637166725605577\", \"79999800708369666670693340813609265988600461251844239982904928629083975986385235816587497657678297663151298709076884516168798694292862559083730259839524968813932151813233366175091317046758260934357096757322369138747731224414176608247605314668045838769433811781490030635374856042786947109101585097035794969502111354126773165391577217071956928171336060247633607/16154850265413610119312596299635391433380319311682208755390341659152160578366244774029302281068833963848811596545791104919556346810193385001196395489740571188884873246131813864782581356887110499639544662322008824704830818136660544673293865921754569356583698951612797219776290835161780326945625621758204931298948625885081325268123344406261740843197232316416000\", \"26517014004241498798848003208133111307300592620947908933072661812816683085261359696887064436611747292468717739609776825664344064024535028242737616786238200200498291226984541942836459188328346609549239724653950302145388877472274074665166631509490297630344351573245265440164082334092997307729007429218385933622623935704482371360985836659823269511115937443161532987660855490906546130131716829909388620539153152/5348257529530073524280989257577050878033239486885664777340947102417077875628238501791711336803418503616042922880218860266611595594400020206192599559925169589023339295256084579966533260861249529670141854632965231468533448709363477120437277477668173149958267956654411822360053335695956270719680086524322530514249891157439878407417971839744392044064720476417844056346174795601710447583861127956455406902139625\", \"71197348290771978405602732839537012310626009318133570890482364371056186523989330157966045289127980687764218363064941391483781008265266963537623770685390148810455244349859354857421474277963009857011653865476081389968122418691934354122230780300833008753686234433642072919923583176333668289998661499146617277981691372057042930131717336250309680764289256080895092/14342680993892886303954853579883363225921109635079605392320944523109187641283117181461662846411912306480691901515655220490850586434947504504317080144378185989596578890875561336496479576651516902048606328604696610314441229321219627021610788398730173161473456954861916116391687748151443335513249810808309201830214153565966339609616397865465842187404632568359375\", \"342401018754023891059352629509715357053454506037284788725127073168445189422181540408896452651232759821766616850264122591225331120588918865882061344322996688880669665450231982002597398732201789017495427566260651180470635467002453249479483900268320570004293679361696197905823690145326531180324429318916092471863347575533714871355651558610515931373080997536792242278529575700808878786732127630024064418468916608/68894647682461956089382461406499759613691148650738957016015844830333168307020284281532026442272618372290646283794122772122665531108484704223311663270836645399554940741928358317884620420886609705267248656765357348477857852684140561714900614303731786621656041881975328169543884661780531057279582784036689401206706069028229798913082362331334839997133771880514515972024899408556517159759907883793675672065360125\", \"190286571838805495686895463752492174798162827967490343625540320679760700551286395956241059969689020885714190883323266375067607282890063444652926151862650426323339187596278760962390404656342309737428214493422028545912504503974763216230927196187743439226243880933947417760147785405444976177822143722569696182520826218120595298059020305548681823408268556482981325/38242608291912408815838081993045123864617058390583394828737640036167893859507494091864963383596867701436244007905770284939991912884465101575490548813894148831966132970730263562113961685364216989999844961688441914455435934703797359360780356482629495214859917249465567846934284121032247250332634283689409883499295469118485912489058982596725212975311140618764288\", \"15345379701153714436938289567639102307887273898834051456693981514956329731572600026866162286097662958712922836383881840211072389867463987895894067288699955858337488812343674818565432780224654423872618380928462939482247900055572079914753652915184313685270722583926261499687728814560680092231526501970431280783177357735398580700300402036873780385926225005561766822479878280891130232036389707452005183370152749056/3080426623087819678602049171756961824196425548529619576972793653585089380165862889092832375934535464160425580449193072125955685099151500755278763306599307218302635233595329082702148677300945556130106197481236122437978375963261172524503625593066102601042060541617791008722569799735202779005407381267021641545644264334109052258081225159748043792288699674153722046659880085850980843460715080965607434114275256125\", \"36443601662144279337033484452272105547257065463167427418525882851507989449375452076227652634440476502702584889057376829320548464677623038648843251719168810701744338735202853412651160681259533015293997501525430222870696235141468274274064390273214484922080219643095978640300874086585386991338440415203863901714217818222666715642467237183267303214471854472286478344/7307237990148312451155090506264642657872224684879860008436735430879314349554023096366846856470375025555139219961666754780864835035902856314981482268319886395881809659368275720375576152008289949085453326722156553603358879420820012964006978808113307340321824660484441618487292138631579616351777191144073820686595597986548374588839763719082323114663844043046087375\", \"1575294930860663922843149113097927168024893739962464327016763741314068438447271326302129681931564068796631337571133444163024224071270063174829664848259482066723104251718808936762938249028582992557822551950212098797718627418782376027133576209718376784834456568694813577764300716139817031545408608110880973380162736536313173329973171844528083756524804574267826691156368696436273087171467254161930265910972517504/315498546654512047637461608750018349421492986465373840347519942494904200733840189483934245529561231604050629653992944140351106887747105945984325466452136415067807666316202346895657914393512001212656936450425268507235863153258769360296536050028695266363553141327896064944506216017933135251875087069031098099192325817395958019524956320840925176589616439477134480262100237057953933117460110224783420562744140625\", \"7692057599553133417225997786980128299372439542315125030077404519679450372805989755158000864378924877036225189784045171045139667691524763609840822628706422918926410377185494048355128046783294954373197082851501927410350313585640237550107070936498164597231431242858771457898152684298047446530220873884022213114819556822050178579707210264243087257050468000092842761/1538814487241112760739561704846381585063002784795057066438330325566843108114787083741788078680861495340026117682606689156065008672344707615420501964123121620401073675430690541617930520947170306763541251152854304975131871537939618684186766168376514664494488691311397307418298556185724993104760692216619178358268934740746932420562664234738576394742559349407744000\", \"15190836470550557926140012263310230378455340797095100474720776113765300081463960235506950799869073894127884189857505951314428810423734978025409205413789025720642609035117121385453856877706229778165533034683130064865256448444765902482146676668197546098809055341050873494446231793312407516463576380102073171090898973046611572020564659042146465345334273595086941562425006763960197801018796906114925005810069684480/3035556598829526968124942916297025416522606357010637652635799096498208643970273828496655227572100159414352020909846298817521082538898702393916708804775798552206401718323929157863173504795127180177622667376867235806208021329981136637175570409791442328468473111768140746895005561471574356889047981458002257872092408771959478275534098789982899056118498417649167444480913552548249005268380838457505944462494874581\", \"2923754549090941424546974281011770689534961442264350984393235983189168024079617848190236639328676436485460311093391982825027512234467853098757486086492333410753919927528867817406389678461354257841007722472106464785557179844602277350411593959136520732862935740433163383885526249897183805981219416420390137516812715245569037561966929572448247077578419534651990827044/583599691615378545100950777601104007812792435102945248411439102112424251478512952087517463400054567832353967731887062349496616445419782499817548928078665212077449420216892583997505908858360011413290038645573504472422610780073975450391707084016931661068694024023083417126286468909117254531307085545768412513447197205482285022417611018126886491416133665625891075125\", \"441922815213568908489589193556560586318864326425397702047965372289295962228254658331201274291697626694859414786292266008476137667843874780506886929181835469302142365772763129838217316953835831059616268288399119642314758261677639945004547833810080700127847214666763863338091523753898362699222880772298183760217731228628442782431573977490761665091005756534420789258276075174436091798475838370152192077494553263232/88113527373573049332749294663402406454524640221866407165839162576979477138694653404281889227416977618913249275712917582743426231744980461918772793673202077716234026090308791893409200158969108910565467273725064769890443408324386897017825489615600787634985397885230455168591240328585041836771921929567914891379235573982442311269392541694564675053636078990836491104116280492254795616055818375774141667319774630875\", \"91197133767962483852278456285591810579974783077874307589555559715577599604626819245000672929518645004771085106770784762994476973842713035791487204122653245797126906189270204029735872508462106527240320932458036231707311992868347221176460407003487373754014365881209649632547685657666691589606571865740595829983849941049450471212387808617247938941417000965198123059467/18163679611214677813643455199979098261849405189805364986036911945012016248297645596270602508015864371788974684317239728239847888960155365342460843559658233069613218442910226128113196984801126248862273503232000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"733396724434554481470656964167233690851279923085197144879644750437402627936723531635898542414136943003236478432848965516925891956615111678444586384493883113385335463639674699443808084827715994137410743992130712903997815471369201406683862985677774155704267039224546352414417632475628136460919900347977754644214725932476856018335195927604771408949980634142255497812566866795799230501026066145434755838336990365184/145912495644159810313026420025053989609942265686388630266226856650796088768164358961644113076809511566125145395699271530802891523741636707532676065833327082092521989958971154798465784847092870457944857590623097781956884297103961713362268264159015928554707158239398721416218953003215109202771651993622244788505649098445109438104466256408060944298437033058380804126574878377874459371251056800895394904459469832875\", \"167606423853658713615749101123336326908381619586838606922565378505211386185130407423587264776519589295420758009764678759213587906216543160801059029133457062067529468464636376639307690657945597847080706144898920305379653754920571797771178341550808041652360635584401789901525709166172283390177673009483341826911179861584213314395893323035527116283758445038413646757280/33310364848744488727470761889861069993071965180756187311178124887286133554324042422503263994717993129539448310743598138364172889305532401505890384806078790034557049074169245078416704866867380089103064821732673967120808611636618526737138435792818828990403374766228037003927569643972203993263329403469747342204808360947840103843317533210523853631711601450617095736473\", \"22466735478643771803624909352181817912387732117378538284107485621001246177152644141853604633676939694208131243081227668237716194316732125445041260568403752325416203858329469477774720998849334961751541191761521224644520742691981372782009394826739249604257098248751626957528543558542443122470657230835176462612530464044652140581367666271771882198747182114685116336512604038833327707163107207664705120728068987996560512/4460342260599110071819142535903990817893424192972341872394014748315090430999224107274777695306032783105944721337053156074851240201179902835353097683269298594190456286888326067932777720561181760369783486872666974623910515795208353605697065447942804414120030678603538761538385793829787734830129764152263691296719726909633580318897787729004972323599773548689272008712427926734258913271101899780538635213826239542884125\", \"1972862002066252798837977155272535342727415329632252213508267781390870646909686724955861608046325765650407340102472833428905279473185818898693854344138403744757857928883601637909604082588338869612221777263582365745419719805587946558326048087138197694016224613118304623864709183681172362693106460535117459192992832969130895829916210933710820035479169562970982784580861/391262854245936198649509275719624152305206807261382621390946060636032376057385723427601113233050260359684153963520782285097664628279596618521963444574543409076428660874564026651742234728997339844161514273669735686516761239076529088145208958938384732800586298943281728435207452253170935715239392534815683367114290676180839217919539381651841151674859715992309727232000\", \"25408691426286653276004556426513401767718328640048945917745783225459709487487356095164164652218100925888847689099153320777389381851598236046402124684511968385325107497047025485302333503075085562533472482645023963717347867696861885363417595298751490212495932766872748125111115039311507374363000062513977436921772096443948159289707996749061007112458126301618769295162649600673247799961118662602756889448152517364992/5033870770817104909025512331238419776407331281944565644457345507262881100618908405924951559853352841154730802006750688581603270849880756026262217651685813584900300357685874044482329601894134443542753690048962260914642678445058891387041919581376195543193199307524572671344323361282633828144708683536721118910549933336800461248338059209853766305058943888965279863852107507075916981165164543199352920055389404296875\", \"616565940481577765011174617619124841631603944267256178093555235591208387588894068005162766513720546626399308168923904625210748051788652328072241494243040185611373035059619136712559505023703153194815611268503291295059648269772663939137446253437248541496631852986499688052678961495116210133458596866684413931188348798244969797973846568160999564540652111599082181871436/122025682149627484528651507368051367620578469392233875493556828623437869650284356703295836998178256875766319508797903923638967073687991229708051285605187358616531926112736402511567721889845693991963610192161413692928378708223712791930113386840109729368772998347036090902364801014045328348830748307179590755723160142468563977011700764517880467116766150322736003147125\", \"979882056834583241477188686550561625289337025747787132773853690143359657519481397575561812727394470125172272246774578404543257210124412718725081536309818383310896102958167337333430555168671327992395916735022711297435263157670501117734412587691271084981140167017421900852550822579410636184333142944411060788723653596377015359036101170054828623669169047118551010102258802465554033173968468183492058271365801755986560/193732066620504775981759812703028757608600125742477178751189607602983198559778039141192492589734277739017909889924488699372940787977794555519474807920198944109549023547259912324279741006975129518191081373554817584214941629021088206977532599055014150433581544599721903881284581257812850697423350805715586436114842183295730680490110793225514602133304729484547181740290534056445482186430729398701311563285494964645419\", \"1138059441890428903336718712159907364975959482163004276901676063186939296217569849990951930955270849692775077813359573394435924934540269310629731801376134549169322946310756738187834128956671195358413024062230774111935109203207768898525882417078119314003162592087920755572050993355843681931139257303484526223461840939880759908449181135029327442039666513325916729112853/224777393704985303260433439401503507705148576727364388720387174977154204629336985298082893443205223017966145098064861566754244624732671470935725326043491911142467178027013112527668183783450932992534517827863293825061296257420183669383719043873666284378647952385401303733274771042385666436214517205678674213118374889121542369996042313879258622144464565403138392064000\", \"614262617634904509410555695398092190166323289787703954329113412647342230855826568873946233136303566178604275296873234926652080462259552775254755109931312516616838091852915397846984381183732773411263828600108443070778861986849272794442105107285234729077818614332155890946804257724112143631642663084660012362691100872465148864413343598067567142977134846266425075195546265101720326272502009234689388355365794889444257557504/121200854655310345878069155190734381476914416893031941761756379148622591310152793328910334357724762079139509813381997287954319983165971628429295803162563856219211627796200599196263868781937234015821367575512548522790158101892507996780675863234181700253545912643548466256938936835469646114659598727592390628209362096738343417775009361678599075671154405137663077798419897932404104579113056038271753988669813988076515476125\", \"106893445531995430131837569895703697604978445859412739331042151546083234373443601923983714252801103551874986033841637079479794895452077803182698291822629713500021995241940133037200268381793282318691568234728329378829301282121562652452936297422136961147432559766896143081059518238234777055931999714973999553456547746825617168005650221542417216291412324174772893635832/21070287546583154895102927029203125577385528350171457634203261197137238923923245382493868134869009844094435068284335909266152042903157700510534904847257436666980671067329084409346149729385625108233234542133838924281113454526471855573271066865534480974484196644173270141056470857666632902827625475719738076524047736123182255306429677688129231682978570461273193359375\", \"1112742798776748551928744983308584493817112400536084744850969025063360679785378789764875076529575583792571198510306186417773101346425704969671256564494135750783642910394213727189639661184379341961737135764570942961692159177189753139209638929302928699705042832922774012622017270172331722295881412111812933593370743210214549038212395941675257558442878012136484052827439007483777859391215222647499741572327725689840850048/219121905514652575155579185322367175400669386131891843382447432851122462422992147756333729893028362013318264155489537138133372703295804002840920402482110260590055749843170064921843460498824128274420925357547023876488939786863662801268798987685503391058250902634999352652063668663245829496836853509616873246554292796823779397317819134891873583857621623143253788854530146303641400986028503534408870194989478421253057625\", \"983995170259637497940121707857673268620603982844439610076334749792119502557380361624096960070148627663305171311646851566811683351232268240169848810658089698606409195744471343416197434926513684882439596141368794175162315633192028977211909698595778839497844847281262559899914504080092844816319298286511436690429175757804604673752838786852277255064434365401871903307643705/193579499709739777577893639665643417521924510242119561765932078835121983190401762561436208758210519231103767232899529457440602166918701550386152070813526760823513884391055054076485295945972185402977095815609448651316824455250005505410192101148149284756928250258632031981439345164037318129987999546683113483700660879431801728391911161900686707231543216283304182063038464\", \"30691013076836380319652884848585431917439358375118437035944950498156836885409110087616602043242747413728866747975631727566613593257623099549583001362246649928075859944695060947434885707102684568632559339383409378997568182445019183928058902445738702610436187907199482604867148445903921474846103586253320950728989228898324829144701782792767763794895137313050381112872972806712570559942583906619373159053654481250809168128/6031936190594376585238407905469035598668211679521553144958053099463931217856780171872253258738635531385711702176347575597387389685526098889278278029314982721284691198967204664771178761416891317672705719303088746953644978471289001577698554025410820041497108311270431130911021653860874238212040640737171103823631718483572464361276703378587106311153455557896527384426327053165214814954154328483257657424873929502112904625\", \"33633002641218571027682690377239300567277297301791434890431645909447040830457253186262970747405514897340315490970846553666201190386457221846694126637998462873786334837901001833771510353365825087187582807843940479192544772559118293851131234910638705258664901225494129023244916125545283621607920983287799648992632814461828998517949449887522866259724675318233522060729654796/6603800575190864815125307817934327053530311915572323544225173935830559756077637251538096164499112411672913910767032482188570876526606118068929913515497400397562722669603861813453418621246538114872330536044519242663538662076583511078523573320035084744399535581216815034837553165853576616422592790103728141443697362408727056813977234078214386771115586436985105038873998875\", \"9090550743395453237608373761422705922989356346696677314277463900103283296889488490217663400349361962695279888433677856471792856853109469433355422802663947305503479561493033851081993247556828544308258821557994512133708656174864544457143793106703578476914924328960109390350040954158797845288786321215010324565010420734044059968931558099077932776525974187717655105951506223649947806568984848883258144616897526257038550656/1783219994432430133950472014582130883873515063182143523712063859964133099770763874744121895885645346884371273930727450069430704145915261127061538288702855011220545530326588799412076879985026006593893648911637986337776174555198865379578424838210466703683642106934154603710587408512357351455891557594977191641529451749437270208258072920514602243985184744955476557012910446023911358037761232253615162335336208343505859375\", \"396226087129511787616470716244996965529391571019620342657409150252952330537366537352182763477820160355931003174946109480036915624974500187179367618457008802667089004678925595775249725629495848146669773574395699032785024522882892752987825063933573399691764866816284097232869198405981830106568826923407996367321353003569052419999880089180418759265274331299787468134974811/77651132902382550540201641628906752945078964002822585000619340261128555048628863996784740469908853602590877726845475670110127527874088625214912598995012971630852593597027649154487264595100300180591016581254965295280089902497540043916128232871685159131211213497239568483141031137909208031392464815187505714066235868748950184065923236670418822911614780061752905170944000\", \"1288523130900767412477856952035690867153496584747510253984686336382980221603917538996138294311274357713893956725672062832264871415025750136690143411884111580335458539824573239771267043414225271729141508235839982033182605445173050590151912297720800168687369852280323356691345317649445843078291369394324862039143247087442309135074453265658730028145500871559458519282433012494054724678302957276371418936282902434203225600/252284450515080370603949213084529993395050575951188044032908270470514999880554862449223347761507020354321422785760279154913310488296485989979706208254206974075438570521939826124860483842758137231373182496438568202110337751291106165654945352183167578675508602832478752400011567482434301614269579368882858973850914513870297071866544875650189106576672289734326492492059816669288907018095832842249738081022227281715919357\", \"559506782175368748187145067236900803925823792088293851453005882621173124590368101213652371965740365119375069053747415415684193092607523211636912074219215053809881814859129515591479780669511533619258835199715146655774919418434080807837587396115955105126806762961292429904380132116986984435528307613054828929294602185927322238461491059740342387266084431988727321711184308176/109446188216864405154936682374609448082436347600301765944233278303643744736544109262794383069197271409398615846380701459882784547857821831816863216080069944818453908760476475874319791512782445408136169878207358663250499628002971644430164185578966399908622640732411885568638054229180673755690889471388585521113862492432946110902070139679164884208988489955874131206343597375\", \"365842109776085256207829452385781129402656684569922320812625438296958174120084800064669048017227033185969596458778213306152397766619692644694641677223213185977626940193107608138827771259334379895020377700759789774994800008933137569543592829220611543060189849601828342989023692876182148818363689293009174358168826340010491728715549904988196347316703985894355217235339548078187164176255405596310602921647203428200269666176/71497266937783826306774367225149833789788300609530680399994804704196212252148324552193149332755057982662844988588678159610516634667597707204818296457616315484973288944637139939912166034691155272078609876888919170894915224022982785138928008133003473320018151370486895637936102520353951511525996197267572355782608352075229547764732602557133494648237258900273354364050662921889937355682486287799239363976556848320046933875\", \"59378684894605773397070783936113244261297966863668546282887298999811950599772732377979382620766180662159460666220894896896564357533604962977968843474062092083279165837424210591042655271577974272394203253875965589611493384384257117088518521598379301169916060951350650621757237206805037261878212424267780312614942173870651684587166691539909068452932891649554575072205080763/11593916877920131260484148322810317629326850763057953025674154928920977965095141485536566217873796019006709247938019404840440511433467040918770165456925609124166970862430104329357419669175323763143377917913760028500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"440706629842402075137926797732405268015915199334341565218443748798479563505125605478061664327658137598204192554352688830679475840386882350034150077506804799859586772904929402683276898098601814091430598259347980573084686932949502809068565420937301632494387691284902026088950093888426872222813857928092871267130505744095697172494119689779474840037266295586359244899477781345249657455186847452249040895151288114085352974933708544/85971876318334010542313048056773419567285701852816309711738644074302467763075671531248793080425349570584102078764464196653843973936119037322000695949209283327606280423406302517302874806092835694196353778161663338667091195199032831587897410329509487165187753418615356836636352319310103639079123698118997500068644500893282438137614420288839230827096109835206605385673197123994357393257304049093683934224826006704198171592304125\", \"13220371178312284248107863849287558696210741535280184003301555188086761767176560823174196915070378763091889333203635784037294769747641959860810039816533609140662043493962707445564057197150603226797446933532133956054671103942520142568674339411250001585991743608723150284270101326419464088290151483823061613403673956918458456165552482913079283537536214967294211244361353060/2576683013797055224377707713704899315377379548630511095136568220145808780162671473907260623503552385384482723173913562423316997528913651044277418227616447815609873991028073011738113927961824632868956802271260292075825561646156680740323686126811928372672670917332613490241615850953660246271541592056143611581223295045062157404996958100136358649109693659623847024011265147\", \"1538372578072246705266078247950089219881197139399081643650271348770110178217959856819170325400476655944115553238940541695152110949081675985299189913515975242840473616169775880272489805123124548256666658584129873597192213080038937409046114908719298170078476325423466734429870048697383304265342125425087105698152643145531760853127801123272389134514333752173173161562273487752064850461823726948588221913540799816489566883798912/299566102446745552813544808169323270315327122249327394279467999308669285416179486075255023523726449428151807672528368606071047812907935426406886253284580296349349558797128593446316786243666290649442956134448480598303527795996222703837663605600624271807461605295956674925277658331760000117761013381199880905748188151556184620779667670278558839116983636972680749836497346863752662521197700717702790359162307617024566689271625\", \"281696937222363685333688097915539146272117417024070728031063821781398985795813333650547982965341298894634762289669256129805545549280355643122501181852136332529515756074502902204877664395456278205770206019663082511098956468724829475220996427130295010430751942126263620206886404244432409164651524408198286831329682605959881993845189585640874220032515465014097345759490750307207/54806274927935495596891312029173862473687610099325998583092091915101265393157631244775387832621032230434007486602816972765210205596482942091518459849775458089575743699797096697542306049628939919466378189656065461708686421130956996965004776108499273871055615413566043083634090083096967567965373203683231171594922347812966905149873265654962896456451681332216735396249206784000\", \"228506238533410805238253122961471637501498406104430046727793420497895852412513560203475440156216063574654372726194215013407325207763369075250819386897086702757125418327084312933061738392406321003231853349865003322697360659712771167066453430309997639548320673279964210730701373707765051246595806673865646607841876463608039111252607452843372970797479959213447237540830563469297144446069689149549515457318899981763489792/44418759813188470246596822974281932219088697005123285598909329328419879212164564561558656547678211265529803086702843380128457744445765859393426675396393053094588240457569380155526179040891009717323059641035189017918495485630657360525410506453554255734005459614858972904374739673834145083512160883402151636664208253116362089211658645312778404886460203600762546810897889629330022309705583438699250109493732452392578125\", \"2396110297187570506257836426251930521245117960980667897194680897478996322590925380310917400763581787981992131769075961259393685331523600287377841990678117113566991100720996059187144934569703045966210306282348527729533806882408323961336166190162075154579344185244957673138372347997134388801085788353482276257401005734929059700346687783400772331280644647089520646562669857652648/465370154262863030800729180763091967573522779260407615567563274096037297593764955820626213827962697601334935773802201919483657310282236100250543992334865461800976838791035335861420892967699843608855185710753433852279737724446294443337363478679601049432404435672469098850676302728116369979460222148206944323730586138087862719386327396334468302608499235112520318322763857676375\", \"1188272888075247520453568790651819187486389546755745961952033150576243575862120569399808467067800830890874391487822723879717525264875722720416173276963170672622214121308038530968291758445510982186014289745026439477197148445087614813262170975056866881909056450023324743409114115141145340480846088869807540798073417035168139476153897066325127540609756310068558610112731607522096096821938163134080426356894899245575410494080/230586762395914863625709048789913840511134004337945700368117795195769576856434588144361459740833007125516905017415184787078710001969815416281381427387949263792200577791644278234661952852149216540491852757174842146376788280677956350901082838474705227642420261641783722891948710833898248566893322144435457967452449965772543077421407816225704952270697016152452032506898311260979594550143344971416786595888053149375287120733\", \"1072184299258468249004114536023934869518152618369895613271618698908405514630154819453979477077738526673716264830106745031385951736108376866253955319711026042389282009348594845497252059906901748860111986811345742998968284077119165082435598381810306691078037018432766116865792677955520465319184311529667642995217214507658693259694586107847099911341219913576038605872218680562047/207882129535607118520818565811162643811811563516006836924341123976848022970024793004700710992938987476728640943834012473687892481059618823520721737479364352887178017866425027953255856440099446112508663603319745066750522936408781591578321031173620445865113295407603090322283539974563690157418931060565698315406021569491751612761888641141446406531645379264720684248398299136000\", \"158094023904374464057702010126993231151433474361820266584020400101533651587072432728050776506672527718975042616651177034635188178967462982926261516748842073587981953038445977514446838733557926696939591069712397947055261777416704028506441173540338327591514650398349069348381309688677335132100441905603664282735310299686268721634369502296867409514777359935022301425165750780988231639828675424239931533849896744198012747670272/30626384366513923671063955469537776291182594080083494737341604579575446319190916924682809546024369330706012653799783122328775875399363759308193432327358837772825609356553955350401725689682838701996446404559005896479618311357573203081153855961484398360670837599853294627153740224543175497655414585918231215639906924313779933211774291565425360415684556655021031131349317390382320286092667852173815259422737956767922154798375\", \"12216278924286401897470540169822542417611356797676160128176706721343511598951866107858729405615631246003458062949723290192242594609994613705183460814797527214549142043573863947658832694800184691222426521703728394203722420336773310908687071670107794543022567943478843065246011544888390757810534211554666736239506503613750756246364621509359804902243487113673014588325806249988332/2364584127734680580481708368927921125934330000162935118371174269642831409084634375654239735054363928748162229294829526339927907778510530444646754603322373712788147193691037688552857183116332292048731726305451516954679277320777955342295564000586923227775208580772868590742136150431152495718132142742153643081187691849828217592954519485869135930755646768375299870967864990234375\", \"578939195017447864385837341975558679292903716580114421030538728778491606282153588930983966100514147976321305616196463174070345884292672842497715966933722088536619333912687108737657068701352918582656105418491672377271304970407730786932913490869797471081081431072836814581099271832696990064828717287258860166842791984158634684078346453202928137987930328826212011774670396356151265781053547412633310327737900786639842674288716416/111966291649651600701875186827360807558960817589719096407887999108024557254221008849510152469119211567152616745769256123968832250104006560061907741567034087109512483357851919402017950812795426393415409198268246337542639470834168040295134130657073201020340432236723824670803498949071870597039309004562024033656488150406105175401372709011082725359382691270659245312133919518760328422827067578306005644825927050994860723405473375\", \"8041514821545833865350873212853873042112343327573364523948780030849543753072688526717886590013028227714585965095216381829914996539132359247488639692828639170075726301411777307168737667077730792892326979446426349813642680537699905651125068091362135055902152994216233622733424128982011248923051410141033146604688083721413402395290842738021365861670415833356403364696759583009635/1553937833499559104910551811592138833189892464446761247731330672284191313590708439680460540329836344767557599746234213006493842842879398684745864919973051635127080738612248150108793397855113122368507483429209127035263504194847798809612278864438287815470711036548695032421148125849669175729331459149833945183228413961985381338162155596008680906676498435954178226973272371625984\", \"12059659399309169167301353842123191409306995788633965680414620302285606896146667751472818541537183787935352700725982053536032930866708413010971856856768384974849695774437178790890015242323873769697407411558706626105140596160049735605389301414460825674631122462760014451298494875244754354054447697502521388381253293175367558014453865905104467382184997528879171136492277222127399012368677604910497789360212571238146627048080568400384/2328494054002703067219004484782931471919751585969487160602269605916676223315055450845942763690581877771159615428854802721943114463834992106300185328876910271612375509166975628540839858771078495267566008071532876816826751069408153323840515037497664871689085370699991860738368371510578076683395101062439493831773194498579620513073693022191702398601471237166387045790480861932005012807234071429628725981935147069738988682858417182625\", \"683009426705008850682549700382901603742691705123356866338951397347368059105140826655486518416578697931244347554322654428162554903861783227680935341690740579867651545205562690172425016836559678937794312287639193745517811234257062356826622207475918293015140472942579713388671782202262396642735640315948612572908444501108579457520714632371056288874351015666995549139003946314085696/131769214246522869780429817236150406548549044658474416909806179734873399109656411633488099249198882165279745627038984487365589625562901914030850178330133080409420340227179447548044572594184601425691821617928130423410997853384425373999967759499571890326740433081063424903098252502791477854302204200941376983295622430177445507316706609802292121282957519571162158620971952084486375\", \"1418116259749091420309271913909337143756589314597557128553117870573928055109322864794169592355058370891251425125187770724828108988587888087023982451205475980371440423992838481547236638456717520835668859093413956339261802305597694403381021863258753441889536361061407579332570493634254542013337999844407181346815549594836374497512447969751514466481466717590255369810506813543577735080228718660747940956248427356785784199073569408/273368882980516556922532339653303822104510203916024760371844491705599093435133738774975538364241630079468712981056336655766117378160822393876348755370711942273876284944422610974149712212944211513462921649872232656449940987552227525504529710373144228818606127541937831103642415534318303187393593236209298242574677293352798419428712873685798636474667204083938875672934235816396371477146089168375198141802684403955936431884765625\", \"546411077581845999248238069684194831621691193366466972898628141511422317954477211865167402284211971296286346492698354214043840080181702652132835681239302798339667835439189275457116051279366194551632712819028177402221815140045210690908631767786711675029194359998826252332434573121740830827417293557234891406021102083555472155479148332697839972702631641910213821827820374586459319/105246945889799140338072754365901705544530661781295362563214285953881890233987516230568663143342952799036341701952267011236663118111226623815975847494372076420199418712941018288738590264475520229651370015377608638075866459684692488079223686296541020897904588347083045723167762682959422858996673894180805702299907478685374065593161226849447131100462022089783265346597553176576000\", \"2398330640958841474772606439916070050977544535580605737383995160447105736276950196885906408317628083110923322157113892928963237845914017845444295040924101784423382681801754191301860383927129006953354739240926643562987838836997453985855576402628166875869041032631651591871962852884189548538272285387092843044669499688035134181859376665409767886188304314888753894905317929877238322615838524354191263502347881033855441181420399360/461588070868590122892265681879734295007029130965626060552783760068897000195207878227714842617470320231527222074701444349530952699708435668339712860464533455345665068841333232359698449088497137068713309811942968433868609329301082001752617420002377892756821532220676085014874112083615054550278903960627185675459015343606391094523511117705747842645927349130302549554534056269331809016770715819934970200483161548527932617036185253\", \"6041015879424725383006424536130409209607854044642113747266098198777011981328765528361630516108680392500990580908509403483891763219659726090675140672989657743882183951954294745396417829943469201306594018454995862321821016087416840247422350906412007336103086620396467456181771583200365740253389107968122850063607085957109965406634738740996318415514360956028575560979203447735121436/1161752799109428422288020947061281540989708937450568100764830251908850596717606701047413407636907934320789870175907792017513896999208892282137299070761467096211814586909598705615312819596495636017728313513520193786266452836805291464826226833593878504804389728477191170027729963773716267868284479768397603444919008915279522376004326398403851684761808785381609370767169521034383625\", \"13240077436443988749179508462267267187169441948722358165090554769250505713747934643200804819418670147225695324432684266924694524337920816452346599774452681831320005286326986675907899608537972384924882996757503264622991355949039882526389342174307168805166215838138277557052303430492669193939212362638263582899713198716541723383138016564027766560215944409353427176135895982596327685665844815618402881202645610620284792793420780517248/2544223084468158291883698813309541801455311468982232546872485444308211415529998472787377800559884210837213042932180479090277285630234238711851480232520137856848809986631784843528381778520727465146661792797924458540957133423665746229799675650290296217658444899605236550972043549278128087645211909479009099766619355677984218929672461506691980442071860591767266913041147587815452007726513853820116629482732060593116624596368806566625\", \"1953999166296955830935495158735359200362904181792947794529339487489730042568305997099959302322956898299616194932283060554261566410988618045107398092345476532371402134206635235570281738377188438407703089325315446371127042537576093536896282955524842632708645655481028161471313608974238110718242273935956977555610147714316158486553633871312187084618154014921190595222799283957140353/375191165084882521037046014569185165885459082629136124177286500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"];\r\n            if(CACHE[x]) {\r\n                return Frac.quick.apply(null, CACHE[x].split('/'));\r\n            }\r\n            x = new Frac(x);\r\n            var n = 80;\r\n            var retval = new Frac(0);\r\n            var a = x.subtract(new Frac(1));\r\n            var b = x.add(new Frac(1));\r\n            for(var i = 0; i < n; i++) {\r\n                var t = new Frac(2 * i + 1);\r\n                var k = Math2.bigpow(a.divide(b), t);\r\n                var r = t.clone().invert().multiply(k);\r\n                retval = retval.add(r);\r\n\r\n            }\r\n            return retval.multiply(new Frac(2));\r\n        },\r\n        //the factorial function but using the big library instead\r\n        factorial: function (x) {\r\n            var is_int = x % 1 === 0;\r\n\r\n            /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\r\n            if(is_int && x < 0)\r\n                return NaN;\r\n\r\n            if(!is_int)\r\n                return Math2.gamma(x + 1);\r\n\r\n            var retval = 1;\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval * i;\r\n            return retval;\r\n        },\r\n        //double factorial\r\n        //http://mathworld.wolfram.com/DoubleFactorial.html\r\n        dfactorial: function (x) {\r\n            if(isInt(x)) {\r\n                var even = x % 2 === 0;\r\n                /* If x = even then n = x/2 else n = (x-1)/2*/\r\n                var n = even ? x / 2 : (x + 1) / 2;\r\n                /*the return value*/\r\n                var r = new Frac(1);\r\n                /*start the loop*/\r\n                if(even)\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)));\r\n                else\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\r\n            }\r\n            else {\r\n                /*Not yet extended to bigNum*/\r\n                r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\r\n            }\r\n\r\n            /*done*/\r\n            return r;\r\n        },\r\n        GCD: function () {\r\n            var args = arrayUnique([].slice.call(arguments)\r\n                    .map(function (x) {\r\n                        return Math.abs(x);\r\n                    })).sort(),\r\n                    a = Math.abs(args.shift()),\r\n                    n = args.length;\r\n\r\n            while(n-- > 0) {\r\n                var b = Math.abs(args.shift());\r\n                while(true) {\r\n                    a %= b;\r\n                    if(a === 0) {\r\n                        a = b;\r\n                        break;\r\n                    }\r\n                    b %= a;\r\n                    if(b === 0)\r\n                        break;\r\n                    ;\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        QGCD: function () {\r\n            var args = [].slice.call(arguments);\r\n            var a = args[0];\r\n            for(var i = 1; i < args.length; i++) {\r\n                var b = args[i];\r\n                var sign = a.isNegative() && b.isNegative() ? -1 : 1;\r\n                a = b.gcd(a);\r\n                if(sign < 0)\r\n                    a.negate();\r\n            }\r\n            return a;\r\n        },\r\n        LCM: function (a, b) {\r\n            return (a * b) / Math2.GCD(a, b);\r\n        },\r\n        //pow but with the handling of negative numbers\r\n        //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\r\n        pow: function (b, e) {\r\n            if(b < 0) {\r\n                if(Math.abs(e) < 1) {\r\n                    /*nth root of a negative number is imaginary when n is even*/\r\n                    if(1 / e % 2 === 0)\r\n                        return NaN;\r\n                    return -Math.pow(Math.abs(b), e);\r\n                }\r\n            }\r\n            return Math.pow(b, e);\r\n        },\r\n        factor: function (n) {\r\n            n = Number(n);\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            /*move the number to absolute value*/\r\n            n = Math.abs(n);\r\n            var ifactors = Math2.ifactor(n);\r\n            var factors = new Symbol();\r\n            factors.symbols = {};\r\n            factors.group = CB;\r\n            for(var x in ifactors) {\r\n                var factor = new Symbol(1);\r\n                factor.group = P; /*cheat a little*/\r\n                factor.value = x;\r\n                factor.power = new Symbol(ifactors[x]);\r\n                factors.symbols[x] = factor;\r\n            }\r\n            factors.updateHash();\r\n\r\n            if(n === 1) {\r\n                factors = new Symbol(n);\r\n            }\r\n\r\n            /*put back the sign*/\r\n            if(sign < 0)\r\n                factors.negate();\r\n\r\n            return factors;\r\n        },\r\n        /**\r\n         * Uses trial division\r\n         * @param {Integer} n - the number being factored\r\n         * @param {object} factors -  the factors object\r\n         * @returns {object}\r\n         */\r\n        sfactor: function (n, factors) {\r\n            factors = factors || {};\r\n            var r = Math.floor(Math.sqrt(n));\r\n            var lcprime = PRIMES[PRIMES.length - 1];\r\n            /*a one-time cost... Hopefully ... And don't bother for more than a million*/\r\n            /*takes too long*/\r\n            if(r > lcprime && n < 1e6)\r\n                generatePrimes(r);\r\n            var l = PRIMES.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var prime = PRIMES[i];\r\n                /*trial division*/\r\n                while(n % prime === 0) {\r\n                    n = n / prime;\r\n                    factors[prime] = (factors[prime] || 0) + 1;\r\n                }\r\n            }\r\n            if(n > 1)\r\n                factors[n] = 1;\r\n            return factors;\r\n        },\r\n        /**\r\n         * Pollard's rho\r\n         * @param {Integer} n\r\n         * @returns {object}\r\n         */\r\n        ifactor: function (n) {\r\n            var input = new bigInt(n);\r\n\r\n            n = String(n);\r\n\r\n            if(n === '0')\r\n                return {'0': 1};\r\n            n = new bigInt(n); /*convert to bigInt for safety*/\r\n            var sign = n.sign ? -1 : 1;\r\n            n = n.abs();\r\n            var factors = {}; /*factor object being returned.*/\r\n            if(n.lt('65536')) { /*less than 2^16 just use trial division*/\r\n                factors = Math2.sfactor(n, factors);\r\n            }\r\n            else {\r\n                var add = function (e) {\r\n                    if(!e.isPrime()) {\r\n                        factors = Math2.sfactor(e, factors);\r\n                    }\r\n                    else\r\n                        factors[e] = (factors[e] || 0) + 1;\r\n                };\r\n\r\n                try {\r\n                    //set a safety\r\n                    var max = 1e3;\r\n                    var safety = 0;\r\n\r\n                    while(!n.abs().equals(1)) {\r\n                        if(n.isPrime()) {\r\n                            add(n);\r\n                            break;\r\n                        }\r\n                        else {\r\n                            function rho(c) {\r\n                                var xf = new bigInt(c),\r\n                                        cz = 2,\r\n                                        x = new bigInt(c),\r\n                                        factor = new bigInt(1);\r\n\r\n                                while(factor.equals(1)) {\r\n                                    for(var i = 0; i <= cz && factor.equals(1); i++) {\r\n                                        //trigger the safety\r\n                                        if(safety++ > max)\r\n                                            throw new Error('stopping');\r\n\r\n                                        x = x.pow(2).add(1).mod(n);\r\n                                        factor = bigInt.gcd(x.minus(xf).abs(), n);\r\n                                    }\r\n\r\n                                    cz = cz * 2;\r\n                                    xf = x;\r\n                                }\r\n                                if(factor.equals(n)) {\r\n                                    return rho(c + 1);\r\n                                }\r\n                                return factor;\r\n                            }\r\n                            var factor = rho(2);\r\n                            add(factor);\r\n                            /*divide out the factor*/\r\n                            n = n.divide(factor);\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    //reset factors\r\n                    factors = {};\r\n                    add(input);\r\n                }\r\n\r\n            }\r\n\r\n            /*put the sign back*/\r\n            if(sign === -1) {\r\n                var sm = arrayMin(keys(factors)); /*/get the smallest number*/\r\n                factors['-' + sm] = factors[sm];\r\n                delete factors[sm];\r\n            }\r\n\r\n            return factors;\r\n        },\r\n        //factors a number into rectangular box. If sides are primes that this will be\r\n        //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\r\n        boxfactor: function (n, max) {\r\n            max = max || 200; //stop after this number of iterations\r\n            var c, r,\r\n                    d = Math.floor((5 / 12) * n), //the divisor\r\n                    i = 0, //number of iterations\r\n                    safety = false;\r\n            while(true) {\r\n                c = Math.floor(n / d);\r\n                r = n % d;\r\n                if(r === 0)\r\n                    break; //we're done\r\n                if(safety)\r\n                    return [n, 1];\r\n                d = Math.max(r, d - r);\r\n                i++;\r\n                safety = i > max;\r\n            }\r\n            return [c, d, i];\r\n        },\r\n        fib: function (n) {\r\n            var sign = Math.sign(n);\r\n            n = Math.abs(n);\r\n            sign = even(n) ? sign : Math.abs(sign);\r\n            var a = 0, b = 1, f = 1;\r\n            for(var i = 2; i <= n; i++) {\r\n                f = a + b;\r\n                a = b;\r\n                b = f;\r\n            }\r\n            return f * sign;\r\n        },\r\n        mod: function (x, y) {\r\n            return x % y;\r\n        },\r\n        //http://mathworld.wolfram.com/IntegerPart.html\r\n        integer_part: function (x) {\r\n            var sign = Math.sign(x);\r\n            return sign * Math.floor(Math.abs(x));\r\n        },\r\n        simpson: function (f, a, b, step) {\r\n            var get_value = function (f, x, side) {\r\n                var v = f(x);\r\n                var d = 0.000000000001;\r\n                if(isNaN(v)) {\r\n                    v = f(side === 1 ? x + d : x - d);\r\n                }\r\n                return v;\r\n            };\r\n\r\n            step = step || 0.0001;\r\n            //calculate the number of intervals\r\n            var n = Math.abs(Math.floor((b - a) / step));\r\n            //simpson's rule requires an even number of intervals. If it's not then add 1\r\n            if(n % 2 !== 0)\r\n                n++;\r\n            //get the interval size\r\n            var dx = (b - a) / n;\r\n            //get x0\r\n            var retval = get_value(f, a, 1);\r\n\r\n            //get the middle part 4x1+2x2+4x3 ...\r\n            //but first set a flag to see if it's even or odd.\r\n            //The first one is odd so we start there\r\n            var even = false;\r\n            //get x1\r\n            var xi = a + dx;\r\n            //the coefficient\r\n            var c, k;\r\n            //https://en.wikipedia.org/wiki/Simpson%27s_rule\r\n            for(var i = 1; i < n; i++) {\r\n                c = even ? 2 : 4;\r\n                k = c * get_value(f, xi, 1);\r\n                retval += k;\r\n                //flip the even flag\r\n                even = !even;\r\n                //increment xi\r\n                xi += dx;\r\n            }\r\n\r\n            //add xn\r\n            return (retval + get_value(f, xi, 2)) * (dx / 3);\r\n\r\n        },\r\n        /**\r\n         * https://github.com/scijs/integrate-adaptive-simpson\r\n         * @param {Function} f - the function being integrated\r\n         * @param {Number} a - lower bound\r\n         * @param {Number} b - upper bound\r\n         * @param {Number} tol - step width\r\n         * @param {Number} maxdepth\r\n         * @returns {Number}\r\n         */\r\n        num_integrate: function (f, a, b, tol, maxdepth) {\r\n            if(maxdepth < 0)\r\n                throw new Error('max depth cannot be negative');\r\n\r\n            /* This algorithm adapted from pseudocode in:*/\r\n            /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\r\n            function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\r\n                if(state.nanEncountered) {\r\n                    return NaN;\r\n                }\r\n                var h, f1, f2, sl, sr, s2, m, V1, V2, err;\r\n                h = b - a;\r\n                f1 = f(a + h * 0.25);\r\n                f2 = f(b - h * 0.25);\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f1)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f2)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n\r\n                sl = h * (fa + 4 * f1 + fm) / 12;\r\n                sr = h * (fm + 4 * f2 + fb) / 12;\r\n                s2 = sl + sr;\r\n                err = (s2 - V0) / 15;\r\n\r\n                if(state.maxDepthCount > 1000 * maxdepth) {\r\n                    return;\r\n                }\r\n\r\n\r\n                if(depth > maxdepth) {\r\n                    state.maxDepthCount++;\r\n                    return s2 + err;\r\n                }\r\n                else if(Math.abs(err) < tol) {\r\n                    return s2 + err;\r\n                }\r\n                else {\r\n                    m = a + h * 0.5;\r\n                    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\r\n                    if(isNaN(V1)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n                    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\r\n\r\n                    if(isNaN(V2)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n\r\n                    return V1 + V2;\r\n                }\r\n            }\r\n\r\n            function integrate(f, a, b, tol, maxdepth) {\r\n                var state = {\r\n                    maxDepthCount: 0,\r\n                    nanEncountered: false\r\n                };\r\n\r\n                if(tol === undefined) {\r\n                    tol = 1e-9;\r\n                }\r\n                if(maxdepth === undefined) {\r\n                    /*Issue #458 - This was lowered because of performance issues. */\r\n                    /*This was suspected from before but is now confirmed with this issue*/\r\n                    maxdepth = 45;\r\n                }\r\n\r\n                var fa = f(a);\r\n                var fm = f(0.5 * (a + b));\r\n                var fb = f(b);\r\n\r\n                var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\r\n\r\n                var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\r\n\r\n                if(state.maxDepthCount > 0) {\r\n                    warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\r\n                }\r\n\r\n                if(state.nanEncountered) {\r\n                    throw new Error('Function does not converge over interval!');\r\n                }\r\n\r\n                return result;\r\n            }\r\n            var retval;\r\n\r\n            try {\r\n                retval = integrate(f, a, b, tol, maxdepth);\r\n            }\r\n            catch(e) {\r\n                /*fallback to non-adaptive*/\r\n                return Math2.simpson(f, a, b);\r\n            }\r\n            return nround(retval, 12);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Trigonometric_integral\r\n        //CosineIntegral\r\n        Ci: function (x) {\r\n            var n = 20,\r\n                    /*roughly Euler–Mascheroni*/\r\n                    g = 0.5772156649015329,\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                /*cache 2n*/\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));\r\n            }\r\n            return Math.log(x) + g + sum;\r\n        },\r\n        /*SineIntegral*/\r\n        Si: function (x) {\r\n            var n = 20,\r\n                    sum = 0;\r\n            for(var i = 0; i < n; i++) {\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));\r\n            }\r\n            return sum;\r\n        },\r\n        /*ExponentialIntegral*/\r\n        Ei: function (x) {\r\n            if(Number(x) === 0)\r\n                return -Infinity;\r\n            var n = 30,\r\n                    g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                sum += Math.pow(x, i) / (i * Math2.factorial(i));\r\n            }\r\n            return g + Math.abs(Math.log(x)) + sum;\r\n        },\r\n        /*Hyperbolic Sine Integral*/\r\n        /*http://mathworld.wolfram.com/Shi.html*/\r\n        Shi: function (x) {\r\n            var n = 30,\r\n                    sum = 0,\r\n                    k, t;\r\n            for(var i = 0; i < n; i++) {\r\n                k = 2 * i;\r\n                t = k + 1;\r\n                sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\r\n            }\r\n            return sum;\r\n        },\r\n        /*the cosine integral function*/\r\n        Chi: function (x) {\r\n            var dx, g, f;\r\n            dx = 0.001;\r\n            g = 0.5772156649015328606;\r\n            f = function (t) {\r\n                return (Math.cosh(t) - 1) / t;\r\n            };\r\n            return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\r\n        },\r\n        /*the log integral*/\r\n        Li: function (x) {\r\n            return Math2.Ei(Math2.bigLog(x));\r\n        },\r\n        /*the gamma incomplete function*/\r\n        gamma_incomplete: function (n, x) {\r\n            var t = n - 1,\r\n                    sum = 0,\r\n                    x = x || 0;\r\n            for(var i = 0; i < t; i++) {\r\n                sum += Math.pow(x, i) / Math2.factorial(i);\r\n            }\r\n            return Math2.factorial(t) * Math.exp(-x) * sum;\r\n        },\r\n        /*\r\n         * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\r\n         * if x > 0 then 1\r\n         * if x == 0 then 1/2\r\n         * if x < 0 then 0\r\n         */\r\n        step: function (x) {\r\n            if(x > 0)\r\n                return 1;\r\n            if(x < 0)\r\n                return 0;\r\n            return 0.5;\r\n        },\r\n        /*\r\n         * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/RectangleFunction.html\r\n         * if |x| > 1/2 then 0\r\n         * if |x| == 1/2 then 1/2\r\n         * if |x| < 1/2 then 1\r\n         */\r\n        rect: function (x) {\r\n            var x = Math.abs(x);\r\n            if(x === 0.5)\r\n                return x;\r\n            if(x > 0.5)\r\n                return 0;\r\n            return 1;\r\n        },\r\n        /*\r\n         * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/SincFunction.html\r\n         * if x == 0 then 1\r\n         * otherwise sin(x)/x\r\n         */\r\n        sinc: function (x) {\r\n            if(x.equals(0))\r\n                return 1;\r\n            return Math.sin(x) / x;\r\n        },\r\n        /*\r\n         * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/TriangleFunction.html\r\n         * if |x| >= 1 then 0\r\n         * if |x| < then 1-|x|\r\n         */\r\n        tri: function (x) {\r\n            x = Math.abs(x);\r\n            if(x >= 1)\r\n                return 0;\r\n            return 1 - x;\r\n        },\r\n        //https://en.wikipedia.org/wiki/Nth_root_algorithm\r\n        nthroot: function (A, n) {\r\n            /*make sure the input is of type Frac*/\r\n            if(!(A instanceof Frac))\r\n                A = new Frac(A.toString());\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n.toString());\r\n            if(n.equals(1))\r\n                return A;\r\n            /*begin algorithm*/\r\n            var xk = A.divide(new Frac(2)); /*x0*/\r\n            var e = new Frac(1e-15);\r\n            var dk, dk0, d0;\r\n            var a = n.clone().invert(),\r\n                    b = n.subtract(new Frac(1));\r\n            do {\r\n                var powb = Math2.bigpow(xk, b);\r\n                var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\r\n                dk = Frac.create(dk_dec);\r\n                if(d0)\r\n                    break;\r\n\r\n                xk = xk.add(dk);\r\n                /*check to see if there's no change from the last xk*/\r\n                var dk_dec = dk.toDecimal();\r\n                d0 = dk0 ? dk0 === dk_dec : false;\r\n                dk0 = dk_dec;\r\n            }\r\n            while(dk.abs().gte(e))\r\n\r\n            return xk;\r\n        },\r\n        /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\r\n        /*Just the square root function but big :)*/\r\n        sqrt: function (n) {\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n);\r\n            var xn, d, ld, same_delta;\r\n            var c = 0; /*counter*/\r\n            var done = false;\r\n            var delta = new Frac(1e-20);\r\n            xn = n.divide(new Frac(2));\r\n            var safety = 1000;\r\n            do {\r\n                /*break if we're not converging*/\r\n                if(c > safety)\r\n                    throw new Error('Unable to calculate square root for ' + n);\r\n                xn = xn.add(n.divide(xn)).divide(new Frac(2));\r\n                xn = new Frac(xn.decimal(30));\r\n                /*get the difference from the true square*/\r\n                d = n.subtract(xn.multiply(xn));\r\n                /*if the square of the calculated number is close enough to the number*/\r\n                /*we're getting the square root or the last delta was the same as the new delta*/\r\n                /*then we're done*/\r\n                same_delta = ld ? ld.equals(d) : false;\r\n                if(d.clone().abs().lessThan(delta) || same_delta)\r\n                    done = true;\r\n                /*store the calculated delta*/\r\n                ld = d;\r\n                c++; /*increase the counter*/\r\n            }\r\n            while(!done)\r\n\r\n            return xn;\r\n        }\r\n    };\r\n    //link the Math2 object to Settings.FUNCTION_MODULES\r\n    Settings.FUNCTION_MODULES.push(Math2);\r\n    reserveNames(Math2); //reserve the names in Math2\r\n\r\n\r\n//Polyfills ====================================================================\r\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\r\n    Math.sign = Math.sign || function (x) {\r\n        x = +x; // convert to a number\r\n        if(x === 0 || isNaN(x)) {\r\n            return x;\r\n        }\r\n        return x > 0 ? 1 : -1;\r\n    };\r\n\r\n    Math.cosh = Math.cosh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y + 1 / y) / 2;\r\n    };\r\n\r\n    Math.sech = Math.sech || function (x) {\r\n        return 1 / Math.cosh(x);\r\n    };\r\n\r\n    Math.csch = Math.csch || function (x) {\r\n        return 1 / Math.sinh(x);\r\n    };\r\n\r\n    Math.coth = Math.coth || function (x) {\r\n        return 1 / Math.tanh(x);\r\n    };\r\n\r\n    Math.sinh = Math.sinh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y - 1 / y) / 2;\r\n    };\r\n\r\n    Math.tanh = Math.tanh || function (x) {\r\n        if(x === Infinity) {\r\n            return 1;\r\n        }\r\n        else if(x === -Infinity) {\r\n            return -1;\r\n        }\r\n        else {\r\n            var y = Math.exp(2 * x);\r\n            return (y - 1) / (y + 1);\r\n        }\r\n    };\r\n\r\n    Math.asinh = Math.asinh || function (x) {\r\n        if(x === -Infinity) {\r\n            return x;\r\n        }\r\n        else {\r\n            return Math.log(x + Math.sqrt(x * x + 1));\r\n        }\r\n    };\r\n\r\n    Math.acosh = Math.acosh || function (x) {\r\n        return Math.log(x + Math.sqrt(x * x - 1));\r\n    };\r\n\r\n    Math.atanh = Math.atanh || function (x) {\r\n        return Math.log((1 + x) / (1 - x)) / 2;\r\n    };\r\n\r\n    Math.log10 = Math.log10 || function (x) {\r\n        return Math.log(x) * Math.LOG10E;\r\n    };\r\n\r\n    Math.trunc = Math.trunc || function (x) {\r\n        if(isNaN(x)) {\r\n            return NaN;\r\n        }\r\n        if(x > 0) {\r\n            return Math.floor(x);\r\n        }\r\n        return Math.ceil(x);\r\n    };\r\n\r\n//Global functions =============================================================\r\n    /**\r\n     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\r\n     * If all else fails it *assumes* the object has a toString method and will call that.\r\n     *\r\n     * @param {Object} obj\r\n     * @param {String} option get is as a hash\r\n     * @param {int} useGroup\r\n     * @returns {String}\r\n     */\r\n    function text(obj, option, useGroup, decp) { \r\n        var asHash = option === 'hash',\r\n                //whether to wrap numbers in brackets\r\n                wrapCondition = undefined,\r\n                opt = asHash ? undefined : option,\r\n                asDecimal = opt === 'decimal' || opt === 'decimals';\r\n\r\n        if(asDecimal && typeof decp === 'undefined')\r\n            decp = Settings.DEFAULT_DECP;\r\n\r\n        function toString(obj) {\r\n            switch(option)\r\n            {\r\n                case 'decimals':\r\n                case 'decimal':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return obj.valueOf();\r\n                case 'recurring':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf(\"'\") !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var negative = false;\r\n                    var m = Number(parts[0]);\r\n                    if(m < 0) {\r\n                        m = -m;\r\n                        negative = true;\r\n                    }\r\n                    var n = Number(parts[1]);\r\n                    if(!n)\r\n                        n = 1;\r\n\r\n                    //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\r\n                    var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);\r\n                    quotient = quotient.toString() + \".\";\r\n                    while(c && c < n) {\r\n                        c *= 10;\r\n                        quotient += \"0\";\r\n                    }\r\n                    var digits = \"\", passed = [], i = 0;\r\n                    while(true) {\r\n                        if(typeof passed[c] !== 'undefined') {\r\n                            var prefix = digits.slice(0, passed[c]),\r\n                                    cycle = digits.slice(passed[c]),\r\n                                    result = quotient + prefix + \"'\" + cycle + \"'\";\r\n                            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\r\n                        }\r\n                        var q = Math.floor(c / n), r = c - q * n;\r\n                        passed[c] = i;\r\n                        digits += q.toString();\r\n                        i += 1;\r\n                        c = 10 * r;\r\n                    }\r\n                case 'mixed':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var numer = new bigInt(parts[0]);\r\n                    var denom = new bigInt(parts[1]);\r\n                    if(denom.equals(0))\r\n                        denom = new bigInt(1);\r\n\r\n                    //return the quotient plus the remainder\r\n                    var divmod = numer.divmod(denom);\r\n                    var quotient = divmod.quotient;\r\n                    var remainder = divmod.remainder;\r\n                    var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\r\n                    return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));\r\n                case 'scientific':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\r\n                default:\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    return obj.toString();\r\n            }\r\n        }\r\n\r\n        //if the object is a symbol\r\n        if(isSymbol(obj)) {\r\n            var multiplier = '',\r\n                    power = '',\r\n                    sign = '',\r\n                    group = obj.group || useGroup,\r\n                    value = obj.value;\r\n\r\n            //if the value is to be used as a hash then the power and multiplier need to be suppressed\r\n            if(!asHash) {\r\n                //use asDecimal to get the object back as a decimal\r\n                var om = toString(obj.multiplier);\r\n                if(om == '-1' && String(obj.multiplier) === '-1') {\r\n                    sign = '-';\r\n                    om = '1';\r\n                }\r\n                //only add the multiplier if it's not 1\r\n                if(om != '1')\r\n                    multiplier = om;\r\n                //use asDecimal to get the object back as a decimal\r\n                var p = obj.power ? toString(obj.power) : '';\r\n                //only add the multiplier\r\n                if(p != '1') {\r\n                    //is it a symbol\r\n                    if(isSymbol(p)) {\r\n                        power = text(p, opt);\r\n                    }\r\n                    else {\r\n                        power = p;\r\n                    }\r\n                }\r\n            }\r\n\r\n            switch(group) {\r\n                case N:\r\n                    multiplier = '';\r\n                    //round if requested\r\n                    var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\r\n                    //if it's numerical then all we need is the multiplier\r\n                    value = String(obj.multiplier) == '-1' ? '1' : m;\r\n                    power = '';\r\n                    break;\r\n                case PL:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CP:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CB:\r\n                    value = obj.collectSymbols(function (symbol) {\r\n                        var g = symbol.group;\r\n                        //both groups will already be in brackets if their power is greater than 1\r\n                        //so skip it.\r\n                        if((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {\r\n                            return inBrackets(text(symbol, opt));\r\n                        }\r\n                        return text(symbol, opt);\r\n                    }).join('*');\r\n                    break;\r\n                case EX:\r\n                    var pg = obj.previousGroup,\r\n                            pwg = obj.power.group;\r\n\r\n                    //PL are the exception. It's simpler to just collect and set the value\r\n                    if(pg === PL)\r\n                        value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\r\n                    if(!(pg === N || pg === S || pg === FN) && !asHash) {\r\n                        value = inBrackets(value);\r\n                    }\r\n\r\n                    if((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\r\n                        power = inBrackets(power);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            if(group === FN) {\r\n                value = obj.fname + inBrackets(obj.args.map(function (symbol) {\r\n                    return text(symbol, opt);\r\n                }).join(','));\r\n            }\r\n            //TODO: Needs to be more efficient. Maybe.\r\n            if(group === FN && obj.fname in CUSTOM_OPERATORS) {\r\n                var a = text(obj.args[0]);\r\n                var b = text(obj.args[1]);\r\n                if(obj.args[0].isComposite()) //preserve the brackets\r\n                    a = inBrackets(a);\r\n                if(obj.args[1].isComposite()) //preserve the brackets\r\n                    b = inBrackets(b);\r\n                value = a + CUSTOM_OPERATORS[obj.fname] + b;\r\n            }\r\n            //wrap the power since / is less than ^\r\n            //TODO: introduce method call isSimple\r\n            if(power && group !== EX && wrapCondition(power)) {\r\n                power = inBrackets(power);\r\n            }\r\n\r\n            //the following groups are held together by plus or minus. They can be raised to a power or multiplied\r\n            //by a multiplier and have to be in brackets to preserve the order of precedence\r\n            if(((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))\r\n                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))\r\n                    || !asHash && group === P && value == -1\r\n                    || obj.fname === PARENTHESIS) {\r\n\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            if(decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\r\n                multiplier = nround(multiplier, decp);\r\n            }\r\n\r\n\r\n            //add the sign back\r\n            var c = sign + multiplier;\r\n\r\n            if(multiplier && wrapCondition(multiplier))\r\n                c = inBrackets(c);\r\n\r\n            if(power < 0)\r\n                power = inBrackets(power);\r\n\r\n            //add the multiplication back\r\n            if(multiplier)\r\n                c = c + '*';\r\n\r\n            if(power) {\r\n                if(value === 'e' && Settings.E_TO_EXP) {\r\n                    return c + 'exp' + inBrackets(power);\r\n                }\r\n                power = Settings.POWER_OPERATOR + power;\r\n            }\r\n\r\n            //this needs serious rethinking. Must fix\r\n            if(group === EX && value.charAt(0) === '-') {\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            var cv = c + value;\r\n\r\n            if(obj.parens) {\r\n                cv = inBrackets(cv);\r\n            }\r\n\r\n            return cv + power;\r\n        }\r\n        else if(isVector(obj)) {\r\n            var l = obj.elements.length,\r\n                    c = [];\r\n            for(var i = 0; i < l; i++)\r\n                c.push(obj.elements[i].text(option));\r\n            return '[' + c.join(',') + ']';\r\n        }\r\n        else {\r\n            try {\r\n                return obj.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calculates prime factors for a number. It first checks if the number\r\n     * is a prime number. If it's not then it will calculate all the primes \r\n     * for that number.\r\n     * @param {int} num\r\n     * @returns {Array}\r\n     */\r\n\r\n    function primeFactors(num) {\r\n        if(isPrime(num)) {\r\n            return [num];\r\n        }\r\n\r\n        var l = num, i = 1, factors = [],\r\n                epsilon = 2.2204460492503130808472633361816E-16;\r\n        while(i < l) {\r\n            var quotient = num / i;\r\n            var whole = Math.floor(quotient);\r\n            var remainder = quotient - whole;\r\n\r\n            if(remainder <= epsilon && i > 1) {\r\n                // If the prime wasn't found but calculated then save it and\r\n                // add it as a factor.\r\n                if(isPrime(i)) {\r\n                    if(PRIMES.indexOf(i) === -1) {\r\n                        PRIMES.push(i);\r\n                    }\r\n                    factors.push(i);\r\n                }\r\n\r\n                // Check if the remainder is a prime\r\n                if(isPrime(whole)) {\r\n                    factors.push(whole);\r\n                    break;\r\n                }\r\n\r\n                l = whole;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return factors.sort(function (a, b) {\r\n            return a - b;\r\n        });\r\n    }\r\n    ;\r\n    primeFactors(314146179365)\r\n//Expression ===================================================================\r\n    /**\r\n     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and\r\n     * provides the user with some useful functions. If you want to provide the user with extra\r\n     * library functions then add them to this class's prototype.\r\n     * @param {Symbol} symbol\r\n     * @returns {Expression} wraps around the Symbol class\r\n     */\r\n    function Expression(symbol) {\r\n        //we don't want arrays wrapped\r\n        this.symbol = symbol;\r\n    }\r\n    /**\r\n     * Returns stored expression at index. For first index use 1 not 0.\r\n     * @param {bool} asType\r\n     * @param {Integer} expression_number\r\n     */\r\n    Expression.getExpression = function (expression_number, asType) {\r\n        if(expression_number === 'last' || !expression_number)\r\n            expression_number = EXPRESSIONS.length;\r\n        if(expression_number === 'first')\r\n            expression_number = 1;\r\n        var index = expression_number - 1,\r\n                expression = EXPRESSIONS[index],\r\n                retval = expression ? new Expression(expression) : expression;\r\n        return retval;\r\n    };\r\n    Expression.prototype = {\r\n        /**\r\n         * Returns the text representation of the expression\r\n         * @param {String} opt - option of formatting numbers\r\n         * @param {Number} n The number of significant figures\r\n         * @returns {String}\r\n         */\r\n        text: function (opt, n) {\r\n            n = n || Settings.EXPRESSION_DECP;\r\n            opt = opt || 'decimals';\r\n            if(this.symbol.text_)\r\n                return this.symbol.text_(opt);\r\n\r\n            return text(this.symbol, opt, undefined, n);\r\n        },\r\n        /**\r\n         * Returns the latex representation of the expression\r\n         * @param {String} option - option for formatting numbers\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            if(this.symbol.latex)\r\n                return this.symbol.latex(option);\r\n            return LaTeX.latex(this.symbol, option);\r\n        },\r\n        valueOf: function () {\r\n            return this.symbol.valueOf();\r\n        },\r\n\r\n        /**\r\n         * Evaluates the expression and tries to reduce it to a number if possible.\r\n         * If an argument is given in the form of %{integer} it will evaluate that expression.\r\n         * Other than that it will just use it's own text and reparse\r\n         * @returns {Expression}\r\n         */\r\n        evaluate: function () {\r\n\r\n            // Don't evaluate an empty vector\r\n            if(isVector(this.symbol) && this.symbol.dimensions() === 0) {\r\n                return this;\r\n            }\r\n\r\n            var first_arg = arguments[0], expression, idx = 1;\r\n\r\n            //Enable getting of expressions using the % so for example %1 should get the first expression\r\n            if(typeof first_arg === 'string') {\r\n                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\r\n            }\r\n            else if(first_arg instanceof Expression || isSymbol(first_arg)) {\r\n                expression = first_arg.text();\r\n            }\r\n            else {\r\n                expression = this.symbol.text();\r\n                idx--;\r\n            }\r\n\r\n            var subs = arguments[idx] || {};\r\n\r\n            var retval = new Expression(block('PARSE2NUMBER', function () {\r\n                return _.parse(expression, subs);\r\n            }, true));\r\n\r\n            return retval;\r\n        },\r\n        /**\r\n         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of\r\n         * the default alphabetical order\r\n         * @param vars {Array}\r\n         */\r\n        buildFunction: function (vars) {\r\n            return Build.build(this.symbol, vars);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is just a plain old number\r\n         * @returns {boolean}\r\n         */\r\n        isNumber: function () {\r\n            return isNumericSymbol(this.symbol);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is infinity\r\n         * @returns {boolean}\r\n         */\r\n        isInfinity: function () {\r\n            return Math.abs(this.symbol.multiplier) === Infinity;\r\n        },\r\n        /**\r\n         * Checks to see if the expression contains imaginary numbers\r\n         * @returns {boolean}\r\n         */\r\n        isImaginary: function () {\r\n            return evaluate(_.parse(this.symbol)).isImaginary();\r\n        },\r\n        /**\r\n         * Returns all the variables in the expression\r\n         * @returns {Array}\r\n         */\r\n        variables: function () {\r\n            return variables(this.symbol);\r\n        },\r\n\r\n        toString: function () {\r\n            try {\r\n                if(isArray(this.symbol))\r\n                    return '[' + this.symbol.toString() + ']';\r\n                return this.symbol.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        },\r\n        //forces the symbol to be returned as a decimal\r\n        toDecimal: function (prec) {\r\n            Settings.precision = prec;\r\n            var dec = text(this.symbol, 'decimals');\r\n            Settings.precision = undefined;\r\n            return dec;\r\n        },\r\n        //checks to see if the expression is a fraction\r\n        isFraction: function () {\r\n            return isFraction(this.symbol);\r\n        },\r\n        //checks to see if the symbol is a multivariate polynomial\r\n        isPolynomial: function () {\r\n            return this.symbol.isPoly();\r\n        },\r\n        //performs a substitution\r\n        sub: function (symbol, for_symbol) {\r\n            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\r\n        },\r\n        operation: function (otype, symbol) {\r\n            if(isExpression(symbol))\r\n                symbol = symbol.symbol;\r\n            else if(!isSymbol(symbol))\r\n                symbol = _.parse(symbol);\r\n            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\r\n        },\r\n        add: function (symbol) {\r\n            return this.operation('add', symbol);\r\n        },\r\n        subtract: function (symbol) {\r\n            return this.operation('subtract', symbol);\r\n        },\r\n        multiply: function (symbol) {\r\n            return this.operation('multiply', symbol);\r\n        },\r\n        divide: function (symbol) {\r\n            return this.operation('divide', symbol);\r\n        },\r\n        pow: function (symbol) {\r\n            return this.operation('pow', symbol);\r\n        },\r\n        expand: function () {\r\n            return new Expression(_.expand(this.symbol));\r\n        },\r\n        each: function (callback, i) {\r\n            if(this.symbol.each)\r\n                this.symbol.each(callback, i);\r\n            else if(isArray(this.symbol)) {\r\n                for(var i = 0; i < this.symbol.length; i++)\r\n                    callback.call(this.symbol, this.symbol[i], i);\r\n            }\r\n            else\r\n                callback.call(this.symbol);\r\n        },\r\n        eq: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = _.subtract(this.symbol.clone(), value);\r\n                return d.equals(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        lt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.lessThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        gt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.greaterThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n        },\r\n        gte: function (value) {\r\n            return this.gt(value) || this.eq(value);\r\n        },\r\n        lte: function (value) {\r\n            return this.lt(value) || this.eq(value);\r\n        },\r\n\r\n        numerator: function () {\r\n            return new Expression(this.symbol.getNum());\r\n        },\r\n        denominator: function () {\r\n            return new Expression(this.symbol.getDenom());\r\n        },\r\n        hasFunction: function (f) {\r\n            return this.symbol.containsFunction(f);\r\n        },\r\n        contains: function (variable) {\r\n            return this.symbol.contains(variable);\r\n        }\r\n    };\r\n    //Aliases\r\n    Expression.prototype.toTeX = Expression.prototype.latex;\r\n\r\n    \r\n//Scientific ===================================================================\r\n    /*\r\n     * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\r\n     * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\r\n     */\r\n\r\n    function Scientific(num) {\r\n        if(!(this instanceof Scientific))\r\n            return new Scientific(num);\r\n\r\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\r\n\r\n        //remove the sign\r\n        if(num.startsWith('-')) {\r\n            this.sign = -1;\r\n            //remove the sign\r\n            num = num.substr(1, num.length);\r\n        }\r\n        else {\r\n            this.sign = 1;\r\n        }\r\n\r\n        if(Scientific.isScientific(num)) {\r\n            this.fromScientific(num);\r\n        }\r\n        else {\r\n            this.convert(num);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    Scientific.prototype = {\r\n        fromScientific: function (num) {\r\n            var parts = String(num).toLowerCase().split('e');\r\n            this.coeff = parts[0];\r\n            this.exponent = parts[1];\r\n\r\n            return this;\r\n        },\r\n        convert: function (num) {\r\n            //get wholes and decimals\r\n            var parts = num.split('.');\r\n            //make zero go away\r\n            var w = parts[0] || '';\r\n            var d = parts[1] || '';\r\n            //convert zero to blank strings\r\n            w = Scientific.removeLeadingZeroes(w);\r\n            d = Scientific.removeTrailingZeroes(d);\r\n            //find the location of the decimal place which is right after the wholes\r\n            var dot_location = w.length;\r\n            //add them together so we can move the dot\r\n            var n = w + d;\r\n            //find the next number\r\n            var zeroes = Scientific.leadingZeroes(n).length;\r\n            //set the exponent\r\n            this.exponent = dot_location - (zeroes + 1);\r\n            //set the coeff but first remove leading zeroes\r\n            var coeff = Scientific.removeLeadingZeroes(n);\r\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\r\n\r\n            //the coeff decimal places\r\n            var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\r\n\r\n            this.decp = dec === '0' ? 0 : dec.length;\r\n            //decimals\r\n            this.dec = d;\r\n            //wholes\r\n            this.wholes = w;\r\n\r\n            return this;\r\n        },\r\n        round: function (num) {\r\n            var n = this.copy();\r\n\r\n            num = Number(num); //cast to number for safety\r\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\r\n            //we can round based on this\r\n            if(num === 0)\r\n                n.coeff = n.coeff.charAt(0);\r\n            else {\r\n                //get up to n-1 digits\r\n                var rounded = this.coeff.substring(0, num + 1);\r\n                //get the next two\r\n                var next_two = this.coeff.substring(num + 1, num + 3);\r\n                //the extra digit\r\n                var ed = next_two.charAt(0);\r\n\r\n                if(next_two.charAt(1) > 4)\r\n                    ed++;\r\n\r\n                n.coeff = rounded + ed;\r\n            }\r\n\r\n            return n;\r\n        },\r\n        copy: function () {\r\n            var n = new Scientific(0);\r\n            n.coeff = this.coeff;\r\n            n.exponent = this.exponent;\r\n            n.sign = this.sign;\r\n            return n;\r\n        },\r\n        toString: function (n) {\r\n            var retval;\r\n\r\n            if(Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {\r\n                if(this.decp === 0)\r\n                    retval = this.wholes;\r\n                else\r\n                    retval = this.coeff;\r\n            }\r\n            else {\r\n                var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\r\n                retval = this.exponent === 0 ? coeff : coeff + 'e' + this.exponent;\r\n            }\r\n\r\n            return (this.sign === -1 ? '-' : '') + retval;\r\n        }\r\n    };\r\n\r\n    Scientific.isScientific = function (num) {\r\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\r\n    };\r\n    Scientific.leadingZeroes = function (num) {\r\n        var match = num.match(/^(0*).*$/);\r\n        return match ? match[1] : '';\r\n    };\r\n    Scientific.removeLeadingZeroes = function (num) {\r\n        var match = num.match(/^0*(.*)$/);\r\n        return match ? match[1] : '';\r\n    };\r\n\r\n    Scientific.removeTrailingZeroes = function (num) {\r\n        var match = num.match(/0*$/);\r\n        return match ? num.substring(0, num.length - match[0].length) : '';\r\n    };\r\n\r\n    Scientific.round = function (c, n) {\r\n        var coeff = nround(c, n);\r\n        var m = String(coeff).split('.').pop();\r\n        var d = n - m.length;\r\n        //if we're asking for more significant figures\r\n        if(d > 0) {\r\n            coeff = coeff + (new Array(d + 1).join(0));\r\n        }\r\n        return coeff;\r\n    };\r\n\r\n//Frac =========================================================================\r\n    function Frac(n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        if(n === undefined)\r\n            return this;\r\n        try {\r\n            if(isInt(n)) {\r\n                try {\r\n                    this.num = bigInt(n);\r\n                    this.den = bigInt(1);\r\n                }\r\n                catch(e) {\r\n                    return Frac.simple(n);\r\n                }\r\n            }\r\n            else {\r\n                var frac = n instanceof bigDec ? Fraction.quickConversion(n) : Fraction.convert(n);\r\n                this.num = new bigInt(frac[0]);\r\n                this.den = new bigInt(frac[1]);\r\n            }\r\n        }\r\n        catch(e) {\r\n            return Frac.simple(n);\r\n        }\r\n\r\n    }\r\n    //safe to use with negative numbers or other types\r\n    Frac.create = function (n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        n = n.toString();\r\n        var is_neg = n.charAt(0) === '-'; //check if it's negative\r\n        if(is_neg)\r\n            n = n.substr(1, n.length - 1); //remove the sign\r\n        var frac = new Frac(n);\r\n        //put the sign back\r\n        if(is_neg)\r\n            frac.negate();\r\n        return frac;\r\n    };\r\n    Frac.isFrac = function (o) {\r\n        return (o instanceof Frac);\r\n    };\r\n    Frac.quick = function (n, d) {\r\n        var frac = new Frac();\r\n        frac.num = new bigInt(n);\r\n        frac.den = new bigInt(d);\r\n        return frac;\r\n    };\r\n    Frac.simple = function (n) {\r\n        var nstr = String(scientificToDecimal(n)),\r\n                m_dc = nstr.split('.'),\r\n                num = m_dc.join(''),\r\n                den = 1,\r\n                l = (m_dc[1] || '').length;\r\n        for(var i = 0; i < l; i++)\r\n            den += '0';\r\n        var frac = Frac.quick(num, den);\r\n        return frac.simplify();\r\n    };\r\n    Frac.prototype = {\r\n        multiply: function (m) {\r\n            if(this.isOne()) {\r\n                return m.clone();\r\n            }\r\n            if(m.isOne()) {\r\n                return this.clone();\r\n            }\r\n\r\n            var c = this.clone();\r\n            c.num = c.num.multiply(m.num);\r\n            c.den = c.den.multiply(m.den);\r\n\r\n            return c.simplify();\r\n        },\r\n        divide: function (m) {\r\n            if(m.equals(0))\r\n                throw new DivisionByZero('Division by zero not allowed!');\r\n            return this.clone().multiply(m.clone().invert()).simplify();\r\n        },\r\n        subtract: function (m) {\r\n            return this.clone().add(m.clone().neg());\r\n        },\r\n        neg: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        add: function (m) {\r\n            var n1 = this.den, n2 = m.den, c = this.clone();\r\n            var a = c.num, b = m.num;\r\n            if(n1.equals(n2)) {\r\n                c.num = a.add(b);\r\n            }\r\n            else {\r\n                c.num = a.multiply(n2).add(b.multiply(n1));\r\n                c.den = n1.multiply(n2);\r\n            }\r\n\r\n            return c.simplify();\r\n        },\r\n        mod: function (m) {\r\n            var a = this.clone(),\r\n                    b = m.clone();\r\n            //make their denominators even and return the mod of their numerators\r\n            a.num = a.num.multiply(b.den);\r\n            a.den = a.den.multiply(b.den);\r\n            b.num = b.num.multiply(this.den);\r\n            b.den = b.den.multiply(this.den);\r\n            a.num = a.num.mod(b.num);\r\n            return a.simplify();\r\n        },\r\n        simplify: function () {\r\n            var gcd = bigInt.gcd(this.num, this.den);\r\n\r\n            this.num = this.num.divide(gcd);\r\n            this.den = this.den.divide(gcd);\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var m = new Frac();\r\n            m.num = new bigInt(this.num);\r\n            m.den = new bigInt(this.den);\r\n            return m;\r\n        },\r\n        decimal: function (prec) {\r\n            var sign = this.num.isNegative() ? '-' : '';\r\n            if(this.num.equals(this.den)) {\r\n                return '1';\r\n            }\r\n            //go plus one for rounding\r\n            prec = prec || Settings.PRECISION;\r\n            prec++;\r\n            var narr = [],\r\n                    n = this.num.abs(),\r\n                    d = this.den;\r\n            for(var i = 0; i < prec; i++) {\r\n                var w = n.divide(d), //divide out whole\r\n                        r = n.subtract(w.multiply(d)); //get remainder\r\n\r\n                narr.push(w);\r\n                if(r.equals(0))\r\n                    break;\r\n                n = r.times(10); //shift one dec place\r\n            }\r\n            var whole = narr.shift();\r\n            if(narr.length === 0) {\r\n                return sign + whole.toString();\r\n            }\r\n\r\n            if(i === prec) {\r\n                var lt = [];\r\n                //get the last two so we can round it\r\n                for(var i = 0; i < 2; i++)\r\n                    lt.unshift(narr.pop());\r\n                //put the last digit back by rounding the last two\r\n                narr.push(Math.round(lt.join('.')));\r\n            }\r\n\r\n            var dec = whole.toString() + '.' + narr.join('');\r\n            return sign + dec;\r\n        },\r\n        toDecimal: function (prec) { \r\n            prec = prec || Settings.PRECISION;\r\n            if(prec) {\r\n                return this.decimal(prec);\r\n            }\r\n            else {\r\n                return this.num / this.den;\r\n            }\r\n        },\r\n        qcompare: function (n) {\r\n            return [this.num.multiply(n.den), n.num.multiply(this.den)];\r\n        },\r\n        equals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].equals(q[1]);\r\n        },\r\n        absEquals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].abs().equals(q[1]);\r\n        },\r\n        //lazy check to be fixed. Sufficient for now but will cause future problems\r\n        greaterThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].gt(q[1]);\r\n        },\r\n        gte: function (n) {\r\n            return this.greaterThan(n) || this.equals(n);\r\n        },\r\n        lte: function (n) {\r\n            return this.lessThan(n) || this.equals(n);\r\n        },\r\n        lessThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].lt(q[1]);\r\n        },\r\n        isInteger: function () {\r\n            return this.den.equals(1);\r\n        },\r\n        negate: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        invert: function () {\r\n            var t = this.den;\r\n            //why invert 0/1? It'll become 1/0 and that's a lie.\r\n            if(!this.num.equals(0)) {\r\n                var isnegative = this.num.isNegative();\r\n                this.den = this.num.abs();\r\n                this.num = t;\r\n                if(isnegative)\r\n                    this.num = this.num.multiply(-1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        isOne: function () {\r\n            return this.num.equals(1) && this.den.equals(1);\r\n        },\r\n        sign: function () {\r\n            return this.num.isNegative() ? -1 : 1;\r\n        },\r\n        abs: function () {\r\n            this.num = this.num.abs();\r\n            return this;\r\n        },\r\n        gcd: function (f) {\r\n            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\r\n        },\r\n        toString: function () {\r\n            return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\r\n        },\r\n        valueOf: function () {\r\n//            if(this.num == 24) throw new Error(999)\r\n            if(Settings.USE_BIG)\r\n                return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\r\n            var retval = this.num / this.den;\r\n            return retval;\r\n        },\r\n        isNegative: function () {\r\n            return this.toDecimal() < 0;\r\n        }\r\n    };\r\n\r\n//Symbol =======================================================================\r\n    /**\r\n     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\r\n     * All symbols except for \"numbers (group N)\" have a power.\r\n     * @class Primary data type for the Parser.\r\n     * @param {String} obj\r\n     * @returns {Symbol}\r\n     */\r\n    function Symbol(obj) {\r\n        var isInfinity = obj === 'Infinity';\r\n        // This enables the class to be instantiated without the new operator\r\n        if(!(this instanceof Symbol)) {\r\n            return new Symbol(obj);\r\n        }\r\n        // Convert big numbers to a string\r\n        if(obj instanceof bigDec) {\r\n            obj = obj.toString();\r\n        }\r\n        //define numeric symbols\r\n        if(/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj) || obj instanceof bigDec) {\r\n            this.group = N;\r\n            this.value = CONST_HASH;\r\n            this.multiplier = new Frac(obj);\r\n        }\r\n        //define symbolic symbols\r\n        else {\r\n            this.group = S;\r\n            validateName(obj);\r\n            this.value = obj;\r\n            this.multiplier = new Frac(1);\r\n            this.imaginary = obj === Settings.IMAGINARY;\r\n            this.isInfinity = isInfinity;\r\n        }\r\n\r\n        //As of 6.0.0 we switched to infinite precision so all objects have a power\r\n        //Although this is still redundant in constants, it simplifies the logic in\r\n        //other parts so we'll keep it\r\n        this.power = new Frac(1);\r\n\r\n        // Added to silence the strict warning.\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns vanilla imaginary symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.imaginary = function () {\r\n        var s = new Symbol(Settings.IMAGINARY);\r\n        s.imaginary = true;\r\n        return s;\r\n    };\r\n    /**\r\n     * Return nerdamer's representation of Infinity\r\n     * @param {int} negative -1 to return negative infinity\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.infinity = function (negative) {\r\n        var v = new Symbol('Infinity');\r\n        if(negative === -1)\r\n            v.negate();\r\n        return v;\r\n    };\r\n    Symbol.shell = function (group, value) {\r\n        var symbol = new Symbol(value);\r\n        symbol.group = group;\r\n        symbol.symbols = {};\r\n        symbol.length = 0;\r\n        return symbol;\r\n    };\r\n    //sqrt(x) -> x^(1/2)\r\n    Symbol.unwrapSQRT = function (symbol, all) {\r\n        var p = symbol.power;\r\n        if(symbol.fname === SQRT && (symbol.isLinear() || all)) {\r\n            var t = symbol.args[0].clone();\r\n            t.power = t.power.multiply(new Frac(1 / 2));\r\n            t.multiplier = t.multiplier.multiply(symbol.multiplier);\r\n            symbol = t;\r\n            if(all)\r\n                symbol.power = p.multiply(new Frac(1 / 2));\r\n        }\r\n\r\n        return symbol;\r\n    };\r\n    Symbol.hyp = function (a, b) {\r\n        a = a || new Symbol(0);\r\n        b = b || new Symbol(0);\r\n        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\r\n    };\r\n    //converts to polar form array\r\n    Symbol.toPolarFormArray = function (symbol) {\r\n        var re, im, r, theta;\r\n        re = symbol.realpart();\r\n        im = symbol.imagpart();\r\n        r = Symbol.hyp(re, im);\r\n        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\r\n        return [r, theta];\r\n    };\r\n    //removes parentheses\r\n    Symbol.unwrapPARENS = function (symbol) {\r\n        if(symbol.fname === '') {\r\n            var r = symbol.args[0];\r\n            r.power = r.power.multiply(symbol.power);\r\n            r.multiplier = r.multiplier.multiply(symbol.multiplier);\r\n            if(symbol.fname === '')\r\n                return Symbol.unwrapPARENS(r);\r\n            return r;\r\n        }\r\n        return symbol;\r\n    };\r\n    //quickly creates a Symbol\r\n    Symbol.create = function (value, power) {\r\n        power = power === undefined ? 1 : power;\r\n        return _.parse('(' + value + ')^(' + power + ')');\r\n    };\r\n    Symbol.prototype = {\r\n        /**\r\n         * Gets nth root accounting for rounding errors\r\n         * @param {Number} n\r\n         * @return {Number}\r\n         */\r\n        getNth: function (n) {\r\n            // First calculate the root\r\n            var root = evaluate(_.pow(_.parse(this.multiplier), _.parse(n).invert()));\r\n            // Round of any errors\r\n            var rounded = _.parse(nround(root));\r\n            // Reverse the root\r\n            var e = evaluate(_.pow(rounded, _.parse(n)));\r\n            // If the rounded root equals the original number then we're good \r\n            if(e.equals(_.parse(this.multiplier))) {\r\n                return rounded;\r\n            }\r\n            // Otherwise return the unrounded version\r\n            return root;\r\n        },\r\n        /**\r\n         * Checks if symbol is to the nth power\r\n         * @returns {Boolean}\r\n         */\r\n        isToNth: function (n) {\r\n            // Start by check in the multiplier for squareness\r\n            // First get the root but round it because currently we still depend \r\n            var root = this.getNth(n);\r\n            var nthMultiplier = isInt(root);\r\n            var nthPower;\r\n\r\n            if(this.group === CB) {\r\n                // Start by assuming that all will be square.\r\n                nthPower = true;\r\n                // All it takes is for one of the symbols to not have an even power\r\n                // e.g. x^n1*y^n2 requires that both n1 and n2 are even\r\n                this.each(function (x) {\r\n                    var isNth = x.isToNth(n);\r\n\r\n                    if(!isNth) {\r\n                        nthPower = false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                // Check if the power is divisible by n if it's not a number.\r\n                nthPower = this.group === N ? true : isInt(_.divide(_.parse(this.power), _.parse(n)));\r\n            }\r\n\r\n            return nthMultiplier && nthPower;\r\n        },\r\n        /**\r\n         * Checks if a symbol is square\r\n         * @return {Boolean}\r\n         */\r\n        isSquare: function () {\r\n            return this.isToNth(2);\r\n        },\r\n        /**\r\n         * Checks if a symbol is cube\r\n         * @return {Boolean}\r\n         */\r\n        isCube: function () {\r\n            return this.isToNth(3);\r\n        },\r\n        /**\r\n         * Checks if a symbol is a bare variable\r\n         * @return {Boolean}\r\n         */\r\n        isSimple: function () {\r\n            return this.power.equals(1) && this.multiplier.equals(1);\r\n        },\r\n        /**\r\n         * Simplifies the power of the symbol\r\n         * @returns {Symbol} a clone of the symbol\r\n         */\r\n        powSimp: function () {\r\n            if(this.group === CB) {\r\n                var powers = [],\r\n                        sign = this.multiplier.sign();\r\n                this.each(function (x) {\r\n                    var p = x.power;\r\n                    //why waste time if I can't do anything anyway\r\n                    if(isSymbol(p) || p.equals(1))\r\n                        return this.clone();\r\n                    powers.push(p);\r\n                });\r\n                var min = new Frac(arrayMin(powers));\r\n\r\n                //handle the coefficient\r\n                //handle the multiplier\r\n                var sign = this.multiplier.sign(),\r\n                        m = this.multiplier.clone().abs(),\r\n                        mfactors = Math2.ifactor(m);\r\n                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\r\n                //we can then reduce it to 2*3*5*(15)^2\r\n                var out_ = new Frac(1);\r\n                var in_ = new Frac(1);\r\n\r\n                for(var x in mfactors) {\r\n                    var n = new Frac(mfactors[x]);\r\n                    if(!n.lessThan(min)) {\r\n                        n = n.divide(min).subtract(new Frac(1));\r\n                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\r\n                    }\r\n\r\n                    out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\r\n                }\r\n                var t = new Symbol(in_);\r\n                this.each(function (x) {\r\n                    x = x.clone();\r\n                    x.power = x.power.divide(min);\r\n                    t = _.multiply(t, x);\r\n                });\r\n\r\n                var xt = _.symfunction(PARENTHESIS, [t]);\r\n                xt.power = min;\r\n                xt.multiplier = sign < 0 ? out_.negate() : out_;\r\n\r\n                return xt;\r\n            }\r\n            return this.clone();\r\n        },\r\n        /**\r\n         * Checks to see if two functions are of equal value\r\n         * @param {Symbol} symbol\r\n         */\r\n        equals: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.value === symbol.value && this.power.equals(symbol.power)\r\n                    && this.multiplier.equals(symbol.multiplier)\r\n                    && this.group === symbol.group;\r\n        },\r\n        abs: function () {\r\n            var e = this.clone();\r\n            e.multiplier.abs();\r\n            return e;\r\n        },\r\n        // Greater than\r\n        gt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Greater than\r\n        gte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        /**\r\n         * Because nerdamer doesn't group symbols by polynomials but\r\n         * rather a custom grouping method, this has to be\r\n         * reinserted in order to make use of most algorithms. This function\r\n         * checks if the symbol meets the criteria of a polynomial.\r\n         * @param {bool} multivariate\r\n         * @returns {boolean}\r\n         */\r\n        isPoly: function (multivariate) {\r\n            var g = this.group,\r\n                    p = this.power;\r\n            //the power must be a integer so fail if it's not\r\n            if(!isInt(p) || p < 0)\r\n                return false;\r\n            //constants and first orders\r\n            if(g === N || g === S || this.isConstant(true))\r\n                return true;\r\n            var vars = variables(this);\r\n            if(g === CB && vars.length === 1) {\r\n                //the variable is assumed the only one that was found\r\n                var v = vars[0];\r\n                //if no variable then guess what!?!? We're done!!! We have a polynomial.\r\n                if(!v)\r\n                    return true;\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    //sqrt(x)\r\n                    if(sym.group === FN && !sym.args[0].isConstant())\r\n                        return false;\r\n                    if(!sym.contains(v) && !sym.isConstant(true))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            //PL groups. These only fail if a power is not an int\r\n            //this should handle cases such as x^2*t\r\n            if(this.isComposite() || g === CB && multivariate) {\r\n                //fail if we're not checking for multivariate polynomials\r\n                if(!multivariate && vars.length > 1)\r\n                    return false;\r\n                //loop though the symbols and check if they qualify\r\n                for(var x in this.symbols) {\r\n                    //we've already the symbols if we're not checking for multivariates at this point\r\n                    //so we check the sub-symbols\r\n                    if(!this.symbols[x].isPoly(multivariate))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n\r\n            /*\r\n             //all tests must have passed so we must be dealing with a polynomial\r\n             return true;\r\n             */\r\n        },\r\n        //removes the requested variable from the symbol and returns the remainder\r\n        stripVar: function (x, exclude_x) {\r\n            var retval;\r\n            if((this.group === PL || this.group === S) && this.value === x)\r\n                retval = new Symbol(exclude_x ? 0 : this.multiplier);\r\n            else if(this.group === CB && this.isLinear()) {\r\n                retval = new Symbol(1);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x, true))\r\n                        retval = _.multiply(retval, s.clone());\r\n                });\r\n                retval.multiplier = retval.multiplier.multiply(this.multiplier);\r\n            }\r\n            else if(this.group === CP && !this.isLinear()) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === CP && this.isLinear()) {\r\n                retval = new Symbol(0);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x)) {\r\n                        var t = s.clone();\r\n                        t.multiplier = t.multiplier.multiply(this.multiplier);\r\n                        retval = _.add(retval, t);\r\n                    }\r\n                });\r\n                //BIG TODO!!! It doesn't make much sense\r\n                if(retval.equals(0))\r\n                    retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === EX && this.power.contains(x, true)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === FN && this.contains(x)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else\r\n                //wth? This should technically be the multiplier.\r\n                //Unfortunately this method wasn't very well thought out :`(.\r\n                //should be: retval = new Symbol(this.multiplier);\r\n                //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\r\n                //this will break a bunch of unit tests so be ready to for the long haul\r\n                retval = this.clone();\r\n\r\n\r\n            return retval;\r\n        },\r\n        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\r\n        toArray: function (v, arr) {\r\n            arr = arr || {\r\n                arr: [],\r\n                add: function (x, idx) {\r\n                    var e = this.arr[idx];\r\n                    this.arr[idx] = e ? _.add(e, x) : x;\r\n                }\r\n            };\r\n            var g = this.group;\r\n\r\n            if(g === S && this.contains(v)) {\r\n                arr.add(new Symbol(this.multiplier), this.power);\r\n            }\r\n            else if(g === CB) {\r\n                var a = this.stripVar(v),\r\n                        x = _.divide(this.clone(), a.clone());\r\n                var p = x.isConstant() ? 0 : x.power;\r\n                arr.add(a, p);\r\n            }\r\n            else if(g === PL && this.value === v) {\r\n                this.each(function (x, p) {\r\n                    arr.add(x.stripVar(v), p);\r\n                });\r\n            }\r\n            else if(g === CP) {\r\n                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\r\n                //each case is handled above\r\n                this.each(function (x) {\r\n                    x.toArray(v, arr);\r\n                });\r\n            }\r\n            else if(this.contains(v)) {\r\n                throw new NerdamerTypeError('Cannot convert to array! Exiting');\r\n            }\r\n            else {\r\n                arr.add(this.clone(), 0); //it's just a constant wrt to v\r\n            }\r\n            //fill the holes\r\n            arr = arr.arr; //keep only the array since we don't need the object anymore\r\n            for(var i = 0; i < arr.length; i++)\r\n                if(!arr[i])\r\n                    arr[i] = new Symbol(0);\r\n            return arr;\r\n        },\r\n        //checks to see if a symbol contans a function\r\n        hasFunc: function (v) {\r\n            var fn_group = this.group === FN || this.group === EX;\r\n            if(fn_group && !v || fn_group && this.contains(v))\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].hasFunc(v))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        sub: function (a, b) {\r\n            a = !isSymbol(a) ? _.parse(a) : a.clone();\r\n            b = !isSymbol(b) ? _.parse(b) : b.clone();\r\n            if(a.group === N || a.group === P)\r\n                err('Cannot substitute a number. Must be a variable');\r\n            var same_pow = false,\r\n                    a_is_unit_multiplier = a.multiplier.equals(1),\r\n                    m = this.multiplier.clone(),\r\n                    retval;\r\n            /*\r\n             * In order to make the substitution the bases have to first match take\r\n             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\r\n             * In both cases the first condition is that the bases match so we begin there\r\n             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\r\n             */\r\n            if(this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\r\n                //we cleared the first hurdle but a subsitution may not be possible just yet\r\n                if(a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\r\n                    if(a.isLinear()) {\r\n                        retval = b;\r\n                    }\r\n                    else if(a.power.equals(this.power)) {\r\n                        retval = b;\r\n                        same_pow = true;\r\n                    }\r\n                    if(a.multiplier.equals(this.multiplier))\r\n                        m = new Frac(1);\r\n                }\r\n            }\r\n            //the next thing is to handle CB\r\n            else if(this.group === CB || this.previousGroup === CB) {\r\n                retval = new Symbol(1);\r\n                this.each(function (x) {\r\n                    var subbed = _.parse(x.sub(a, b)); //parse it again for safety\r\n                    retval = _.multiply(retval, subbed);\r\n\r\n                });\r\n            }\r\n            else if(this.isComposite()) {\r\n                var symbol = this.clone();\r\n\r\n                if(a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\r\n                    var find = function (stack, needle) {\r\n                        for(var x in stack.symbols) {\r\n                            var sym = stack.symbols[x];\r\n                            //if the symbol equals the needle or it's within the sub-symbols we're done\r\n                            if(sym.isComposite() && find(sym, needle) || sym.equals(needle))\r\n                                return true;\r\n                        }\r\n                        return false;\r\n                    };\r\n                    //go fish\r\n                    for(var x in a.symbols) {\r\n                        if(!find(symbol, a.symbols[x]))\r\n                            return symbol.clone();\r\n                    }\r\n                    retval = _.add(_.subtract(symbol.clone(), a), b);\r\n                }\r\n                else {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, x.sub(a, b));\r\n                    });\r\n                }\r\n            }\r\n            else if(this.group === EX) {\r\n                // the parsed value could be a function so parse and sub\r\n                retval = _.parse(this.value).sub(a, b);\r\n            }\r\n            else if(this.group === FN) {\r\n                var nargs = [];\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    var arg = this.args[i];\r\n                    if(!isSymbol(arg))\r\n                        arg = _.parse(arg);\r\n                    nargs.push(arg.sub(a, b));\r\n                }\r\n                retval = _.symfunction(this.fname, nargs);\r\n            }\r\n            //if we did manage a substitution\r\n            if(retval) {\r\n                if(!same_pow) {\r\n                    //substitute the power\r\n                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\r\n                    //now raise the symbol to that power\r\n                    retval = _.pow(retval, p);\r\n                }\r\n\r\n                //transfer the multiplier\r\n                retval.multiplier = retval.multiplier.multiply(m);\r\n\r\n                //done\r\n                return retval;\r\n            }\r\n            //if all else fails\r\n            return this.clone();\r\n        },\r\n        isMonomial: function () {\r\n            if(this.group === S)\r\n                return true;\r\n            if(this.group === CB) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].group !== S)\r\n                        return false;\r\n            }\r\n            else\r\n                return false;\r\n            return true;\r\n        },\r\n        isPi: function () {\r\n            return this.group === S && this.value === 'pi';\r\n        },\r\n        sign: function () {\r\n            return this.multiplier.sign();\r\n        },\r\n        isE: function () {\r\n            return this.value === 'e';\r\n        },\r\n        isSQRT: function () {\r\n            return this.fname === SQRT;\r\n        },\r\n        isConstant: function (check_all, check_symbols) {\r\n            if(check_symbols && this.group === CB) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].isConstant(true))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(check_all === 'functions' && this.isComposite()) {\r\n                var isConstant = true;\r\n\r\n                this.each(function (x) {\r\n                    if(!x.isConstant(check_all, check_symbols)) {\r\n                        isConstant = false;\r\n                    }\r\n                }, true);\r\n\r\n                return isConstant;\r\n            }\r\n\r\n            if(check_all === 'all' && (this.isPi() || this.isE())) {\r\n                return true;\r\n            }\r\n\r\n            if(check_all && this.group === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(!this.args[i].isConstant(check_all))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            if(check_all)\r\n                return isNumericSymbol(this);\r\n            return this.value === CONST_HASH;\r\n        },\r\n        //the symbols is imaginary if\r\n        //1. n*i\r\n        //2. a+b*i\r\n        //3. a*i\r\n        isImaginary: function () {\r\n            if(this.imaginary)\r\n                return true;\r\n            else if(this.symbols) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].isImaginary())\r\n                        return true;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Returns the real part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        realpart: function () {\r\n            if(this.isConstant()) {\r\n                return this.clone();\r\n            }\r\n            else if(this.imaginary)\r\n                return new Symbol(0);\r\n            else if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.realpart());\r\n                });\r\n                return retval;\r\n            }\r\n            else if(this.isImaginary())\r\n                return new Symbol(0);\r\n            return this.clone();\r\n        },\r\n        /*\r\n         * Return imaginary part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        imagpart: function () {\r\n            if(this.group === S && this.isImaginary())\r\n                return new Symbol(this.multiplier);\r\n            if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.imagpart());\r\n                });\r\n                return retval;\r\n            }\r\n            if(this.group === CB)\r\n                return this.stripVar(Settings.IMAGINARY);\r\n            return new Symbol(0);\r\n        },\r\n        isInteger: function () {\r\n            return this.isConstant() && this.multiplier.isInteger();\r\n        },\r\n        isLinear: function (wrt) {\r\n            if(wrt) {\r\n                if(this.isConstant())\r\n                    return true;\r\n                if(this.group === S) {\r\n                    if(this.value === wrt)\r\n                        return this.power.equals(1);\r\n                    else\r\n                        return true;\r\n                }\r\n\r\n                if(this.isComposite() && this.power.equals(1)) {\r\n                    for(var x in this.symbols) {\r\n                        if(!this.symbols[x].isLinear(wrt))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                if(this.group === CB && this.symbols[wrt])\r\n                    return this.symbols[wrt].isLinear(wrt);\r\n                return false;\r\n            }\r\n            else\r\n                return this.power.equals(1);\r\n        },\r\n        /**\r\n         * Checks to see if a symbol has a function by a specified name or within a specified list\r\n         * @param {String|String[]} names\r\n         * @returns {Boolean}\r\n         */\r\n        containsFunction: function (names) {\r\n            if(typeof names === 'string')\r\n                names = [names];\r\n            if(this.group === FN && names.indexOf(this.fname) !== -1)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].containsFunction(names))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        multiplyPower: function (p2) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1))\r\n                return this;\r\n\r\n            var p1 = this.power;\r\n\r\n            if(this.group !== EX && p2.group === N) {\r\n                var p = p2.multiplier;\r\n                if(this.group === N && !p.isInteger()) {\r\n                    this.convert(P);\r\n                }\r\n\r\n                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\r\n\r\n                if(this.group === P && isInt(this.power)) {\r\n                    //bring it back to an N\r\n                    this.value = Math.pow(this.value, this.power);\r\n                    this.toLinear();\r\n                    this.convert(N);\r\n                }\r\n            }\r\n            else {\r\n                if(this.group !== EX) {\r\n                    p1 = new Symbol(p1);\r\n                    this.convert(EX);\r\n                }\r\n                this.power = _.multiply(p1, p2);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        setPower: function (p, retainSign) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1)) {\r\n                return this;\r\n            }\r\n            if(this.group === EX && !isSymbol(p)) {\r\n                this.group = this.previousGroup;\r\n                delete this.previousGroup;\r\n                if(this.group === N) {\r\n                    this.multiplier = new Frac(this.value);\r\n                    this.value = CONST_HASH;\r\n                }\r\n                else\r\n                    this.power = p;\r\n            }\r\n            else {\r\n                var isSymbolic = false;\r\n                if(isSymbol(p)) {\r\n                    if(p.group === N) {\r\n                        //p should be the multiplier instead\r\n                        p = p.multiplier;\r\n\r\n                    }\r\n                    else {\r\n                        isSymbolic = true;\r\n                    }\r\n                }\r\n                var group = isSymbolic ? EX : P;\r\n                this.power = p;\r\n                if(this.group === N && group)\r\n                    this.convert(group, retainSign);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks to see if symbol is located in the denominator\r\n         * @returns {boolean}\r\n         */\r\n        isInverse: function () {\r\n            if(this.group === EX)\r\n                return (this.power.multiplier.lessThan(0));\r\n            return this.power < 0;\r\n        },\r\n        /**\r\n         * Make a duplicate of a symbol by copying a predefined list of items.\r\n         * The name 'copy' would probably be a more appropriate name.\r\n         * to a new symbol\r\n         * @param {Symbol} c\r\n         * @returns {Symbol}\r\n         */\r\n        clone: function (c) {\r\n            var clone = c || new Symbol(0),\r\n                    //list of properties excluding power as this may be a symbol and would also need to be a clone.\r\n                    properties = [\r\n                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\r\n                    l = properties.length, i;\r\n            if(this.symbols) {\r\n                clone.symbols = {};\r\n                for(var x in this.symbols) {\r\n                    clone.symbols[x] = this.symbols[x].clone();\r\n                }\r\n            }\r\n\r\n            for(i = 0; i < l; i++) {\r\n                if(this[properties[i]] !== undefined) {\r\n                    clone[properties[i]] = this[properties[i]];\r\n                }\r\n            }\r\n\r\n            clone.power = this.power.clone();\r\n            clone.multiplier = this.multiplier.clone();\r\n            //add back the flag to track if this symbol is a conversion symbol\r\n            if(this.isConversion)\r\n                clone.isConversion = this.isConversion;\r\n\r\n            if(this.isUnit)\r\n                clone.isUnit = this.isUnit;\r\n\r\n            return clone;\r\n        },\r\n        /**\r\n         * Converts a symbol multiplier to one.\r\n         * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\r\n         * @returns {Symbol}\r\n         */\r\n        toUnitMultiplier: function (keepSign) {\r\n            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\r\n            this.multiplier.den = new bigInt(1);\r\n            return this;\r\n        },\r\n        /**\r\n         * Converts a Symbol's power to one.\r\n         * @returns {Symbol}\r\n         */\r\n        toLinear: function () {\r\n            // Do nothing if it's already linear\r\n            if(this.power.equals(1)) {\r\n                return this;\r\n            }\r\n            this.setPower(new Frac(1));\r\n            return this;\r\n        },\r\n        /**\r\n         * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\r\n         * @param {Function} fn\r\n         * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\r\n         */\r\n        each: function (fn, deep) {\r\n            if(!this.symbols) {\r\n                fn.call(this, this, this.value);\r\n            }\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    if(sym.group === PL && deep) {\r\n                        for(var y in sym.symbols) {\r\n                            fn.call(x, sym.symbols[y], y);\r\n                        }\r\n                    }\r\n                    else\r\n                        fn.call(this, sym, x);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * A numeric value to be returned for Javascript. It will try to\r\n         * return a number as far a possible but in case of a pure symbolic\r\n         * symbol it will just return its text representation\r\n         * @returns {String|Number}\r\n         */\r\n        valueOf: function () {\r\n            if(this.group === N)\r\n                return this.multiplier.valueOf();\r\n            else if(this.power === 0) {\r\n                return 1;\r\n            }\r\n            else if(this.multiplier === 0) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return text(this, 'decimals');\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a symbols has a particular variable within it.\r\n         * Pass in true as second argument to include the power of exponentials\r\n         * which aren't check by default.\r\n         * @example var s = _.parse('x+y+z'); s.contains('y');\r\n         * //returns true\r\n         * @param {any} variable\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        contains: function (variable, all) {\r\n            //contains expects a string\r\n            variable = String(variable);\r\n            var g = this.group;\r\n            if(this.value === variable)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n            if(g === FN || this.previousGroup === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(this.args[i].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(g === EX) {\r\n                //exit only if it does\r\n                if(all && this.power.contains(variable, all)) {\r\n                    return true;\r\n                }\r\n                if(this.value === variable)\r\n                    return true;\r\n\r\n            }\r\n\r\n            return this.value === variable;\r\n        },\r\n        /**\r\n         * Negates a symbols\r\n         * @returns {boolean}\r\n         */\r\n        negate: function () {\r\n            this.multiplier.negate();\r\n            if(this.group === CP || this.group === PL)\r\n                this.distributeMultiplier();\r\n            return this;\r\n        },\r\n        /**\r\n         * Inverts a symbol\r\n         * @param {boolean} power_only\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        invert: function (power_only, all) {\r\n            //invert the multiplier\r\n            if(!power_only)\r\n                this.multiplier = this.multiplier.invert();\r\n            //invert the rest\r\n            if(isSymbol(this.power)) {\r\n                this.power.negate();\r\n            }\r\n            else if(this.group === CB && all) {\r\n                this.each(function (x) {\r\n                    return x.invert();\r\n                });\r\n            }\r\n            else {\r\n                if(this.power && this.group !== N)\r\n                    this.power.negate();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Symbols of group CP or PL may have the multiplier being carried by\r\n         * the top level symbol at any given time e.g. 2*(x+y+z). This is\r\n         * convenient in many cases, however in some cases the multiplier needs\r\n         * to be carried individually e.g. 2*x+2*y+2*z.\r\n         * This method distributes the multiplier over the entire symbol\r\n         * @param {boolean} all\r\n         * @returns {Symbol}\r\n         */\r\n        distributeMultiplier: function (all) {\r\n            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\r\n            if(this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    s.multiplier = s.multiplier.multiply(this.multiplier);\r\n                    s.distributeMultiplier();\r\n                }\r\n                this.toUnitMultiplier();\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * This method expands the exponent over the entire symbol just like\r\n         * distributeMultiplier\r\n         * @returns {Symbol}\r\n         */\r\n        distributeExponent: function () {\r\n            if(!this.power.equals(1)) {\r\n                var p = this.power;\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    if(s.group === EX) {\r\n                        s.power = _.multiply(s.power, new Symbol(p));\r\n                    }\r\n                    else {\r\n                        this.symbols[x].power = this.symbols[x].power.multiply(p);\r\n                    }\r\n                }\r\n                this.toLinear();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method will attempt to up-convert or down-convert one symbol\r\n         * from one group to another. Not all symbols are convertible from one\r\n         * group to another however. In that case the symbol will remain\r\n         * unchanged.\r\n         * @param {int} group\r\n         * @param {string} imaginary\r\n         */\r\n        convert: function (group, imaginary) {\r\n            if(group > FN) {\r\n                //make a clone of this symbol;\r\n                var cp = this.clone();\r\n\r\n                //attach a symbols object and upgrade the group\r\n                this.symbols = {};\r\n\r\n                if(group === CB) {\r\n                    //symbol of group CB hold symbols bound together through multiplication\r\n                    //because of commutativity this multiplier can technically be anywhere within the group\r\n                    //to keep track of it however it's easier to always have the top level carry it\r\n                    cp.toUnitMultiplier();\r\n                }\r\n                else {\r\n                    //reset the symbol\r\n                    this.toUnitMultiplier();\r\n                }\r\n\r\n                if(this.group === FN) {\r\n                    cp.args = this.args;\r\n                    delete this.args;\r\n                    delete this.fname;\r\n                }\r\n\r\n                //the symbol may originate from the symbol i but this property no longer holds true\r\n                //after copying\r\n                if(this.isImgSymbol)\r\n                    delete this.isImgSymbol;\r\n\r\n                this.toLinear();\r\n                //attach a clone of this symbol to the symbols object using its proper key\r\n                this.symbols[cp.keyForGroup(group)] = cp;\r\n                this.group = group;\r\n                //objects by default don't have a length property. However, in order to keep track of the number\r\n                //of sub-symbols we have to impliment our own.\r\n                this.length = 1;\r\n            }\r\n            else if(group === EX) {\r\n                //1^x is just one so check and make sure\r\n                if(!(this.group === N && this.multiplier.equals(1))) {\r\n                    if(this.group !== EX)\r\n                        this.previousGroup = this.group;\r\n                    if(this.group === N) {\r\n                        this.value = this.multiplier.num.toString();\r\n                        this.toUnitMultiplier();\r\n                    }\r\n                    //update the hash to reflect the accurate hash\r\n                    else\r\n                        this.value = text(this, 'hash');\r\n\r\n                    this.group = EX;\r\n                }\r\n            }\r\n            else if(group === N) {\r\n                var m = this.multiplier.toDecimal();\r\n                if(this.symbols)\r\n                    this.symbols = undefined;\r\n                new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\r\n            }\r\n            else if(group === P && this.group === N) {\r\n                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\r\n                this.toUnitMultiplier(!imaginary);\r\n                this.group = P;\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method is one of the principal methods to make it all possible.\r\n         * It performs cleanup and prep operations whenever a symbols is\r\n         * inserted. If the symbols results in a 1 in a CB (multiplication)\r\n         * group for instance it will remove the redundant symbol. Similarly\r\n         * in a symbol of group PL or CP (symbols glued by multiplication) it\r\n         * will remove any dangling zeroes from the symbol. It will also\r\n         * up-convert or down-convert a symbol if it detects that it's\r\n         * incorrectly grouped. It should be noted that this method is not\r\n         * called directly but rather by the 'attach' method for addition groups\r\n         * and the 'combine' method for multiplication groups.\r\n         * @param {Symbol} symbol\r\n         * @param {String} action\r\n         */\r\n        insert: function (symbol, action) {\r\n            //this check can be removed but saves a lot of aggravation when trying to hunt down\r\n            //a bug. If left, you will instantly know that the error can only be between 2 symbols.\r\n            if(!isSymbol(symbol))\r\n                err('Object ' + symbol + ' is not of type Symbol!');\r\n            if(this.symbols) {\r\n                var group = this.group;\r\n                if(group > FN) {\r\n                    var key = symbol.keyForGroup(group);\r\n                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\r\n                    if(action === 'add') {\r\n                        var hash = key;\r\n                        if(existing) {\r\n                            //add them together using the parser\r\n                            this.symbols[hash] = _.add(existing, symbol);\r\n                            //if the addition resulted in a zero multiplier remove it\r\n                            if(this.symbols[hash].multiplier.equals(0)) {\r\n                                delete this.symbols[hash];\r\n                                this.length--;\r\n\r\n                                if(this.length === 0) {\r\n                                    this.convert(N);\r\n                                    this.multiplier = new Frac(0);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                    }\r\n                    else {\r\n                        //check if this is of group P and unwrap before inserting\r\n                        if(symbol.group === P && isInt(symbol.power)) {\r\n                            symbol.convert(N);\r\n                        }\r\n\r\n                        //transfer the multiplier to the upper symbol but only if the symbol numeric\r\n                        if(symbol.group !== EX) {\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                            symbol.toUnitMultiplier();\r\n                        }\r\n                        else {\r\n                            symbol.parens = symbol.multiplier.lessThan(0);\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\r\n                            symbol.toUnitMultiplier(true);\r\n                        }\r\n\r\n                        if(existing) {\r\n                            //remove because the symbol may have changed\r\n                            symbol = _.multiply(remove(this.symbols, key), symbol);\r\n                            if(symbol.isConstant()) {\r\n                                this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\r\n                            }\r\n\r\n                            this.length--;\r\n                            //clean up\r\n                        }\r\n\r\n                        //don't insert the symbol if it's 1\r\n                        if(!symbol.isOne(true)) {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                        else if(symbol.multiplier.lessThan(0)) {\r\n                            this.negate(); //put back the sign\r\n                        }\r\n                    }\r\n\r\n                    //clean up\r\n                    if(this.length === 0)\r\n                        this.convert(N);\r\n                    //update the hash\r\n                    if(this.group === CP || this.group === CB) {\r\n                        this.updateHash();\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        //the insert method for addition\r\n        attach: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'add');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'add');\r\n        },\r\n        //the insert method for multiplication\r\n        combine: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'multiply');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'multiply');\r\n        },\r\n        /**\r\n         * This method should be called after any major \"surgery\" on a symbol.\r\n         * It updates the hash of the symbol for example if the fname of a\r\n         * function has changed it will update the hash of the symbol.\r\n         */\r\n        updateHash: function () {\r\n            if(this.group === N)\r\n                return;\r\n\r\n            if(this.group === FN) {\r\n                var contents = '',\r\n                        args = this.args,\r\n                        is_parens = this.fname === PARENTHESIS;\r\n                for(var i = 0; i < args.length; i++)\r\n                    contents += (i === 0 ? '' : ',') + text(args[i]);\r\n                var fn_name = is_parens ? '' : this.fname;\r\n                this.value = fn_name + (is_parens ? contents : inBrackets(contents));\r\n            }\r\n            else if(!(this.group === S || this.group === PL)) {\r\n                this.value = text(this, 'hash');\r\n            }\r\n        },\r\n        /**\r\n         * this function defines how every group in stored within a group of\r\n         * higher order think of it as the switchboard for the library. It\r\n         * defines the hashes for symbols.\r\n         * @param {int} group\r\n         */\r\n        keyForGroup: function (group) {\r\n            var g = this.group;\r\n            var key;\r\n\r\n            if(g === N) {\r\n                key = this.value;\r\n            }\r\n            else if(g === S || g === P) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === FN) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === PL) {\r\n                //if the order is reversed then we'll assume multiplication\r\n                //TODO: possible future dilemma\r\n                if(group === CB)\r\n                    key = text(this, 'hash');\r\n                else if(group === CP) {\r\n                    if(this.power.equals(1))\r\n                        key = this.value;\r\n                    else\r\n                        key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\r\n                }\r\n                else if(group === PL)\r\n                    key = this.power.toString();\r\n                else\r\n                    key = this.value;\r\n                return key;\r\n            }\r\n            else if(g === CP) {\r\n                if(group === CP) {\r\n                    key = text(this, 'hash');\r\n                }\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === CB) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === EX) {\r\n                if(group === PL)\r\n                    key = text(this.power);\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n\r\n            return key;\r\n        },\r\n        /**\r\n         * Symbols are typically stored in an object which works fine for most\r\n         * cases but presents a problem when the order of the symbols makes\r\n         * a difference. This function simply collects all the symbols and\r\n         * returns them as an array. If a function is supplied then that\r\n         * function is called on every symbol contained within the object.\r\n         * @param {Function} fn\r\n         * @param {Object} opt\r\n         * @param {Function} sort_fn\r\n         * @@param {Boolean} expand_symbol\r\n         * @returns {Array}\r\n         */\r\n        collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\r\n            var collected = [];\r\n            if(!this.symbols)\r\n                collected.push(this);\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var symbol = this.symbols[x];\r\n                    if(expand_symbol && (symbol.group === PL || symbol.group === CP)) {\r\n                        collected = collected.concat(symbol.collectSymbols());\r\n                    }\r\n                    else\r\n                        collected.push(fn ? fn(symbol, opt) : symbol);\r\n                }\r\n            }\r\n            if(sort_fn === null)\r\n                sort_fn = undefined; //WTF Firefox? Seriously?\r\n\r\n            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency\r\n        },\r\n        /**\r\n         * Returns the latex representation of the symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            return LaTeX.latex(this, option);\r\n        },\r\n        /**\r\n         * Returns the text representation of a symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        text: function (option) {\r\n            return text(this, option);\r\n        },\r\n        /**\r\n         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\r\n         * @@param {bool} abs Compares the absolute value\r\n         */\r\n        isOne: function (abs) {\r\n            var f = abs ? 'absEquals' : 'equals';\r\n            if(this.group === N)\r\n                return this.multiplier[f](1);\r\n            else\r\n                return this.power.equals(0);\r\n        },\r\n        isComposite: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CP || g === PL || pg === PL || pg === CP;\r\n        },\r\n        isCombination: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CB || pg === CB;\r\n        },\r\n        lessThan: function (n) {\r\n            return this.multiplier.lessThan(n);\r\n        },\r\n        greaterThan: function (n) {\r\n            if(!isSymbol(n)) {\r\n                n = new Symbol(n);\r\n            }\r\n\r\n            // We can't tell for sure if a is greater than be if they're not both numbers\r\n            if(!this.isConstant(true) || !n.isConstant(true)) {\r\n                return false;\r\n            }\r\n\r\n            return this.multiplier.greaterThan(n.multiplier);\r\n        },\r\n        /**\r\n         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\r\n         * with other classes the symbol is either the denominator or not.\r\n         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\r\n         * denominator and has to be found by looking at the actual symbols themselves.\r\n         */\r\n        getDenom: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(this.group === CB && this.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.lessThan(0) || symbol.group === EX && symbol.power.multiplier.lessThan(0)) {\r\n                var d = _.parse(symbol.multiplier.den);\r\n                retval = symbol.toUnitMultiplier();\r\n                retval.power.negate();\r\n                retval = _.multiply(d, retval); //put back the coeff\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.den);\r\n                for(var x in symbol.symbols) {\r\n                    var s = symbol.symbols[x];\r\n                    if(s.power < 0 || s.group === EX && s.power.multiplier.lessThan(0))\r\n                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());\r\n                }\r\n            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.den);\r\n            }\r\n            return retval;\r\n        },\r\n        getNum: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(symbol.group === CB && symbol.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.greaterThan(0) && symbol.group !== CB || symbol.group === EX && symbol.power.multiplier.greaterThan(0)) {\r\n                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.num);\r\n                symbol.each(function (x) {\r\n                    if(x.power > 0 || x.group === EX && x.power.multiplier > 0) {\r\n                        retval = _.multiply(retval, x.clone());\r\n                    }\r\n                });\r\n            }\r\n//            else if(symbol.group === EX && this.previousGroup === S) {\r\n//                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n//            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.num);\r\n            }\r\n            return retval;\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        }\r\n    };\r\n\r\n//Parser =======================================================================\r\n    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\r\n    function Parser() {\r\n        //Point to the local parser instead of the global one\r\n        var _ = this;\r\n        var bin = {};\r\n        var preprocessors = {names: [], actions: []};\r\n\r\n//Parser.classes ===============================================================\r\n        function Slice(upper, lower) {\r\n            this.start = upper;\r\n            this.end = lower;\r\n        }\r\n        ;\r\n        Slice.prototype.isConstant = function () {\r\n            return this.start.isConstant() && this.end.isConstant();\r\n        };\r\n        Slice.prototype.text = function () {\r\n            return text(this.start) + ':' + text(this.end);\r\n        };\r\n\r\n        /**\r\n         * Class used to collect arguments for functions\r\n         * @returns {Parser.Collection}\r\n         */\r\n        function Collection() {\r\n            this.elements = [];\r\n        }\r\n        Collection.prototype.append = function (e) {\r\n            this.elements.push(e);\r\n        };\r\n        Collection.prototype.getItems = function () {\r\n            return this.elements;\r\n        };\r\n        Collection.prototype.toString = function () {\r\n            return _.pretty_print(this.elements);\r\n        };\r\n        Collection.create = function (e) {\r\n            var collection = new Collection();\r\n            if(e)\r\n                collection.append(e);\r\n            return collection;\r\n        };\r\n\r\n        function Token(node, node_type, column) {\r\n            this.type = node_type;\r\n            this.value = node;\r\n            if(column !== undefined)\r\n                this.column = column + 1;\r\n            if(node_type === Token.OPERATOR) {\r\n                //copy everything over from the operator\r\n                var operator = operators[node];\r\n                for(var x in operator)\r\n                    this[x] = operator[x];\r\n\r\n            }\r\n            else if(node_type === Token.FUNCTION) {\r\n                this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\r\n                this.leftAssoc = false;\r\n            }\r\n        }\r\n        Token.prototype.toString = function () {\r\n            return this.value;\r\n        };\r\n        Token.prototype.toString = function () {\r\n            if(this.is_prefix)\r\n                return '`' + this.value;\r\n            return this.value;\r\n        };\r\n        //some constants\r\n        Token.OPERATOR = 'OPERATOR';\r\n        Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\r\n        Token.FUNCTION = 'FUNCTION';\r\n        Token.UNIT = 'UNIT';\r\n        Token.KEYWORD = 'KEYWORD';\r\n        Token.MAX_PRECEDENCE = 999;\r\n        //create link to classes\r\n        this.classes = {\r\n            Collection: Collection,\r\n            Slice: Slice,\r\n            Token: Token\r\n        };\r\n//Parser.modules ===============================================================\r\n        //object for functions which handle complex number\r\n        var complex = {\r\n            prec: undefined,\r\n            cos: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cos(r) * Math.cosh(i));\r\n                im = _.parse(Math.sin(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sin: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(r) * Math.cosh(i));\r\n                im = _.parse(Math.cos(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tan: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sec: function (r, i) {\r\n                var t = this.removeDen(this.cos(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csc: function (r, i) {\r\n                var t = this.removeDen(this.sin(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            cot: function (r, i) {\r\n                var t = this.removeDen(this.tan(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acos: function (r, i) {\r\n                var symbol, sq, a, b, c, squared;\r\n                symbol = this.fromArray([r, i]);\r\n                squared = _.pow(symbol.clone(), new Symbol(2));\r\n                sq = _.expand(squared); //z*z\r\n                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\r\n                b = _.expand(_.add(symbol.clone(), a));\r\n                c = log(b);\r\n                return _.expand(_.multiply(Symbol.imaginary().negate(), c));\r\n            },\r\n            asin: function (r, i) {\r\n                return _.subtract(_.parse('pi/2'), this.acos(r, i));\r\n            },\r\n            atan: function (r, i) {\r\n                // Handle i and -i\r\n                if(r.equals(0) && (i.equals(1) || i.equals(-1))) {\r\n                    // Just copy Wolfram Alpha for now. The parenthesis \r\n                    return _.parse(`${Symbol.infinity()}*${Settings.IMAGINARY}*${i}`);\r\n                }\r\n                var a, b, c, symbol;\r\n                symbol = complex.fromArray([r, i]);\r\n                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\r\n                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\r\n                c = log(_.expand(_.add(new Symbol(1), a.clone())));\r\n                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\r\n            },\r\n            asec: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.acos.apply(this, d);\r\n            },\r\n            acsc: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.asin.apply(this, d);\r\n            },\r\n            acot: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.atan.apply(this, d);\r\n            },\r\n            //Hyperbolic trig\r\n            cosh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cosh(r) * Math.cos(i));\r\n                im = _.parse(Math.sinh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sinh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(r) * Math.cos(i));\r\n                im = _.parse(Math.cosh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tanh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sech: function (r, i) {\r\n                var t = this.removeDen(this.cosh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csch: function (r, i) {\r\n                var t = this.removeDen(this.sinh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            coth: function (r, i) {\r\n                var t = this.removeDen(this.tanh(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acosh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(z.clone(), new Symbol(1)));\r\n                b = sqrt(_.subtract(z.clone(), new Symbol(1)));\r\n                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\r\n            },\r\n            asinh: function (r, i) {\r\n                var a, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\r\n                return _.expand(log(_.add(z, a)));\r\n            },\r\n            atanh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = log(_.add(z.clone(), new Symbol(1)));\r\n                b = log(_.subtract(new Symbol(1), z));\r\n                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\r\n            },\r\n            asech: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.acosh.apply(this, t);\r\n            },\r\n            acsch: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.asinh.apply(this, t);\r\n            },\r\n            acoth: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.atanh.apply(this, t);\r\n            },\r\n            sqrt: function (symbol) {\r\n                var re, im, h, a, d;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n                h = Symbol.hyp(re, im);\r\n                a = _.add(re.clone(), h);\r\n                d = sqrt(_.multiply(new Symbol(2), a.clone()));\r\n                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\r\n            },\r\n            log: function (r, i) {\r\n                var re, im, phi;\r\n                re = log(Symbol.hyp(r, i));\r\n                phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal())) : Math.atan2(i, r);\r\n                im = _.parse(phi);\r\n                return _.add(re, _.multiply(Symbol.imaginary(), im));\r\n            },\r\n            erf(symbol, n) {\r\n                //Do nothing for now. Revisit this in the future.\r\n                return _.symfunction('erf', [symbol]);\r\n\r\n                n = n || 30;\r\n\r\n                var f = function (R, I) {\r\n                    return block('PARSE2NUMBER', function () {\r\n                        var retval = new Symbol(0);\r\n                        for(var i = 0; i < n; i++) {\r\n                            var a, b;\r\n                            a = _.parse(bigDec.exp(bigDec(i).toPower(2).neg().dividedBy(bigDec(n).pow(2).plus(bigDec(R).toPower(2).times(4)))));\r\n                            b = _.parse(format('2*({1})-e^(-(2*{0}*{1}*{2}))*(2*{1}*cosh({2}*{3})-{0}*{3}*sinh({3}*{2}))', Settings.IMAGINARY, R, I, i));\r\n                            retval = _.add(retval, _.multiply(a, b));\r\n                        }\r\n                        return _.multiply(retval, new Symbol(2));\r\n                    }, true);\r\n                };\r\n                var re, im, a, b, c, k;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n\r\n                k = _.parse(format('(e^(-{0}^2))/pi', re));\r\n                a = _.parse(format('(1-e^(-(2*{0}*{1}*{2})))/(2*{1})', Settings.IMAGINARY, re, im));\r\n                b = f(re.toString(), im.toString());\r\n\r\n                return _.add(_.parse(Math2.erf(re.toString())), _.multiply(k, _.add(a, b)));\r\n            },\r\n            removeDen: function (symbol) {\r\n                var den, r, i, re, im;\r\n                if(isArray(symbol)) {\r\n                    r = symbol[0];\r\n                    i = symbol[1];\r\n                }\r\n                else {\r\n                    r = symbol.realpart();\r\n                    i = symbol.imagpart();\r\n                }\r\n\r\n                den = Math.pow(r, 2) + Math.pow(i, 2);\r\n                re = _.parse(r / den);\r\n                im = _.parse(i / den);\r\n                return [re, im];\r\n            },\r\n            fromArray: function (arr) {\r\n                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\r\n            },\r\n            evaluate: function (symbol, f) {\r\n                var re, im, sign;\r\n\r\n                sign = symbol.power.sign();\r\n                //remove it from under the denominator\r\n                symbol.power = symbol.power.abs();\r\n                //expand\r\n                if(symbol.power.greaterThan(1))\r\n                    symbol = _.expand(symbol);\r\n                //remove the denominator\r\n                if(sign < 0) {\r\n                    var d = this.removeDen(symbol);\r\n                    re = d[0];\r\n                    im = d[1];\r\n                }\r\n                else {\r\n                    re = symbol.realpart();\r\n                    im = symbol.imagpart();\r\n                }\r\n\r\n                if(re.isConstant('all') && im.isConstant('all'))\r\n                    return this[f].call(this, re, im);\r\n\r\n                return _.symfunction(f, [symbol]);\r\n            }\r\n        };\r\n        //object for functions which handle trig\r\n        var trig = this.trig = {\r\n            //container for trigonometric function\r\n            cos: function (symbol) {\r\n                if(symbol.equals('pi') && symbol.multiplier.den.equals(2))\r\n                    return new Symbol(0);\r\n\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(new Symbol(Settings.PI / 2)))\r\n                        return new Symbol(0);\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.cos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.cos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cos');\r\n                    }\r\n                }\r\n                if(symbol.equals(0))\r\n                    return new Symbol(1);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = Number(m.num), d = Number(m.den);\r\n                        if(d === 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d === 3) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 6) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cos', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cos', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            sin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol % Math.PI === 0) {\r\n                            return new Symbol(0);\r\n                        }\r\n\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.sin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.sin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sin');\r\n                }\r\n\r\n                if(symbol.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n                if(symbol.equals('pi'))\r\n                    retval = new Symbol(0);\r\n                else if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            tan: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % Math.PI === 0 && symbol.isLinear()) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.tan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.tan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'tan');\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('tan is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('tan', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('tan', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            sec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.cos(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.sec(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sec');\r\n                    return _.parse(format('1/cos({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('sec is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('sec', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('sec', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            csc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.sin(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.csc(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'csc');\r\n                    return _.parse(format('1/sin({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('csc is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            cot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % (Math.PI/2) === 0) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.tan(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.cot(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'cot');\r\n                    return _.parse(format('1/tan({0})', symbol));\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('cot is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d == 3) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cot', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cot', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            acos: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var x = symbol.toString();\r\n                            return expand(evaluate(`pi/2-asin(${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.acos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.acos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acos');\r\n                }\r\n                return _.symfunction('acos', arguments);\r\n            },\r\n            asin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var i = Settings.IMAGINARY;\r\n                            var x = symbol.multiplier.toDecimal();\r\n                            return expand(evaluate(`${i}*log(sqrt(1-${x}^2)-${i}*${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.asin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.asin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'asin');\r\n                }\r\n                return _.symfunction('asin', arguments);\r\n            },\r\n            atan: function (symbol) {\r\n                var retval;\r\n                if(symbol.equals(0))\r\n                    retval = new Symbol(0);\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.atan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.atan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'atan');\r\n                    return _.symfunction('atan', arguments);\r\n                }\r\n                else if(symbol.equals(-1))\r\n                    retval = _.parse('-pi/4');\r\n                else\r\n                    retval = _.symfunction('atan', arguments);\r\n                return retval;\r\n            },\r\n            asec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(0)) {\r\n                        throw new OutOfFunctionDomainError('Input is out of the domain of sec!');\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        return trig.acos(symbol.invert());\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'asec');\r\n                    }\r\n                }\r\n                return _.symfunction('asec', arguments);\r\n            },\r\n            acsc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return trig.asin(symbol.invert());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acsc');\r\n                }\r\n                return _.symfunction('acsc', arguments);\r\n            },\r\n            acot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acot');\r\n                }\r\n                return _.symfunction('acot', arguments);\r\n            },\r\n            atan2: function (a, b) {\r\n                if(a.equals(0) && b.equals(0))\r\n                    throw new UndefinedError('atan2 is undefined for 0, 0');\r\n\r\n                if(Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\r\n                    return new Symbol(Math.atan2(a, b));\r\n                }\r\n                return _.symfunction('atan2', arguments);\r\n            }\r\n        };\r\n        //object for functions which handle hyperbolic trig\r\n        var trigh = this.trigh = {\r\n            //container for hyperbolic trig function\r\n            cosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.cosh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cosh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('cosh', arguments);\r\n            },\r\n            sinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.sinh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sinh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('sinh', arguments);\r\n            },\r\n            tanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.tanh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'tanh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('tanh', arguments);\r\n            },\r\n            sech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new Symbol(Math.sech(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sech');\r\n                    }\r\n                    return _.parse(format('1/cosh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('sech', arguments);\r\n            },\r\n            csch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.csch(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'csch');\r\n                    }\r\n                    return _.parse(format('1/sinh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('csch', arguments);\r\n            },\r\n            coth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.coth(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'coth');\r\n                    }\r\n                    return _.parse(format('1/tanh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('coth', arguments);\r\n            },\r\n            acosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acosh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2-1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acosh', arguments);\r\n                return retval;\r\n            },\r\n            asinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asinh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2+1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('asinh', arguments);\r\n                return retval;\r\n            },\r\n            atanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'atanh');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    retval = evaluate(_.parse(format('(1/2)*' + Settings.LOG + '((1+({0}))/(1-({0})))', symbol.toString())));\r\n                }\r\n                else\r\n                    retval = _.symfunction('atanh', arguments);\r\n                return retval;\r\n            },\r\n            asech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asech');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));\r\n                else\r\n                    retval = _.symfunction('asech', arguments);\r\n                return retval;\r\n            },\r\n            acsch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acsch');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acsch', arguments);\r\n                return retval;\r\n            },\r\n            acoth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acoth');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(1))\r\n                        retval = Symbol.infinity();\r\n                    else\r\n                        retval = evaluate(\r\n                                _.divide(\r\n                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),\r\n                                        new Symbol(2)));\r\n                }\r\n                else\r\n                    retval = _.symfunction('acoth', arguments);\r\n                return retval;\r\n            }\r\n        };\r\n        //list of supported units\r\n        this.units = {};\r\n        //list all the supported operators\r\n        var operators = {\r\n            '\\\\': {\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; //bypass the slash\r\n                }\r\n            },\r\n            '!!': {\r\n                precedence: 7,\r\n                operator: '!!',\r\n                action: 'dfactorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '!': {\r\n                precedence: 7,\r\n                operator: '!',\r\n                action: 'factorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return factorial(e); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '^': {\r\n                precedence: 6,\r\n                operator: '^',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '**': {\r\n                precedence: 6,\r\n                operator: '**',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '%': {\r\n                precedence: 4,\r\n                operator: '%',\r\n                action: 'percent',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                overloaded: true,\r\n                overloadAction: 'mod',\r\n                overloadLeftAssoc: false,\r\n                operation: function (x) {\r\n                    return _.divide(x, new Symbol(100));\r\n                }\r\n            },\r\n            '*': {\r\n                precedence: 4,\r\n                operator: '*',\r\n                action: 'multiply',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '/': {\r\n                precedence: 4,\r\n                operator: '/',\r\n                action: 'divide',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '+': {\r\n                precedence: 3,\r\n                operator: '+',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            'plus': {\r\n                precedence: 3,\r\n                operator: 'plus',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            '-': {\r\n                precedence: 3,\r\n                operator: '-',\r\n                action: 'subtract',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x.negate();\r\n                }\r\n            },\r\n            '=': {\r\n                precedence: 2,\r\n                operator: '=',\r\n                action: 'equals',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '==': {\r\n                precedence: 1,\r\n                operator: '==',\r\n                action: 'eq',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<': {\r\n                precedence: 1,\r\n                operator: '<',\r\n                action: 'lt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<=': {\r\n                precedence: 1,\r\n                operator: '<=',\r\n                action: 'lte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '>': {\r\n                precedence: 1,\r\n                operator: '>',\r\n                action: 'gt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '=>': {\r\n                precedence: 1,\r\n                operator: '=>',\r\n                action: 'gte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ',': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'comma',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ':': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                vectorFn: 'slice'\r\n            },\r\n            ':=': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'function_assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            }\r\n        };\r\n        //brackets\r\n        var brackets = {\r\n            '(': {\r\n                type: 'round',\r\n                id: 1,\r\n                is_open: true,\r\n                is_close: false\r\n            },\r\n            ')': {\r\n                type: 'round',\r\n                id: 2,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '[': {\r\n                type: 'square',\r\n                id: 3,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'vector'\r\n            },\r\n            ']': {\r\n                type: 'square',\r\n                id: 4,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '{': {\r\n                type: 'curly',\r\n                id: 5,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'Set'\r\n            },\r\n            '}': {\r\n                type: 'curly',\r\n                id: 6,\r\n                is_open: false,\r\n                is_close: true\r\n            }\r\n        };\r\n        // Supported functions.\r\n        // Format: function_name: [mapped_function, number_of_parameters]\r\n        var functions = this.functions = {\r\n            'cos': [trig.cos, 1],\r\n            'sin': [trig.sin, 1],\r\n            'tan': [trig.tan, 1],\r\n            'sec': [trig.sec, 1],\r\n            'csc': [trig.csc, 1],\r\n            'cot': [trig.cot, 1],\r\n            'acos': [trig.acos, 1],\r\n            'asin': [trig.asin, 1],\r\n            'atan': [trig.atan, 1],\r\n            'arccos': [trig.acos, 1],\r\n            'arcsin': [trig.asin, 1],\r\n            'arctan': [trig.atan, 1],\r\n            'asec': [trig.asec, 1],\r\n            'acsc': [trig.acsc, 1],\r\n            'acot': [trig.acot, 1],\r\n            'atan2': [trig.atan2, 2],\r\n            'acoth': [trigh.acoth, 1],\r\n            'asech': [trigh.asech, 1],\r\n            'acsch': [trigh.acsch, 1],\r\n            'sinh': [trigh.sinh, 1],\r\n            'cosh': [trigh.cosh, 1],\r\n            'tanh': [trigh.tanh, 1],\r\n            'asinh': [trigh.asinh, 1],\r\n            'sech': [trigh.sech, 1],\r\n            'csch': [trigh.csch, 1],\r\n            'coth': [trigh.coth, 1],\r\n            'acosh': [trigh.acosh, 1],\r\n            'atanh': [trigh.atanh, 1],\r\n            'log10': [, 1],\r\n            'exp': [exp, 1],\r\n            'radians': [radians, 1],\r\n            'degrees': [degrees, 1],\r\n            'min': [min, -1],\r\n            'max': [max, -1],\r\n            'erf': [, 1],\r\n            'floor': [, 1],\r\n            'ceil': [, 1],\r\n            'trunc': [, 1],\r\n            'Si': [, 1],\r\n            'step': [, 1],\r\n            'rect': [, 1],\r\n            'sinc': [sinc, 1],\r\n            'tri': [, 1],\r\n            'sign': [sign, 1],\r\n            'Ci': [, 1],\r\n            'Ei': [, 1],\r\n            'Shi': [, 1],\r\n            'Chi': [, 1],\r\n            'Li': [, 1],\r\n            'fib': [, 1],\r\n            'fact': [factorial, 1],\r\n            'factorial': [factorial, 1],\r\n            'continued_fraction': [continued_fraction, [1, 2]],\r\n            'dfactorial': [, 1],\r\n            'gamma_incomplete': [, [1, 2]],\r\n            'round': [round, [1, 2]],\r\n            'scientific': [scientific, [1, 2]],\r\n            'mod': [mod, 2],\r\n            'pfactor': [pfactor, 1],\r\n            'vector': [vector, -1],\r\n            'matrix': [matrix, -1],\r\n            'Set': [set, -1],\r\n            'imatrix': [imatrix, -1],\r\n            'parens': [parens, -1],\r\n            'sqrt': [sqrt, 1],\r\n            'cbrt': [cbrt, 1],\r\n            'nthroot': [nthroot, 2],\r\n            'log': [log, [1, 2]],\r\n            'expand': [expandall, 1],\r\n            'abs': [abs, 1],\r\n            'invert': [invert, 1],\r\n            'determinant': [determinant, 1],\r\n            'size': [size, 1],\r\n            'transpose': [transpose, 1],\r\n            'dot': [dot, 2],\r\n            'cross': [cross, 2],\r\n            'vecget': [vecget, 2],\r\n            'vecset': [vecset, 3],\r\n            'vectrim': [vectrim, [1, 2]],\r\n            'matget': [matget, 3],\r\n            'matset': [matset, 4],\r\n            'matgetrow': [matgetrow, 2],\r\n            'matsetrow': [matsetrow, 3],\r\n            'matgetcol': [matgetcol, 2],\r\n            'matsetcol': [matsetcol, 3],\r\n            'rationalize': [rationalize, 1],\r\n            'IF': [IF, 3],\r\n            'is_in': [is_in, 2],\r\n            //imaginary support\r\n            'realpart': [realpart, 1],\r\n            'imagpart': [imagpart, 1],\r\n            'conjugate': [conjugate, 1],\r\n            'arg': [arg, 1],\r\n            'polarform': [polarform, 1],\r\n            'rectform': [rectform, 1],\r\n            'sort': [sort, [1, 2]],\r\n            'integer_part': [, 1],\r\n            'union': [union, 2],\r\n            'contains': [contains, 2],\r\n            'intersection': [intersection, 2],\r\n            'difference': [difference, 2],\r\n            'intersects': [intersects, 2],\r\n            'is_subset': [is_subset, 2],\r\n            //system support\r\n            'print': [print, -1]\r\n        };\r\n\r\n        //error handler\r\n        this.error = err;\r\n        //this function is used to comb through the function modules and find a function given its name\r\n        var findFunction = function (fname) {\r\n            var fmodules = Settings.FUNCTION_MODULES,\r\n                    l = fmodules.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var fmodule = fmodules[i];\r\n                if(fname in fmodule)\r\n                    return fmodule[fname];\r\n            }\r\n            err('The function ' + fname + ' is undefined!');\r\n        };\r\n\r\n        /**\r\n         * This method gives the ability to override operators with new methods.\r\n         * @param {String} which\r\n         * @param {Function} with_what\r\n         */\r\n        this.override = function (which, with_what) {\r\n            if(!bin[which])\r\n                bin[which] = [];\r\n            bin[which].push(this[which]);\r\n            this[which] = with_what;\r\n        };\r\n\r\n        /**\r\n         * Restores a previously overridden operator\r\n         * @param {String} what\r\n         */\r\n        this.restore = function (what) {\r\n            if(this[what])\r\n                this[what] = bin[what].pop();\r\n        };\r\n\r\n        /**\r\n         * This method is supposed to behave similarly to the override method but it does not override\r\n         * the existing function rather it only extends it\r\n         * @param {String} what\r\n         * @param {Function} with_what\r\n         * @param {boolean} force_call\r\n         */\r\n        this.extend = function (what, with_what, force_call) {\r\n            var _ = this,\r\n                    extended = this[what];\r\n            if(typeof extended === 'function' && typeof with_what === 'function') {\r\n                var f = this[what];\r\n                this[what] = function (a, b) {\r\n                    if(isSymbol(a) && isSymbol(b) && !force_call)\r\n                        return f.call(_, a, b);\r\n                    else\r\n                        return with_what.call(_, a, b, f);\r\n                };\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Generates library's representation of a function. It's a fancy way of saying a symbol with\r\n         * a few extras. The most important thing is that that it gives a fname and\r\n         * an args property to the symbols in addition to changing its group to FN\r\n         * @param {String} fn_name\r\n         * @param {Array} params\r\n         * @returns {Symbol}\r\n         */\r\n        this.symfunction = function (fn_name, params) {\r\n            //call the proper function and return the result;\r\n            var f = new Symbol(fn_name);\r\n            f.group = FN;\r\n            if(typeof params === 'object')\r\n                params = [].slice.call(params);//ensure an array\r\n            f.args = params;\r\n            f.fname = fn_name === PARENTHESIS ? '' : fn_name;\r\n            f.updateHash();\r\n            return f;\r\n        };\r\n\r\n        /**\r\n         * An internal function call for the Parser. This will either trigger a real\r\n         * function call if it can do so or just return a symbolic representation of the\r\n         * function using symfunction.\r\n         * @param {String} fn_name\r\n         * @param {Array} args\r\n         * @param {int} allowed_args\r\n         * @returns {Symbol}\r\n         */\r\n        this.callfunction = function (fn_name, args, allowed_args) {\r\n            var fn_settings = functions[fn_name];\r\n\r\n            if(!fn_settings)\r\n                err('Nerdamer currently does not support the function ' + fn_name);\r\n\r\n            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments\r\n                    fn = fn_settings[0], //get the mapped function\r\n                    retval;\r\n            //We want to be able to call apply on the arguments or create a symfunction. Both require\r\n            //an array so make sure to wrap the argument in an array.\r\n            if(!(args instanceof Array))\r\n                args = args !== undefined ? [args] : [];\r\n\r\n            if(num_allowed_args !== -1) {\r\n                var is_array = isArray(num_allowed_args),\r\n                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,\r\n                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,\r\n                        num_args = args.length;\r\n\r\n                var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\r\n\r\n                if(num_args < min_args)\r\n                    err(format(error_msg, 'minimum', min_args, num_args));\r\n                if(num_args > max_args)\r\n                    err(format(error_msg, 'maximum', max_args, num_args));\r\n            }\r\n\r\n            /*\r\n             * The following are very important to the how nerdamer constructs functions!\r\n             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\r\n             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\r\n             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\r\n             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\r\n             *     they are expecting a symbolic output.\r\n             */\r\n            //check if arguments are all numers\r\n            var numericArgs = allNumbers(args);\r\n            //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\r\n//            if (Settings.USE_BIG && numericArgs) {\r\n//                retval = Big[fn_name].apply(undefined, args);\r\n//            }\r\n//            else {\r\n            if(!fn) {\r\n                //Remember assumption 1. No function defined so it MUST be numeric in nature\r\n                fn = findFunction(fn_name);\r\n                if(Settings.PARSE2NUMBER && numericArgs)\r\n                    retval = bigConvert(fn.apply(fn, args));\r\n                else\r\n                    retval = _.symfunction(fn_name, args);\r\n            }\r\n            else {\r\n                //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\r\n                retval = fn.apply(fn_settings[2], args);\r\n            }\r\n//            }\r\n\r\n            return retval;\r\n        };\r\n        /**\r\n         * Build a regex based on the operators currently loaded. These operators are to be ignored when\r\n         * substituting spaces for multiplication\r\n         */\r\n        this.operator_filter_regex = (function () {\r\n            //we only want the operators which are singular since those are the ones\r\n            //that nerdamer uses anyway\r\n            var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\r\n                if(x.length === 1)\r\n                    return x;\r\n            }).join('\\\\');\r\n            //create a regex which captures all spaces between characters except those\r\n            //have an operator on one end\r\n            return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\r\n        })();\r\n\r\n        /**\r\n         * Replaces nerdamer.setOperator\r\n         * @param {object} operator\r\n         * @param {boolean} shift\r\n         */\r\n        this.setOperator = function (operator, action, shift) {\r\n            var name = operator.operator; //take the name to be the symbol\r\n            operators[name] = operator;\r\n            if(action)\r\n                this[operator.action] = action;\r\n            //make the parser aware of the operator\r\n            _[name] = operator.operation;\r\n            //make the action available to the parser if infix\r\n            if(!operator.action && !(operator.prefix || operator.postif)) {\r\n                operator.action = name;\r\n            }\r\n            //if this operator is exclusive then all successive operators should be shifted\r\n            if(shift === 'over' || shift === 'under') {\r\n                var precedence = operator.precedence;\r\n\r\n                for(var x in operators) {\r\n                    var o = operators[x];\r\n                    var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\r\n                    if(condition)\r\n                        o.precedence++;\r\n                }\r\n                ;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets an opererator by its symbol\r\n         * @param {String} operator\r\n         * @returns {Object}\r\n         */\r\n        this.getOperator = function (operator) {\r\n            return operators[operator];\r\n        };\r\n\r\n        this.aliasOperator = function (o, n) {\r\n            var t = {};\r\n            var operator = operators[o];\r\n            //copy everything over to the new operator\r\n            for(var x in operator) {\r\n                t[x] = operator[x];\r\n            }\r\n            //update the symbol\r\n            t.operator = n;\r\n\r\n            this.setOperator(t);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of operators. Caution! Can break parser!\r\n         * @returns {object}\r\n         */\r\n        this.getOperators = function () {\r\n            //will replace this with some cloning action in the future\r\n            return operators;\r\n        };\r\n\r\n        this.getBrackets = function () {\r\n            return brackets;\r\n        };\r\n        /*\r\n         * Preforms preprocessing on the string. Useful for making early modification before\r\n         * sending to the parser\r\n         * @param {String} e\r\n         */\r\n        var prepare_expression = function (e) {\r\n            /*\r\n             * Since variables cannot start with a number, the assumption is made that when this occurs the\r\n             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\r\n             * a side-by-side close and open parenthesis\r\n             */\r\n            e = String(e);\r\n            //apply preprocessors\r\n            for(var i = 0; i < preprocessors.actions.length; i++)\r\n                e = preprocessors.actions[i].call(this, e);\r\n\r\n            //e = e.split(' ').join('');//strip empty spaces\r\n            //replace multiple spaces with one space\r\n            e = e.replace(/\\s+/g, ' ');\r\n\r\n            //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\r\n            if(/e/gi.test(e)) {\r\n                e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\r\n                    return scientificToDecimal(x);\r\n                });\r\n            }\r\n            //replace scientific numbers\r\n\r\n            //allow omission of multiplication after coefficients\r\n            e = e.replace(Settings.IMPLIED_MULTIPLICATION_REGEX, function () {\r\n                var str = arguments[4],\r\n                        group1 = arguments[1],\r\n                        group2 = arguments[2],\r\n                        start = arguments[3],\r\n                        first = str.charAt(start),\r\n                        before = '',\r\n                        d = '*';\r\n                if(!first.match(/[\\+\\-\\/\\*]/))\r\n                    before = str.charAt(start - 1);\r\n                if(before.match(/[a-z]/i))\r\n                    d = '';\r\n                return group1 + d + group2;\r\n            })\r\n                    .replace(/([a-z0-9_]+)/gi, function (match, a) {\r\n                        if(Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\r\n                            if(!isNaN(a))\r\n                                return a;\r\n                            return a.split('').join('*');\r\n                        }\r\n                        return a;\r\n                    })\r\n                    //allow omission of multiplication sign between brackets\r\n                    .replace(/\\)\\(/g, ')*(') || '0';\r\n            //replace x(x+a) with x*(x+a)\r\n            while(true) {\r\n                var e_org = e; //store the original\r\n                e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\r\n                    var g1 = a || c,\r\n                            g2 = b || d;\r\n                    if(g1 in functions) //create a passthrough for functions\r\n                        return g1 + g2;\r\n                    return g1 + '*' + g2;\r\n                });\r\n                //if the original equals the replace we're done\r\n                if(e_org === e)\r\n                    break;\r\n            }\r\n            return e;\r\n        };\r\n        //delay setting of constants until Settings is ready\r\n        this.initConstants = function () {\r\n            this.CONSTANTS = {\r\n                E: new Symbol(Settings.E),\r\n                PI: new Symbol(Settings.PI)\r\n            };\r\n        };\r\n        /*\r\n         * Debugging method used to better visualize vector and arrays\r\n         * @param {object} o\r\n         * @returns {String}\r\n         */\r\n        this.pretty_print = function (o) {\r\n            if(Array.isArray(o)) {\r\n                var s = o.map(x => _.pretty_print(x)).join(', ');\r\n                if(o.type === 'vector')\r\n                    return 'vector<' + s + '>';\r\n                return '(' + s + ')';\r\n            }\r\n            return o.toString();\r\n        };\r\n        this.peekers = {\r\n            pre_operator: [],\r\n            post_operator: [],\r\n            pre_function: [],\r\n            post_function: []\r\n        };\r\n\r\n        this.callPeekers = function (name) {\r\n            if(Settings.callPeekers) {\r\n                var peekers = this.peekers[name];\r\n                //remove the first items and stringify\r\n                var args = arguments2Array(arguments).slice(1).map(stringify);\r\n                //call each one of the peekers\r\n                for(var i = 0; i < peekers.length; i++) {\r\n                    peekers[i].apply(null, args);\r\n                }\r\n            }\r\n        };\r\n        /*\r\n         * Tokenizes the string\r\n         * @param {String} e\r\n         * @returns {Token[]}\r\n         */\r\n        this.tokenize = function (e) {\r\n            //cast to String\r\n            e = String(e);\r\n            //remove multiple white spaces and spaces at beginning and end of string\r\n            e = e.trim().replace(/\\s+/g, ' ');\r\n            //remove spaces before and after brackets\r\n            for(var x in brackets) {\r\n                var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\r\n                e = e.replace(regex, x);\r\n            }\r\n\r\n            var col = 0; //the column position\r\n            var L = e.length; //expression length\r\n            var lpos = 0; //marks beginning of next token\r\n            var tokens = []; //the tokens container\r\n            var scopes = [tokens]; //initiate with the tokens as the highest scope\r\n            var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\r\n            var depth = 0;\r\n            var open_brackets = [];\r\n            var has_space = false; //marks if an open space character was found\r\n            var SPACE = ' ';\r\n            var EMPTY_STRING = '';\r\n            var COMMA = ',';\r\n            var MINUS = '-';\r\n            var MULT = '*';\r\n            //Possible source of bug. Review\r\n            /*\r\n             //gets the next space\r\n             var next_space = function(from) {\r\n             for(var i=from; i<L; i++) {\r\n             if(e.charAt(i) === ' ')\r\n             return i;\r\n             }\r\n             \r\n             return L; //assume the end of the string instead\r\n             };\r\n             */\r\n            /**\r\n             * Adds a scope to tokens\r\n             * @param {String} scope_type\r\n             * @param {int} column\r\n             * @returns {undefined}\r\n             */\r\n            var addScope = function (scope_type, column) {\r\n                var new_scope = []; //create a new scope\r\n                if(scope_type !== undefined) {\r\n                    new_scope.type = scope_type;\r\n                }\r\n                new_scope.column = column; //mark the column of the scope\r\n                scopes.push(new_scope); //add it to the list of scopes\r\n                target.push(new_scope); //add it to the tokens list since now it's a scope\r\n                target = new_scope; //point to it\r\n                depth++; //go down one in scope\r\n            };\r\n            /**\r\n             * Goes up in scope by one\r\n             * @returns {undefined}\r\n             */\r\n            var goUp = function () {\r\n                scopes.pop(); //remove the scope from the scopes stack\r\n                target = scopes[--depth]; //point the above scope\r\n            };\r\n            /**\r\n             * Extracts all the operators from the expression string starting at postion start_at\r\n             * @param {int} start_at\r\n             * @returns {String}\r\n             */\r\n            var get_operator_str = function (start_at) {\r\n                start_at = start_at !== undefined ? start_at : col;\r\n                //mark the end of the operator as the start since we're just going\r\n                //to be walking along the string\r\n                var end = start_at + 1;\r\n                //just keep moving along\r\n                while(e.charAt(end++) in operators) {\r\n                }\r\n                //remember that we started at one position ahead. The beginning operator is what triggered\r\n                //this function to be called in the first place. String.CharAt is zero based so we now\r\n                //have to correct two places. The initial increment + the extra++ at the end of end during\r\n                //the last iteration.\r\n                return e.substring(start_at, end - 1);\r\n            };\r\n            /**\r\n             * Breaks operator up in to several different operators as defined in operators\r\n             * @param {String} operator_str\r\n             * @returns {String[]}\r\n             */\r\n            var chunkify = function (operator_str) {\r\n                var start = col - operator_str.length; //start of operator\r\n                var _operators = [];\r\n                var operator = operator_str.charAt(0);\r\n                //grab the largest possible chunks but start at 2 since we already know\r\n                //that the first character is an operator\r\n\r\n                for(var i = 1, L = operator_str.length; i < L; i++) {\r\n                    var ch = operator_str.charAt(i);\r\n                    var o = operator + ch;\r\n                    //since the operator now is undefined then the last operator\r\n                    //was the largest possible combination.\r\n                    if(!(o in operators)) {\r\n                        _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                        operator = ch;\r\n                    }\r\n                    else\r\n                        operator = o;//now the operator is the larger chunk\r\n                }\r\n                //add the last operator\r\n                _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                return _operators;\r\n            };\r\n\r\n            /**\r\n             * Is used to add a token to the tokens array. Makes sure that no empty token is added\r\n             * @param {int} at\r\n             * @param {String} token\r\n             * @returns {undefined}\r\n             */\r\n            var add_token = function (at, token) {\r\n                //grab the token if we're not supplied one\r\n                if(token === undefined)\r\n                    token = e.substring(lpos, at);\r\n                //only add it if it's not an empty string\r\n                if(token in _.units)\r\n                    target.push(new Token(token, Token.UNIT, lpos));\r\n                else if(token !== '')\r\n                    target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\r\n            };\r\n            /**\r\n             * Adds a function to the output\r\n             * @param {String} f\r\n             * @returns {undefined}\r\n             */\r\n            var add_function = function (f) {\r\n                target.push(new Token(f, Token.FUNCTION, lpos));\r\n            };\r\n            /**\r\n             * Tokens are found between operators so this marks the location of where the last token was found\r\n             * @param {int} position\r\n             * @returns {undefined}\r\n             */\r\n            var set_last_position = function (position) {\r\n                lpos = position + 1;\r\n            };\r\n            /**\r\n             * When a operator is found and added, especially a combo operator, then the column location\r\n             * has to be adjusted to the end of the operator\r\n             * @returns {undefined}\r\n             */\r\n            var adjust_column_position = function () {\r\n                lpos = lpos + operator_str.length - 2;\r\n                col = lpos - 1;\r\n            };\r\n            for(; col < L; col++) {\r\n                var ch = e.charAt(col);\r\n                if(ch in operators) {\r\n                    add_token(col);\r\n                    //is the last token numeric?\r\n                    var last_token_is_numeric = target[0] && isNumber(target[0]);\r\n                    //is this character multiplication?\r\n                    var is_multiplication = last_token_is_numeric && ch === MULT;\r\n                    //if we're in a new scope then go up by one but if the space\r\n                    //is right befor an operator then it makes no sense to go up in scope\r\n                    //consider sin -x. The last position = current position at the minus sign\r\n                    //this means that we're going for sin(x) -x which is wrong\r\n                    //Ignore comma since comma is still part of the existing scope.\r\n                    if(has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\r\n                        has_space = false;\r\n                        goUp();\r\n                    }\r\n                    //mark the last position that a\r\n                    set_last_position(col + 1);\r\n                    var operator_str = get_operator_str(col);\r\n\r\n                    adjust_column_position();\r\n                    target.push.apply(target, chunkify(operator_str));\r\n                }\r\n                else if(ch in brackets) {\r\n                    var bracket = brackets[ch];\r\n\r\n                    if(bracket.is_open) {\r\n                        //mark the bracket\r\n                        open_brackets.push([bracket, lpos]);\r\n                        var f = e.substring(lpos, col);\r\n                        if(f in functions) {\r\n                            add_function(f);\r\n                        }\r\n                        else if(f !== '') {\r\n                            //assume multiplication\r\n                            //TODO: Add the multiplication to stack\r\n                            target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\r\n                        }\r\n                        //go down one in scope\r\n                        addScope(bracket.maps_to, col);\r\n                    }\r\n                    else if(bracket.is_close) {\r\n                        //get the matching bracket\r\n                        var pair = open_brackets.pop();\r\n                        //throw errors accordingly\r\n                        //missing open bracket\r\n                        if(!pair)\r\n                            throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\r\n                        //incorrect pair\r\n                        else if(pair[0].id !== bracket.id - 1)\r\n                            throw new ParityError('Parity error');\r\n\r\n                        add_token(col);\r\n                        goUp();\r\n                    }\r\n                    set_last_position(col);\r\n                }\r\n                else if(ch === SPACE) {\r\n                    var prev = e.substring(lpos, col); //look back\r\n                    var nxt = e.charAt(col + 1); //look forward\r\n                    if(has_space) {\r\n\r\n                        if(prev in operators) {\r\n                            target.push(new Token(prev, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, prev);\r\n                            //we're at the closing space\r\n                            goUp(); //go up in scope if we're at a space\r\n\r\n                            //assume multiplication if it's not an operator except for minus\r\n                            var is_operator = nxt in operators;\r\n\r\n                            if((is_operator && operators[nxt].value === MINUS) || !is_operator) {\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                            }\r\n                        }\r\n                        has_space = false; //remove the space\r\n                    }\r\n                    else {\r\n                        //we're at the closing space\r\n                        //check if it's a function\r\n                        var f = e.substring(lpos, col);\r\n\r\n                        if(f in functions) {\r\n                            //there's no need to go up in scope if the next character is an operator\r\n                            has_space = true; //mark that a space was found\r\n                            add_function(f);\r\n                            addScope();\r\n                        }\r\n                        else if(f in operators) {\r\n                            target.push(new Token(f, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, f);\r\n                            //peek ahead to the next character\r\n                            var nxt = e.charAt(col + 1);\r\n\r\n                            //If it's a number then add the multiplication operator to the stack but make sure that the next character\r\n                            //is not an operator\r\n\r\n                            if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                        }\r\n                        //Possible source of bug. Review\r\n                        /*\r\n                         //space can mean multiplication so add the symbol if the is encountered\r\n                         if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\r\n                         var next = e.charAt(col+1);\r\n                         var next_is_operator = next in operators;\r\n                         var ns = next_space(col+1);\r\n                         var next_word = e.substring(col+1, ns);\r\n                         //the next can either be a prefix operator or no operator\r\n                         if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\r\n                         target.push(new Token('*', Token.OPERATOR, col));\r\n                         }\r\n                         */\r\n                    }\r\n                    set_last_position(col); //mark this location\r\n                }\r\n            }\r\n            //check that all brackets were closed\r\n            if(open_brackets.length) {\r\n                var b = open_brackets.pop();\r\n                throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\r\n            }\r\n            //add the last token\r\n            add_token(col);\r\n\r\n            return tokens;\r\n        };\r\n        /*\r\n         * Puts token array in Reverse Polish Notation\r\n         * @param {Token[]} tokens\r\n         * @returns {Token[]}\r\n         */\r\n        this.toRPN = function (tokens) {\r\n            var fn = tokens.type;\r\n            var l = tokens.length, i;\r\n            var output = [];\r\n            var stack = [];\r\n            var prefixes = [];\r\n            var collapse = function (target, destination) {\r\n                while(target.length)\r\n                    destination.push(target.pop());\r\n            };\r\n            //mark all the prefixes and add them to the stack\r\n            for(i = 0; i < l; i++) {\r\n                var token = tokens[i];\r\n                if(token.type !== Token.OPERATOR)\r\n                    break;\r\n                if(!token.prefix)\r\n                    throw new OperatorError('Not a prefix operator');\r\n                token.is_prefix = true;\r\n                stack.push(token);\r\n            }\r\n            //begin with remaining tokens\r\n            for(; i < l; i++) {\r\n                var e = tokens[i];\r\n                if(e.type === Token.OPERATOR) {\r\n                    var operator = e;\r\n\r\n                    //create the option for the operator being overloaded\r\n                    if(operator.overloaded) {\r\n                        var next = tokens[i + 1];\r\n                        //if it's followed by a number or variable then we assume it's not a postfix operator\r\n                        if(next && next.type === Token.VARIABLE_OR_LITERAL) {\r\n                            operator.postfix = false;\r\n                            //override the original function with the overload function\r\n                            operator.action = operator.overloadAction;\r\n                            operator.leftAssoc = operator.overloadLeftAssoc;\r\n                        }\r\n                    }\r\n\r\n                    //if the stack is not empty\r\n                    while(stack.length) {\r\n                        var last = stack[stack.length - 1];\r\n                        //if (there is an operator at the top of the operator stack with greater precedence)\r\n                        //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\r\n                        //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\r\n                        if(!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))\r\n                            break;\r\n                        output.push(stack.pop());\r\n                    }\r\n\r\n                    //change the behavior of the operator if it's a vector and we've been asked to do so\r\n                    if((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)\r\n                        operator.action = operator.vectorFn;\r\n\r\n\r\n                    //if the operator is a postfix operator then we're ready to go since it belongs\r\n                    //to the preceding token. However the output cannot be empty. It must have either\r\n                    //an operator or a variable/literal\r\n                    if(operator.postfix) {\r\n                        var previous = tokens[i - 1];\r\n                        if(!previous)\r\n                            throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);\r\n                        else if(previous.type === Token.OPERATOR) {\r\n                            //a postfix can only be followed by a postfix\r\n                            if(!previous.postfix)\r\n                                throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //we must be at an infix so point the operator this\r\n                        do {\r\n                            //the first one is an infix operator all others have to be prefix operators so jump to the end\r\n                            var next = tokens[i + 1]; //take a look ahead\r\n                            var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\r\n                            if(next_is_operator) {\r\n                                //if it's not a prefix operator then it not in the right place\r\n                                if(!next.prefix) {\r\n                                    throw new OperatorError('A prefix operator was expected at ' + next.column);\r\n                                }\r\n                                //mark it as a confirmed prefix\r\n                                next.is_prefix = true;\r\n                                //add it to the prefixes\r\n                                prefixes.push(next);\r\n                                i++;\r\n                            }\r\n                        }\r\n                        while(next_is_operator)\r\n                    }\r\n\r\n                    //if it's a prefix it should be on a special stack called prefixes\r\n                    //we do this to hold on to prefixes because of left associative operators.\r\n                    //they belong to the variable/literal but if placed on either the stack\r\n                    //or output there's no way of knowing this. I might be wrong so I welcome\r\n                    //any discussion about this.\r\n\r\n                    if(operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\r\n                        prefixes.push(operator);\r\n                    else\r\n                        stack.push(operator);\r\n                    //move the prefixes to the stack\r\n                    while(prefixes.length) {\r\n                        if(operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\r\n                            stack.push(prefixes.pop());\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                else if(e.type === Token.VARIABLE_OR_LITERAL) {\r\n                    //move prefixes to stack at beginning of scope\r\n                    if(output.length === 0)\r\n                        collapse(prefixes, stack);\r\n                    //done with token\r\n                    output.push(e);\r\n                    var last_on_stack = stack[stack.length - 1];\r\n                    //then move all the prefixes to the output\r\n                    if(!last_on_stack || !last_on_stack.leftAssoc)\r\n                        collapse(prefixes, output);\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    stack.push(e);\r\n                }\r\n                else if(e.type === Token.UNIT) {\r\n                    //if it's a unit it belongs on the stack since it's tied to the previous token\r\n                    output.push(e);\r\n                }\r\n                //if it's an additonal scope then put that into RPN form\r\n                if(Array.isArray(e)) {\r\n                    output.push(this.toRPN(e));\r\n                    if(e.type)\r\n                        output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\r\n\r\n                }\r\n            }\r\n            //collapse the remainder of the stack and prefixes to output\r\n            collapse(stack, output);\r\n            collapse(prefixes, output);\r\n\r\n            return output;\r\n        };\r\n        /*\r\n         * Parses the tokens\r\n         * @param {Tokens[]} rpn\r\n         * @param {object} substitutions\r\n         * @returns {Symbol}\r\n         */\r\n        this.parseRPN = function (rpn, substitutions) {\r\n            try {\r\n                //default substitutions\r\n                substitutions = substitutions || {};\r\n                //prepare the substitutions.\r\n                //we first parse them out as-is\r\n                for(var x in substitutions)\r\n                    substitutions[x] = _.parse(substitutions[x], {});\r\n\r\n                //Although technically constants,\r\n                //pi and e are only available when evaluating the expression so add to the subs.\r\n                //Doing this avoids rounding errors\r\n                //link e and pi\r\n                if(Settings.PARSE2NUMBER) {\r\n                    //use the value provided if the individual for some strange reason prefers this.\r\n                    //one reason could be to sub e but not pi or vice versa\r\n                    if(!('e' in substitutions))\r\n                        substitutions.e = new Symbol(Settings.E);\r\n                    if((!('pi' in substitutions)))\r\n                        substitutions.pi = new Symbol(Settings.PI);\r\n                }\r\n\r\n                var Q = [];\r\n                for(var i = 0, l = rpn.length; i < l; i++) {\r\n                    var e = rpn[i];\r\n\r\n                    //Arrays indicate a new scope so parse that out\r\n                    if(Array.isArray(e)) {\r\n                        e = this.parseRPN(e, substitutions);\r\n                    }\r\n\r\n                    if(e) {\r\n                        if(e.type === Token.OPERATOR) {\r\n                            if(e.is_prefix || e.postfix)\r\n                                //resolve the operation assocated with the prefix\r\n                                Q.push(e.operation(Q.pop()));\r\n                            else {\r\n                                var b = Q.pop();\r\n                                var a = Q.pop();\r\n                                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\r\n                                if(typeof a === 'undefined')\r\n                                    throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\r\n\r\n                                var is_comma = e.action === 'comma';\r\n                                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\r\n                                if(a instanceof Set && !is_comma)\r\n                                    a = Vector.fromSet(a);\r\n\r\n                                if(b instanceof Set && !is_comma)\r\n                                    b = Vector.fromSet(b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('pre_operator', a, b, e);\r\n\r\n                                var ans = _[e.action](a, b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('post_operator', ans, a, b, e);\r\n\r\n                                Q.push(ans);\r\n                            }\r\n                        }\r\n                        else if(e.type === Token.FUNCTION) {\r\n                            var args = Q.pop();\r\n                            var parent = args.parent; //make a note of the parent\r\n                            if(!(args instanceof Collection))\r\n                                args = Collection.create(args);\r\n                            //the return value may be a vector. If it is then we check\r\n                            //Q to see if there's another vector on the stack. If it is then\r\n                            //we check if has elements. If it does then we know that we're dealing\r\n                            //with an \"getter\" object and return the requested values\r\n\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            var fn_name = e.value;\r\n                            var fn_args = args.getItems();\r\n\r\n                            //call the pre-function peekers\r\n                            this.callPeekers('pre_function', fn_name, fn_args);\r\n\r\n                            var ret = _.callfunction(fn_name, fn_args);\r\n\r\n                            //call the post-function peekers\r\n                            this.callPeekers('post_function', ret, fn_name, fn_args);\r\n\r\n                            var last = Q[Q.length - 1];\r\n                            var next = rpn[i + 1];\r\n                            var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\r\n\r\n                            if(!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\r\n                                //remove the item from the queue\r\n                                var item = Q.pop();\r\n\r\n                                var getter = ret.elements[0];\r\n                                //check if it's symbolic. If so put it back and add the item to the stack\r\n                                if(!getter.isConstant()) {\r\n                                    item.getter = getter;\r\n                                    Q.push(item);\r\n                                    Q.push(ret);\r\n                                }\r\n                                else if(getter instanceof Slice) {\r\n                                    //if it's a Slice return the slice\r\n                                    Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\r\n                                }\r\n                                else {\r\n                                    var index = Number(getter);\r\n                                    var il = item.elements.length;\r\n                                    //support for negative indices\r\n                                    if(index < 0)\r\n                                        index = il + index;\r\n                                    //it it's still out of bounds\r\n                                    if(index < 0 || index >= il) //index should no longer be negative since it's been reset above\r\n                                        //range error\r\n                                        throw new OutOfRangeError('Index out of range ' + (e.column + 1));\r\n\r\n                                    var element = item.elements[index];\r\n                                    //cyclic but we need to mark this for future reference\r\n                                    item.getter = index;\r\n                                    element.parent = item;\r\n\r\n                                    Q.push(element);\r\n                                }\r\n                            }\r\n                            else {\r\n                                //extend the parent reference\r\n                                if(parent)\r\n                                    ret.parent = parent;\r\n                                Q.push(ret);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            var subbed;\r\n                            var v = e.value;\r\n\r\n                            if(v in Settings.ALIASES)\r\n                                e = _.parse(Settings.ALIASES[e]);\r\n                            //wrap it in a symbol if need be\r\n                            else if(e.type === Token.VARIABLE_OR_LITERAL)\r\n                                e = new Symbol(v);\r\n                            else if(e.type === Token.UNIT) {\r\n                                e = new Symbol(v);\r\n                                e.isUnit = true;\r\n                            }\r\n\r\n                            //make substitutions\r\n                            //Always constants first. This avoids the being overridden\r\n                            if(v in _.CONSTANTS) {\r\n                                subbed = e;\r\n                                e = new Symbol(_.CONSTANTS[v]);\r\n                            }\r\n                            //next substitutions. This allows declared variable to be overridden\r\n                            //check if the values match to avoid erasing the multiplier.\r\n                            //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\r\n                            else if(v in substitutions && v !== substitutions[v].toString()) {\r\n                                subbed = e;\r\n                                e = substitutions[v].clone();\r\n                            }\r\n                            //next declare variables\r\n                            else if(v in VARS) {\r\n                                subbed = e;\r\n                                e = VARS[v].clone();\r\n                            }\r\n                            //make notation of what it was before\r\n                            if(subbed)\r\n                                e.subbed = subbed;\r\n\r\n                            Q.push(e);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var retval = Q[0];\r\n\r\n                if(['undefined', 'string', 'number'].indexOf(typeof retval) !== -1) {\r\n                    throw new UnexpectedTokenError('Unexpected token!');\r\n                }\r\n\r\n                return retval;\r\n            }\r\n            catch(error) {\r\n                var rethrowErrors = [OutOfFunctionDomainError];\r\n                // Rethrow certain errors in the same class to preserve them\r\n                rethrowErrors.forEach(function (E) {\r\n                    if(error instanceof E) {\r\n                        throw new E(error.message + ': ' + e.column);\r\n                    }\r\n                });\r\n\r\n                throw new ParseError(error.message + ': ' + e.column);\r\n            }\r\n        };\r\n        /**\r\n         * This is the method that triggers the parsing of the string. It generates a parse tree but processes\r\n         * it right away. The operator functions are called when their respective operators are reached. For instance\r\n         * + with cause this.add to be called with the left and right hand values. It works by walking along each\r\n         * character of the string and placing the operators on the stack and values on the output. When an operator\r\n         * having a lower order than the last is reached then the stack is processed from the last operator on the\r\n         * stack.\r\n         * @param {String} token\r\n         */\r\n\r\n        function Node(token) {\r\n            this.type = token.type;\r\n            this.value = token.value;\r\n            //the incoming token may already be a Node type\r\n            this.left = token.left;\r\n            this.right = token.right;\r\n        }\r\n\r\n        Node.prototype.toString = function () {\r\n            var left = this.left ? this.left.toString() + '---' : '';\r\n            var right = this.right ? '---' + this.right.toString() : '';\r\n            return left + '(' + this.value + ')' + right;\r\n        };\r\n\r\n        Node.prototype.toHTML = function (depth, indent) {\r\n            depth = depth || 0;\r\n            indent = typeof indent === 'undefined' ? 4 : indent;\r\n            var tab = function (n) {\r\n                return ' '.repeat(indent * n);\r\n            };\r\n            var html = '';\r\n            var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\r\n            var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\r\n            var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\r\n            if(left || right) {\r\n                html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\r\n            }\r\n            html += '';\r\n            return html;\r\n        };\r\n\r\n        this.tree = function (tokens) {\r\n            var Q = [];\r\n            for(var i = 0; i < tokens.length; i++) {\r\n                var e = tokens[i];\r\n                //Arrays indicate a new scope so parse that out\r\n                if(Array.isArray(e)) {\r\n                    e = this.tree(e);\r\n                    //if it's a comma then it's just arguments\r\n                    Q.push(e);\r\n                    continue;\r\n                }\r\n                if(e.type === Token.OPERATOR) {\r\n                    if(e.is_prefix || e.postfix) {\r\n                        //prefixes go to the left, postfix to the right\r\n                        var location = e.is_prefix ? 'left' : 'right';\r\n                        var last = Q.pop();\r\n                        e = new Node(e);\r\n                        e[location] = last;\r\n                        Q.push(e);\r\n                    }\r\n                    else {\r\n                        e = new Node(e);\r\n                        e.right = Q.pop();\r\n                        e.left = Q.pop();\r\n                        Q.push(e);\r\n                    }\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    e = new Node(e);\r\n                    var args = Q.pop();\r\n                    e.right = args;\r\n                    if(e.value === 'object') {\r\n                        //check if Q has a value\r\n                        var last = Q[Q.length - 1];\r\n                        if(last) {\r\n                            while(last.right) {\r\n                                last = last.right;\r\n                            }\r\n                            last.right = e;\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    Q.push(e);\r\n                }\r\n                else {\r\n                    Q.push(new Node(e));\r\n                }\r\n            }\r\n\r\n            return Q[0];\r\n        };\r\n        this.parse = function (e, substitutions) {\r\n            e = prepare_expression(e);\r\n            substitutions = substitutions || {};\r\n            //three passes but easier to debug\r\n            var tokens = this.tokenize(e);\r\n            var rpn = this.toRPN(tokens);\r\n            return this.parseRPN(rpn, substitutions);\r\n        };\r\n        /**\r\n         * TODO: Switch to Parser.tokenize for this method\r\n         * Reads a string into an array of Symbols and operators\r\n         * @param {String} expression_string\r\n         * @returns {Array}\r\n         */\r\n        this.toObject = function (expression_string) {\r\n            var objectify = function (tokens) {\r\n                var output = [];\r\n                for(var i = 0, l = tokens.length; i < l; i++) {\r\n                    var token = tokens[i];\r\n                    var v = token.value;\r\n                    if(token.type === Token.VARIABLE_OR_LITERAL) {\r\n                        output.push(new Symbol(v));\r\n                    }\r\n                    else if(token.type === Token.FUNCTION) {\r\n                        //jump ahead since the next object are the arguments\r\n                        i++;\r\n                        //create a symbolic function and stick it on output\r\n                        var f = _.symfunction(v, objectify(tokens[i]));\r\n                        f.isConversion = true;\r\n                        output.push(f);\r\n                    }\r\n                    else if(token.type === Token.OPERATOR) {\r\n                        output.push(v);\r\n                    }\r\n                    else {\r\n                        output.push(objectify(token));\r\n                    }\r\n                }\r\n\r\n                return output;\r\n            };\r\n            return objectify(_.tokenize(expression_string));\r\n        };\r\n\r\n        // A helper method for toTeX\r\n        var chunkAtCommas = function (arr) {\r\n            var j, k = 0, chunks = [[]];\r\n            for(var j = 0, l = arr.length; j < l; j++) {\r\n                if(arr[j] === ',') {\r\n                    k++;\r\n                    chunks[k] = [];\r\n                }\r\n                else {\r\n                    chunks[k].push(arr[j]);\r\n                }\r\n            }\r\n            return chunks;\r\n        };\r\n\r\n        // Helper method for toTeX\r\n        var rem_brackets = function (str) {\r\n            return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\r\n                if(a)\r\n                    return a;\r\n                return str;\r\n            });\r\n        };\r\n\r\n        var remove_redundant_powers = function (arr) {\r\n            // The filtered array\r\n            var narr = [];\r\n\r\n            while(arr.length) {\r\n                // Remove the element from the front\r\n                var e = arr.shift();\r\n                var next = arr[0];\r\n                var next_is_array = isArray(next);\r\n                var next_is_minus = next === '-';\r\n\r\n                // Remove redundant plusses \r\n                if(e === '^') {\r\n                    if(next === '+') {\r\n                        arr.shift();\r\n                    }\r\n                    else if(next_is_array && next[0] === '+') {\r\n                        next.shift();\r\n                    }\r\n\r\n                    // Remove redundant parentheses\r\n                    if(next_is_array && next.length === 1) {\r\n                        arr.unshift(arr.shift()[0]);\r\n                    }\r\n                }\r\n\r\n                // Check if it's a negative power\r\n                if(e === '^' && (next_is_array && next[0] === '-' || next_is_minus)) {\r\n                    // If so:\r\n                    // - Remove it from the new array, place a one and a division sign in that array and put it back\r\n                    var last = narr.pop();\r\n                    // Check if it's something multiplied by\r\n                    var before = narr[narr.length - 1];\r\n                    var before_last = '1';\r\n\r\n                    if(before === '*') {\r\n                        narr.pop();\r\n                        // For simplicity we just pop it. \r\n                        before_last = narr.pop();\r\n                    }\r\n                    // Implied multiplication\r\n                    else if(isArray(before)) {\r\n                        before_last = narr.pop();\r\n                    }\r\n\r\n                    narr.push(before_last, '/', last, e);\r\n\r\n                    // Remove the negative sign from the power \r\n                    if(next_is_array) {\r\n                        next.shift();\r\n                    }\r\n                    else {\r\n                        arr.shift();\r\n                    }\r\n\r\n                    // Remove it from the array so we don't end up with redundant parentheses if we can\r\n                    if(next_is_array && next.length === 1) {\r\n                        narr.push(arr.shift()[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    narr.push(e);\r\n                }\r\n            }\r\n\r\n            return narr;\r\n        };\r\n        /*\r\n         * Convert expression or object to LaTeX\r\n         * @param {String} expression_or_obj\r\n         * @param {object} opt\r\n         * @returns {String}\r\n         */\r\n        this.toTeX = function (expression_or_obj, opt) {\r\n            opt = opt || {};\r\n            // Add decimal option as per issue #579. Consider passing an object to Latex.latex as option instead of string\r\n            var decimals = opt.decimals === true ? 'decimals' : undefined;\r\n\r\n            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\r\n                    TeX = [],\r\n                    cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\r\n\r\n            // Remove negative powers as per issue #570\r\n            obj = remove_redundant_powers(obj);\r\n\r\n            if(isArray(obj)) {\r\n                var nobj = [], a, b;\r\n                //first handle ^\r\n                for(var i = 0; i < obj.length; i++) {\r\n                    a = obj[i];\r\n\r\n                    if(obj[i + 1] === '^') {\r\n                        b = obj[i + 2];\r\n                        nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\r\n                        i += 2;\r\n                    }\r\n                    else {\r\n                        nobj.push(a);\r\n                    }\r\n                }\r\n                obj = nobj;\r\n            }\r\n\r\n            for(var i = 0, l = obj.length; i < l; i++) {\r\n                var e = obj[i];\r\n\r\n                // Convert * to cdot\r\n                if(e === '*') {\r\n                    e = cdot;\r\n                }\r\n\r\n                if(isSymbol(e)) {\r\n                    if(e.group === FN) {\r\n                        var fname = e.fname, f;\r\n\r\n                        if(fname === SQRT) {\r\n                            f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\r\n                        }\r\n                        else if(fname === ABS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');\r\n                        }\r\n                        else if(fname === PARENTHESIS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n                        else if(fname === Settings.LOG10) {\r\n                            f = '\\\\' + Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\r\n                        }\r\n                        else if(fname === 'integrate') {\r\n                            /* Retrive [Expression, x] */\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            /* Build TeX */\r\n                            var expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[1]);\r\n                            f = '\\\\int ' + expr + '\\\\, d' + dx;\r\n                        }\r\n                        else if(fname === 'defint') {\r\n                            var chunks = chunkAtCommas(e.args),\r\n                                    expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[3]),\r\n                                    lb = this.toTeX(chunks[1]),\r\n                                    ub = this.toTeX(chunks[2]);\r\n                            f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\r\n\r\n                        }\r\n                        else if(fname === 'diff') {\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));\r\n                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\r\n                            if(chunks.length === 1) {\r\n                                var vars = [];\r\n                                for(j = 0; j < chunks[0].length; j++) {\r\n                                    if(chunks[0][j].group === 3) {\r\n                                        vars.push(chunks[0][j].value);\r\n                                    }\r\n                                }\r\n                                vars.sort();\r\n                                dx = vars.length > 0 ? ('\\\\frac{d}{d ' + vars[0] + '}') : '\\\\frac{d}{d x}';\r\n                            }\r\n                            /* If two arguments, we have expression and variable, we assume n = 1 */\r\n                            else if(chunks.length === 2) {\r\n                                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\r\n                            }\r\n                            /* If we have more than 2 arguments, we assume we've got everything */\r\n                            else {\r\n                                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\r\n                            }\r\n\r\n                            f = dx + '\\\\left(' + expr + '\\\\right)';\r\n\r\n                        }\r\n                        else if(fname === 'sum' || fname === 'product') {\r\n                            // Split e.args into 4 parts based on locations of , symbols.\r\n                            var argSplit = [[], [], [], []], j = 0, i;\r\n                            for(i = 0; i < e.args.length; i++) {\r\n                                if(e.args[i] === ',') {\r\n                                    j++;\r\n                                    continue;\r\n                                }\r\n                                argSplit[j].push(e.args[i]);\r\n                            }\r\n                            // Then build TeX string.\r\n                            f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\r\n                            f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\r\n                        }\r\n                        else if(fname === 'limit') {\r\n                            var args = chunkAtCommas(e.args).map(function (x) {\r\n                                if(Array.isArray(x))\r\n                                    return _.toTeX(x.join(''));\r\n                                return _.toTeX(String(x));\r\n                            });\r\n                            f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\r\n                        }\r\n                        else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\r\n                        }\r\n                        else {\r\n                            f = LaTeX.latex(e, decimals);\r\n                            //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n\r\n                        TeX.push(f);\r\n                    }\r\n                    else {\r\n                        TeX.push(LaTeX.latex(e, decimals));\r\n                    }\r\n                }\r\n                else if(isArray(e)) {\r\n                    TeX.push(LaTeX.brackets(this.toTeX(e)));\r\n                }\r\n                else {\r\n                    if(e === '/')\r\n                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));\r\n                    else\r\n                        TeX.push(e);\r\n                }\r\n            }\r\n\r\n            return TeX.join(' ');\r\n        };\r\n\r\n//Parser.functions ==============================================================\r\n        /* Although parens is not a \"real\" function it is important in some cases when the\r\n         * symbol must carry parenthesis. Once set you don't have to worry about it anymore\r\n         * as the parser will get rid of it at the first opportunity\r\n         */\r\n        function parens(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                return symbol;\r\n            }\r\n            return _.symfunction('parens', [symbol]);\r\n        }\r\n\r\n        function abs(symbol) {\r\n\r\n            //|-∞| = ∞\r\n            if(symbol.isInfinity) {\r\n                return Symbol.infinity();\r\n            }\r\n            if(symbol.multiplier.lessThan(0))\r\n                symbol.multiplier.negate();\r\n\r\n            if(symbol.isImaginary()) {\r\n                var re = symbol.realpart();\r\n                var im = symbol.imagpart();\r\n                if(re.isConstant() && im.isConstant())\r\n                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\r\n            }\r\n            else if(isNumericSymbol(symbol) || even(symbol.power)) {\r\n                return symbol;\r\n            }\r\n\r\n            if(symbol.isComposite()) {\r\n                var ms = [];\r\n                symbol.each(function (x) {\r\n                    ms.push(x.multiplier);\r\n                });\r\n                var gcd = Math2.QGCD.apply(null, ms);\r\n                if(gcd.lessThan(0)) {\r\n                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\r\n                    symbol.distributeMultiplier();\r\n                }\r\n            }\r\n\r\n            //convert |n*x| to n*|x|\r\n            var m = _.parse(symbol.multiplier);\r\n            symbol.toUnitMultiplier();\r\n\r\n            return _.multiply(m, _.symfunction(ABS, [symbol]));\r\n        }\r\n        /**\r\n         * The factorial function\r\n         * @param {Symbol} symbol\r\n         * @return {Symbol}\r\n         */\r\n        function factorial(symbol) {\r\n            var retval;\r\n            if(isVector(symbol)) {\r\n                var V = new Vector();\r\n                symbol.each(function (x, i) {\r\n                    //i start at one.\r\n                    V.set(i - 1, factorial(x));\r\n                });\r\n                return V;\r\n            }\r\n            if(isMatrix(symbol)) {\r\n                var M = new Matrix();\r\n                symbol.each(function (x, i, j) {\r\n                    //i start at one.\r\n                    M.set(i, j, factorial(x));\r\n                });\r\n                return M;\r\n            }\r\n            if(Settings.PARSE2NUMBER && symbol.isConstant()) {\r\n                if(isInt(symbol)) {\r\n                    retval = Math2.bigfactorial(symbol);\r\n                }\r\n                else {\r\n                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\r\n                }\r\n\r\n                retval = bigConvert(retval);\r\n                return retval;\r\n            }\r\n            else if(symbol.isConstant()) {\r\n                var den = symbol.getDenom();\r\n                if(den.equals(2)) {\r\n                    var num = symbol.getNum();\r\n                    var a, b, c, n;\r\n\r\n                    if(!symbol.multiplier.isNegative()) {\r\n                        n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                        b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                    }\r\n                    else {\r\n                        n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                        b = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                    }\r\n                    c = a.divide(b);\r\n                    return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\r\n                }\r\n            }\r\n            return _.symfunction(FACTORIAL, [symbol]);\r\n        }\r\n        ;\r\n        /**\r\n         * Returns the continued fraction of a number\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} n\r\n         * @returns {Symbol}\r\n         */\r\n        function continued_fraction(symbol, n) {\r\n            var _symbol = evaluate(symbol);\r\n            if(_symbol.isConstant()) {\r\n                var cf = Math2.continuedFraction(_symbol, n);\r\n                //convert the fractions array to a new Vector\r\n                var fractions = Vector.fromArray(cf.fractions.map(function (x) {\r\n                    return new Symbol(x);\r\n                }));\r\n                return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\r\n            }\r\n            return _.symfunction('continued_fraction', arguments);\r\n        }\r\n        /**\r\n         * Returns the error function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function erf(symbol) {\r\n            var _symbol = evaluate(symbol);\r\n\r\n            if(_symbol.isConstant()) {\r\n                return Math2.erf(_symbol);\r\n            }\r\n            else if(_symbol.isImaginary()) {\r\n                return complex.erf(symbol);\r\n            }\r\n            return _.symfunction('erf', arguments);\r\n        }\r\n        ;\r\n        /**\r\n         * The mod function\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Symbol}\r\n         */\r\n        function mod(symbol1, symbol2) {\r\n            if(symbol1.isConstant() && symbol2.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\r\n                return retval;\r\n            }\r\n            //try to see if division has remainder of zero\r\n            var r = _.divide(symbol1.clone(), symbol2.clone());\r\n            if(isInt(r))\r\n                return new Symbol(0);\r\n            return _.symfunction('mod', [symbol1, symbol2]);\r\n        }\r\n        /**\r\n         * A branghing function\r\n         * @param {Boolean} condition\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        function IF(condition, a, b) {\r\n            if(typeof condition !== 'boolean')\r\n                if(isNumericSymbol(condition))\r\n                    condition = !!Number(condition);\r\n            if(condition)\r\n                return a;\r\n            return b;\r\n        }\r\n        /**\r\n         *\r\n         * @param {Matrix|Vector|Set|Collection} obj\r\n         * @param {Symbol} item\r\n         * @returns {Boolean}\r\n         */\r\n        function is_in(obj, item) {\r\n            if(isMatrix(obj)) {\r\n                for(var i = 0, l = obj.rows(); i < l; i++) {\r\n                    for(var j = 0, l2 = obj.cols(); j < l2; j++) {\r\n                        var element = obj.elements[i][j];\r\n                        if(element.equals(item))\r\n                            return new Symbol(1);\r\n                    }\r\n                }\r\n            }\r\n            else if(obj.elements) {\r\n                for(var i = 0, l = obj.elements.length; i < l; i++) {\r\n                    if(obj.elements[i].equals(item))\r\n                        return new Symbol(1);\r\n                }\r\n            }\r\n\r\n            return new Symbol(0);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for sinc\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sinc(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant()) {\r\n                    return new Symbol(Math2.sinc(symbol));\r\n                }\r\n                return _.parse(format('sin({0})/({0})', symbol));\r\n            }\r\n            return _.symfunction('sinc', [symbol]);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\r\n         * Thanks @ Happypig375\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function exp(symbol) {\r\n            if(symbol.fname === Settings.LOG && symbol.isLinear()) {\r\n                return _.pow(symbol.args[0], Symbol.create(symbol.multiplier));\r\n            }\r\n            return _.parse(format('e^({0})', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value degrees to radians\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function radians(symbol) {\r\n            return _.parse(format('({0})*pi/180', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value from radians to degrees\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function degrees(symbol) {\r\n            return _.parse(format('({0})*180/pi', symbol));\r\n        }\r\n\r\n        function nroots(symbol) {\r\n            var a, b;\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n                b = _.parse(symbol.power);\r\n            }\r\n            else if(symbol.group === P) {\r\n                a = _.parse(symbol.value);\r\n                b = _.parse(symbol.power);\r\n            }\r\n\r\n            if(a && b && a.group === N && b.group === N) {\r\n                var _roots = [];\r\n                var parts = Symbol.toPolarFormArray(symbol);\r\n                var r = _.parse(a).abs().toString();\r\n                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n                var x = arg(a).toString();\r\n                var n = b.multiplier.den.toString();\r\n                var p = b.multiplier.num.toString();\r\n\r\n                var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\r\n                for(var i = 0; i < n; i++) {\r\n                    var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n                }\r\n                return Vector.fromArray(_roots);\r\n            }\r\n            else if(symbol.isConstant(true)) {\r\n                var sign = symbol.sign();\r\n                var x = evaluate(symbol.abs());\r\n                var root = _.sqrt(x);\r\n\r\n                var _roots = [root.clone(), root.negate()];\r\n\r\n                if(sign < 0)\r\n                    _roots = _roots.map(function (x) {\r\n                        return _.multiply(x, Symbol.imaginary());\r\n                    });\r\n            }\r\n            else {\r\n                _roots = [_.parse(symbol)];\r\n            }\r\n\r\n            return Vector.fromArray(_roots);\r\n        }\r\n\r\n        /**\r\n         * Rationalizes a symbol\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rationalize(symbol) {\r\n            if(symbol.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                var num, den, retnum, retden, a, b, n, d;\r\n                symbol.each(function (x) {\r\n                    num = x.getNum();\r\n                    den = x.getDenom();\r\n                    retnum = retval.getNum();\r\n                    retden = retval.getDenom();\r\n                    a = _.multiply(den, retnum);\r\n                    b = _.multiply(num, retden);\r\n                    n = _.expand(_.add(a, b));\r\n                    d = _.multiply(retden, den);\r\n                    retval = _.divide(n, d);\r\n                }, true);\r\n\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         * The square root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sqrt(symbol) {\r\n            if(!isSymbol(symbol)) {\r\n                symbol = _.parse(symbol);\r\n            }\r\n            \r\n            // Exit early for EX\r\n            if(symbol.group === EX) {\r\n                return _.symfunction(SQRT, [symbol]);\r\n            }\r\n\r\n            if(symbol.fname === '' && symbol.power.equals(1))\r\n                symbol = symbol.args[0];\r\n\r\n            var is_negative = symbol.multiplier.sign() < 0;\r\n\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant() && !is_negative) {\r\n                    return new Symbol(bigDec.sqrt(symbol.multiplier.toDecimal()));\r\n                }\r\n                else if(symbol.isImaginary()) {\r\n                    return complex.sqrt(symbol);\r\n                }\r\n                else if(symbol.group === S) {\r\n                    return _.symfunction('sqrt', [symbol]);\r\n                }\r\n            }\r\n\r\n            var img, retval,\r\n                    isConstant = symbol.isConstant();\r\n\r\n            if(symbol.group === CB && symbol.isLinear()) {\r\n                var m = sqrt(Symbol(symbol.multiplier));\r\n                for(var s in symbol.symbols) {\r\n                    var x = symbol.symbols[s];\r\n                    m = _.multiply(m, sqrt(x));\r\n                }\r\n\r\n                retval = m;\r\n            }\r\n            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\r\n            else if(symbol.fname === SQRT) {\r\n                var s = symbol.args[0];\r\n                var ms = symbol.multiplier;\r\n                s.setPower(symbol.power.multiply(new Frac(0.25)));\r\n                retval = s;\r\n                //grab the multiplier\r\n                if(!ms.equals(1))\r\n                    retval = _.multiply(sqrt(_.parse(ms)), retval);\r\n            }\r\n            //if the symbol is a fraction then we don't keep can unwrap it. For instance\r\n            //no need to keep sqrt(x^(1/3))\r\n            else if(!symbol.power.isInteger()) {\r\n                symbol.setPower(symbol.power.multiply(new Frac(0.5)));\r\n                retval = symbol;\r\n            }\r\n            else if(symbol.multiplier < 0 && symbol.group === S) {\r\n                var a = _.parse(symbol.multiplier).negate();\r\n                var b = _.parse(symbol).toUnitMultiplier().negate();\r\n                retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));\r\n            }\r\n            else {\r\n\r\n                //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\r\n                //to sqrt(a)*sqrt(b)^1 for better simplification\r\n                //the sign of the power\r\n                var sign = symbol.power.sign();\r\n                //remove the sign\r\n                symbol.power = symbol.power.abs();\r\n\r\n                //if the symbols is imagary then we place in the imaginary part. We'll return it\r\n                //as a product\r\n                if(isConstant && symbol.multiplier.lessThan(0)) {\r\n                    img = Symbol.imaginary();\r\n                    symbol.multiplier = symbol.multiplier.abs();\r\n                }\r\n\r\n                var q = symbol.multiplier.toDecimal(),\r\n                        qa = Math.abs(q),\r\n                        t = Math.sqrt(qa);\r\n\r\n                var m;\r\n                //it's a perfect square so take the square\r\n                if(isInt(t)) {\r\n                    m = new Symbol(t);\r\n                }\r\n                else if(isInt(q)) {\r\n                    var factors = Math2.ifactor(q);\r\n                    var tw = 1;\r\n                    for(var x in factors) {\r\n                        var n = factors[x],\r\n                                nn = (n - (n % 2)); //get out the whole numbers\r\n                        if(nn) { //if there is a whole number ...\r\n                            var w = Math.pow(x, nn);\r\n                            tw *= Math.pow(x, nn / 2); //add to total wholes\r\n                            q /= w; //reduce the number by the wholes\r\n                        }\r\n                    }\r\n                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\r\n                }\r\n                else {\r\n                    //reduce the numerator and denominator using prime factorization\r\n                    var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\r\n                    var r = [new Symbol(1), new Symbol(1)];\r\n                    var sq = [new Symbol(1), new Symbol(1)];\r\n                    for(var i = 0; i < 2; i++) {\r\n                        var n = c[i];\r\n                        //get the prime factors and loop through each.\r\n                        pfactor(n).each(function (x) {\r\n                            x = Symbol.unwrapPARENS(x);\r\n                            var b = x.clone().toLinear();\r\n                            var p = Number(x.power);\r\n                            //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\r\n                            var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\r\n                            var w = (p - rem) / 2; //get the whole numbers of n/2\r\n                            r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\r\n                            sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\r\n                        });\r\n                    }\r\n                    m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\r\n                }\r\n\r\n\r\n                //strip the multiplier since we already took the sqrt\r\n                symbol = symbol.toUnitMultiplier(true);\r\n                //if the symbol is one just return one and not the sqrt function\r\n                if(symbol.isOne()) {\r\n                    retval = symbol;\r\n                }\r\n                else if(even(symbol.power.toString())) {\r\n                    //just raise it to the 1/2\r\n                    retval = _.pow(symbol.clone(), new Symbol(0.5));\r\n                }\r\n                else {\r\n                    retval = _.symfunction(SQRT, [symbol]);\r\n                }\r\n\r\n                //put back the sign that was removed earlier\r\n                if(sign < 0)\r\n                    retval.power.negate();\r\n\r\n                if(m)\r\n                    retval = _.multiply(m, retval);\r\n\r\n                if(img)\r\n                    retval = _.multiply(img, retval);\r\n            }\r\n\r\n            if(is_negative && Settings.PARSE2NUMBER)\r\n                return _.parse(retval);\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * The cube root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function cbrt(symbol) {\r\n            if(!symbol.isConstant(true)) {\r\n                var retval;\r\n\r\n                var n = symbol.power / 3;\r\n                //take the cube root of the multplier\r\n                var m = _.pow(_.parse(symbol.multiplier), new Symbol(1 / 3));\r\n                //strip the multiplier\r\n                var sym = symbol.toUnitMultiplier();\r\n\r\n                //simplify the power\r\n                if(isInt(n)) {\r\n                    retval = _.pow(sym.toLinear(), _.parse(n));\r\n                }\r\n                else {\r\n                    if(sym.group === CB) {\r\n                        retval = new Symbol(1);\r\n                        sym.each(function (x) {\r\n                            retval = _.multiply(retval, cbrt(x));\r\n                        });\r\n                    }\r\n                    else {\r\n                        retval = _.symfunction('cbrt', [sym]);\r\n                    }\r\n                }\r\n\r\n                return _.multiply(m, retval);\r\n            }\r\n            return nthroot(symbol, new Symbol(3));\r\n        }\r\n\r\n        function scientific(symbol, sigfigs) {\r\n            //Just set the flag and keep it moving. Symbol.toString will deal with how to\r\n            //display this\r\n            symbol.scientific = sigfigs || 10;\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {Symbol} num - the number being raised\r\n         * @param {Symbol} p - the exponent\r\n         * @param {type} prec - the precision wanted\r\n         * @param {bool} asbig - true if a bigDecimal is wanted\r\n         * @returns {Symbol}\r\n         */\r\n        function nthroot(num, p, prec, asbig) {\r\n            //clone p and convert to a number if possible\r\n            p = evaluate(_.parse(p));\r\n\r\n            //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\r\n            if(p.equals(0)) {\r\n                throw new UndefinedError('Unable to calculate nthroots of zero');\r\n            }\r\n\r\n            //Stop computation if it negative and even since we have an imaginary result\r\n            if(num < 0 && even(p))\r\n                throw new Error('Cannot calculate nthroot of negative number for even powers');\r\n\r\n            //return non numeric values unevaluated\r\n            if(!num.isConstant(true)) {\r\n                return _.symfunction('nthroot', arguments);\r\n            }\r\n\r\n            //evaluate numeric values\r\n            if(num.group !== N) {\r\n                num = evaluate(num);\r\n            }\r\n\r\n            //default is to return a big value\r\n            if(typeof asbig === 'undefined')\r\n                asbig = true;\r\n\r\n            prec = prec || 25;\r\n\r\n            var sign = num.sign();\r\n            var retval;\r\n            var ans;\r\n\r\n            if(sign < 0) {\r\n                num = abs(num); //remove the sign\r\n            }\r\n\r\n            if(isInt(num) && p.isConstant()) {\r\n\r\n                if(num < 18446744073709551616) {\r\n                    //2^64\r\n                    ans = Frac.create(Math.pow(num, 1 / p));\r\n                }\r\n                else {\r\n                    ans = Math2.nthroot(num, p);\r\n                }\r\n\r\n                var retval;\r\n                if(asbig) {\r\n                    retval = new Symbol(ans);\r\n                }\r\n                retval = new Symbol(ans.toDecimal(prec));\r\n\r\n                return _.multiply(new Symbol(sign), retval);\r\n            }\r\n        }\r\n\r\n        function pfactor(symbol) {\r\n            //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\r\n            //More Big Number issues >:(\r\n            if(symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1))\r\n                return symbol;\r\n            //Fix issue #298\r\n            if(symbol.equals(Math.PI))\r\n                return new Symbol(Math.PI);\r\n            //evaluate the symbol to merge constants\r\n            symbol = evaluate(symbol.clone());\r\n\r\n            if(symbol.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                var m = symbol.toString();\r\n                if(isInt(m)) {\r\n                    var factors = Math2.ifactor(m);\r\n                    for(var factor in factors) {\r\n                        var p = factors[factor];\r\n                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\r\n                    }\r\n                }\r\n                else {\r\n                    var n = pfactor(new Symbol(symbol.multiplier.num));\r\n                    var d = pfactor(new Symbol(symbol.multiplier.den));\r\n                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\r\n                }\r\n            }\r\n            else\r\n                retval = _.symfunction('pfactor', arguments);\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Get's the real part of a complex number. Return number if real\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function realpart(symbol) {\r\n            return symbol.realpart();\r\n        }\r\n\r\n        /**\r\n         * Get's the imaginary part of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function imagpart(symbol) {\r\n            return symbol.imagpart();\r\n        }\r\n\r\n        /**\r\n         * Computes the conjugate of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function conjugate(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant())\r\n                return new Symbol(Math.atan2(im, re));\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant()) {\r\n                if(im.equals(0) && re.equals(-1)) {\r\n                    return _.parse('pi');\r\n                }\r\n                else if(im.equals(1) && re.equals(0)) {\r\n                    return _.parse('pi/2');\r\n                }\r\n                else if(im.equals(1) && re.equals(1)) {\r\n                    return _.parse('pi/4');\r\n                }\r\n                return new Symbol(Math.atan2(im, re));\r\n            }\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the polarform of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function polarform(symbol) {\r\n            var p, r, e, theta;\r\n            p = Symbol.toPolarFormArray(symbol);\r\n            theta = p[1];\r\n            r = p[0];\r\n            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\r\n            return _.multiply(r, e);\r\n        }\r\n\r\n        /**\r\n         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rectform(symbol) {\r\n            //TODO: e^((i*pi)/4)\r\n            var original = symbol.clone();\r\n            try {\r\n                var f, p, q, s, h, d, n;\r\n                f = decompose_fn(symbol, 'e', true);\r\n                p = _.divide(f.x.power, Symbol.imaginary());\r\n                q = evaluate(trig.tan(p));\r\n                s = _.pow(f.a, new Symbol(2));\r\n                d = q.getDenom(true);\r\n                n = q.getNum();\r\n                h = Symbol.hyp(n, d);\r\n                //check\r\n                if(h.equals(f.a)) {\r\n                    return _.add(d, _.multiply(Symbol.imaginary(), n));\r\n                }\r\n                else {\r\n                    return original;\r\n                }\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n        }\r\n\r\n        function symMinMax(f, args) {\r\n            args.map(function (x) {\r\n                x.numVal = evaluate(x).multiplier;\r\n            });\r\n            var l, a, b, a_val, b_val;\r\n            while(true) {\r\n                l = args.length;\r\n                if(l < 2)\r\n                    return args[0];\r\n                a = args.pop();\r\n                b = args[l - 2];\r\n                if(f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\r\n                    args.pop();\r\n                    args.push(a);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns maximum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function max() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.max.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('max', args);\r\n            return _.symfunction('max', args);\r\n        }\r\n\r\n        /**\r\n         * Returns minimum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function min() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.min.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('min', args);\r\n            return _.symfunction('min', args);\r\n        }\r\n\r\n        /**\r\n         * Returns the sign of a number\r\n         * @param {Symbol} x\r\n         * @returns {Symbol}\r\n         */\r\n        function sign(x) {\r\n            if(x.isConstant(true))\r\n                return new Symbol(Math.sign(evaluate(x)));\r\n            return _.symfunction('sign', arguments);\r\n        }\r\n\r\n        function sort(symbol, opt) {\r\n            opt = opt ? opt.toString() : 'asc';\r\n            var getval = function (e) {\r\n                if(e.group === N)\r\n                    return e.multiplier;\r\n                if(e.group === FN) {\r\n                    if(e.fname === '')\r\n                        return getval(e.args[0]);\r\n                    return e.fname;\r\n                }\r\n                if(e.group === S)\r\n                    return e.power;\r\n\r\n                return e.value;\r\n            };\r\n            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\r\n            return new Vector(symbols.sort(function (a, b) {\r\n                var aval = getval(a),\r\n                        bval = getval(b);\r\n                if(opt === 'desc')\r\n                    return bval - aval;\r\n                return aval - bval;\r\n            }));\r\n        }\r\n\r\n        /**\r\n         * The log function\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} base\r\n         * @returns {Symbol}\r\n         */\r\n        function log(symbol, base) {\r\n\r\n            if(symbol.equals(1)) {\r\n                return new Symbol(0);\r\n            }\r\n\r\n            var retval;\r\n\r\n            if(symbol.fname === SQRT && symbol.multiplier.equals(1)) {\r\n                retval = _.divide(log(symbol.args[0]), new Symbol(2));\r\n\r\n                if(symbol.power.sign() < 0) {\r\n                    retval.negate();\r\n                }\r\n\r\n                // Exit early\r\n                return retval;\r\n            }\r\n\r\n            //log(0) is undefined so complain\r\n            if(symbol.equals(0)) {\r\n                throw new UndefinedError(Settings.LOG + '(0) is undefined!');\r\n            }\r\n\r\n            //deal with imaginary values\r\n            if(symbol.isImaginary()) {\r\n                return complex.evaluate(symbol, Settings.LOG);\r\n            }\r\n\r\n            if(symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\r\n                var log_sym = Math.log(symbol);\r\n                var log_base = Math.log(base);\r\n                retval = new Symbol(log_sym / log_base);\r\n            }\r\n            else if(symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\r\n                symbol.power.negate();\r\n                //move the negative outside but keep the positive inside :)\r\n                retval = log(symbol).negate();\r\n            }\r\n            else if(symbol.value === 'e' && symbol.multiplier.equals(1)) {\r\n                var p = symbol.power;\r\n                retval = isSymbol(p) ? p : new Symbol(p);\r\n            }\r\n            else if(symbol.group === FN && symbol.fname === 'exp') {\r\n                var s = symbol.args[0];\r\n                if(symbol.multiplier.equals(1))\r\n                    retval = _.multiply(s, new Symbol(symbol.power));\r\n                else\r\n                    retval = _.symfunction(Settings.LOG, [symbol]);\r\n            }\r\n            else if(Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\r\n                // Parse for safety.\r\n                symbol = _.parse(symbol);\r\n\r\n                var img_part;\r\n                if(symbol.multiplier.lessThan(0)) {\r\n                    symbol.negate();\r\n                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\r\n                }\r\n\r\n                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\r\n\r\n                if(img_part) {\r\n                    retval = _.add(retval, img_part);\r\n                }\r\n\r\n            }\r\n            else {\r\n                var s;\r\n                if(!symbol.power.equals(1) && !symbol.contains('e')) {\r\n                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\r\n                    symbol.toLinear();\r\n                }\r\n                //log(a,a) = 1 since the base is allowed to be changed.\r\n                //This was pointed out by Happypig375 in issue #280\r\n                if(arguments.length > 1 && allSame(arguments)) {\r\n                    retval = new Symbol(1);\r\n                }\r\n                else {\r\n                    retval = _.symfunction(Settings.LOG, arguments);\r\n                }\r\n\r\n                if(s)\r\n                    retval = _.multiply(s, retval);\r\n            }\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Round a number up to s decimal places\r\n         * @param {Number} x\r\n         * @param {int} s - the number of decimal places\r\n         * @returns {undefined}\r\n         */\r\n        function round(x, s) {\r\n            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\r\n            if(x.isConstant() && sIsConstant) {\r\n                var v, e, exp, retval;\r\n                v = x;\r\n                //round the coefficient of then number but not the actual decimal value\r\n                //we know this because a negative number was passed\r\n                if(s && s.lessThan(0)) {\r\n                    s = abs(s);\r\n                    //convert the number to exponential form\r\n                    e = Number(x).toExponential().toString().split('e');\r\n                    //point v to the coefficient of then number\r\n                    v = e[0];\r\n                    //set the expontent\r\n                    exp = e[1];\r\n                }\r\n                //round the number to the requested precision\r\n                retval = new Symbol(nround(v, Number(s || 0)));\r\n                //if there's a exponent then put it back\r\n                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))\r\n            }\r\n\r\n\r\n            return _.symfunction('round', arguments);\r\n        }\r\n\r\n        /**\r\n         * Gets the quadrant of the trig function\r\n         * @param {Frac} m\r\n         * @returns {Int}\r\n         */\r\n        function getQuadrant(m) {\r\n            var v = m % 2, quadrant;\r\n\r\n            if(v < 0)\r\n                v = 2 + v; //put it in terms of pi\r\n\r\n            if(v >= 0 && v <= 0.5)\r\n                quadrant = 1;\r\n            else if(v > 0.5 && v <= 1)\r\n                quadrant = 2;\r\n            else if(v > 1 && v <= 1.5)\r\n                quadrant = 3;\r\n            else\r\n                quadrant = 4;\r\n            return quadrant;\r\n        }\r\n\r\n        /*\r\n         * Serves as a bridge between numbers and bigNumbers\r\n         * @param {Frac|Number} n\r\n         * @returns {Symbol}\r\n         */\r\n        function bigConvert(n) {\r\n            if(!isFinite(n)) {\r\n                var sign = Math.sign(n);\r\n                var r = new Symbol(String(Math.abs(n)));\r\n                r.multiplier = r.multiplier.multiply(new Frac(sign));\r\n                return r;\r\n            }\r\n            if(isSymbol(n))\r\n                return n;\r\n            if(typeof n === 'number') {\r\n                try {\r\n                    n = Frac.simple(n);\r\n                }\r\n                catch(e) {\r\n                    n = new Frac(n);\r\n                }\r\n            }\r\n\r\n            var symbol = new Symbol(0);\r\n            symbol.multiplier = n;\r\n            return symbol;\r\n        }\r\n        ;\r\n\r\n        function clean(symbol) {\r\n            // handle functions with numeric values\r\n            // handle denominator within denominator\r\n            // handle trig simplifications\r\n            var g = symbol.group, retval;\r\n            //Now let's get to work\r\n            if(g === CP) {\r\n                var num = symbol.getNum(),\r\n                        den = symbol.getDenom() || new Symbol(1),\r\n                        p = Number(symbol.power),\r\n                        factor = new Symbol(1);\r\n                if(Math.abs(p) === 1) {\r\n                    den.each(function (x) {\r\n                        if(x.group === CB) {\r\n                            factor = _.multiply(factor, clean(x.getDenom()));\r\n                        }\r\n                        else if(x.power.lessThan(0)) {\r\n                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\r\n                        }\r\n                    });\r\n\r\n                    var new_den = new Symbol(0);\r\n                    //now divide out the factor and add to new den\r\n                    den.each(function (x) {\r\n                        new_den = _.add(_.divide(x, factor.clone()), new_den);\r\n                    });\r\n\r\n                    factor.invert(); //invert so it can be added to the top\r\n                    var new_num;\r\n                    if(num.isComposite()) {\r\n                        new_num = new Symbol(0);\r\n                        num.each(function (x) {\r\n                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\r\n                        });\r\n                    }\r\n                    else\r\n                        new_num = _.multiply(factor, num);\r\n\r\n                    retval = _.divide(new_num, new_den);\r\n                }\r\n            }\r\n            else if(g === CB) {\r\n                retval = new Symbol(1);\r\n                symbol.each(function (x) {\r\n                    retval = _.multiply(retval, _.clean(x));\r\n                });\r\n            }\r\n            else if(g === FN) {\r\n                if(symbol.args.length === 1 && symbol.args[0].isConstant())\r\n                    retval = block('PARSE2NUMBER', function () {\r\n                        return _.parse(symbol);\r\n                    }, true);\r\n            }\r\n\r\n            if(!retval)\r\n                retval = symbol;\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * A wrapper for the expand function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function expandall(symbol, opt) {\r\n            opt = opt || {\r\n                expand_denominator: true,\r\n                expand_functions: true\r\n            };\r\n            return expand(symbol, opt);\r\n        }\r\n        /**\r\n         * Expands a symbol\r\n         * @param symbol\r\n         */\r\n        // Old expand\r\n        function expand(symbol, opt) {\r\n            if(Array.isArray(symbol)) {\r\n                return symbol.map(function (x) {\r\n                    return expand(x, opt);\r\n                });\r\n            }\r\n            opt = opt || {};\r\n            //deal with parenthesis\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                var f = expand(symbol.args[0], opt);\r\n                var x = expand(_.pow(f, _.parse(symbol.power)), opt);\r\n                return _.multiply(_.parse(symbol.multiplier), x).distributeMultiplier();\r\n            }\r\n            // We can expand these groups so no need to waste time. Just return and be done.\r\n            if([N, P, S].indexOf(symbol.group) !== -1) {\r\n                return symbol; //nothing to do\r\n            }\r\n\r\n            var original = symbol.clone();\r\n\r\n            // Set up a try-catch block. If anything goes wrong then we simply return the original symbol\r\n            try {\r\n                // Store the power and multiplier\r\n                var m = symbol.multiplier.toString();\r\n                var p = Number(symbol.power);\r\n                var retval = symbol;\r\n\r\n                // Handle (a+b)^2 | (x+x^2)^2\r\n                if(symbol.isComposite() && isInt(symbol.power) && symbol.power > 0) {\r\n                    var n = p - 1;\r\n                    // Strip the expression of it's multiplier and power. We'll call it f. The power will be p and the multiplier m.\r\n                    var f = new Symbol(0);\r\n\r\n                    symbol.each(function (x) {\r\n                        f = _.add(f, expand(_.parse(x), opt));\r\n                    });\r\n\r\n                    var expanded = _.parse(f);\r\n\r\n                    for(var i = 0; i < n; i++) {\r\n                        expanded = mix(expanded, f, opt);\r\n                    }\r\n\r\n                    retval = _.multiply(_.parse(m), expanded).distributeMultiplier();\r\n                }\r\n                else if(symbol.group === FN && opt.expand_functions === true) {\r\n                    var args = [];\r\n                    // Expand function the arguments\r\n                    symbol.args.forEach(function (x) {\r\n                        args.push(expand(x, opt));\r\n                    });\r\n                    // Put back the power and multiplier\r\n                    retval = _.pow(_.symfunction(symbol.fname, args), _.parse(symbol.power));\r\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\r\n                }\r\n                else if(symbol.isComposite() && isInt(symbol.power) && symbol.power < 0 && opt.expand_denominator === true) {\r\n                    // Invert it. Expand it and then re-invert it.\r\n                    symbol = symbol.invert();\r\n                    retval = expand(symbol, opt);\r\n                    retval.invert();\r\n                }\r\n                else if(symbol.group === CB) {\r\n                    var rank = function (s) {\r\n                        switch(s.group) {\r\n                            case CP:\r\n                                return 0;\r\n                            case PL:\r\n                                return 1;\r\n                            case CB:\r\n                                return 2;\r\n                            case FN:\r\n                                return 3;\r\n                            default:\r\n                                return 4;\r\n                        }\r\n                    };\r\n                    // Consider (a+b)(c+d). The result will be (a*c+a*d)+(b*c+b*d).\r\n                    // We start by moving collecting the symbols. We want others>FN>CB>PL>CP\r\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                        return rank(b) - rank(a);\r\n                    })\r\n                            // Distribute the power to each symbol and expand\r\n                            .map(function (s) {\r\n                                var x = _.pow(s, _.parse(p));\r\n                                var e = expand(x, opt);\r\n                                return e;\r\n                            });\r\n\r\n                    var f = symbols.pop();\r\n\r\n                    // If the first symbols isn't a composite then we're done\r\n                    if(f.isComposite() && f.isLinear()) {\r\n                        symbols.forEach(function (s) {\r\n                            f = mix(f, s, opt);\r\n                        });\r\n\r\n                        // If f is of group PL or CP then we can expand some more\r\n                        if(f.isComposite()) {\r\n                            if(f.power > 1) {\r\n                                f = expand(_.pow(f, _.parse(f.power)), opt);\r\n                            }\r\n                            // Put back the multiplier\r\n                            retval = _.multiply(_.parse(m), f).distributeMultiplier();\r\n                            ;\r\n                        }\r\n                        else {\r\n                            // Everything is expanded at this point so if it's still a CB\r\n                            // then just return the symbol\r\n                            retval = f;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Just multiply back in the expanded form of each\r\n                        retval = f;\r\n                        symbols.forEach(function (s) {\r\n                            retval = _.multiply(retval, s);\r\n                        });\r\n                        // Put back the multiplier\r\n                        retval = _.multiply(retval, _.parse(m)).distributeMultiplier();\r\n                    }\r\n\r\n                    // TODO: This exists solely as a quick fix for sqrt(11)*sqrt(33) not simplifying.\r\n                    if(retval.group === CB) {\r\n                        retval = _.parse(retval);\r\n                    }\r\n                }\r\n                else {\r\n                    // Otherwise just return the expression\r\n                    retval = symbol;\r\n                }\r\n                // Final cleanup and return\r\n                return retval;\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n\r\n            return original;\r\n        }\r\n\r\n        /**\r\n         * Returns an identity matrix of nxn\r\n         * @param {Number} n\r\n         * @returns {Matrix}\r\n         */\r\n        function imatrix(n) {\r\n            return Matrix.identity(n);\r\n        }\r\n\r\n        /**\r\n         * Retrieves and item from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @returns {Vector|Symbol}\r\n         */\r\n        function vecget(vector, index) {\r\n            if(index.isConstant() && isInt(index))\r\n                return vector.elements[index];\r\n            return _.symfunction('vecget', arguments);\r\n        }\r\n\r\n        /**\r\n         * Removes duplicates from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} tolerance\r\n         * @returns {Vector}\r\n         */\r\n        function vectrim(vector, tolerance) {\r\n            tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\r\n\r\n            vector = vector.clone();\r\n\r\n            tolerance = Number(tolerance);\r\n            //place algebraic solutions first\r\n            vector.elements.sort(function (a, b) {\r\n                return b.group - a.group;\r\n            });\r\n            //depending on the start point we may have duplicates so we need to clean those up a bit.\r\n            //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\r\n            vector.elements = removeDuplicates(vector.elements, function (a, b) {\r\n                var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\r\n                return diff <= tolerance;\r\n            });\r\n\r\n            return vector;\r\n        }\r\n\r\n        /**\r\n         * Set a value for a vector at a given index\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @param {Symbol} value\r\n         * @returns {Vector}\r\n         */\r\n        function vecset(vector, index, value) {\r\n            if(!index.isConstant)\r\n                return _.symfunction('vecset', arguments);\r\n            vector.elements[index] = value;\r\n            return vector;\r\n        }\r\n\r\n        function matget(matrix, i, j) {\r\n            if(i.isConstant() && j.isConstant())\r\n                return matrix.elements[i][j];\r\n            return _.symfunction('matget', arguments);\r\n        }\r\n\r\n        function matgetrow(matrix, i) {\r\n            if(i.isConstant())\r\n                return new Matrix(matrix.elements[i]);\r\n            return _.symfunction('matgetrow', arguments);\r\n        }\r\n\r\n        function matsetrow(matrix, i, x) {\r\n            //handle symbolics\r\n            if(!i.isConstant())\r\n                return _.symfunction('matsetrow', arguments);\r\n            if(matrix.elements[i].length !== x.elements.length)\r\n                throw new DimensionError('Matrix row must match row dimensions!');\r\n            var M = matrix.clone();\r\n            M.elements[i] = x.clone().elements;\r\n            return M;\r\n        }\r\n\r\n        function matgetcol(matrix, col_index) {\r\n            //handle symbolics\r\n            if(!col_index.isConstant())\r\n                return _.symfunction('matgetcol', arguments);\r\n            col_index = Number(col_index);\r\n            var M = Matrix.fromArray([]);\r\n            matrix.each(function (x, i, j) {\r\n                if(j === col_index) {\r\n                    M.elements.push([x.clone()]);\r\n                }\r\n            });\r\n            return M;\r\n        }\r\n\r\n        function matsetcol(matrix, j, col) {\r\n            //handle symbolics\r\n            if(!j.isConstant())\r\n                return _.symfunction('matsetcol', arguments);\r\n            j = Number(j);\r\n            if(matrix.rows() !== col.elements.length)\r\n                throw new DimensionError('Matrix columns must match number of columns!');\r\n            col.each(function (x, i) {\r\n                matrix.set(i - 1, j, x.elements[0].clone());\r\n            });\r\n            return matrix;\r\n        }\r\n\r\n\r\n        function matset(matrix, i, j, value) {\r\n            matrix.elements[i][j] = value;\r\n            return matrix;\r\n        }\r\n\r\n        //the constructor for vectors\r\n        function vector() {\r\n            return new Vector([].slice.call(arguments));\r\n        }\r\n\r\n        //the constructor for matrices\r\n        function matrix() {\r\n            return Matrix.fromArray(arguments);\r\n        }\r\n\r\n        //the constructor for sets\r\n        function set() {\r\n            return Set.fromArray(arguments);\r\n        }\r\n\r\n        function determinant(symbol) {\r\n            if(isMatrix(symbol)) {\r\n                return symbol.determinant();\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        function size(symbol) {\r\n            var retval;\r\n            if(isMatrix(symbol))\r\n                retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];\r\n            else if(isVector(symbol) || isSet(symbol))\r\n                retval = new Symbol(symbol.elements.length);\r\n            else\r\n                err('size expects a matrix or a vector');\r\n            return retval;\r\n        }\r\n\r\n        function dot(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.dot(vec2);\r\n            err('function dot expects 2 vectors');\r\n        }\r\n\r\n        function cross(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.cross(vec2);\r\n            err('function cross expects 2 vectors');\r\n        }\r\n\r\n        function transpose(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.transpose();\r\n            err('function transpose expects a matrix');\r\n        }\r\n\r\n        function invert(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.invert();\r\n            err('invert expects a matrix');\r\n        }\r\n\r\n        //basic set functions\r\n        function union(set1, set2) {\r\n            return set1.union(set2);\r\n        }\r\n\r\n        function intersection(set1, set2) {\r\n            return set1.intersection(set2);\r\n        }\r\n\r\n        function contains(set1, e) {\r\n            return set1.contains(e);\r\n        }\r\n\r\n        function difference(set1, set2) {\r\n            return set1.difference(set2);\r\n        }\r\n\r\n        function intersects(set1, set2) {\r\n            return new Symbol(Number(set1.intersects(set2)));\r\n        }\r\n\r\n        function is_subset(set1, set2) {\r\n            return new Symbol(Number(set1.is_subset(set2)));\r\n        }\r\n\r\n        function print() {\r\n            arguments2Array(arguments).map(function (x) {\r\n                console.log(x.toString());\r\n            });\r\n        }\r\n\r\n        function testSQRT(symbol) {\r\n            //wrap the symbol in sqrt. This eliminates one more check down the line.\r\n            if(!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\r\n                var sign = symbol.power.sign();\r\n                //don't devide the power directly. Notice the use of toString. This makes it possible\r\n                //to use a bigNumber library in the future\r\n                var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\r\n                //place back the sign of the power\r\n                if(sign < 0)\r\n                    retval.invert();\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        //try to reduce a symbol by pulling its power\r\n        function testPow(symbol) {\r\n            if(symbol.group === P) {\r\n                var v = symbol.value;\r\n\r\n                var fct = primeFactors(v)[0];\r\n\r\n                //safety\r\n                if(!fct) {\r\n                    warn('Unable to compute prime factors. This should not happen. Please review and report.');\r\n                    return symbol;\r\n                }\r\n\r\n                var n = new Frac(Math.log(v) / Math.log(fct)),\r\n                        p = n.multiply(symbol.power);\r\n\r\n                //we don't want a more complex number than before\r\n                if(p.den > symbol.power.den)\r\n                    return symbol;\r\n\r\n                if(isInt(p))\r\n                    symbol = Symbol(Math.pow(fct, p));\r\n                else\r\n                    symbol = new Symbol(fct).setPower(p);\r\n            }\r\n\r\n            return symbol;\r\n        }\r\n\r\n        //Link the functions to the parse so they're available outside of the library.\r\n        //This is strictly for convenience and may be deprecated.\r\n        this.expand = expand;\r\n        this.round = round;\r\n        this.clean = clean;\r\n        this.sqrt = sqrt;\r\n        this.cbrt = cbrt;\r\n        this.abs = abs;\r\n        this.log = log;\r\n        this.rationalize = rationalize;\r\n        this.nthroot = nthroot;\r\n        this.arg = arg;\r\n        this.conjugate = conjugate;\r\n        this.imagpart = imagpart;\r\n        this.realpart = realpart;\r\n\r\n        //TODO:\r\n        //Utilize the function below instead of the linked function\r\n        this.getFunction = function (name) {\r\n            return functions[name][0];\r\n        };\r\n\r\n//Parser.methods ===============================================================\r\n        this.addPreprocessor = function (name, action, order, shift_cells) {\r\n            var names = preprocessors.names;\r\n            var actions = preprocessors.actions;\r\n            if((typeof action !== 'function')) //the person probably forgot to specify a name\r\n                throw new PreprocessorError('Incorrect parameters. Function expected!');\r\n            if(!order) {\r\n                names.push(name);\r\n                actions.push(action);\r\n            }\r\n            else {\r\n                if(shift_cells) {\r\n                    names.splice(order, 0, name);\r\n                    actions.splice(order, 0, action);\r\n                }\r\n                else {\r\n                    names[order] = name;\r\n                    actions[order] = action;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.getPreprocessors = function () {\r\n            var preprocessors = {};\r\n            for(var i = 0, l = preprocessors.names.length; i < l; i++) {\r\n                var name = preprocessors.names[i];\r\n                preprocessors[name] = {\r\n                    order: i,\r\n                    action: preprocessors.actions[i]\r\n                };\r\n            }\r\n            return preprocessors;\r\n        };\r\n\r\n        this.removePreprocessor = function (name, shift_cells) {\r\n            var i = preprocessors.names.indexOf(name);\r\n            if(shift_cells) {\r\n                remove(preprocessors.names, i);\r\n                remove(preprocessors.actions, i);\r\n            }\r\n            else {\r\n                preprocessors.names[i] = undefined;\r\n                preprocessors.actions[i] = undefined;\r\n            }\r\n        };\r\n\r\n        //The loader for functions which are not part of Math2\r\n        this.mapped_function = function () {\r\n            var subs = {},\r\n                    params = this.params;\r\n\r\n            for(var i = 0; i < params.length; i++) {\r\n                subs[params[i]] = String(arguments[i]);\r\n            }\r\n\r\n            return _.parse(this.body, subs);\r\n        };\r\n        /**\r\n         * Adds two symbols\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.add = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with two symbols\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward the adding of symbols with units to the Unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.add(a, b);\r\n                }\r\n                //handle Infinity\r\n                //https://www.encyclopediaofmath.org/index.php/Infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    var aneg = a.multiplier.lessThan(0),\r\n                            bneg = b.multiplier.lessThan(0);\r\n\r\n                    if(a.isInfinity && b.isInfinity && aneg !== bneg) {\r\n                        throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\r\n                    }\r\n\r\n                    var inf = Symbol.infinity();\r\n                    if(bneg)\r\n                        inf.negate();\r\n                    return inf;\r\n                }\r\n\r\n                if(a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\r\n                    a.distributeMultiplier();\r\n                    b.distributeMultiplier();\r\n                    // Fix for issue #606\r\n                    if(b.length > a.length && a.group === b.group) {\r\n                        [a, b] = [b, a];\r\n                    }\r\n                }\r\n                \r\n                //no need to waste time on zeroes\r\n                if(a.multiplier.equals(0))\r\n                    return b;\r\n                if(b.multiplier.equals(0))\r\n                    return a;\r\n\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\r\n                    return result;\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        ap = a.power.toString(),\r\n                        bp = b.power.toString();\r\n\r\n                //always keep the greater group on the left.\r\n                if(g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\r\n                 * because it doesn't know which one to prioritize. */\r\n                //correction to PL dilemma\r\n                if(g1 === CB && g2 === PL && a.value === b.value) {\r\n                    //swap\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;\r\n                    g1 = a.group;\r\n                    g2 = b.group;\r\n                    ap = a.power.toString();\r\n                    bp = b.power.toString();\r\n                }\r\n\r\n                var powEQ = ap === bp,\r\n                        v1 = a.value,\r\n                        v2 = b.value,\r\n                        aIsComposite = a.isComposite(),\r\n                        bIsComposite = b.isComposite(),\r\n                        h1, h2, result;\r\n\r\n                if(aIsComposite)\r\n                    h1 = text(a, 'hash');\r\n                if(bIsComposite)\r\n                    h2 = text(b, 'hash');\r\n\r\n                if(g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\r\n                if(g1 === PL && g2 === PL) {\r\n                    v1 = h1;\r\n                    v2 = h2;\r\n                }\r\n\r\n                var PN = g1 === P && g2 === N,\r\n                        PNEQ = a.value === b.multiplier.toString(),\r\n                        valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));\r\n\r\n                //equal values, equal powers\r\n                if(valEQ && powEQ && g1 === g2) {\r\n                    //make sure to convert N to something P can work with\r\n                    if(PN)\r\n                        b = b.convert(P);//CL\r\n\r\n                    //handle PL\r\n                    if(g1 === PL && (g2 === S || g2 === P)) {\r\n                        a.distributeMultiplier();\r\n                        result = a.attach(b);\r\n                    }\r\n                    else {\r\n                        result = a;//CL\r\n                        if(a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\r\n                            for(var s in b.symbols) {\r\n                                var x = b.symbols[s];\r\n                                result.attach(x);\r\n                            }\r\n                        }\r\n                        else\r\n                            result.multiplier = result.multiplier.add(b.multiplier);\r\n                    }\r\n                }\r\n                //equal values uneven powers\r\n                else if(valEQ && g1 !== PL) {\r\n                    //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\r\n                    if(g1 === CP && g2 === PL) {\r\n                        b.insert(a, 'add');\r\n                        result = b;\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(PL).attach([a, b]);\r\n                        //update the hash\r\n                        result.value = g1 === PL ? h1 : v1;\r\n                    }\r\n                }\r\n                else if(aIsComposite && a.isLinear()) {\r\n                    var canIterate = g1 === g2,\r\n                            bothPL = g1 === PL && g2 === PL;\r\n\r\n                    //we can only iterate group PL if they values match\r\n                    if(bothPL)\r\n                        canIterate = a.value === b.value;\r\n                    //distribute the multiplier over the entire symbol\r\n                    a.distributeMultiplier();\r\n\r\n                    if(b.isComposite() && b.isLinear() && canIterate) {\r\n                        b.distributeMultiplier();\r\n                        //CL\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            a.attach(x);\r\n                        }\r\n                        result = a;\r\n                    }\r\n                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\r\n                    else if(bothPL && a.value !== h2 || g1 === PL && !valEQ) {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n\r\n                    }\r\n                    else {\r\n                        result = a.attach(b);\r\n                    }\r\n                }\r\n                else {\r\n                    if(g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\r\n                        var m = b.multiplier.clone();\r\n                        b = sqrt(b.toUnitMultiplier().toLinear());\r\n                        b.multiplier = m;\r\n                    }\r\n                    //fix for issue #3 and #159\r\n                    if(a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\r\n                        result = _.add(expand(a), expand(b));\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n                    }\r\n                }\r\n\r\n                if(result.multiplier.equals(0))\r\n                    result = new Symbol(0);\r\n\r\n                //make sure to remove unnecessary wraps\r\n                if(result.length === 1) {\r\n                    var m = result.multiplier;\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(m);\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //keep symbols to the right\r\n                if(bIsSymbol && !aIsSymbol) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var bIsMatrix = isMatrix(b);\r\n\r\n                if(aIsSymbol && bIsMatrix) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.add(a.clone(), e));\r\n                    });\r\n\r\n                    b = M\r\n                }\r\n                else {\r\n                    if(isMatrix(a) && bIsMatrix) {\r\n                        b = a.add(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.add(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.add(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return _.add(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.subtract = function (a, b) {\r\n            var aIsSymbol = aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b), t;\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.subtract(a, b);\r\n                }\r\n                return this.add(a, b.negate());\r\n            }\r\n            else {\r\n                if(bIsSymbol && isVector(a)) {\r\n                    b = a.map(function (x) {\r\n                        return _.subtract(x, b.clone());\r\n                    });\r\n                }\r\n                else if(aIsSymbol && isVector(b)) {\r\n                    b = b.map(function (x) {\r\n                        return _.subtract(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVector(a) && isVector(b)) {\r\n                    if(a.dimensions() === b.dimensions())\r\n                        b = a.subtract(b);\r\n                    else\r\n                        _.error('Unable to subtract vectors. Dimensions do not match.');\r\n                }\r\n                else if(isMatrix(a) && isVector(b)) {\r\n                    if(b.elements.length === a.rows()) {\r\n                        var M = new Matrix(), l = a.cols();\r\n                        b.each(function (e, i) {\r\n                            var row = [];\r\n                            for(var j = 0; j < l; j++) {\r\n                                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\r\n                            }\r\n                            M.elements.push(row);\r\n                        });\r\n                        return M;\r\n                    }\r\n                    else\r\n                        err('Dimensions must match!');\r\n                }\r\n                else if(isVector(a) && isMatrix(b)) {\r\n                    var M = b.clone().negate();\r\n                    return _.add(M, a);\r\n                }\r\n                else if(isMatrix(a) && isMatrix(b)) {\r\n                    b = a.subtract(b);\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(x, b.clone()));\r\n                    });\r\n                    b = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(a.clone(), x));\r\n                    });\r\n                    b = M;\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the * operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.multiply = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with function assignment here\r\n            if(aIsSymbol && b instanceof Collection) {\r\n                b.elements.push(a);\r\n                return b;\r\n            }\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //if it has a unit then add it and return it right away.\r\n                if(b.isUnit) {\r\n                    var result = a.clone();\r\n                    a.unit = b;\r\n                    return result;\r\n                }\r\n                \r\n                //if it has units then just forward that problem to the unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.multiply(a, b);\r\n                }\r\n\r\n                //handle Infinty\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.equals(0) || b.equals(0))\r\n                        throw new UndefinedError(a + '*' + b + ' is undefined!');\r\n                    //x/infinity\r\n                    if(b.power.lessThan(0)) {\r\n                        if(!a.isInfinity) {\r\n                            return new Symbol(0);\r\n                        }\r\n                        else {\r\n                            throw new UndefinedError('Infinity/Infinity is not defined!');\r\n                        }\r\n                    }\r\n\r\n                    var sign = a.multiplier.multiply(b.multiplier).sign(),\r\n                            inf = Symbol.infinity();\r\n                    if(a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {\r\n                        if(sign < 0)\r\n                            inf.negate();\r\n\r\n                        return inf;\r\n                    }\r\n                }\r\n                //the quickies\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\r\n                    var retval = new Symbol(t);\r\n                    return retval;\r\n                }\r\n\r\n                //don't waste time\r\n                if(a.isOne()) {\r\n                    return b.clone();\r\n                }\r\n                if(b.isOne()) {\r\n                    return a.clone();\r\n                }\r\n\r\n                if(a.multiplier.equals(0) || b.multiplier.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                if(b.group > a.group && !(b.group === CP))\r\n                    return this.multiply(b, a);\r\n                //correction for PL/CB dilemma\r\n                if(a.group === CB && b.group === PL && a.value === b.value) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;//swap\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        bnum = b.multiplier.num,\r\n                        bden = b.multiplier.den;\r\n\r\n                if(g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\r\n                    //unwrap sqrt\r\n                    var a_pow = a.power;\r\n                    var a_multiplier = _.parse(a.multiplier);\r\n                    a = _.multiply(a_multiplier, a.args[0].clone());\r\n                    a.setPower(new Frac(0.5).multiply(a_pow));\r\n                    g1 = a.group;\r\n                }\r\n                //simplify n/sqrt(n). Being very specific\r\n                else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\r\n                    a = _.symfunction(SQRT, [b.clone()]);\r\n                    b = new Symbol(1);\r\n                }\r\n                ;\r\n\r\n                var v1 = a.value,\r\n                        v2 = b.value,\r\n                        sign = new Frac(a.sign()),\r\n                        //since P is just a morphed version of N we need to see if they relate\r\n                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),\r\n                        //don't multiply the multiplier of b since that's equal to the value of a\r\n                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\r\n                        result = a.clone().toUnitMultiplier();\r\n                b = b.clone().toUnitMultiplier(true);\r\n\r\n                //further simplification of sqrt\r\n                if(g1 === FN && g2 === FN) {\r\n                    var u = a.args[0].clone();\r\n                    var v = b.args[0].clone();\r\n                    if(a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\r\n\r\n                        var q = _.divide(u, v).invert();\r\n                        if(q.gt(1) && isInt(q)) {\r\n                            //b contains a factor a which can be moved to a\r\n                            result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\r\n                            b = new Symbol(1);\r\n                        }\r\n                    }\r\n                    //simplify factorial but only if\r\n                    //1 - It's division so b will have a negative power\r\n                    //2 - We're not dealing with factorials of numbers\r\n                    else if(a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\r\n                        //assume that n = positive\r\n                        var d = _.subtract(u.clone(), v.clone());\r\n\r\n                        //if it's not numeric then we don't know if we can simplify so just return\r\n                        if(d.isConstant()) {\r\n\r\n                            //there will never be a case where d == 0 since this will already have\r\n                            //been handled at the beginning of this function\r\n                            t = new Symbol(1);\r\n                            if(d < 0) {\r\n                                //If d is negative then the numerator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(u.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                            else {\r\n                                //Otherwise the denominator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(v.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                //if both are PL then their hashes have to match\r\n                if(v1 === v2 && g1 === PL && g1 === g2) {\r\n                    v1 = a.text('hash');\r\n                    v2 = b.text('hash');\r\n                }\r\n\r\n                //same issue with (x^2+1)^x*(x^2+1)\r\n                //EX needs an exception when multiplying because it needs to recognize\r\n                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\r\n                if(g2 === EX && b.previousGroup === PL && g1 === PL) {\r\n                    v1 = text(a, 'hash', EX);\r\n                }\r\n\r\n                if((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\r\n                    var p1 = a.power,\r\n                            p2 = b.power,\r\n                            isSymbolP1 = isSymbol(p1),\r\n                            isSymbolP2 = isSymbol(p2),\r\n                            toEX = (isSymbolP1 || isSymbolP2);\r\n                    //TODO: this needs cleaning up\r\n                    if(g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\r\n                        result = new Symbol(0);\r\n                        a.each(function (x) {\r\n                            result = _.add(result, _.multiply(x, b.clone()));\r\n                        }, true);\r\n                    }\r\n                    else {\r\n                        //add the powers\r\n                        result.power = toEX ? _.add(\r\n                                !(isSymbol(p1)) ? new Symbol(p1) : p1,\r\n                                !(isSymbol(p2)) ? new Symbol(p2) : p2\r\n                                ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));\r\n\r\n                        //eliminate zero power values and convert them to numbers\r\n                        if(result.power.equals(0))\r\n                            result = result.convert(N);\r\n\r\n                        //properly convert to EX\r\n                        if(toEX)\r\n                            result.convert(EX);\r\n\r\n                        //take care of imaginaries\r\n                        if(a.imaginary && b.imaginary) {\r\n                            var isEven = even(result.power % 2);\r\n                            if(isEven) {\r\n                                result = new Symbol(1);\r\n                                m.negate();\r\n                            }\r\n                        }\r\n\r\n                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\r\n                        if(result.group !== EX && result.previousGroup)\r\n                            result.previousGroup = undefined;\r\n                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\r\n                        //the sign but this isn't true if they're equals symbols\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                }\r\n                else if(g1 === CB && a.isLinear()) {\r\n                    if(g2 === CB)\r\n                        b.distributeExponent();\r\n                    if(g2 === CB && b.isLinear()) {\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            result = result.combine(x);\r\n                        }\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                    else {\r\n                        result.combine(b);\r\n                    }\r\n                }\r\n                else {\r\n                    //the multiplier was already handled so nothing left to do\r\n                    if(g1 !== N) {\r\n                        if(g1 === CB) {\r\n                            result.distributeExponent();\r\n                            result.combine(b);\r\n                        }\r\n                        else if(!b.isOne()) {\r\n                            var bm = b.multiplier.clone();\r\n                            b.toUnitMultiplier();\r\n                            result = Symbol.shell(CB).combine([result, b]);\r\n                            //transfer the multiplier to the outside\r\n                            result.multiplier = result.multiplier.multiply(bm);\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = b.clone().toUnitMultiplier();\r\n                    }\r\n                }\r\n\r\n                if(result.group === P) {\r\n                    var logV = Math.log(result.value),\r\n                            n1 = Math.log(bnum) / logV,\r\n                            n2 = Math.log(bden) / logV,\r\n                            ndiv = m.num / bnum,\r\n                            ddiv = m.den / bden;\r\n                    //we don't want to divide by zero no do we? Strange things happen.\r\n                    if(n1 !== 0 && isInt(n1) && isInt(ndiv)) {\r\n                        result.power = result.power.add(new Frac(n1));\r\n                        m.num /= bnum; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                    if(n2 !== 0 && isInt(n2) && isInt(ddiv)) {\r\n                        result.power = result.power.subtract(new Frac(n2));\r\n                        m.den /= bden; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                }\r\n\r\n                //unpack CB if length is only one\r\n                if(result.length === 1) {\r\n                    var t = result.multiplier;\r\n                    //transfer the multiplier\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(t);\r\n                }\r\n\r\n                //reduce square root\r\n                var ps = result.power.toString();\r\n                if(even(ps) && result.fname === SQRT) {\r\n                    //grab the sign of the symbol\r\n                    sign = sign * result.sign();\r\n                    var p = result.power;\r\n                    result = result.args[0];\r\n                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\r\n                    //flip it back to the correct sign\r\n                    if(sign < 0)\r\n                        result.negate()\r\n                }\r\n                else {\r\n                    result.multiplier = result.multiplier.multiply(m).multiply(sign);\r\n                    if(result.group === CP && result.isImaginary())\r\n                        result.distributeMultiplier();\r\n                }\r\n\r\n                //back convert group P to a simpler group N if possible\r\n                if(result.group === P && isInt(result.power.toDecimal()))\r\n                    result = result.convert(N);\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //****** Matrices & Vector *****//\r\n                if(bIsSymbol && !aIsSymbol) { //keep symbols to the right\r\n                    t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);\r\n                if(aIsSymbol && isMatrixB) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.multiply(a.clone(), e));\r\n                    });\r\n\r\n                    b = M;\r\n                }\r\n                else {\r\n                    if(isMatrixA && isMatrixB) {\r\n                        b = a.multiply(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return this.multiply(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the / operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.divide = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward to Unit division\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.divide(a, b);\r\n                }\r\n                var result;\r\n                if(b.equals(0))\r\n                    throw new DivisionByZero('Division by zero not allowed!');\r\n\r\n                if(a.isConstant() && b.isConstant()) {\r\n                    result = a.clone();\r\n                    result.multiplier = result.multiplier.divide(b.multiplier);\r\n                }\r\n                else {\r\n                    b.invert();\r\n                    result = _.multiply(a, b);\r\n                }\r\n                return result;\r\n            }\r\n            else {\r\n                //******* Vectors & Matrices *********//\r\n                var isVectorA = isVector(a), isVectorB = isVector(b);\r\n                if(aIsSymbol && isVectorB) {\r\n                    b = b.map(function (x) {\r\n                        return _.divide(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVectorA && bIsSymbol) {\r\n                    b = a.map(function (x) {\r\n                        return _.divide(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isVectorA && isVectorB) {\r\n                    if(a.dimensions() === b.dimensions()) {\r\n                        b = b.map(function (x, i) {\r\n                            return _.divide(a.elements[--i], x);\r\n                        });\r\n                    }\r\n                    else\r\n                        _.error('Cannot divide vectors. Dimensions do not match!');\r\n                }\r\n                else {\r\n                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);\r\n                    if(isMatrixA && bIsSymbol) {\r\n                        var M = new Matrix();\r\n                        a.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(x, b.clone()));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(aIsSymbol && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        b.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(a.clone(), x));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(isMatrixA && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        if(a.rows() === b.rows() && a.cols() === b.cols()) {\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i][j]));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Dimensions do not match!');\r\n                        }\r\n                    }\r\n                    else if(isMatrixA && isVectorB) {\r\n                        if(a.cols() === b.dimensions()) {\r\n                            var M = new Matrix();\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i].clone()));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Unable to divide matrix by vector.');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the ^ operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.pow = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //it has units then it's the Unit module's problem\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.pow(a, b);\r\n                }\r\n                \r\n                // Handle abs\r\n                if(a.group === FN && a.fname === ABS && even(b)) {\r\n                    var m = a.multiplier.clone();\r\n                    var raised = _.pow(a.args[0], b);\r\n                    raised.multiplier = m;\r\n                    return raised;\r\n                }\r\n                \r\n                // Handle infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.isInfinity && b.isInfinity)\r\n                        throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\r\n\r\n                    if(a.isConstant() && b.isInfinity) {\r\n                        if(a.equals(0)) {\r\n                            if(b.lessThan(0))\r\n                                throw new UndefinedError('0^Infinity is undefined!');\r\n                            return new Symbol(0);\r\n                        }\r\n                        if(a.equals(1))\r\n                            throw new UndefinedError('1^' + b.toString() + ' is undefined!');\r\n                        //a^-oo\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        //a^oo\r\n                        if(!a.lessThan(0))\r\n                            return Symbol.infinity();\r\n                    }\r\n\r\n                    if(a.isInfinity && b.isConstant()) {\r\n                        if(b.equals(0))\r\n                            throw new UndefinedError(a + '^0 is undefined!');\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\r\n                    }\r\n                }\r\n\r\n                var aIsZero = a.equals(0);\r\n                var bIsZero = b.equals(0);\r\n                if(aIsZero && bIsZero)\r\n                    throw new UndefinedError('0^0 is undefined!');\r\n\r\n                // Return 0 right away if possible\r\n                if(aIsZero && b.isConstant() && b.multiplier.greaterThan(0))\r\n                    return new Symbol(0);\r\n\r\n                if(bIsZero)\r\n                    return new Symbol(1);\r\n\r\n                var bIsConstant = b.isConstant(),\r\n                        aIsConstant = a.isConstant(),\r\n                        bIsInt = b.isInteger(),\r\n                        m = a.multiplier,\r\n                        result = a.clone();\r\n\r\n                // 0^0, 1/0, etc. Complain.\r\n                if(aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))\r\n                    throw new UndefinedError('Division by zero is not allowed!');\r\n\r\n                // Compute imaginary numbers right away\r\n                if(Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\r\n                    var k, re, im;\r\n                    k = Math.PI * b;\r\n                    re = new Symbol(Math.cos(k));\r\n                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\r\n                    return _.add(re, im);\r\n                }\r\n\r\n                // Imaginary number under negative nthroot or to the n\r\n                if(Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\r\n                    var re, im, r, theta, nre, nim, phi;\r\n                    re = a.realpart();\r\n                    im = a.imagpart();\r\n                    if(re.isConstant('all') && im.isConstant('all')) {\r\n                        phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal()).times(b.toString())) : Math.atan2(im, re) * b;\r\n                        theta = new Symbol(phi);\r\n                        r = _.pow(Symbol.hyp(re, im), b);\r\n                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\r\n                        nim = _.multiply(r, _.trig.sin(theta));\r\n                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));\r\n                    }\r\n                }\r\n\r\n                // Take care of the symbolic part\r\n                result.toUnitMultiplier();\r\n                //simpifly sqrt\r\n                if(result.group === FN && result.fname === SQRT && !bIsConstant) {\r\n                    var s = result.args[0];\r\n                    s.multiplyPower(new Symbol(0.5));\r\n                    s.multiplier.multiply(result.multiplier);\r\n                    s.multiplyPower(b);\r\n                    result = s;\r\n                }\r\n                else {\r\n                    var sign = m.sign();\r\n                    //handle cases such as (-a^3)^(1/4)\r\n                    if(evenFraction(b) && sign < 0) {\r\n                        // Swaperoo\r\n                        // First put the sign back on the symbol\r\n                        result.negate();\r\n                        // Wrap it in brackets\r\n                        result = _.symfunction(PARENTHESIS, [result]);\r\n                        // Move the sign back the exterior and let nerdamer handle the rest\r\n                        result.negate();\r\n                    }\r\n\r\n                    result.multiplyPower(b);\r\n                }\r\n\r\n                if(aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\r\n                    var c;\r\n                    //remove the sign\r\n                    if(sign < 0) {\r\n                        a.negate();\r\n                        if(b.multiplier.den.equals(2))\r\n                            //we know that the numerator has to be odd and therefore it's i\r\n                            c = new Symbol(Settings.IMAGINARY);\r\n                        else if(isInt(b.multiplier)) {\r\n                            if(even(b.multiplier))\r\n                                c = new Symbol(1);\r\n                            else\r\n                                c = new Symbol(-1);\r\n                        }\r\n                        else if(!even(b.multiplier.den)) {\r\n                            c = new Symbol(Math.pow(sign, b.multiplier.num));\r\n                        }\r\n                        else {\r\n                            c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                        }\r\n                    }\r\n\r\n                    result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\r\n\r\n                    //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\r\n                    //put the back sign\r\n                    if(c)\r\n                        result = _.multiply(result, c);\r\n                }\r\n                else if(bIsInt && !m.equals(1)) {\r\n                    var abs_b = b.abs();\r\n                    // Provide fall back to JS until big number implementation is improved\r\n                    if(abs_b.gt(Settings.MAX_EXP)) {\r\n                        if(b.sign() < 0)\r\n                            return new Symbol(0);\r\n                        return Symbol.infinity();\r\n                    }\r\n                    else {\r\n                        var p = b.multiplier.toDecimal();\r\n                        var sgn = Math.sign(p);\r\n                        p = Math.abs(p);\r\n                        var multiplier = new Frac(1);\r\n                        multiplier.num = m.num.pow(p);\r\n                        multiplier.den = m.den.pow(p);\r\n                        if(sgn < 0)\r\n                            multiplier.invert();\r\n                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\r\n                        result.multiplier = result.multiplier.multiply(multiplier);\r\n                    }\r\n                }\r\n                else {\r\n                    var sign = a.sign();\r\n                    if(b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\r\n                        //we know the sign is negative so if the denominator for b == 2 then it's i\r\n                        if(b.multiplier.den.equals(2)) {\r\n                            var i = new Symbol(Settings.IMAGINARY);\r\n                            a.negate();//remove the sign\r\n                            //if the power is negative then i is negative\r\n                            if(b.lessThan(0)) {\r\n                                i.negate();\r\n                                b.negate();//remove the sign from the power\r\n                            }\r\n                            //pull the power normally and put back the imaginary\r\n                            result = _.multiply(_.pow(a, b), i);\r\n                        }\r\n                        else {\r\n                            var aa = a.clone();\r\n                            aa.multiplier.negate();\r\n                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\r\n                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\r\n                            var r = _.divide(_a, _b);\r\n                            result = _.multiply(result, r);\r\n                        }\r\n                    }\r\n                    else if(Settings.PARSE2NUMBER && b.isImaginary()) {\r\n                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\r\n\r\n                        var re = b.realpart();\r\n                        var im = b.imagpart();\r\n                        /*\r\n                         if(b.group === CP && false) {\r\n                         var ex = _.pow(a.clone(), re);\r\n                         var xi = _.multiply(_.multiply(ex.clone(), trig.sin(im.clone())), Symbol.imaginary());\r\n                         var xa = _.multiply(trig.cos(im), ex);\r\n                         result = _.add(xi, xa);\r\n                         }\r\n                         else {\r\n                         */\r\n                        var aa = a.clone().toLinear();\r\n                        var a1 = _.pow(aa.clone(), re);\r\n                        var log_a = log(aa.clone());\r\n                        var b1 = trig.cos(_.multiply(im.clone(), log_a));\r\n                        var c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\r\n                        result = _.multiply(a1, _.add(b1, c1));\r\n                        result = _.expand(_.parse(result));\r\n                        /*\r\n                         }   \r\n                         */\r\n                    }\r\n                    else {\r\n                        //b is a symbol\r\n                        var neg_num = a.group === N && sign < 0,\r\n                            num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\r\n                            den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\r\n\r\n                        //eliminate imaginary if possible\r\n                        if(a.imaginary) {\r\n                            if(bIsInt) {\r\n                                var s, p, n;\r\n                                s = Math.sign(b);\r\n                                p = abs(b);\r\n                                n = p % 4;\r\n                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\r\n                                if(n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {\r\n                                    result.negate();\r\n                                }\r\n                            }\r\n                            else {\r\n                                //assume i = sqrt(-1) -> (-1)^(1/2)\r\n                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\r\n                                        //the denominator denotes the power so raise to it. It will turn positive it round\r\n                                        tn = Math.pow(-1, nr.num);\r\n                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\r\n                            }\r\n                        }\r\n                        //ensure that the sign is carried by the symbol and not the multiplier\r\n                        //this enables us to check down the line if the multiplier can indeed be transferred\r\n                        if(sign < 0 && !neg_num)\r\n                            result.negate();\r\n\r\n                        //retain the absolute value\r\n                        if(bIsConstant && a.group !== EX) {\r\n                            var evenr = even(b.multiplier.den),\r\n                                    evenp = even(a.power),\r\n                                    n = result.power.toDecimal(),\r\n                                    evennp = even(n);\r\n                            if(evenr && evenp && !evennp) {\r\n                                if(n === 1)\r\n                                    result = _.symfunction(ABS, [result]);\r\n                                else if(!isInt(n)) {\r\n                                    var p = result.power;\r\n                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\r\n                                }\r\n                                else {\r\n                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),\r\n                                            result.clone().setPower(new Frac(n - 1)));\r\n                                }\r\n                                //quick workaround. Revisit\r\n                                if(Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)\r\n                                    result = result.args[0];\r\n                            }\r\n                        }\r\n                        //multiply out sqrt\r\n                        if(b.equals(2) && result.group === CB) {\r\n                            var _result = new Symbol(1);\r\n                            result.each(function (sym) {\r\n                                _result = _.multiply(_result, _.pow(sym, b));\r\n                            });\r\n                            result = _result;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                result = testSQRT(result);\r\n\r\n                // Don't multiply until we've tested the remaining symbol\r\n                if(num && den) {\r\n                    result = _.multiply(result, testPow(_.multiply(num, den)));\r\n                }\r\n\r\n                // Reduce square root\r\n                if(result.fname === SQRT) {\r\n                    var isEX = result.group === EX;\r\n                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();\r\n                    if(even(t)) {\r\n                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\r\n                                m = result.multiplier;\r\n                        result = _.pow(result.args[0], pt);\r\n                        result.multiplier = result.multiplier.multiply(m);\r\n                    }\r\n                }\r\n                // Detect Euler's identity\r\n                else if(!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')\r\n                        && result.power.contains(Settings.IMAGINARY) && b.group === CB) {\r\n                    var theta = b.stripVar(Settings.IMAGINARY);\r\n                    result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                if(isVector(a) && bIsSymbol) {\r\n                    a = a.map(function (x) {\r\n                        return _.pow(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(x, b.clone()));\r\n                    });\r\n                    a = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(a.clone(), x));\r\n                    });\r\n                    a = M;\r\n                }\r\n                return a;\r\n            }\r\n        };\r\n        // Gets called when the parser finds the , operator.\r\n        // Commas return a Collector object which is roughly an array\r\n        this.comma = function (a, b) {\r\n            if(!(a instanceof Collection))\r\n                a = Collection.create(a);\r\n            a.append(b);\r\n            return a;\r\n        };\r\n        // Link to modulus\r\n        this.mod = function (a, b) {\r\n            return mod(a, b);\r\n        };\r\n        // Used to slice elements from arrays\r\n        this.slice = function (a, b) {\r\n            return new Slice(a, b);\r\n        };\r\n        // The equality setter\r\n        this.equals = function (a, b) {\r\n            // Equality can only be set for group S so complain it's not\r\n            if(a.group !== S && !a.isLinear())\r\n                err('Cannot set equality for ' + a.toString());\r\n            VARS[a.value] = b.clone();\r\n            return b;\r\n        };\r\n        // Percent\r\n        this.percent = function (a) {\r\n            return _.divide(a, new Symbol(100));\r\n        };\r\n        // Set variable\r\n        this.assign = function (a, b) {\r\n            if(a instanceof Collection && b instanceof Collection) {\r\n                a.elements.map(function (x, i) {\r\n                    return _.assign(x, b.elements[i]);\r\n                });\r\n                return Vector.fromArray(b.elements);\r\n            }\r\n            if(a.parent) {\r\n                // It's referring to the parent instead. The current item can be discarded\r\n                var e = a.parent;\r\n                e.elements[e.getter] = b;\r\n                delete e.getter;\r\n                return e;\r\n            }\r\n\r\n            if(a.group !== S)\r\n                throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\r\n            VARS[a.value] = b;\r\n            return b;\r\n        };\r\n        this.function_assign = function (a, b) {\r\n            var f = a.elements.pop();\r\n            return setFunction(f, a.elements, b);\r\n        };\r\n        // Function to quickly convert bools to Symbols\r\n        var bool2Symbol = function (x) {\r\n            return new Symbol(x === true ? 1 : 0);\r\n        };\r\n        //check for equality\r\n        this.eq = function (a, b) {\r\n            return bool2Symbol(a.equals(b));\r\n        };\r\n        //checks for greater than\r\n        this.gt = function (a, b) {\r\n            return bool2Symbol(a.gt(b));\r\n        };\r\n        //checks for greater than equal\r\n        this.gte = function (a, b) {\r\n            return bool2Symbol(a.gte(b));\r\n        };\r\n        //checks for less than\r\n        this.lt = function (a, b) {\r\n            return bool2Symbol(a.lt(b));\r\n        };\r\n        //checks for less than equal\r\n        this.lte = function (a, b) {\r\n            return bool2Symbol(a.lte(b));\r\n        };\r\n        // wraps the factorial\r\n        this.factorial = function (a) {\r\n            return this.symfunction(FACTORIAL, [a]);\r\n        };\r\n        // wraps the double factorial\r\n        this.dfactorial = function (a) {\r\n            return this.symfunction(DOUBLEFACTORIAL, [a]);\r\n        };\r\n    }\r\n    ;\r\n\r\n    /* \"STATIC\" */\r\n    // converts a number to a fraction.\r\n    var Fraction = {\r\n        /**\r\n         * Converts a decimal to a fraction\r\n         * @param {number} value\r\n         * @param {object} opts\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        convert: function (value, opts) {\r\n            var frac;\r\n            if(value === 0) {\r\n                frac = [0, 1];\r\n            }\r\n            else {\r\n                if(value < 1e-6 || value > 1e20) {\r\n                    var qc = this.quickConversion(Number(value));\r\n                    if(qc[1] <= 1e20) {\r\n                        var abs = Math.abs(value);\r\n                        var sign = value / abs;\r\n                        frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\r\n                        frac[0] = frac[0] * sign;\r\n                    }\r\n                    else {\r\n                        frac = qc;\r\n                    }\r\n                }\r\n                else {\r\n                    frac = this.fullConversion(value);\r\n                }\r\n            }\r\n            return frac;\r\n        },\r\n        /**\r\n         * If the fraction is too small or too large this gets called instead of fullConversion method\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        quickConversion: function (value) {\r\n            var stripSign = function (s) {\r\n                // Explicitely convert to a string\r\n                if(typeof s !== 'string') {\r\n                    s = s.toString();\r\n                }\r\n\r\n                var sign = '';\r\n\r\n                // Remove and store the sign\r\n                var start = s.charAt(0);\r\n                if(start === '-') {\r\n                    s = s.substr(1, s.length);\r\n                    sign = '-';\r\n                }\r\n                else if(start === '+') {\r\n                    // Just remove the plus sign\r\n                    s = s.substr(1, s.length);\r\n                }\r\n\r\n                return {\r\n                    sign: sign,\r\n                    value: s\r\n                };\r\n            };\r\n\r\n\r\n            function convert(value) {\r\n                // Explicitely convert to a decimal\r\n                if(Scientific.isScientific(value)) {\r\n                    value = scientificToDecimal(value);\r\n                }\r\n\r\n                // Split the value into the sign and the value\r\n                var nparts = stripSign(value);\r\n\r\n                // Split it at the decimal. We'll refer to it as the coeffient parts\r\n                var cparts = nparts.value.split('.');\r\n\r\n                // Combine the entire number by removing leading zero and adding the decimal part\r\n                // This would be teh same as moving the decimal point to the end\r\n                var num;\r\n                // We're dealing with integers\r\n                if(cparts.length === 1) {\r\n                    num = cparts[0];\r\n                }\r\n                else {\r\n                    num = cparts[0] + cparts[1];\r\n                }\r\n                var n = cparts[1] ? cparts[1].length : 0;\r\n                // Generate the padding for the zeros\r\n                var den = `1${'0'.repeat(n)}`;\r\n\r\n                if(num !== '0') {\r\n                    num = num.replace(/^0+/, '');\r\n                }\r\n                return [nparts.sign + num, den];\r\n            }\r\n\r\n            return convert(value);\r\n        },\r\n        /**\r\n         * Returns a good approximation of a fraction. This method gets called by convert\r\n         * http://mathforum.org/library/drmath/view/61772.html\r\n         * Decimal To Fraction Conversion - A Simpler Version\r\n         * Dr Peterson\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        fullConversion: function (dec) {\r\n            var done = false;\r\n            // you can adjust the epsilon to a larger number if you don't need very high precision\r\n            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;\r\n            while(!done) {\r\n                n++;\r\n                if(n > 10000) {\r\n                    done = true;\r\n                }\r\n                var a = Math.floor(q);\r\n                var num = n1 + a * n2;\r\n                var den = d1 + a * d2;\r\n                var e = (q - a);\r\n                if(e < epsilon) {\r\n                    done = true;\r\n                }\r\n                q = 1 / e;\r\n                n1 = n2;\r\n                d1 = d2;\r\n                n2 = num;\r\n                d2 = den;\r\n                if(Math.abs(num / den - dec) < epsilon || n > 30) {\r\n                    done = true;\r\n                }\r\n            }\r\n            return [num, den];\r\n        }\r\n    };\r\n    //Depends on Fraction\r\n\r\n    //The latex generator\r\n    var LaTeX = {\r\n        parser: (function () {\r\n            // create a parser and strip it from everything except the items that you need\r\n            var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\r\n            var parser = new Parser();\r\n            for(var x in parser) {\r\n                if(keep.indexOf(x) === -1)\r\n                    delete parser[x];\r\n            }\r\n            // declare the operators\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\,',\r\n                action: 'slash_comma',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            // have braces not map to anything. We want them to be return as-is\r\n            var brackets = parser.getBrackets();\r\n            brackets['{'].maps_to = undefined;\r\n            return parser;\r\n        })(),\r\n        space: '~',\r\n        dot: ' \\\\cdot ',\r\n        // grab a list of supported functions but remove the excluded ones found in exclFN\r\n\r\n        latex: function (symbol, option) {\r\n            // it might be an array\r\n            if(symbol.clone) {\r\n                symbol = symbol.clone(); // leave original as-is\r\n            }\r\n            if(symbol instanceof _.classes.Collection)\r\n                symbol = symbol.elements;\r\n\r\n            if(isArray(symbol)) {\r\n                var LaTeXArray = [];\r\n                for(var i = 0; i < symbol.length; i++) {\r\n                    var sym = symbol[i];\r\n                    //This way I can generate LaTeX on an array of strings.\r\n                    if(!isSymbol(sym))\r\n                        sym = _.parse(sym);\r\n                    LaTeXArray.push(this.latex(sym, option));\r\n                }\r\n                return this.brackets(LaTeXArray.join(', '), 'square');\r\n            }\r\n\r\n            else if(isMatrix(symbol)) {\r\n                var TeX = '\\\\begin{pmatrix}\\n';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    var rowTeX = [],\r\n                            e = symbol.elements[i];\r\n                    for(var j = 0; j < e.length; j++) {\r\n                        rowTeX.push(this.latex(e[j], option));\r\n                    }\r\n                    TeX += rowTeX.join(' & ');\r\n                    if(i < symbol.elements.length - 1) {\r\n                        TeX += '\\\\\\\\\\n';\r\n                    }\r\n                }\r\n                TeX += '\\\\end{pmatrix}';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isVector(symbol)) {\r\n                var TeX = '\\\\left[';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\right]';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isSet(symbol)) {\r\n                var TeX = '\\\\{';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\}';\r\n                return TeX;\r\n            }\r\n\r\n            symbol = symbol.clone();\r\n\r\n            var decimal = (option === 'decimal' || option === 'decimals'),\r\n                    power = symbol.power,\r\n                    invert = isNegative(power),\r\n                    negative = symbol.multiplier.lessThan(0);\r\n\r\n            if(symbol.group === P && decimal) {\r\n                return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\r\n            }\r\n            else {\r\n                symbol.multiplier = symbol.multiplier.abs();\r\n\r\n                // if the user wants the result in decimal format then return it as such by placing it at the top part\r\n                var m_array;\r\n\r\n                if(decimal) {\r\n                    var m = String(symbol.multiplier.toDecimal());\r\n                    // if(String(m) === '1' && !decimal) m = '';\r\n                    m_array = [m, ''];\r\n                }\r\n                else {\r\n                    m_array = [symbol.multiplier.num, symbol.multiplier.den];\r\n                }\r\n                // get the value as a two part array\r\n                var v_array = this.value(symbol, invert, option, negative),\r\n                        p;\r\n                // make it all positive since we know whether to push the power to the numerator or denominator already.\r\n                if(invert)\r\n                    power.negate();\r\n                // the power is simple since it requires no additional formatting. We can get it to a\r\n                // string right away. pass in true to neglect unit powers\r\n                if(decimal) {\r\n                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\r\n                    if(String(p) === '1')\r\n                        p = '';\r\n                }\r\n                // get the latex representation\r\n                else if(isSymbol(power))\r\n                    p = this.latex(power, option);\r\n                // get it as a fraction\r\n                else\r\n                    p = this.formatFrac(power, true);\r\n                // use this array to specify if the power is getting attached to the top or the bottom\r\n                var p_array = ['', ''],\r\n                        // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\r\n                        index = invert ? 1 : 0;\r\n                p_array[index] = p;\r\n\r\n                // special case group P and decimal\r\n                var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\r\n\r\n                return retval.replace(/\\+\\-/gi, '-');\r\n            }\r\n\r\n        },\r\n        // greek mapping\r\n        greek: {\r\n            alpha: '\\\\alpha',\r\n            beta: '\\\\beta',\r\n            gamma: '\\\\gamma',\r\n            delta: '\\\\delta',\r\n            epsilon: '\\\\epsilon',\r\n            zeta: '\\\\zeta',\r\n            eta: '\\\\eta',\r\n            theta: '\\\\theta',\r\n            iota: '\\\\iota',\r\n            kappa: '\\\\kappa',\r\n            lambda: '\\\\lambda',\r\n            mu: '\\\\mu',\r\n            nu: '\\\\nu',\r\n            xi: '\\\\xi',\r\n            omnikron: '\\\\omnikron',\r\n            pi: '\\\\pi',\r\n            rho: '\\\\rho',\r\n            sigma: '\\\\sigma',\r\n            tau: '\\\\tau',\r\n            upsilon: '\\\\upsilon',\r\n            phi: '\\\\phi',\r\n            chi: '\\\\chi',\r\n            psi: '\\\\psi',\r\n            omega: '\\\\omega',\r\n            Gamma: '\\\\Gamma',\r\n            Delta: '\\\\Delta',\r\n            Epsilon: '\\\\Epsilon',\r\n            Theta: '\\\\Theta',\r\n            Lambda: '\\\\Lambda',\r\n            Xi: '\\\\Xi',\r\n            Pi: '\\\\Pi',\r\n            Sigma: '\\\\Sigma',\r\n            Phi: '\\\\Phi',\r\n            Psi: '\\\\Psi',\r\n            Omega: '\\\\Omega'\r\n        },\r\n        symbols: {\r\n            arccos: '\\\\arccos',\r\n            cos: '\\\\cos',\r\n            csc: '\\\\csc',\r\n            exp: '\\\\exp',\r\n            ker: '\\\\ker',\r\n            limsup: '\\\\limsup',\r\n            min: '\\\\min',\r\n            sinh: '\\\\sinh',\r\n            arcsin: '\\\\arcsin',\r\n            cosh: '\\\\cosh',\r\n            deg: '\\\\deg',\r\n            gcd: '\\\\gcd',\r\n            lg: '\\\\lg',\r\n            ln: '\\\\ln',\r\n            Pr: '\\\\Pr',\r\n            sqrt: '\\\\sqrt',\r\n            sup: '\\\\sup',\r\n            arctan: '\\\\arctan',\r\n            cot: '\\\\cot',\r\n            det: '\\\\det',\r\n            hom: '\\\\hom',\r\n            lim: '\\\\lim',\r\n            log: '\\\\log',\r\n            LN: '\\\\LN',\r\n            sec: '\\\\sec',\r\n            tan: '\\\\tan',\r\n            arg: '\\\\arg',\r\n            coth: '\\\\coth',\r\n            dim: '\\\\dim',\r\n            inf: '\\\\inf',\r\n            liminf: '\\\\liminf',\r\n            max: '\\\\max',\r\n            sin: '\\\\sin',\r\n            tanh: '\\\\tanh'\r\n        },\r\n        // get the raw value of the symbol as an array\r\n        value: function (symbol, inverted, option, negative) {\r\n            var group = symbol.group,\r\n                    previousGroup = symbol.previousGroup,\r\n                    v = ['', ''],\r\n                    index = inverted ? 1 : 0;\r\n            /*if(group === N) // do nothing since we want to return top & bottom blank; */\r\n            if(symbol.isInfinity) {\r\n                v[index] = '\\\\infty';\r\n            }\r\n            else if(group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\r\n                var value = this.formatSubscripts(symbol.value);\r\n                if(value.replace)\r\n                    value = value.replace(/(.+)_$/, '$1\\\\_');\r\n                // split it so we can check for instances of alpha as well as alpha_b\r\n                var t_varray = String(value).split('_');\r\n                var greek = this.greek[t_varray[0]];\r\n                if(greek) {\r\n                    t_varray[0] = greek;\r\n                    value = t_varray.join('_');\r\n                }\r\n                var symbol = this.symbols[t_varray[0]];\r\n                if(symbol) {\r\n                    t_varray[0] = symbol;\r\n                    value = t_varray.join('_');\r\n                }\r\n                v[index] = value;\r\n            }\r\n            else if(group === FN || previousGroup === FN) {\r\n                var name,\r\n                        input = [],\r\n                        fname = symbol.fname;\r\n                // collect the arguments\r\n                for(var i = 0; i < symbol.args.length; i++) {\r\n                    var arg = symbol.args[i], item;\r\n                    if(typeof arg === 'string')\r\n                        item = arg;\r\n                    else {\r\n                        item = this.latex(arg, option);\r\n                    }\r\n                    input.push(item);\r\n                }\r\n\r\n                if(fname === SQRT) {\r\n                    v[index] = '\\\\sqrt' + this.braces(input.join(','));\r\n                }\r\n                else if(fname === ABS) {\r\n                    v[index] = this.brackets(input.join(','), 'abs');\r\n                }\r\n                else if(fname === PARENTHESIS) {\r\n                    v[index] = this.brackets(input.join(','), 'parens');\r\n                }\r\n                else if(fname === 'limit') {\r\n                    v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\r\n                }\r\n                else if(fname === 'integrate') {\r\n                    v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\r\n                }\r\n                else if(fname === 'defint') {\r\n                    v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\r\n                }\r\n                else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\r\n                        input[0] = this.brackets(input[0]);\r\n                    }\r\n                    v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\r\n                }\r\n                else if(fname === 'floor') {\r\n                    v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\r\n                }\r\n                else if(fname === 'ceil') {\r\n                    v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG && input.length > 1) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG10) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'sum') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'product') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'nthroot') {\r\n                    v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\r\n                }\r\n                else if(fname === 'mod') {\r\n                    v[index] = input[0] + ' \\\\bmod ' + input[1];\r\n                }\r\n                else if(fname === 'realpart') {\r\n                    v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'imagpart') {\r\n                    v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\r\n                }\r\n                else {\r\n                    var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\r\n                    if(symbol.isConversion)\r\n                        v[index] = name + this.brackets(input.join(''), 'parens');\r\n                    else\r\n                        v[index] = name + this.brackets(input.join(','), 'parens');\r\n                }\r\n            }\r\n            else if(symbol.isComposite()) {\r\n                var collected = symbol.collectSymbols().sort(\r\n                        group === CP || previousGroup === CP ?\r\n                        function (a, b) {\r\n                            return b.group - a.group;\r\n                        } :\r\n                        function (a, b) {\r\n                            var x = isSymbol(a.power) ? -1 : a.power;\r\n                            var y = isSymbol(b.power) ? -1 : b.power;\r\n                            return y - x;\r\n                        }\r\n                ),\r\n                        symbols = [],\r\n                        l = collected.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    symbols.push(LaTeX.latex(collected[i], option));\r\n                }\r\n                var value = symbols.join('+');\r\n\r\n                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\r\n            }\r\n            else if(group === CB || previousGroup === EX || previousGroup === CB) {\r\n                if(group === CB)\r\n                    symbol.distributeExponent();\r\n                // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\r\n                // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\r\n                // to whether the symbol value is \"simple\" or not.\r\n                var denominator = [],\r\n                        numerator = [];\r\n                // Generate a profile\r\n                var den_map = [], num_map = [], num_c = 0, den_c = 0;\r\n                var setBrackets = function (container, map, counter) {\r\n                    if(counter > 1 && map.length > 0) {\r\n                        var l = map.length;\r\n                        for(var i = 0; i < l; i++) {\r\n                            var idx = map[i], item = container[idx];\r\n                            if(!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\r\n                                container[idx] = LaTeX.brackets(item, 'parens');\r\n                            }\r\n                        }\r\n                    }\r\n                    return container;\r\n                };\r\n\r\n                // Generate latex for each of them\r\n                symbol.each(function (x) {\r\n                    var isDenom = isNegative(x.power),\r\n                            laTex;\r\n\r\n                    if(isDenom) {\r\n                        laTex = LaTeX.latex(x.invert(), option);\r\n                        den_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.den != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            den_map.push(denominator.length); // make a note of where the composite was found\r\n                        }\r\n\r\n                        denominator.push(laTex);\r\n                    }\r\n                    else {\r\n                        laTex = LaTeX.latex(x, option);\r\n                        num_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.num != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            num_map.push(numerator.length);   // make a note of where the composite was found\r\n                        }\r\n                        numerator.push(laTex);\r\n                    }\r\n                });\r\n\r\n                // Apply brackets\r\n                setBrackets(numerator, num_map, num_c);\r\n                v[0] = numerator.join(this.dot); // collapse the numerator into one string\r\n\r\n                setBrackets(denominator, den_map, den_c);\r\n                v[1] = denominator.join(this.dot);\r\n            }\r\n\r\n            return v;\r\n        },\r\n        set: function (m, v, p, combine_power) {\r\n            var isBracketed = function (v) {\r\n                return /^\\\\left\\(.+\\\\right\\)$/.test(v);\r\n            };\r\n            // format the power if it exists\r\n            if(p)\r\n                p = this.formatP(p);\r\n            // group CB will have to be wrapped since the power applies to both it's numerator and denominator\r\n            if(combine_power) {\r\n                // POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\r\n                // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\r\n                // of a case where this isn't true\r\n                var tp = p[0];\r\n                p[0] = ''; // temporarily make p blank\r\n            }\r\n\r\n            // merge v and p. Not that v MUST be first since the order matters\r\n            v = this.merge(v, p);\r\n            var mn = m[0], md = m[1], vn = v[0], vd = v[1];\r\n            // filters\r\n            // if the top has a variable but the numerator is one drop it\r\n            if(vn && Number(mn) === 1)\r\n                mn = '';\r\n            // if denominator is 1 drop it always\r\n            if(Number(md) === 1)\r\n                md = '';\r\n            // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\r\n\r\n            // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\r\n            // format the power if it exists\r\n            // make it a fraction if both top and bottom exists\r\n            if(top && bottom) {\r\n                var frac = this.frac(top, bottom);\r\n                if(combine_power && tp)\r\n                    frac = this.brackets(frac) + tp;\r\n                return frac;\r\n            }\r\n            // otherwise only the top exists so return that\r\n            else\r\n                return top;\r\n        },\r\n        merge: function (a, b) {\r\n            var r = [];\r\n            for(var i = 0; i < 2; i++)\r\n                r[i] = a[i] + b[i];\r\n            return r;\r\n        },\r\n        // joins together two strings if both exist\r\n        join: function (n, d, glue) {\r\n            if(!n && !d)\r\n                return '';\r\n            if(n && !d)\r\n                return n;\r\n            if(d && !n)\r\n                return d;\r\n            return n + glue + d;\r\n        },\r\n        /**\r\n         * Places subscripts in braces for proper formatting\r\n         * @param {String} v\r\n         * @returns {String}\r\n         */\r\n        formatSubscripts: function (v) {\r\n            // Split it at the underscore\r\n            var arr = v.toString().split('_');\r\n\r\n            var name = '';\r\n\r\n            // Loop over all entries except the first one\r\n            while(arr.length > 1) {\r\n                // Wrap all in braces except for the last one\r\n                if(arr.length > 0) {\r\n                    name = '_' + this.braces(arr.pop() + name);\r\n                }\r\n            }\r\n\r\n            return arr[0] + name;\r\n        },\r\n        formatP: function (p_array) {\r\n            for(var i = 0; i < 2; i++) {\r\n                var p = p_array[i];\r\n                if(p)\r\n                    p_array[i] = '^' + this.braces(p);\r\n            }\r\n            return p_array;\r\n        },\r\n        /**\r\n         * formats the fractions accordingly.\r\n         * @param {Frac} f\r\n         * @param {bool} is_pow\r\n         */\r\n        formatFrac: function (f, is_pow) {\r\n            var n = f.num.toString(),\r\n                    d = f.den.toString();\r\n            // no need to have x^1\r\n            if(is_pow && n === '1' && d === '1')\r\n                return '';\r\n            // no need to have x/1\r\n            if(d === '1')\r\n                return n;\r\n            return this.frac(n, d);\r\n        },\r\n        frac: function (n, d) {\r\n            return '\\\\frac' + this.braces(n) + this.braces(d);\r\n        },\r\n        braces: function (e) {\r\n            return '{' + e + '}';\r\n        },\r\n        brackets: function (e, typ) {\r\n            typ = typ || 'parens';\r\n            var bracketTypes = {\r\n                parens: ['(', ')'],\r\n                square: ['[', ']'],\r\n                brace: ['{', '}'],\r\n                abs: ['|', '|'],\r\n                angle: ['\\\\langle', '\\\\rangle']\r\n            };\r\n            var bracket = bracketTypes[typ];\r\n            return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\r\n        },\r\n        /**\r\n         * Removes extreneous tokens\r\n         * @param {Tokens[]} tokens\r\n         * @returns {Tokens[]}\r\n         */\r\n        filterTokens: function (tokens) {\r\n            var filtered = [];\r\n\r\n            // Copy over the type of the scope\r\n            if(isArray(tokens)) {\r\n                filtered.type = tokens.type;\r\n            }\r\n\r\n            // the items that need to be disposed\r\n            var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\r\n            for(var i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                var next_token = tokens[i + 1];\r\n                if(token.value === '\\\\' && next_token.value === '\\\\') {\r\n                    filtered.push(token);\r\n                }\r\n                else if(isArray(token)) {\r\n                    filtered.push(LaTeX.filterTokens(token));\r\n                }\r\n                else if(d.indexOf(token.value) === -1) {\r\n                    filtered.push(token);\r\n                }\r\n            }\r\n            return filtered;\r\n        },\r\n        /*\r\n         * Parses tokens from LaTeX string. Does not do any error checking\r\n         * @param {Tokens[]} rpn\r\n         * @returns {String}\r\n         */\r\n        parse: function (raw_tokens) {\r\n            var i, l;\r\n            var retval = '';\r\n            var tokens = this.filterTokens(raw_tokens);\r\n            var replace = {\r\n                'cdot': '',\r\n                'times': '',\r\n                'infty': 'Infinity'\r\n            };\r\n            // get the next token\r\n            var next = function (n) {\r\n                return tokens[(typeof n === 'undefined' ? ++i : i += n)];\r\n            };\r\n            var parse_next = function () {\r\n                return LaTeX.parse(next());\r\n            };\r\n            var get = function (token) {\r\n                if(token in replace) {\r\n                    return replace[token];\r\n                }\r\n                // A quirk with implicit multiplication forces us to check for *\r\n                if(token === '*' && tokens[i + 1].value === '&') {\r\n                    next(2); // skip this and the &\r\n                    return ',';\r\n                }\r\n\r\n                if(token === '&') {\r\n                    next();\r\n                    return ','; // Skip the *\r\n                }\r\n                // If it's the end of a row, return the row separator\r\n                if(token === '\\\\') {\r\n                    return '],[';\r\n                }\r\n                return token;\r\n            };\r\n\r\n            // start parsing the tokens\r\n            for(i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                // fractions\r\n                if(token.value === 'frac') {\r\n                    // parse and wrap it in brackets\r\n                    var n = parse_next();\r\n                    var d = parse_next();\r\n                    retval += n + '/' + d;\r\n                }\r\n                else if(token.value in LaTeX.symbols) {\r\n                    if(token.value === SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\r\n                        var base = parse_next();\r\n                        var expr = parse_next();\r\n                        retval += (expr + '^' + inBrackets('1/' + base));\r\n                    }\r\n                    else {\r\n                        retval += token.value + parse_next();\r\n                    }\r\n                }\r\n                else if(token.value === 'int') {\r\n                    var f = parse_next();\r\n                    // skip the comma\r\n                    i++;\r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    dx = get(dx.substring(1, dx.length));\r\n                    retval += 'integrate' + inBrackets(f + ',' + dx);\r\n                }\r\n                else if(token.value === 'int_') {\r\n                    var l = parse_next(); // lower\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value && token.value.startsWith('int_')) {\r\n                    // var l = parse_next(); // lower\r\n                    var l = token.value.replace('int_', '')\r\n                    console.log('uppernow')\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value === 'mathrm') {\r\n                    var f = tokens[++i][0].value;\r\n                    retval += f + parse_next();\r\n                }\r\n                // sum and product\r\n                else if(token.value === 'sum_' || token.value === 'prod_') {\r\n                    var fn = token.value === 'sum_' ? 'sum' : 'product';\r\n                    var nxt = next();\r\n                    i++; // skip the caret\r\n                    var end = parse_next();\r\n                    var f = parse_next();\r\n                    retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\r\n                }\r\n                else if(token.value === 'lim_') {\r\n                    var nxt = next();\r\n                    retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\r\n                }\r\n                else if(token.value === 'begin') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // Start a matrix\r\n                            retval += 'matrix([';\r\n                        }\r\n                    }\r\n                }\r\n                else if(token.value === 'end') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // End a matrix\r\n                            retval += '])';\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if(Array.isArray(token)) {\r\n                        retval += get(LaTeX.parse(token));\r\n                    }\r\n                    else {\r\n                        retval += get(token.value.toString());\r\n                    }\r\n                }\r\n            }\r\n\r\n            return inBrackets(retval);\r\n        }\r\n    };\r\n//Vector =======================================================================\r\n    function Vector(v) {\r\n        if(isVector(v))\r\n            this.elements = v.items.slice(0);\r\n        else if(isArray(v))\r\n            this.elements = v.slice(0);\r\n        else\r\n            this.elements = [].slice.call(arguments);\r\n    }\r\n    /*\r\n     * Generates a pre-filled array\r\n     * @param {type} n\r\n     * @param {type} val\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.arrayPrefill = function (n, val) {\r\n        var a = [];\r\n        val = val || 0;\r\n        for(var i = 0; i < n; i++)\r\n            a[i] = val;\r\n        return a;\r\n    };\r\n    /**\r\n     * Generate a vector from and array\r\n     * @param {type} a\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.fromArray = function (a) {\r\n        var v = new Vector();\r\n        v.elements = a;\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Convert a Set to a Vector\r\n     * @param {Set} set\r\n     * @returns {Vector}\r\n     */\r\n    Vector.fromSet = function (set) {\r\n        return Vector.fromArray(set.elements);\r\n    };\r\n\r\n    //Ported from Sylvester.js\r\n    Vector.prototype = {\r\n        custom: true,\r\n        // Returns element i of the vector\r\n        e: function (i) {\r\n            return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\r\n        },\r\n\r\n        set: function (i, val) {\r\n            if(!isSymbol(val))\r\n                val = new Symbol(val);\r\n            this.elements[i] = val;\r\n        },\r\n\r\n        // Returns the number of elements the vector has\r\n        dimensions: function () {\r\n            return this.elements.length;\r\n        },\r\n\r\n        // Returns the modulus ('length') of the vector\r\n        modulus: function () {\r\n            return block('SAFE', function () {\r\n                return _.pow((this.dot(this.clone())), new Symbol(0.5));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is equal to the argument\r\n        eql: function (vector) {\r\n            var n = this.elements.length;\r\n            var V = vector.elements || vector;\r\n            if(n !== V.length) {\r\n                return false;\r\n            }\r\n            do {\r\n                if(Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\r\n                    return false;\r\n                }\r\n            }\r\n            while(--n);\r\n            return true;\r\n        },\r\n\r\n        // Returns a clone of the vector\r\n        clone: function () {\r\n            var V = new Vector(),\r\n                    l = this.elements.length;\r\n            for(var i = 0; i < l; i++) {\r\n                //Rule: all items within the vector must have a clone method.\r\n                V.elements.push(this.elements[i].clone());\r\n            }\r\n            if(this.getter) {\r\n                V.getter = this.getter.clone();\r\n            }\r\n            return V;\r\n        },\r\n\r\n        // Maps the vector to another vector according to the given function\r\n        map: function (fn) {\r\n            var elements = [];\r\n            this.each(function (x, i) {\r\n                elements.push(fn(x, i));\r\n            });\r\n\r\n            return new Vector(elements);\r\n        },\r\n\r\n        // Calls the iterator for each element of the vector in turn\r\n        each: function (fn) {\r\n            var n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                fn(this.elements[i], i + 1);\r\n            }\r\n            while(--n);\r\n        },\r\n\r\n        // Returns a new vector created by normalizing the receiver\r\n        toUnitVector: function () {\r\n            return block('SAFE', function () {\r\n                var r = this.modulus();\r\n                if(r.valueOf() === 0) {\r\n                    return this.clone();\r\n                }\r\n                return this.map(function (x) {\r\n                    return _.divide(x, r);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the angle between the vector and the argument (also a vector)\r\n        angleFrom: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);\r\n                // Work things out in parallel to save time\r\n                this.each(function (x, i) {\r\n                    dot = _.add(dot, _.multiply(x, V[i - 1]));\r\n                    mod1 = _.add(mod1, _.multiply(x, x));// will not conflict in safe block\r\n                    mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));// will not conflict in safe block\r\n                });\r\n                mod1 = _.pow(mod1, new Symbol(0.5));\r\n                mod2 = _.pow(mod2, new Symbol(0.5));\r\n                var product = _.multiply(mod1, mod2);\r\n                if(product.valueOf() === 0) {\r\n                    return null;\r\n                }\r\n                var theta = _.divide(dot, product);\r\n                var theta_val = theta.valueOf();\r\n                if(theta_val < -1) {\r\n                    theta = -1;\r\n                }\r\n                if(theta_val > 1) {\r\n                    theta = 1;\r\n                }\r\n                return new Symbol(Math.acos(theta));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is parallel to the argument\r\n        isParallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (angle <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is antiparallel to the argument\r\n        isAntiparallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (Math.abs(angle - Math.PI) <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is perpendicular to the argument\r\n        isPerpendicularTo: function (vector) {\r\n            var dot = this.dot(vector);\r\n            return (dot === null) ? null : (Math.abs(dot) <= PRECISION);\r\n        },\r\n\r\n        // Returns the result of adding the argument to the vector\r\n        add: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.add(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of subtracting the argument from the vector\r\n        subtract: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.subtract(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of multiplying the elements of the vector by the argument\r\n        multiply: function (k) {\r\n            return this.map(function (x) {\r\n                return x.clone() * k.clone();\r\n            });\r\n        },\r\n\r\n        x: function (k) {\r\n            return this.multiply(k);\r\n        },\r\n\r\n        // Returns the scalar product of the vector with the argument\r\n        // Both vectors must have equal dimensionality\r\n        dot: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var product = new Symbol(0), n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                do {\r\n                    product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\r\n                }\r\n                while(--n);\r\n                return product;\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the vector product of the vector with the argument\r\n        // Both vectors must have dimensionality 3\r\n        cross: function (vector) {\r\n            var B = vector.elements || vector;\r\n            if(this.elements.length !== 3 || B.length !== 3) {\r\n                return null;\r\n            }\r\n            var A = this.elements;\r\n            return block('SAFE', function () {\r\n                return new Vector([\r\n                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),\r\n                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),\r\n                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))\r\n                ]);\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the (absolute) largest element of the vector\r\n        max: function () {\r\n            var m = 0, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\r\n                    m = this.elements[i];\r\n                }\r\n            }\r\n            while(--n);\r\n            return m;\r\n        },\r\n        magnitude: function () {\r\n            var magnitude = new Symbol(0);\r\n            this.each(function (e) {\r\n                magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\r\n            });\r\n            return _.sqrt(magnitude);\r\n        },\r\n        // Returns the index of the first match found\r\n        indexOf: function (x) {\r\n            var index = null, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(index === null && this.elements[i].valueOf() === x.valueOf()) {\r\n                    index = i + 1;\r\n                }\r\n            }\r\n            while(--n);\r\n            return index;\r\n        },\r\n        text: function (x) {\r\n            return text(this);\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        },\r\n        latex: function (option) {\r\n            var tex = [];\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\r\n            }\r\n            return '[' + tex.join(', ') + ']';\r\n        }\r\n    };\r\n\r\n//Matrix =======================================================================\r\n    function Matrix() {\r\n        var m = arguments,\r\n                l = m.length, i, el = [];\r\n        if(isMatrix(m)) { // if it's a matrix then make a clone\r\n            for(i = 0; i < l; i++) {\r\n                el.push(m[i].slice(0));\r\n            }\r\n        }\r\n        else {\r\n            var row, lw, rl;\r\n            for(i = 0; i < l; i++) {\r\n                row = m[i];\r\n                if(isVector(row))\r\n                    row = row.elements;\r\n                if(!isArray(row))\r\n                    row = [row];\r\n                rl = row.length;\r\n                if(lw && lw !== rl)\r\n                    err('Unable to create Matrix. Row dimensions do not match!');\r\n                el.push(row);\r\n                lw = rl;\r\n            }\r\n        }\r\n        this.elements = el;\r\n    }\r\n    Matrix.identity = function (n) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < n; i++) {\r\n            m.elements.push([]);\r\n            for(var j = 0; j < n; j++) {\r\n                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\r\n            }\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Matrix.apply(this, args);\r\n        }\r\n        F.prototype = Matrix.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n    Matrix.zeroMatrix = function (rows, cols) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < rows; i++) {\r\n            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.prototype = {\r\n        // needs be true to let the parser know not to try to cast it to a symbol\r\n        custom: true,\r\n        get: function (row, column) {\r\n            if(!this.elements[row])\r\n                return undefined;\r\n            return this.elements[row][column];\r\n        },\r\n        map: function (f, raw_values) {\r\n            var M = new Matrix();\r\n            this.each(function (e, i, j) {\r\n                M.set(i, j, f.call(M, e), raw_values);\r\n            });\r\n            return M;\r\n        },\r\n        set: function (row, column, value, raw) {\r\n            if(!this.elements[row])\r\n                this.elements[row] = [];\r\n            this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));\r\n        },\r\n        cols: function () {\r\n            return this.elements[0].length;\r\n        },\r\n        rows: function () {\r\n            return this.elements.length;\r\n        },\r\n        row: function (n) {\r\n            if(!n || n > this.cols())\r\n                return [];\r\n            return this.elements[n - 1];\r\n        },\r\n        col: function (n) {\r\n            var nr = this.rows(),\r\n                    col = [];\r\n            if(n > this.cols() || !n)\r\n                return col;\r\n            for(var i = 0; i < nr; i++) {\r\n                col.push(this.elements[i][n - 1]);\r\n            }\r\n            return col;\r\n        },\r\n        eachElement: function (fn) {\r\n            var nr = this.rows(),\r\n                    nc = this.cols(), i, j;\r\n            for(i = 0; i < nr; i++) {\r\n                for(j = 0; j < nc; j++) {\r\n                    fn.call(this, this.elements[i][j], i, j);\r\n                }\r\n            }\r\n        },\r\n        // ported from Sylvester.js\r\n        determinant: function () {\r\n            if(!this.isSquare()) {\r\n                return null;\r\n            }\r\n            var M = this.toRightTriangular();\r\n            var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\r\n            do {\r\n                i = k - n + 1;\r\n                det = _.multiply(det, M.elements[i][i]);\r\n            }\r\n            while(--n);\r\n            return det;\r\n        },\r\n        isSquare: function () {\r\n            return this.elements.length === this.elements[0].length;\r\n        },\r\n        isSingular: function () {\r\n            return this.isSquare() && this.determinant() === 0;\r\n        },\r\n        augment: function (m) {\r\n            var r = this.rows(), rr = m.rows();\r\n            if(r !== rr)\r\n                err(\"Cannot augment matrix. Rows don't match.\");\r\n            for(var i = 0; i < r; i++) {\r\n                this.elements[i] = this.elements[i].concat(m.elements[i]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var r = this.rows(), c = this.cols(),\r\n                    m = new Matrix();\r\n            for(var i = 0; i < r; i++) {\r\n                m.elements[i] = [];\r\n                for(var j = 0; j < c; j++) {\r\n                    var symbol = this.elements[i][j];\r\n                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\r\n                }\r\n            }\r\n            return m;\r\n        },\r\n        // ported from Sylvester.js\r\n        invert: function () {\r\n            if(!this.isSquare())\r\n                err('Matrix is not square!');\r\n            return block('SAFE', function () {\r\n                var ni = this.elements.length, ki = ni, i, j;\r\n                var imatrix = Matrix.identity(ni);\r\n                var M = this.augment(imatrix).toRightTriangular();\r\n                var np, kp = M.elements[0].length, p, els, divisor;\r\n                var inverse_elements = [], new_element;\r\n                // Matrix is non-singular so there will be no zeros on the diagonal\r\n                // Cycle through rows from last to first\r\n                do {\r\n                    i = ni - 1;\r\n                    // First, normalise diagonal elements to 1\r\n                    els = [];\r\n                    np = kp;\r\n                    inverse_elements[i] = [];\r\n                    divisor = M.elements[i][i];\r\n                    do {\r\n                        p = kp - np;\r\n                        new_element = _.divide(M.elements[i][p], divisor.clone());\r\n                        els.push(new_element);\r\n                        // Shuffle of the current row of the right hand side into the results\r\n                        // array as it will not be modified by later runs through this loop\r\n                        if(p >= ki) {\r\n                            inverse_elements[i].push(new_element);\r\n                        }\r\n                    }\r\n                    while(--np);\r\n                    M.elements[i] = els;\r\n                    // Then, subtract this row from those above it to\r\n                    // give the identity matrix on the left hand side\r\n                    for(j = 0; j < i; j++) {\r\n                        els = [];\r\n                        np = kp;\r\n                        do {\r\n                            p = kp - np;\r\n                            els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\r\n                        }\r\n                        while(--np);\r\n                        M.elements[j] = els;\r\n                    }\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(inverse_elements);\r\n            }, undefined, this);\r\n        },\r\n        // ported from Sylvester.js\r\n        toRightTriangular: function () {\r\n            return block('SAFE', function () {\r\n                var M = this.clone(), els, fel, nel,\r\n                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\r\n                do {\r\n                    i = k - n;\r\n                    fel = M.elements[i][i];\r\n                    if(fel.valueOf() === 0) {\r\n                        for(var j = i + 1; j < k; j++) {\r\n                            nel = M.elements[j][i];\r\n                            if(nel && nel.valueOf() !== 0) {\r\n                                els = [];\r\n                                np = kp;\r\n                                do {\r\n                                    p = kp - np;\r\n                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\r\n                                }\r\n                                while(--np);\r\n                                M.elements[i] = els;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    var fel = M.elements[i][i];\r\n                    if(fel.valueOf() !== 0) {\r\n                        for(j = i + 1; j < k; j++) {\r\n                            var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\r\n                            els = [];\r\n                            np = kp;\r\n                            do {\r\n                                p = kp - np;\r\n                                // Elements with column numbers up to an including the number\r\n                                // of the row that we're subtracting can safely be set straight to\r\n                                // zero, since that's the point of this routine and it avoids having\r\n                                // to loop over and correct rounding errors later\r\n                                els.push(p <= i ? new Symbol(0) :\r\n                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\r\n                            }\r\n                            while(--np);\r\n                            M.elements[j] = els;\r\n                        }\r\n                    }\r\n                }\r\n                while(--n);\r\n\r\n                return M;\r\n            }, undefined, this);\r\n        },\r\n        transpose: function () {\r\n            var rows = this.elements.length, cols = this.elements[0].length;\r\n            var M = new Matrix(), ni = cols, i, nj, j;\r\n\r\n            do {\r\n                i = cols - ni;\r\n                M.elements[i] = [];\r\n                nj = rows;\r\n                do {\r\n                    j = rows - nj;\r\n                    M.elements[i][j] = this.elements[j][i].clone();\r\n                }\r\n                while(--nj);\r\n            }\r\n            while(--ni);\r\n            return M;\r\n        },\r\n        // Returns true if the matrix can multiply the argument from the left\r\n        canMultiplyFromLeft: function (matrix) {\r\n            var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\r\n            // this.columns should equal matrix.rows\r\n            return (this.elements[0].length === l);\r\n        },\r\n        sameSize: function (matrix) {\r\n            return this.rows() === matrix.rows() && this.cols() === matrix.cols();\r\n        },\r\n        multiply: function (matrix) {\r\n            return block('SAFE', function () {\r\n                var M = matrix.elements || matrix;\r\n                if(!this.canMultiplyFromLeft(M)) {\r\n                    if(this.sameSize(matrix)) {\r\n                        var MM = new Matrix();\r\n                        var rows = this.rows();\r\n                        for(var i = 0; i < rows; i++) {\r\n                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\r\n                            MM.elements[i] = e.elements;\r\n                        }\r\n                        return MM;\r\n                    }\r\n                    return null;\r\n                }\r\n                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\r\n                var cols = this.elements[0].length, elements = [], sum, nc, c;\r\n                do {\r\n                    i = ki - ni;\r\n                    elements[i] = [];\r\n                    nj = kj;\r\n                    do {\r\n                        j = kj - nj;\r\n                        sum = new Symbol(0);\r\n                        nc = cols;\r\n                        do {\r\n                            c = cols - nc;\r\n                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\r\n                        }\r\n                        while(--nc);\r\n                        elements[i][j] = sum;\r\n                    }\r\n                    while(--nj);\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(elements);\r\n            }, undefined, this);\r\n        },\r\n        add: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.add(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        subtract: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        negate: function () {\r\n            this.each(function (e) {\r\n                return e.negate();\r\n            });\r\n            return this;\r\n        },\r\n        toVector: function () {\r\n            if(this.rows() === 1 || this.cols() === 1) {\r\n                var v = new Vector();\r\n                v.elements = this.elements;\r\n                return v;\r\n            }\r\n            return this;\r\n        },\r\n        toString: function (newline, to_decimal) {\r\n            var l = this.rows(),\r\n                    s = [];\r\n            newline = newline === undefined ? '\\n' : newline;\r\n            for(var i = 0; i < l; i++) {\r\n                s.push('[' + this.elements[i].map(function (x) {\r\n                    var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\r\n                    return x !== undefined ? v : '';\r\n                }).join(',') + ']');\r\n            }\r\n            return 'matrix' + inBrackets(s.join(','));\r\n        },\r\n        text: function () {\r\n            return 'matrix(' + this.elements.toString('') + ')';\r\n        },\r\n        latex: function (option) {\r\n            var cols = this.cols(), elements = this.elements;\r\n            return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\r\n                var tex = [];\r\n                for(var row in elements) {\r\n                    var row_tex = [];\r\n                    for(var i = 0; i < cols; i++) {\r\n                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\r\n                    }\r\n                    tex.push(row_tex.join(' & '));\r\n                }\r\n                return tex.join(' \\\\cr ');\r\n            });\r\n        }\r\n    };\r\n    // aliases\r\n    Matrix.prototype.each = Matrix.prototype.eachElement;\r\n\r\n\r\n    function Set(set) {\r\n        this.elements = [];\r\n        // if the first object isn't an array, convert it to one.\r\n        if(!isVector(set))\r\n            set = Vector.fromArray(arguments);\r\n\r\n        if(set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                this.add(elements[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    Set.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Set.apply(this, args);\r\n        }\r\n        F.prototype = Set.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n\r\n    Set.prototype = {\r\n        add: function (x) {\r\n            if(!this.contains(x))\r\n                this.elements.push(x.clone());\r\n        },\r\n        contains: function (x) {\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                var e = this.elements[i];\r\n                if(x.equals(e))\r\n                    return true;\r\n            }\r\n            return false;\r\n        },\r\n        each: function (f) {\r\n            var elements = this.elements;\r\n            var set = new Set();\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                var e = elements[i];\r\n                f.call(this, e, set, i);\r\n            }\r\n            return set;\r\n        },\r\n        clone: function () {\r\n            var set = new Set();\r\n            this.each(function (e) {\r\n                set.add(e.clone());\r\n            });\r\n            return set;\r\n        },\r\n        union: function (set) {\r\n            var _union = this.clone();\r\n            set.each(function (e) {\r\n                _union.add(e);\r\n            });\r\n\r\n            return _union;\r\n        },\r\n        difference: function (set) {\r\n            var diff = this.clone();\r\n            set.each(function (e) {\r\n                diff.remove(e);\r\n            });\r\n            return diff;\r\n        },\r\n        remove: function (element) {\r\n            for(var i = 0, l = this.elements.length; i < l; i++) {\r\n                var e = this.elements[i];\r\n                if(e.equals(element)) {\r\n                    remove(this.elements, i);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        intersection: function (set) {\r\n            var _intersection = new Set();\r\n            var A = this;\r\n            set.each(function (e) {\r\n                if(A.contains(e)) {\r\n                    _intersection.add(e);\r\n                }\r\n                ;\r\n            });\r\n\r\n            return _intersection;\r\n        },\r\n        intersects: function (set) {\r\n            return this.intersection(set).elements.length > 0;\r\n        },\r\n        is_subset: function (set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                if(!this.contains(elements[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        toString: function () {\r\n            return '{' + this.elements.join(',') + '}';\r\n        }\r\n    };\r\n\r\n//build ========================================================================\r\n    var Build = {\r\n        dependencies: {\r\n            _rename: {\r\n                'Math2.factorial': 'factorial'\r\n            },\r\n            factorial: {\r\n                'Math2.gamma': Math2.gamma\r\n            },\r\n            gamma_incomplete: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Li: {\r\n                'Math2.Ei': Math2.Ei,\r\n                'Math2.bigLog': Math2.bigLog,\r\n                'Frac': Frac\r\n            },\r\n            Ci: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Ei: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Si: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Shi: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Chi: {\r\n                'isInt': isInt,\r\n                'nround': nround,\r\n                'Math2.num_integrate': Math2.num_integrate\r\n            },\r\n            factor: {\r\n                'Math2.ifactor': Math2.ifactor,\r\n                'Symbol': Symbol\r\n            },\r\n            num_integrate: {\r\n                'Math2.simpson': Math2.simpson,\r\n                'nround': nround\r\n            },\r\n            fib: {\r\n                'even': even\r\n            }\r\n        },\r\n        /* Some functions need to be made numeric safe. Build checks if there's a\r\n         * reformat option and calls that instead when compiling the function string.\r\n         */\r\n        reformat: {\r\n            // this simply extends the build function\r\n            diff: function (symbol, deps) {\r\n                var v = symbol.args[1].toString();\r\n                var f = 'var f = ' + Build.build(symbol.args[0].toString(), [v]) + ';';\r\n                deps[1] += 'var diff = ' + Math2.diff.toString() + ';';\r\n                deps[1] += f;\r\n\r\n                return ['diff(f)(' + v + ')', deps];\r\n            }\r\n        },\r\n        getProperName: function (f) {\r\n            var map = {\r\n                continued_fraction: 'continuedFraction'\r\n            };\r\n            return map[f] || f;\r\n        },\r\n        // assumes that dependences are at max 2 levels\r\n        compileDependencies: function (f, deps) {\r\n            // grab the predefined dependiences\r\n            var dependencies = Build.dependencies[f];\r\n\r\n            // the dependency string\r\n            var dep_string = deps && deps[1] ? deps[1] : '';\r\n\r\n            // the functions to be replaced\r\n            var replacements = deps && deps[0] ? deps[0] : {};\r\n\r\n            // loop through them and add them to the list\r\n            for(var x in dependencies) {\r\n                if(typeof dependencies[x] === 'object')\r\n                    continue; // skip object\r\n                var components = x.split('.'); //Math.f becomes f\r\n                // if the function isn't part of an object then reference the function itself\r\n                dep_string += 'var ' + (components.length > 1 ? components[1] : components[0]) + '=' + dependencies[x] + ';';\r\n                replacements[x] = components.pop();\r\n            }\r\n\r\n            return [replacements, dep_string];\r\n        },\r\n        getArgsDeps: function (symbol, dependencies) {\r\n            var args = symbol.args;\r\n            for(var i = 0; i < args.length; i++) {\r\n                symbol.args[i].each(function (x) {\r\n                    if(x.group === FN)\r\n                        dependencies = Build.compileDependencies(x.fname, dependencies);\r\n                });\r\n            }\r\n            return dependencies;\r\n        },\r\n        build: function (symbol, arg_array) {\r\n            symbol = block('PARSE2NUMBER', function () {\r\n                return _.parse(symbol);\r\n            }, true);\r\n            var args = variables(symbol);\r\n            var supplements = [];\r\n            var dependencies = [];\r\n            var ftext = function (symbol, xports) {\r\n                //Fix for #545 - Parentheses confuse build.\r\n                if(symbol.fname === '') {\r\n                    symbol = Symbol.unwrapPARENS(symbol);\r\n                }\r\n                xports = xports || [];\r\n                var c = [],\r\n                        group = symbol.group,\r\n                        prefix = '';\r\n\r\n                var ftext_complex = function (group) {\r\n                    var d = group === CB ? '*' : '+',\r\n                            cc = [];\r\n\r\n                    for(var x in symbol.symbols) {\r\n                        var sym = symbol.symbols[x],\r\n                                ft = ftext(sym, xports)[0];\r\n                        // wrap it in brackets if it's group PL or CP\r\n                        if(sym.isComposite())\r\n                            ft = inBrackets(ft);\r\n                        cc.push(ft);\r\n                    }\r\n                    var retval = cc.join(d);\r\n                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\r\n                    return retval;\r\n                },\r\n                        ftext_function = function (bn) {\r\n                            var retval;\r\n                            if(bn in Math)\r\n                                retval = 'Math.' + bn;\r\n                            else {\r\n                                bn = Build.getProperName(bn);\r\n                                if(supplements.indexOf(bn) === -1) { // make sure you're not adding the function twice\r\n                                    //Math2 functions aren't part of the standard javascript\r\n                                    //Math library and must be exported.\r\n                                    xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\r\n                                    supplements.push(bn);\r\n                                }\r\n                                retval = bn;\r\n                            }\r\n                            retval = retval + inBrackets(symbol.args.map(function (x) {\r\n                                return ftext(x, xports)[0];\r\n                            }).join(','));\r\n\r\n                            return retval;\r\n                        };\r\n\r\n                // the multiplier\r\n                if(group === N)\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                else if(symbol.multiplier.equals(-1))\r\n                    prefix = '-';\r\n                else if(!symbol.multiplier.equals(1))\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                // the value\r\n                var value;\r\n\r\n                if(group === S || group === P)\r\n                    value = symbol.value;\r\n                else if(group === FN) {\r\n                    dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                    dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    if(Build.reformat[symbol.fname]) {\r\n                        var components = Build.reformat[symbol.fname](symbol, dependencies);\r\n                        dependencies = components[1];\r\n                        value = components[0];\r\n                    }\r\n                    else {\r\n                        value = ftext_function(symbol.fname);\r\n                    }\r\n\r\n                }\r\n                else if(group === EX) {\r\n                    var pg = symbol.previousGroup;\r\n                    if(pg === N || pg === S)\r\n                        value = symbol.value;\r\n                    else if(pg === FN) {\r\n                        value = ftext_function(symbol.fname);\r\n                        dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                        dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    }\r\n                    else\r\n                        value = ftext_complex(symbol.previousGroup);\r\n                }\r\n                else {\r\n                    value = ftext_complex(symbol.group);\r\n                }\r\n\r\n                if(symbol.group !== N && !symbol.power.equals(1)) {\r\n                    var pow = ftext(_.parse(symbol.power));\r\n                    xports.push(pow[1]);\r\n                    value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\r\n                }\r\n\r\n                if(value)\r\n                    c.push(prefix + value);\r\n\r\n                return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\r\n            };\r\n            if(arg_array) {\r\n                // Fix for issue #546\r\n                // Disable argument checking since it's a bit presumptuous.\r\n                // Consider f(x) = 5; If I explicitely pass in an argument array contain x \r\n                // this check will fail and complain since the function doesn't contain x.\r\n                /*\r\n                 for (var i = 0; i < args.length; i++) {\r\n                 var arg = args[i];\r\n                 if (arg_array.indexOf(arg) === -1)\r\n                 err(arg + ' not found in argument array');\r\n                 }\r\n                 */\r\n                args = arg_array;\r\n            }\r\n\r\n            var f_array = ftext(symbol);\r\n\r\n            // make all the substitutions;\r\n            for(var x in dependencies[0]) {\r\n                var alias = dependencies[0][x];\r\n                f_array[1] = f_array[1].replace(x, alias);\r\n                dependencies[1] = dependencies[1].replace(x, alias);\r\n            }\r\n\r\n            var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\r\n\r\n            return f;\r\n        }\r\n    };\r\n\r\n\r\n//finalize =====================================================================\r\n    /* FINALIZE */\r\n    (function () {\r\n        reserveNames(_.CONSTANTS);\r\n        reserveNames(_.functions);\r\n        _.initConstants();\r\n        //bug fix for error but needs to be revisited\r\n        if(!_.error)\r\n            _.error = err;\r\n\r\n        //Store the log and log10 functions\r\n        Settings.LOG_FNS = {\r\n            log: _.functions['log'],\r\n            log10: _.functions['log10']\r\n        };\r\n\r\n    })();\r\n\r\n    /* END FINALIZE */\r\n\r\n//Core =========================================================================\r\n    var Utils = {\r\n        allSame: allSame,\r\n        allNumeric: allNumeric,\r\n        arguments2Array: arguments2Array,\r\n        arrayAddSlices: arrayAddSlices,\r\n        arrayClone: arrayClone,\r\n        arrayMax: arrayMax,\r\n        arrayMin: arrayMin,\r\n        arrayEqual: arrayEqual,\r\n        arrayUnique: arrayUnique,\r\n        arrayGetVariables: arrayGetVariables,\r\n        arraySum: arraySum,\r\n        block: block,\r\n        build: Build.build,\r\n        clearU: clearU,\r\n        comboSort: comboSort,\r\n        compare: compare,\r\n        convertToVector: convertToVector,\r\n        customError: customError,\r\n        customType: customType,\r\n        decompose_fn: decompose_fn,\r\n        each: each,\r\n        evaluate: evaluate,\r\n        even: even,\r\n        evenFraction: evenFraction,\r\n        fillHoles: fillHoles,\r\n        firstObject: firstObject,\r\n        format: format,\r\n        generatePrimes: generatePrimes,\r\n        getCoeffs: getCoeffs,\r\n        getU: getU,\r\n        importFunctions: importFunctions,\r\n        inBrackets: inBrackets,\r\n        isArray: isArray,\r\n        isExpression: isExpression,\r\n        isFraction: isFraction,\r\n        isInt: isInt,\r\n        isMatrix: isMatrix,\r\n        isNegative: isNegative,\r\n        isNumericSymbol: isNumericSymbol,\r\n        isPrime: isPrime,\r\n        isReserved: isReserved,\r\n        isSymbol: isSymbol,\r\n        isVariableSymbol: isVariableSymbol,\r\n        isVector: isVector,\r\n        keys: keys,\r\n        knownVariable: knownVariable,\r\n        nroots: nroots,\r\n        remove: remove,\r\n        reserveNames: reserveNames,\r\n        range: range,\r\n        round: nround,\r\n        sameSign: sameSign,\r\n        scientificToDecimal: scientificToDecimal,\r\n        separate: separate,\r\n        stringReplace: stringReplace,\r\n        text: text,\r\n        validateName: validateName,\r\n        variables: variables,\r\n        warn: warn\r\n    };\r\n\r\n    //This contains all the parts of nerdamer and enables nerdamer's internal functions\r\n    //to be used.\r\n    var C = {\r\n        groups: Groups,\r\n        Symbol: Symbol,\r\n        Expression: Expression,\r\n        Frac: Frac,\r\n        Vector: Vector,\r\n        Matrix: Matrix,\r\n        Parser: Parser,\r\n        Scientific: Scientific,\r\n        Fraction: Fraction,\r\n        Math2: Math2,\r\n        LaTeX: LaTeX,\r\n        Utils: Utils,\r\n        PARSER: _,\r\n        PARENTHESIS: PARENTHESIS,\r\n        Settings: Settings,\r\n        err: err,\r\n        bigInt: bigInt,\r\n        bigDec: bigDec,\r\n        exceptions: exceptions\r\n    };\r\n\r\n//libExports ===================================================================\r\n    /**\r\n     *\r\n     * @param {String} expression the expression to be evaluated\r\n     * @param {Object} subs the object containing the variable values\r\n     * @param {Integer} location a specific location in the equation list to\r\n     * insert the evaluated expression\r\n     * @param {String} option additional options\r\n     * @returns {Expression}\r\n     */\r\n    var libExports = function (expression, subs, option, location) {\r\n        // Initiate the numer flag\r\n        var numer = false;\r\n\r\n        // Is the user declaring a function?\r\n        var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\r\n        if(fndec)\r\n            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\r\n\r\n        // var variable, fn, args;\r\n        // Convert any expression passed in to a string\r\n        if(expression instanceof Expression)\r\n            expression = expression.toString();\r\n\r\n        // Convert it to an array for simplicity\r\n        if(!isArray(option)) {\r\n            option = typeof option === 'undefined' ? [] : [option];\r\n        }\r\n\r\n        option.forEach(function (o) {\r\n            // Turn on the numer flag if requested\r\n            if(o === 'numer') {\r\n                numer = true;\r\n                return;\r\n            }\r\n            // Wrap it in a function if requested. This only holds true for\r\n            // functions that take a single argument which is the expression\r\n            var f = _.functions[option];\r\n            // If there's a function and it takes a single argument, then wrap\r\n            // the expression in it\r\n            if(f && f[1] === 1) {\r\n                expression = `${o}(${expression})`;\r\n            }\r\n        });\r\n\r\n        var e = block('PARSE2NUMBER', function () {\r\n            return _.parse(expression, subs);\r\n        }, numer || Settings.PARSE2NUMBER);\r\n\r\n        if(location) {\r\n            EXPRESSIONS[location - 1] = e;\r\n        }\r\n        else {\r\n            EXPRESSIONS.push(e);\r\n        }\r\n\r\n        return new Expression(e);\r\n    };\r\n    /**\r\n     * Converts expression into rpn form\r\n     * @param {String} expression\r\n     * @returns {Token[]}\r\n     */\r\n    libExports.rpn = function (expression) {\r\n        return _.tokenize(_.toRPN(expression));\r\n    };\r\n\r\n    /**\r\n     * Generates LaTeX from expression string\r\n     * @param {String} e\r\n     * @param {object} opt\r\n     * @returns {String}\r\n     */\r\n    libExports.convertToLaTeX = function (e, opt) {\r\n        return _.toTeX(e, opt);\r\n    };\r\n\r\n    /**\r\n     * Converts latex to text - Very very very basic at the moment\r\n     * @param {String} e\r\n     * @returns {String}\r\n     */\r\n    libExports.convertFromLaTeX = function (e) {\r\n        var txt = LaTeX.parse(_.tokenize(e));\r\n        return new Expression(_.parse(txt));\r\n    };\r\n\r\n    /**\r\n     * Get the version of nerdamer or a loaded add-on\r\n     * @param {String} add_on - The add-on being checked\r\n     * @returns {String} returns the version of nerdamer\r\n     */\r\n    libExports.version = function (add_on) {\r\n        if(add_on) {\r\n            try {\r\n                return C[add_on].version;\r\n            }\r\n            catch(e) {\r\n                return \"No module named \" + add_on + \" found!\";\r\n            }\r\n        }\r\n        return version;\r\n    };\r\n\r\n    /**\r\n     * Get nerdamer generated warnings\r\n     * @returns {String[]}\r\n     */\r\n    libExports.getWarnings = function () {\r\n        return WARNINGS;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} constant The name of the constant to be set\r\n     * @param {mixed} value The value of the constant\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setConstant = function (constant, value) {\r\n        validateName(constant);\r\n        if(!isReserved(constant)) {\r\n            //fix for issue #127\r\n            if(value === 'delete' || value === '') {\r\n                delete _.CONSTANTS[constant];\r\n            }\r\n            else {\r\n                if(isNaN(value))\r\n                    throw new NerdamerTypeError('Constant must be a number!');\r\n                _.CONSTANTS[constant] = value;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a previously set constant\r\n     * @param {type} constant\r\n     * @returns {String}\r\n     */\r\n    libExports.getConstant = function (constant) {\r\n        return String(_.constant[constant]);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} name The name of the function\r\n     * @param {Array} params_array A list containing the parameter name of the functions\r\n     * @param {String} body The body of the function\r\n     * @returns {Boolean} returns true if succeeded and falls on fail\r\n     * @example nerdamer.setFunction('f',['x'], 'x^2+2');\r\n     */\r\n    libExports.setFunction = setFunction;\r\n\r\n    /**\r\n     *\r\n     * @returns {C} Exports the nerdamer core functions and objects\r\n     */\r\n    libExports.getCore = function () {\r\n        return C;\r\n    };\r\n\r\n    libExports.getExpression = libExports.getEquation = Expression.getExpression;\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\r\n     * @returns {String|Array}\r\n     */\r\n    libExports.reserved = function (asArray) {\r\n        if(asArray) {\r\n            return RESERVED;\r\n        }\r\n        return RESERVED.join(', ');\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Integer} equation_number the number of the equation to clear.\r\n     * If 'all' is supplied then all equations are cleared\r\n     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\r\n        if(equation_number === 'all') {\r\n            EXPRESSIONS = [];\r\n        }\r\n        else if(equation_number === 'last') {\r\n            EXPRESSIONS.pop();\r\n        }\r\n        else if(equation_number === 'first') {\r\n            EXPRESSIONS.shift();\r\n        }\r\n        else {\r\n            var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\r\n            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Alias for nerdamer.clear('all')\r\n     */\r\n    libExports.flush = function () {\r\n        this.clear('all');\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asObject\r\n     * @param {Boolean} asLaTeX\r\n     * @param {String|String[]} option\r\n     * @returns {Array}\r\n     */\r\n    libExports.expressions = function (asObject, asLaTeX, option) {\r\n        var result = asObject ? {} : [];\r\n        for(var i = 0; i < EXPRESSIONS.length; i++) {\r\n            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\r\n            asObject ? result[i + 1] = eq : result.push(eq);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    //the method for registering modules\r\n    libExports.register = function (obj) {\r\n        var core = this.getCore();\r\n\r\n        if(isArray(obj)) {\r\n            for(var i = 0; i < obj.length; i++) {\r\n                if(obj)\r\n                    this.register(obj[i]);\r\n            }\r\n        }\r\n        else if(obj && Settings.exclude.indexOf(obj.name) === -1) {\r\n            //make sure all the dependencies are available\r\n            if(obj.dependencies) {\r\n                for(var i = 0; i < obj.dependencies.length; i++)\r\n                    if(!core[obj.dependencies[i]])\r\n                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\r\n            }\r\n            //if no parent object is provided then the function does not have an address and cannot be called directly\r\n            var parent_obj = obj.parent,\r\n                    fn = obj.build.call(core); //call constructor to get function\r\n            if(parent_obj) {\r\n                if(!core[parent_obj])\r\n                    core[obj.parent] = {};\r\n\r\n                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\r\n                //attach the function to the core\r\n                ref_obj[obj.name] = fn;\r\n            }\r\n            if(obj.visible)\r\n                _.functions[obj.name] = [fn, obj.numargs]; //make the function available\r\n\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {String} name variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validateName = validateName;\r\n\r\n    /**\r\n     * @param {String} varname variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validVarName = function (varname) {\r\n        try {\r\n            validateName(varname);\r\n            return RESERVED.indexOf(varname) === -1;\r\n        }\r\n        catch(e) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Array} Array of functions currently supported by nerdamer\r\n     */\r\n    libExports.supported = function () {\r\n        return keys(_.functions);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Number} The number equations/expressions currently loaded\r\n     */\r\n    libExports.numEquations = libExports.numExpressions = function () {\r\n        return EXPRESSIONS.length;\r\n    };\r\n    /* END EXPORTS */\r\n\r\n    /**\r\n     *\r\n     * @param {String} v variable to be set\r\n     * @param {String} val value of variable. This can be a variable expression or number\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setVar = function (v, val) {\r\n        validateName(v);\r\n        //check if it's not already a constant\r\n        if(v in _.CONSTANTS)\r\n            err('Cannot set value for constant ' + v);\r\n        if(val === 'delete' || val === '')\r\n            delete VARS[v];\r\n        else {\r\n            VARS[v] = isSymbol(val) ? val : _.parse(val);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a set variable\r\n     * @param {type} v\r\n     * @returns {varies}\r\n     */\r\n    libExports.getVar = function (v) {\r\n        return VARS[v];\r\n    };\r\n    /**\r\n     * Clear the variables from the VARS object\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clearVars = function () {\r\n        VARS = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Function} loader\r\n     * @returns {nerdamer}\r\n     */\r\n    libExports.load = function (loader) {\r\n        loader.call(this);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\r\n     * @param {String|String[]} option\r\n     * @returns {Object} Returns an object with the variables\r\n     */\r\n    libExports.getVars = function (output, option) {\r\n        output = output || 'text';\r\n        var variables = {};\r\n        if(output === 'object')\r\n            variables = VARS;\r\n        else {\r\n            for(var v in VARS) {\r\n                if(output === 'latex') {\r\n                    variables[v] = VARS[v].latex(option);\r\n                }\r\n                else if(output === 'text') {\r\n                    variables[v] = VARS[v].text(option);\r\n                }\r\n            }\r\n        }\r\n        return variables;\r\n    };\r\n\r\n    /**\r\n     * Set the value of a setting\r\n     * @param {String} setting The setting to be changed\r\n     * @param {boolean} value\r\n     */\r\n    libExports.set = function (setting, value) {\r\n        //current options:\r\n        //PARSE2NUMBER, suppress_errors\r\n        if(typeof setting === 'object')\r\n            for(var x in setting) {\r\n                libExports.set(x, setting[x]);\r\n            }\r\n\r\n        var disallowed = ['SAFE'];\r\n        if(disallowed.indexOf(setting) !== -1)\r\n            err('Cannot modify setting: ' + setting);\r\n\r\n        if(setting === 'PRECISION') {\r\n            bigDec.set({precision: value});\r\n            Settings.PRECISION = value;\r\n\r\n            // Avoid that nerdamer puts out garbage after 21 decimal place\r\n            if(value > 21) {\r\n                this.set('USE_BIG', true);\r\n            }\r\n        }\r\n        else if(setting === 'USE_LN' && value === true) {\r\n            //set log as LN\r\n            Settings.LOG = 'LN';\r\n            //set log10 as log\r\n            Settings.LOG10 = 'log';\r\n            //point the functions in the right direction\r\n            _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\r\n            //the log10 function must be explicitly set\r\n            _.functions['log'][0] = function (x) {\r\n                if(x.isConstant())\r\n                    return new Symbol(Math.log10(x));\r\n                return _.symfunction(Settings.LOG10, [x]);\r\n            };\r\n            _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\r\n\r\n            //remove log10\r\n            delete _.functions['log10'];\r\n        }\r\n        else\r\n            Settings[setting] = value;\r\n    };\r\n\r\n    /**\r\n     * Get the value of a setting\r\n     * @param {type} setting\r\n     * @returns {undefined}\r\n     */\r\n    libExports.get = function (setting) {\r\n        return Settings[setting];\r\n    };\r\n\r\n    /**\r\n     * This functions makes internal functions available externally\r\n     * @param {bool} override Override the functions when calling updateAPI if it exists\r\n     */\r\n    libExports.updateAPI = function (override) {\r\n        //Map internal functions to external ones\r\n        var linker = function (fname) {\r\n            return function () {\r\n                var args = [].slice.call(arguments);\r\n                for(var i = 0; i < args.length; i++)\r\n                    args[i] = _.parse(args[i]);\r\n                return new Expression(block('PARSE2NUMBER', function () {\r\n                    return _.callfunction(fname, args);\r\n                }));\r\n            };\r\n        };\r\n        //perform the mapping\r\n        for(var x in _.functions)\r\n            if(!(x in libExports) || override)\r\n                libExports[x] = linker(x);\r\n    };\r\n\r\n    libExports.replaceFunction = function (name, fn, num_args) {\r\n        var existing = _.functions[name];\r\n        var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\r\n        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\r\n    };\r\n\r\n    libExports.setOperator = function (operator, shift) {\r\n        _.setOperator(operator, shift);\r\n    };\r\n\r\n    libExports.getOperator = function (operator) {\r\n        return _.getOperator(operator);\r\n    };\r\n\r\n    libExports.aliasOperator = function (operator, withOperator) {\r\n        _.aliasOperator(operator, withOperator);\r\n    };\r\n\r\n    libExports.tree = function (expression) {\r\n        return _.tree(_.toRPN(_.tokenize(expression)));\r\n    };\r\n\r\n    libExports.htmlTree = function (expression, indent) {\r\n        var tree = this.tree(expression);\r\n\r\n        return '<div class=\"tree\">\\n' +\r\n                '    <ul>\\n' +\r\n                '        <li>\\n' +\r\n                tree.toHTML(3, indent) + '\\n' +\r\n                '        </li>\\n' +\r\n                '    </ul>\\n' +\r\n                '</div>';\r\n    };\r\n\r\n    libExports.addPeeker = function (name, f) {\r\n        if(_.peekers[name])\r\n            _.peekers[name].push(f);\r\n    };\r\n\r\n    libExports.removePeeker = function (name, f) {\r\n        remove(_.peekers[name], f);\r\n    };\r\n\r\n    libExports.parse = function (e) {\r\n        return String(e).split(';').map(function (x) {\r\n            return _.parse(x);\r\n        });\r\n    };\r\n\r\n    libExports.updateAPI();\r\n\r\n    return libExports; //Done\r\n//imports ======================================================================\r\n})({\r\n    //https://github.com/peterolson/BigInteger.js\r\n    bigInt: (function(){\r\n        var bigInt=function(undefined){\"use strict\";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v===\"undefined\")return Integer[0];if(typeof radix!==\"undefined\")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value===\"number\"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r===\"number\"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base}r[i+l]=carry}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error(\"Cannot divide by zero\");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient===\"number\"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient===\"number\"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod===\"number\"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error(\"The exponent \"+n.toString()+\" is too large.\");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error(\"Cannot take modPow with modulus 0\");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev(),b=nPrev,r=0,d,t,i,x;while(b.isEven())b=b.divide(2),r++;next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2))}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)))}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+\" and \"+n.toString()+\" are not co-prime\");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n===\"number\"||typeof n===\"string\")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit))}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v===\"number\"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return{p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1))}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result===\"number\"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c===\"-\")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c===\"1\"&&absBase===1)continue;throw new Error(c+\" is not a valid digit in base \"+base+\".\")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]===\"-\";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c===\"<\"){var start=i;do{i++}while(text[i]!==\">\");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+\" is not a valid character\")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit)}return\"<\"+digit+\">\"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return{value:[0],isNegative:false};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(base.equals(-1)){if(n.isZero())return{value:[0],isNegative:false};if(n.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return{value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs()}if(base.equals(1)){if(n.isZero())return{value:[0],isNegative:false};return{value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(digit.toJSNumber())}out.push(left.toJSNumber());return{value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return(arr.isNegative?\"-\":\"\")+arr.value.map(stringify).join(\"\")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros=\"0000000\",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?\"-\":\"\";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error(\"Invalid integer: \"+v)}var sign=v[0]===\"-\";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error(\"Invalid integer: \"+split.join(\"e\"));if(split.length===2){var exp=split[1];if(exp[0]===\"+\")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error(\"Invalid integer: \"+exp+\" is not a valid exponent.\");var text=split[0];var decimalPlace=text.indexOf(\".\");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error(\"Cannot include negative exponent part for integers\");text+=new Array(exp+1).join(\"0\");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error(\"Invalid integer: \"+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+\" is not an integer.\");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v===\"number\"){return parseNumberValue(v)}if(typeof v===\"string\"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(typeof module!==\"undefined\"&&module.hasOwnProperty(\"exports\")){module.exports=bigInt}if(typeof define===\"function\"&&define.amd){define(\"big-integer\",[],function(){return bigInt})}\r\n        return bigInt;\r\n    })(),\r\n    /*\r\n     *  decimal.js v10.2.1\r\n     *  An arbitrary-precision Decimal type for JavaScript.\r\n     *  https://github.com/MikeMcl/decimal.js\r\n     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n     *  MIT Licence\r\n     */\r\n    bigDec: function(n){\"use strict\";var e,i,t,r,s=9e15,o=1e9,u=\"0123456789abcdef\",c=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",f=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",a={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-s,maxE:s,crypto:!1},h=!0,d=\"[DecimalError] \",l=d+\"Invalid argument: \",p=d+\"Precision limit exceeded\",g=d+\"crypto unavailable\",m=Math.floor,w=Math.pow,v=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,N=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,b=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,E=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,x=1e7,y=7,M=c.length-1,q=f.length-1,O={name:\"[object Decimal]\"};function D(n){var e,i,t,r=n.length-1,s=\"\",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+\"\",(i=y-t.length)&&(s+=k(i)),s+=t;o=n[e],(i=y-(t=o+\"\").length)&&(s+=k(i))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function F(n,e,i){if(n!==~~n||n<e||n>i)throw Error(l+n)}function A(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return--e<0?(e+=y,r=0):(r=Math.ceil((e+1)/y),e%=y),s=w(10,y-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==w(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==w(10,e-3)-1,o}function S(n,e,i){for(var t,r,s=[0],o=0,c=n.length;o<c;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=u.indexOf(n.charAt(o++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}O.absoluteValue=O.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),P(n)},O.ceil=function(){return P(new this.constructor(this),this.e+1,2)},O.comparedTo=O.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(e=0,i=(t=o.length)<(r=u.length)?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},O.cosine=O.cos=function(){var n,e,i=this,t=i.constructor;return i.d?i.d[0]?(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=(1/z(4,i)).toString()):(i=16,t=\"2.3283064365386962890625e-10\");n.precision+=i,e=J(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1)}return n.precision-=i,e}(t,G(t,i)),t.precision=n,t.rounding=e,P(2==r||3==r?i.neg():i,n,e,!0)):new t(1):new t(NaN)},O.cubeRoot=O.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,d=a.constructor;if(!a.isFinite()||a.isZero())return new d(a);for(h=!1,(s=a.s*w(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new d(s.toString()):(i=D(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?\"0\":\"00\"),s=w(i,1/3),n=m((n+1)/3)-(n%3==(n<0?-1:2)),(t=new d(i=s==1/0?\"5e\"+n:(i=s.toExponential()).slice(0,i.indexOf(\"e\")+1)+n)).s=a.s),o=(n=d.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=Z(f.plus(a).times(u),f.plus(c),o+2,1),D(u.d).slice(0,o)===(i=D(t.d)).slice(0,o)){if(\"9999\"!=(i=i.slice(o-3,o+1))&&(r||\"4999\"!=i)){+i&&(+i.slice(1)||\"5\"!=i.charAt(0))||(P(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(P(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1}return h=!0,P(t,n,d.rounding,e)},O.decimalPlaces=O.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-m(this.e/y))*y,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},O.dividedBy=O.div=function(n){return Z(this,new this.constructor(n))},O.dividedToIntegerBy=O.divToInt=function(n){var e=this.constructor;return P(Z(this,new e(n),0,1,1),e.precision,e.rounding)},O.equals=O.eq=function(n){return 0===this.cmp(n)},O.floor=function(){return P(new this.constructor(this),this.e+1,3)},O.greaterThan=O.gt=function(n){return this.cmp(n)>0},O.greaterThanOrEqualTo=O.gte=function(n){var e=this.cmp(n);return 1==e||0===e},O.hyperbolicCosine=O.cosh=function(){var n,e,i,t,r,s=this,o=s.constructor,u=new o(1);if(!s.isFinite())return new o(s.s?1/0:NaN);if(s.isZero())return u;i=o.precision,t=o.rounding,o.precision=i+Math.max(s.e,s.sd())+4,o.rounding=1,(r=s.d.length)<32?e=(1/z(4,n=Math.ceil(r/3))).toString():(n=16,e=\"2.3283064365386962890625e-10\"),s=J(o,1,s.times(e),new o(1),!0);for(var c,f=n,a=new o(8);f--;)c=s.times(s),s=u.minus(c.times(a.minus(c.times(a))));return P(s,o.precision=i,o.rounding=t,!0)},O.hyperbolicSine=O.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=J(s,2,r,r,!0);else{n=(n=1.4*Math.sqrt(t))>16?16:0|n,r=J(s,2,r=r.times(1/z(5,n)),r,!0);for(var o,u=new s(5),c=new s(16),f=new s(20);n--;)o=r.times(r),r=r.times(u.plus(o.times(c.times(o).plus(f))))}return s.precision=e,s.rounding=i,P(r,e,i,!0)},O.hyperbolicTangent=O.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,Z(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},O.inverseCosine=O.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return-1!==t?0===t?e.isNeg()?U(i,r,s):new i(0):new i(NaN):e.isZero()?U(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=U(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},O.inverseHyperbolicCosine=O.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,h=!1,i=i.times(i).minus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},O.inverseHyperbolicSine=O.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,h=!1,i=i.times(i).plus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln())},O.inverseHyperbolicTangent=O.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?P(new s(r),n,e,!0):(s.precision=i=t-r.e,r=Z(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},O.inverseSine=O.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,-1!==e?0===e?((n=U(s,i+4,t).times(.5)).s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},O.inverseTangent=O.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,d=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&d+4<=q)return(o=U(a,d+4,l).times(.25)).s=f.s,o}else{if(!f.s)return new a(NaN);if(d+4<=q)return(o=U(a,d+4,l).times(.5)).s=f.s,o}for(a.precision=u=d+10,a.rounding=1,n=i=Math.min(28,u/y+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(h=!1,e=Math.ceil(u/y),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),h=!0,P(o,a.precision=d,a.rounding=l,!0)},O.isFinite=function(){return!!this.d},O.isInteger=O.isInt=function(){return!!this.d&&m(this.e/y)>this.d.length-2},O.isNaN=function(){return!this.s},O.isNegative=O.isNeg=function(){return this.s<0},O.isPositive=O.isPos=function(){return this.s>0},O.isZero=function(){return!!this.d&&0===this.d[0]},O.lessThan=O.lt=function(n){return this.cmp(n)<0},O.lessThanOrEqualTo=O.lte=function(n){return this.cmp(n)<1},O.logarithm=O.log=function(n){var e,i,t,r,s,o,u,c,f=this.constructor,a=f.precision,d=f.rounding;if(null==n)n=new f(10),e=!0;else{if(i=(n=new f(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new f(NaN);e=n.eq(10)}if(i=this.d,this.s<0||!i||!i[0]||this.eq(1))return new f(i&&!i[0]?-1/0:1!=this.s?NaN:i?0:1/0);if(e)if(i.length>1)s=!0;else{for(r=i[0];r%10==0;)r/=10;s=1!==r}if(h=!1,o=V(this,u=a+5),t=e?T(f,u+10):V(n,u),A((c=Z(o,t,u,1)).d,r=a,d))do{if(o=V(this,u+=10),t=e?T(f,u+10):V(n,u),c=Z(o,t,u,1),!s){+D(c.d).slice(r+1,r+15)+1==1e14&&(c=P(c,a+1,0));break}}while(A(c.d,r+=10,d));return h=!0,P(c,a,d)},O.minus=O.sub=function(n){var e,i,t,r,s,o,u,c,f,a,d,l,p=this,g=p.constructor;if(n=new g(n),!p.d||!n.d)return p.s&&n.s?p.d?n.s=-n.s:n=new g(n.d||p.s!==n.s?p:NaN):n=new g(NaN),n;if(p.s!=n.s)return n.s=-n.s,p.plus(n);if(f=p.d,l=n.d,u=g.precision,c=g.rounding,!f[0]||!l[0]){if(l[0])n.s=-n.s;else{if(!f[0])return new g(3===c?-0:0);n=new g(p)}return h?P(n,u,c):n}if(i=m(n.e/y),a=m(p.e/y),f=f.slice(),s=a-i){for((d=s<0)?(e=f,s=-s,o=l.length):(e=l,i=a,o=f.length),s>(t=Math.max(Math.ceil(u/y),o)+2)&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for((d=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){d=f[t]<l[t];break}s=0}for(d&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;t>0;--t)f[o++]=0;for(t=l.length;t>s;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=x-1;--f[r],f[t]+=x}f[t]-=l[t]}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;return f[0]?(n.d=f,n.e=L(f,i),h?P(n,u,c):n):new g(3===c?-0:0)},O.modulo=O.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?P(new t(i),t.precision,t.rounding):(h=!1,9==t.modulo?(e=Z(i,n.abs(),0,3,1)).s*=n.s:e=Z(i,n,0,t.modulo,1),e=e.times(n),h=!0,i.minus(e))},O.naturalExponential=O.exp=function(){return B(this)},O.naturalLogarithm=O.ln=function(){return V(this)},O.negated=O.neg=function(){var n=new this.constructor(this);return n.s=-n.s,P(n)},O.plus=O.add=function(n){var e,i,t,r,s,o,u,c,f,a,d=this,l=d.constructor;if(n=new l(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new l(n.d||d.s===n.s?d:NaN)):n=new l(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(f=d.d,a=n.d,u=l.precision,c=l.rounding,!f[0]||!a[0])return a[0]||(n=new l(d)),h?P(n,u,c):n;if(s=m(d.e/y),t=m(n.e/y),f=f.slice(),r=s-t){for(r<0?(i=f,r=-r,o=a.length):(i=a,t=s,o=f.length),r>(o=(s=Math.ceil(u/y))>o?s+1:o+1)&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/x|0,f[r]%=x;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();return n.d=f,n.e=L(f,t),h?P(n,u,c):n},O.precision=O.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(l+n);return i.d?(e=_(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},O.round=function(){var n=this,e=n.constructor;return P(new e(n),n.e+1,e.rounding)},O.sine=O.sin=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return J(n,2,e,e);i=(i=1.4*Math.sqrt(t))>16?16:0|i,e=e.times(1/z(5,i)),e=J(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(t,G(t,i)),t.precision=n,t.rounding=e,P(r>2?i.neg():i,n,e,!0)):new t(NaN)},O.squareRoot=O.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(h=!1,0==(f=Math.sqrt(+o))||f==1/0?(((e=D(u)).length+c)%2==0&&(e+=\"0\"),f=Math.sqrt(e),c=m((c+1)/2)-(c<0||c%2),t=new a(e=f==1/0?\"5e\"+c:(e=f.toExponential()).slice(0,e.indexOf(\"e\")+1)+c)):t=new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(Z(o,s,i+2,1)).times(.5),D(s.d).slice(0,i)===(e=D(t.d)).slice(0,i)){if(\"9999\"!=(e=e.slice(i-3,i+1))&&(r||\"4999\"!=e)){+e&&(+e.slice(1)||\"5\"!=e.charAt(0))||(P(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(P(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1}return h=!0,P(t,c,a.rounding,n)},O.tangent=O.tan=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+10,t.rounding=1,(i=i.sin()).s=1,i=Z(i,new t(1).minus(i.times(i)).sqrt(),n+10,0),t.precision=n,t.rounding=e,P(2==r||4==r?i.neg():i,n,e,!0)):new t(NaN)},O.times=O.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this,d=a.constructor,l=a.d,p=(n=new d(n)).d;if(n.s*=a.s,!(l&&l[0]&&p&&p[0]))return new d(!n.s||l&&!l[0]&&!p||p&&!p[0]&&!l?NaN:l&&p?0*n.s:n.s/0);for(i=m(a.e/y)+m(n.e/y),(c=l.length)<(f=p.length)&&(s=l,l=p,p=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;--t>=0;){for(e=0,r=c+t;r>t;)u=s[r]+p[t]*l[r-t-1]+e,s[r--]=u%x|0,e=u/x|0;s[r]=(s[r]+e)%x|0}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=L(s,i),h?P(n,d.precision,d.rounding):n},O.toBinary=function(n,e){return K(this,2,n,e)},O.toDecimalPlaces=O.toDP=function(n,e){var i=this,t=i.constructor;return i=new t(i),void 0===n?i:(F(n,0,o),void 0===e?e=t.rounding:F(e,0,8),P(i,n+i.e+1,e))},O.toExponential=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,!0):(F(n,0,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n+1,e),!0,n+1)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toFixed=function(n,e){var i,t,r=this,s=r.constructor;return void 0===n?i=R(r):(F(n,0,o),void 0===e?e=s.rounding:F(e,0,8),i=R(t=P(new s(r),n+r.e+1,e),!1,n+t.e+1)),r.isNeg()&&!r.isZero()?\"-\"+i:i},O.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,d,p,g=this,m=g.d,v=g.constructor;if(!m)return new v(g);if(f=i=new v(1),t=c=new v(0),o=(s=(e=new v(t)).e=_(m)-g.e-1)%y,e.d[0]=w(10,o<0?y+o:o),null==n)n=s>0?e:f;else{if(!(u=new v(n)).isInt()||u.lt(f))throw Error(l+u);n=u.gt(e)?s>0?e:f:u}for(h=!1,u=new v(D(m)),a=v.precision,v.precision=s=m.length*y*2;d=Z(u,e,0,1,1),1!=(r=i.plus(d.times(t))).cmp(n);)i=t,t=r,r=f,f=c.plus(d.times(r)),c=r,r=e,e=u.minus(d.times(r)),u=r;return r=Z(n.minus(i),t,0,1,1),c=c.plus(r.times(f)),i=i.plus(r.times(t)),c.s=f.s=g.s,p=Z(f,t,s,1).minus(g).abs().cmp(Z(c,i,s,1).minus(g).abs())<1?[f,t]:[c,i],v.precision=a,h=!0,p},O.toHexadecimal=O.toHex=function(n,e){return K(this,16,n,e)},O.toNearest=function(n,e){var i=this,t=i.constructor;if(i=new t(i),null==n){if(!i.d)return i;n=new t(1),e=t.rounding}else{if(n=new t(n),void 0===e?e=t.rounding:F(e,0,8),!i.d)return n.s?i:n;if(!n.d)return n.s&&(n.s=i.s),n}return n.d[0]?(h=!1,i=Z(i,n,0,e,1).times(n),h=!0,P(i)):(n.s=i.s,i=n),i},O.toNumber=function(){return+this},O.toOctal=function(n,e){return K(this,8,n,e)},O.toPower=O.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return P(u,t,s);if((e=m(n.e/y))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=C(c,u,i,t),n.s<0?new c(1).div(r):P(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return(e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+\"\").e:m(f*(Math.log(\"0.\"+D(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(e>0?o/0:0):(h=!1,c.rounding=u.s=1,i=Math.min(12,(e+\"\").length),(r=B(n.times(V(u,t+i)),t)).d&&A((r=P(r,t+5,1)).d,t,s)&&(e=t+10,+D((r=P(B(n.times(V(u,e+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14&&(r=P(r,t+1,0))),r.s=o,h=!0,c.rounding=s,P(r,t,s))},O.toPrecision=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,t.e<=r.toExpNeg||t.e>=r.toExpPos):(F(n,1,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n,e),n<=t.e||t.e<=r.toExpNeg,n)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toSignificantDigits=O.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(F(n,1,o),void 0===e?e=i.rounding:F(e,0,8)),P(new i(this),n,e)},O.toString=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?\"-\"+i:i},O.truncated=O.trunc=function(){return P(new this.constructor(this),this.e+1,1)},O.valueOf=O.toJSON=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?\"-\"+i:i};var Z=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function t(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift()}return function(r,s,o,u,c,f){var a,h,d,l,p,g,w,v,N,b,E,M,q,O,D,F,A,S,Z,R,L=r.constructor,T=r.s==s.s?1:-1,U=r.d,_=s.d;if(!(U&&U[0]&&_&&_[0]))return new L(r.s&&s.s&&(U?!_||U[0]!=_[0]:_)?U&&0==U[0]||!_?0*T:T/0:NaN);for(f?(p=1,h=r.e-s.e):(f=x,p=y,h=m(r.e/p)-m(s.e/p)),Z=_.length,A=U.length,b=(N=new L(T)).d=[],d=0;_[d]==(U[d]||0);d++);if(_[d]>(U[d]||0)&&h--,null==o?(O=o=L.precision,u=L.rounding):O=c?o+(r.e-s.e)+1:o,O<0)b.push(1),g=!0;else{if(O=O/p+2|0,d=0,1==Z){for(l=0,_=_[0],O++;(d<A||l)&&O--;d++)D=l*f+(U[d]||0),b[d]=D/_|0,l=D%_|0;g=l||d<A}else{for((l=f/(_[0]+1)|0)>1&&(_=n(_,l,f),U=n(U,l,f),Z=_.length,A=U.length),F=Z,M=(E=U.slice(0,Z)).length;M<Z;)E[M++]=0;(R=_.slice()).unshift(0),S=_[0],_[1]>=f/2&&++S;do{l=0,(a=e(_,E,Z,M))<0?(q=E[0],Z!=M&&(q=q*f+(E[1]||0)),(l=q/S|0)>1?(l>=f&&(l=f-1),1==(a=e(w=n(_,l,f),E,v=w.length,M=E.length))&&(l--,t(w,Z<v?R:_,v,f))):(0==l&&(a=l=1),w=_.slice()),(v=w.length)<M&&w.unshift(0),t(E,w,M,f),-1==a&&(a=e(_,E,Z,M=E.length))<1&&(l++,t(E,Z<M?R:_,M,f)),M=E.length):0===a&&(l++,E=[0]),b[d++]=l,a&&E[0]?E[M++]=U[F]||0:(E=[U[F]],M=1)}while((F++<A||void 0!==E[0])&&O--);g=void 0!==E[0]}b[0]||b.shift()}if(1==p)N.e=h,i=g;else{for(d=1,l=b[0];l>=10;l/=10)d++;N.e=d+h*p-1,P(N,c?o+N.e+1:o,u,g)}return N}}();function P(n,e,i,t){var r,s,o,u,c,f,a,d,l,p=n.constructor;n:if(null!=e){if(!(d=n.d))return n;for(r=1,u=d[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=y,o=e,c=(a=d[l=0])/w(10,r-o-1)%10|0;else if((l=Math.ceil((s+1)/y))>=(u=d.length)){if(!t)break n;for(;u++<=l;)d.push(0);a=c=0,r=1,o=(s%=y)-y+1}else{for(a=u=d[l],r=1;u>=10;u/=10)r++;c=(o=(s%=y)-y+r)<0?0:a/w(10,r-o-1)%10|0}if(t=t||e<0||void 0!==d[l+1]||(o<0?a:a%w(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/w(10,r-o):0:d[l-1])%10&1||i==(n.s<0?8:7)),e<1||!d[0])return d.length=0,f?(e-=n.e+1,d[0]=w(10,(y-e%y)%y),n.e=-e||0):d[0]=n.e=0,n;if(0==s?(d.length=l,u=1,l--):(d.length=l+1,u=w(10,y-s),d[l]=o>0?(a/w(10,r-o)%w(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=d[0];o>=10;o/=10)s++;for(o=d[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,d[0]==x&&(d[0]=1));break}if(d[l]+=u,d[l]!=x)break;d[l--]=0,u=1}for(s=d.length;0===d[--s];)d.pop()}return h&&(n.e>p.maxE?(n.d=null,n.e=NaN):n.e<p.minE&&(n.e=0,n.d=[0])),n}function R(n,e,i){if(!n.isFinite())return j(n);var t,r=n.e,s=D(n.d),o=s.length;return e?(i&&(t=i-o)>0?s=s.charAt(0)+\".\"+s.slice(1)+k(t):o>1&&(s=s.charAt(0)+\".\"+s.slice(1)),s=s+(n.e<0?\"e\":\"e+\")+n.e):r<0?(s=\"0.\"+k(-r-1)+s,i&&(t=i-o)>0&&(s+=k(t))):r>=o?(s+=k(r+1-o),i&&(t=i-r-1)>0&&(s=s+\".\"+k(t))):((t=r+1)<o&&(s=s.slice(0,t)+\".\"+s.slice(t)),i&&(t=i-o)>0&&(r+1===o&&(s+=\".\"),s+=k(t))),s}function L(n,e){var i=n[0];for(e*=y;i>=10;i/=10)e++;return e}function T(n,e,i){if(e>M)throw h=!0,i&&(n.precision=i),Error(p);return P(new n(c),e,1,!0)}function U(n,e,i){if(e>q)throw Error(p);return P(new n(f),e,i,!0)}function _(n){var e=n.length-1,i=e*y+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++}return i}function k(n){for(var e=\"\";n--;)e+=\"0\";return e}function C(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/y+4);for(h=!1;;){if(i%2&&Q((s=s.times(e)).d,o)&&(r=!0),0===(i=m(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}Q((e=e.times(e)).d,o)}return h=!0,s}function I(n){return 1&n.d[n.d.length-1]}function H(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t)}return r}function B(n,e){var i,t,r,s,o,u,c,f=0,a=0,d=0,l=n.constructor,p=l.rounding,g=l.precision;if(!n.d||!n.d[0]||n.e>17)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==e?(h=!1,c=g):c=e,u=new l(.03125);n.e>-2;)n=n.times(u),d+=5;for(c+=t=Math.log(w(2,d))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=P(s.times(n),c,1),i=i.times(++a),D((u=o.plus(Z(s,i,c,1))).d).slice(0,c)===D(o.d).slice(0,c)){for(r=d;r--;)o=P(o.times(o),c,1);if(null!=e)return l.precision=g,o;if(!(f<3&&A(o.d,c-t,p,f)))return P(o,l.precision=g,p,h=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++}o=u}}function V(n,e){var i,t,r,s,o,u,c,f,a,d,l,p=1,g=n,m=g.d,w=g.constructor,v=w.rounding,N=w.precision;if(g.s<0||!m||!m[0]||!g.e&&1==m[0]&&1==m.length)return new w(m&&!m[0]?-1/0:1!=g.s?NaN:m?0:g);if(null==e?(h=!1,a=N):a=e,w.precision=a+=10,t=(i=D(m)).charAt(0),!(Math.abs(s=g.e)<15e14))return f=T(w,a+2,N).times(s+\"\"),g=V(new w(t+\".\"+i.slice(1)),a-10).plus(f),w.precision=N,null==e?P(g,N,v,h=!0):g;for(;t<7&&1!=t||1==t&&i.charAt(1)>3;)t=(i=D((g=g.times(n)).d)).charAt(0),p++;for(s=g.e,t>1?(g=new w(\"0.\"+i),s++):g=new w(t+\".\"+i.slice(1)),d=g,c=o=g=Z(g.minus(1),g.plus(1),a,1),l=P(g.times(g),a,1),r=3;;){if(o=P(o.times(l),a,1),D((f=c.plus(Z(o,new w(r),a,1))).d).slice(0,a)===D(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(T(w,a+2,N).times(s+\"\"))),c=Z(c,new w(p),a,1),null!=e)return w.precision=N,c;if(!A(c.d,a-10,v,u))return P(c,w.precision=N,v,h=!0);w.precision=a+=10,f=o=g=Z(d.minus(1),d.plus(1),a,1),l=P(g.times(g),a,1),r=u=1}c=f,r+=2}}function j(n){return String(n.s*n.s/0)}function $(n,e){var i,t,r;for((i=e.indexOf(\".\"))>-1&&(e=e.replace(\".\",\"\")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%y,i<0&&(t+=y),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=y;t<r;)n.d.push(+e.slice(t,t+=y));e=e.slice(t),t=y-e.length}else t-=r;for(;t--;)e+=\"0\";n.d.push(+e),h&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function W(n,i){var t,r,s,o,u,c,f,a,d;if(\"Infinity\"===i||\"NaN\"===i)return+i||(n.s=NaN),n.e=NaN,n.d=null,n;if(N.test(i))t=16,i=i.toLowerCase();else if(v.test(i))t=2;else{if(!b.test(i))throw Error(l+i);t=8}for((o=i.search(/p/i))>0?(f=+i.slice(o+1),i=i.substring(2,o)):i=i.slice(2),u=(o=i.indexOf(\".\"))>=0,r=n.constructor,u&&(o=(c=(i=i.replace(\".\",\"\")).length)-o,s=C(r,new r(t),o,2*o)),o=d=(a=S(i,t,x)).length-1;0===a[o];--o)a.pop();return o<0?new r(0*n.s):(n.e=L(a,d),n.d=a,h=!1,u&&(n=Z(n,s,4*c)),f&&(n=n.times(Math.abs(f)<54?w(2,f):e.pow(2,f))),h=!0,n)}function J(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/y);for(h=!1,c=i.times(i),u=new n(t);;){if(o=Z(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=Z(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0}return h=!0,o.d.length=a+1,o}function z(n,e){for(var i=n;--e;)i*=n;return i}function G(n,e){var i,t=e.s<0,s=U(n,n.precision,1),o=s.times(.5);if((e=e.abs()).lte(o))return r=t?4:1,e;if((i=e.divToInt(s)).isZero())r=t?3:2;else{if((e=e.minus(i.times(s))).lte(o))return r=I(i)?t?2:3:t?4:1,e;r=I(i)?t?1:4:t?3:2}return e.minus(s).abs()}function K(n,e,t,r){var s,c,f,a,h,d,l,p,g,m=n.constructor,w=void 0!==t;if(w?(F(t,1,o),void 0===r?r=m.rounding:F(r,0,8)):(t=m.precision,r=m.rounding),n.isFinite()){for(w?(s=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):s=e,(f=(l=R(n)).indexOf(\".\"))>=0&&(l=l.replace(\".\",\"\"),(g=new m(1)).e=l.length-f,g.d=S(R(g),10,s),g.e=g.d.length),c=h=(p=S(l,10,s)).length;0==p[--h];)p.pop();if(p[0]){if(f<0?c--:((n=new m(n)).d=p,n.e=c,p=(n=Z(n,g,t,r,0,s)).d,c=n.e,d=i),f=p[t],a=s/2,d=d||void 0!==p[t+1],d=r<4?(void 0!==f||d)&&(0===r||r===(n.s<0?3:2)):f>a||f===a&&(4===r||d||6===r&&1&p[t-1]||r===(n.s<0?8:7)),p.length=t,d)for(;++p[--t]>s-1;)p[t]=0,t||(++c,p.unshift(1));for(h=p.length;!p[h-1];--h);for(f=0,l=\"\";f<h;f++)l+=u.charAt(p[f]);if(w){if(h>1)if(16==e||8==e){for(f=16==e?4:3,--h;h%f;h++)l+=\"0\";for(h=(p=S(l,s,e)).length;!p[h-1];--h);for(f=1,l=\"1.\";f<h;f++)l+=u.charAt(p[f])}else l=l.charAt(0)+\".\"+l.slice(1);l=l+(c<0?\"p\":\"p+\")+c}else if(c<0){for(;++c;)l=\"0\"+l;l=\"0.\"+l}else if(++c>h)for(c-=h;c--;)l+=\"0\";else c<h&&(l=l.slice(0,c)+\".\"+l.slice(c))}else l=w?\"0p+0\":\"0\";l=(16==e?\"0x\":2==e?\"0b\":8==e?\"0o\":\"\")+l}else l=j(n);return n.s<0?\"-\"+l:l}function Q(n,e){if(n.length>e)return n.length=e,!0}function X(n){return new this(n).abs()}function Y(n){return new this(n).acos()}function nn(n){return new this(n).acosh()}function en(n,e){return new this(n).plus(e)}function tn(n){return new this(n).asin()}function rn(n){return new this(n).asinh()}function sn(n){return new this(n).atan()}function on(n){return new this(n).atanh()}function un(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?U(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=U(this,s,1).times(.5)).s=n.s:e.s<0?(this.precision=s,this.rounding=1,i=this.atan(Z(n,e,s,1)),e=U(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(Z(n,e,s,1)):(i=U(this,s,1).times(e.s>0?.25:.75)).s=n.s:i=new this(NaN),i}function cn(n){return new this(n).cbrt()}function fn(n){return P(n=new this(n),n.e+1,2)}function an(n){if(!n||\"object\"!=typeof n)throw Error(d+\"Object expected\");var e,i,t,r=!0===n.defaults,u=[\"precision\",1,o,\"rounding\",0,8,\"toExpNeg\",-s,0,\"toExpPos\",0,s,\"maxE\",0,s,\"minE\",-s,0,\"modulo\",0,9];for(e=0;e<u.length;e+=3)if(i=u[e],r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!(m(t)===t&&t>=u[e+1]&&t<=u[e+2]))throw Error(l+i+\": \"+t);this[i]=t}if(i=\"crypto\",r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!0!==t&&!1!==t&&0!==t&&1!==t)throw Error(l+i+\": \"+t);if(t){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(g);this[i]=!0}else this[i]=!1}return this}function hn(n){return new this(n).cos()}function dn(n){return new this(n).cosh()}function ln(n,e){return new this(n).div(e)}function pn(n){return new this(n).exp()}function gn(n){return P(n=new this(n),n.e+1,3)}function mn(){var n,e,i=new this(0);for(h=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return h=!0,new this(1/0);i=e}return h=!0,i.sqrt()}function wn(n){return n instanceof e||n&&\"[object Decimal]\"===n.name||!1}function vn(n){return new this(n).ln()}function Nn(n,e){return new this(n).log(e)}function bn(n){return new this(n).log(2)}function En(n){return new this(n).log(10)}function xn(){return H(this,arguments,\"lt\")}function yn(){return H(this,arguments,\"gt\")}function Mn(n,e){return new this(n).mod(e)}function qn(n,e){return new this(n).mul(e)}function On(n,e){return new this(n).pow(e)}function Dn(n){var e,i,t,r,s=0,u=new this(1),c=[];if(void 0===n?n=this.precision:F(n,1,o),t=Math.ceil(n/y),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));s<t;)(r=e[s])>=429e7?e[s]=crypto.getRandomValues(new Uint32Array(1))[0]:c[s++]=r%1e7;else{if(!crypto.randomBytes)throw Error(g);for(e=crypto.randomBytes(t*=4);s<t;)(r=e[s]+(e[s+1]<<8)+(e[s+2]<<16)+((127&e[s+3])<<24))>=214e7?crypto.randomBytes(4).copy(e,s):(c.push(r%1e7),s+=4);s=t/4}else for(;s<t;)c[s++]=1e7*Math.random()|0;for(t=c[--s],n%=y,t&&n&&(r=w(10,y-n),c[s]=(t/r|0)*r);0===c[s];s--)c.pop();if(s<0)i=0,c=[0];else{for(i=-1;0===c[0];i-=y)c.shift();for(t=1,r=c[0];r>=10;r/=10)t++;t<y&&(i-=y-t)}return u.e=i,u.d=c,u}function Fn(n){return P(n=new this(n),n.e+1,this.rounding)}function An(n){return(n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function Sn(n){return new this(n).sin()}function Zn(n){return new this(n).sinh()}function Pn(n){return new this(n).sqrt()}function Rn(n,e){return new this(n).sub(e)}function Ln(n){return new this(n).tan()}function Tn(n){return new this(n).tanh()}function Un(n){return P(n=new this(n),n.e+1,1)}return(e=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,n instanceof s)return r.s=n.s,void(h?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d?n.d.slice():n.d));if(\"number\"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;i>=10;i/=10)e++;return void(h?e>s.maxE?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):$(r,n.toString())}if(\"string\"!==t)throw Error(l+n);return 45===(i=n.charCodeAt(0))?(n=n.slice(1),r.s=-1):(43===i&&(n=n.slice(1)),r.s=1),E.test(n)?$(r,n):W(r,n)}if(s.prototype=O,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=an,s.clone=n,s.isDecimal=wn,s.abs=X,s.acos=Y,s.acosh=nn,s.add=en,s.asin=tn,s.asinh=rn,s.atan=sn,s.atanh=on,s.atan2=un,s.cbrt=cn,s.ceil=fn,s.cos=hn,s.cosh=dn,s.div=ln,s.exp=pn,s.floor=gn,s.hypot=mn,s.ln=vn,s.log=Nn,s.log10=En,s.log2=bn,s.max=xn,s.min=yn,s.mod=Mn,s.mul=qn,s.pow=On,s.random=Dn,s.round=Fn,s.sign=An,s.sin=Sn,s.sinh=Zn,s.sqrt=Pn,s.sub=Rn,s.tan=Ln,s.tanh=Tn,s.trunc=Un,void 0===e&&(e={}),e&&!0!==e.defaults)for(r=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(a)).default=e.Decimal=e,c=new e(c),f=new e(f),\"function\"==typeof define&&define.amd?define(function(){return e}):\"undefined\"!=typeof module&&module.exports?(\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator&&(O[Symbol.for(\"nodejs.util.inspect.custom\")]=O.toString,O[Symbol.toStringTag]=\"Decimal\"),module.exports=e):(n||(n=\"undefined\"!=typeof self&&self&&self.self==self?self:window),t=n.Decimal,e.noConflict=function(){return n.Decimal=t,e},n.Decimal=e),e}(this)\r\n//    bigDec: require('decimal.js')\r\n});\r\n\r\nif((typeof module) !== 'undefined') {\r\n    module.exports = nerdamer;\r\n};","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  Object.defineProperty(subClass, \"prototype\", {\n    value: Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    }),\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}"],"names":["nerdamer","require","core","getCore","_","PARSER","N","groups","P","S","EX","FN","PL","CP","CB","keys","Utils","even","variables","format","round","Frac","isInt","Symbol","CONST_HASH","Settings","math","importFunctions","evaluate","Polynomial","symbol","variable","order","isSymbol","this","parse","isNaN","undefined","exceptions","InvalidVariableNameError","coeffs","fill","Factors","factors","length","MVTerm","coeff","terms","map","sum","image","fromArray","arr","p","fit","c1","c2","n","base","Array","t","Math","pow","i","b","q","c","sign","floor","abs","prototype","isPoly","NerdamerTypeError","text","power","absEquals","expand","group","multiplier","toDecimal","x","symbols","sub","Number","l","trim","equalsZero","equals","pop","modP","j","subtract","add","d","mod","w","divide","up_one","next","poly","max","a","dividend","arrayClone","divisor","mp","quotient","multiply","p1","l1","l2","x1","k","x2","e","isZero","clone","deg","lc","monic","gcd","Math2","QGCD","apply","diff","new_array","push","integrate","gcf","toPolynomial","ca","indexOf","fnz","parr","quad","incl_img","roots","Error","dsc","sqrt","squareFree","output","equalsNumber","y","z","toSymbol","end","str","plus","String","toString","with_order","error","s","distributeMultiplier","isComposite","isConstant","isImaginary","m","each","imaginary","tBase","collectSymbols","g","nterm","sym","value","updateCount","altVar","sameVars","groupTerms","f","egrouped","grouped","el","decompose_fn","collectFactors","getNumberSymbolics","fo","firstObject","symfunction","PARENTHESIS","obj","negate","key","preAdd","pFactor","is_constant","v","factored","Object","values","sort","factor","fname","unwrapPARENS","merge","o","isLinear","args","call","count","clean","h","lessThan","getVars","vars","term","getRevMap","rev_map","join","len","mapped","generateImage","getImg","mvterm","new_mvterm","toMapObj","filledArray","clss","arrSum","haveIntersection","some","subFunctions","subbed","previousGroup","val","tvar","inBrackets","getFunctionsSubs","subs","__","Algebra","version","proots","decp","known_roots","get_roots","rarr","powers","calcroots","concat","unshift","lowest_pow","arrayMin","lowest_symbol","toUnitMultiplier","minpower","arrayMax","isArray","last_power","slice","ValueLimitExceededError","zeroi","degreePar","Degree","zeror","QuadSD_ak1","NN","u","iPar","calcSC_ak1","DBL_EPSILON","K","qk","sdPar","dumFlag","a3","a1","a7","nextK_ak1","tFlag","qp","temp","newest_ak1","a4","a5","b1","b2","c3","c4","Quad_ak1","sr","si","lr","li","QuadIT_ak1","uu","vv","calcPar","ee","omp","relstp","ui","vi","zm","qPar","triedFlag","NZ","szr","szi","lzr","lzi","RealIT_ak1","kv","ms","pv","nm1","Fxshfr_ak1","MDP1","L2","betas","betav","oss","ots","otv","ovv","ss","ts","tss","tv","tvv","fflag","spass","stry","vpass","vtry","svk","iFlag","degPar","bnd","df","dx","ff","moduli_max","moduli_min","sc","xm","aa","bb","cc","xxx","jj","NM1","zerok","RADFAC","LB2","LN2","pt","Fxshfr_Par","LO","MIN_VALUE","cosr","cos","sinr","sin","xx","yy","MAX_VALUE","log","exp","rpSolve","img","real","num","replace","nroots","Vector","froot","guess","xn","build","Calculus","fn","Function","done","safety","r","newtonraph","sumProd","invert","wrt","contains","polyPowers","for_variable","arrayUnique","Factor","split","mix","include_negatives","ll","common","zeroes","exit","tp","allSame","n_terms","n_zeroes","div","_symbol","retval","_factor","create","_factored","quadFactor","degree","cf","root","filter","root1","root2","cubeFactor","sign_a","sign_b","isCube","m_root_a","getNth","m_root_b","arg","isSimple","greaterThan","untouched","den_array","num_array","den","dfact","nfact","Simplify","strip","getDenom","getNum","unstrip","toLinear","IMAGINARY","multiVar","all_S","all_unit","coeff_factors","coeffFactor","power_factors","powerFactor","mfactor","t_factors","trialAndError","tf_symbol","t_factor","addPower","reduce","nn","result","sqfr","allNumeric","LT","updateHash","factor_array","cnst","cfactors","ifactor","search","forEach","check","candidate","ltfactors","isubbed","nfactors","cp","ceil","lc_is_neg","cnst_is_neg","factor_found","isPrime","mSqfrFactor","reverse","can_divide","is_factor","sqdiff","remove_square","block","separated","separate","obj_array","constants","powSimp","factors2","unwrapSQRT","sorted","maxes","new_factor","divided","has_fractions","neg_numeric_factor","rem","allLinear","set","status","sg","arguments","elements","arguments2Array","appeared","splice","every","aggregate","gcd_","lcm","gcd_m","GCD","gcd_v","gcd_p","vars_a","vars_b","T","multipliers","denom","numer","prev","curr","denom_args","input","size","mask","results","total","isVariableSymbol","symbol1","symbol2","remainder","fail","symbol1_has_func","hasFunc","symbol2_has_func","parse_funcs","quot","reconvert","get_unique_max","any","idx","t_map","init_sort","is_larger","s1","s2","det","get_det","lookat","umax","is_equal","max1","max2","idx1","idx2","item1","item2","d1","d2","cterm","lead_var","sf","blv","alv","checked","tt","try_better_lead_var","fdt","fnt","nd","dividend_larger","InfiniteLoopError","shift","neg","cur","remove","line","v1","v2","convertToVector","isVector","dy","PartFrac","createTemplate","denom_factors","f_array","factors_vec","degrees","efactor","partfrac","as_array","ofactors","nterms","dterms","M","ks","template","tfactors","Matrix","fillHoles","transpose","partials","denominators","e2","sd","depth","distributeExponent","sqComplete","raw","br","sqrt_a","stop","msg","complexSimp","ac","bd","bc","ad","cd","r1","r2","i1","i2","realpart","imagpart","trigSimp","containsFunction","sym_array","tr","fnTransform","simplify","fracSimp","n1","n2","ratSimp","sqrtSimp","isSQRT","trial","simp","patternSub","patterns","has_CP","found","collect","getU","simplified","Classes","Expression","useAlgebraDiv","divideFn","calls","ans","useParserDiv","register","name","visible","numargs","updateAPI","LOG","ABS","SQRT","SIN","COS","TAN","SEC","CSC","COT","ASIN","ACOS","ATAN","ASEC","ACSC","ACOT","SINH","COSH","TANH","CSCH","SECH","COTH","ASECH","ACSCH","ACOTH","NoIntegralFound","message","hasIntegral","double_angle","transformed","hasTrig","in_trig","in_inverse_trig","toCommonDenominator","denominator","numerator","in_htrig","jacobian","eqns","arrayGetVariables","eq","gt","cMatrix","all_functions","cosAsinBtransform","cosAsinBtranform","cosAsinAtransform","cosAsinAtranform","sinAsinBtransform","trigTransform","integration_depth","max_lim_depth","index","start","isNumericSymbol","modifier","product","nth","vector","isMatrix","matrix","sp","derive","polydiff","product_rule","qdiff","x_","y_","LOG10","altVal","integration","u_substitution","try_combo","do_fn_sub","Q","g1","g2","poly_integrate","dc","decompose_arg","xp","dc2","new_val","by_parts","integrated","A","B","f1","f2","warn","partial_fraction","opt","partial_fractions","get_udv","parts","setSymbol","dv","part","trig_sub","du","integral","clearU","udv","vdu","uv","integral_vdu","vdu_s","previous","stripVar","isE","is_cyclic","original_symbol","dt","decomp","ax","b_is_positive","unwrapAbs","C","D","E","F","L1","sqrt_ax","sqa","sqb","aob","bsqi","was_factored","fx","sq","u_du","ag","decomposed","a_","b_","rd","rd2","na","parse_str","cfsymbol","unwrapped","sym1","sym2","fn1","fn2","arg1","arg2","new_sym","p1_even","p2_even","trans","bx","sym1_is_linear","pd","min","pc","f_is_linear","p2","dummy","bksub","u_transform","expanded","U","scope","U2","cosn","X","sym2_clone","sa","sb","nq","syma","symb","first","intg","DivisionByZero","defint","from","to","get_value","point","Limit","limit","num_integrate","upper","lower","interval","diverges","lim","gin","lim_sign","isInfinity","fm","gm","L","lim1","lim2","indeterminate","ft","t_symbol","den_is_zero","infinity","rewriteToLog","getSubbed","isInterval","isConvergent","_num","_den","isOne","symbol_","lim_base","lim_pow","evaluates","s_arg","pi","divergent","FACTORIAL","_lim","_symbols","fns","Fresnel","Laplace_integration_depth","findFunction","Extra","LaPlace","transform","depth_is_lower","integration_expr","inverse","s_","input_symbol","den_p","finalize","fact","factorial","completed","tf","new_num","a_has_sin","b_has_cos","a_has_cos","b_has_sin","s_terms","fc","Statistics","frequencyMap","xi","mean","median","mid","mode","freq","gVariance","variance","sampleVariance","standardDeviation","sampleStandardDeviation","zScore","stdev","Units","table","foot","meter","decimeter","module","exports","_A","_C","explode","knownVariable","range","Equation","lhs","rhs","NerdamerValueError","LHS","RHS","SOLVE_RADIUS","ROOTS_PER_SIDE","make_pi_conversions","STEP_SIZE","EPSILON","MAX_NEWTON_ITERATIONS","MAX_NON_LINEAR_TRIES","NON_LINEAR_JUMP_AT","NON_LINEAR_JUMP_SIZE","NON_LINEAR_START","NEWTON_SLICES","NEWTON_EPSILON","SOLUTION_PROXIMITY","FILTER_SOLUTIONS","MAX_SOLVE_DEPTH","ZERO_EPSILON","MAX_BISECTION_ITER","BI_SECTION_EPSILON","hasNegativeTerms","option","toLHS","eqn","removeDenom","_t","newRHS","latex","functions","solveFor","solve","setEq","checkAll","test","Solve","solutions","solution","es","solveCircle","svars","arraySum","y_points","x_points","SOLUTIONS_AS_OBJECT","solveNonLinearSystem","tries","max_tries","halfway","iters","xn1","norm","lnorm","jump_at","jump","create_subs","get","max_iter","f_eqns","J","systemSolutions","expand_result","callback","valueOf","solveSystemBySubstitution","arrayEqual","solveSystem","var_array","sol","reduced","knowns","all_zero","setVar","err","tparts","determinant","SolveError","discriminant","cubic","d_o","c_o","b_o","a_o","quartic","D0","D1","divideAndConquer","solve_for","sols","csolve","pn","pf","toPolarFormArray","getPoints","step","points","last","last_sign","rside","lside","left","right","test_side","side","num_roots","hits","isFinite","bisection","epsilon","middle","x_point","Newton","fp","maxiter","iter","x0","fx0","rewrite","sqrts","sqrtSolve","existing","known","add_to_result","has_trig","r_is_symbol","PRE_ADD_SOLUTION","PI","r_str","numvars","cfact","fractionals","correct_denom","original","expand_denominator","expand_functions","is_sqrt","min_p","corrected","inverseFunctionSolve","fkeys","getCoeffs","was_calculated","points1","points2","points3","t_points","console","expr_str","rw","neq","zero","parent","imports","Parser","bigInt","bigDec","precision","Groups","PRIMES","CUSTOM_OPERATORS","callPeekers","init_primes","exclude","suppress_errors","PARSE2NUMBER","SAFE","FUNCTION_MODULES","ALLOW_CHARS","USE_MULTICHARACTER_VARS","POWER_OPERATOR","VALIDATION_REGEX","IMPLIED_MULTIPLICATION_REGEX","ALIASES","POSITIVE_MULTIPLIERS","CACHE","SILENCE_WARNINGS","PRECISION","EXPRESSION_DECP","DEFAULT_DECP","VECTOR","DOUBLEFACTORIAL","LONG_PI","LONG_E","LOG10_LATEX","MAX_EXP","SCIENTIFIC_MAX_DECIMAL_PLACES","SCIENTIFIC_IGNORE_ZERO_EXPONENTS","nthpow","EXPRESSIONS","VARS","RESERVED","WARNINGS","ErrorObj","customError","stack","isReserved","SHOW_WARNINGS","validateName","typ","scientificToDecimal","nsign","toLowerCase","coeff_array","dec","isNumber","isFraction","isExpression","prevgroup","isSet","Set","isNegative","stringify","new_str","match","both","setFunction","params_array","body","mapped_function","params","as_obj","nround","hasOwnProperty","evenFraction","item","removeDuplicates","condition","conditionType","seen","reserveNames","indexOrKey","setting","current_setting","generatePrimes","upto","allNumbers","allConstants","isPi","ParseError","UndefinedError","OutOfFunctionDomainError","MaximumIterationsReached","ParityError","OperatorError","OutOfRangeError","DimensionError","UnexpectedTokenError","csc","sec","cot","tan","acsc","asin","asec","acos","acot","atan","erf","half","fromContinued","contd","fractions","whole","continuedFraction","absn","ni","bigpow","isInteger","nthroot","gamma","bigfactorial","times","bigLog","quick","is_int","NaN","dfactorial","LCM","ifactors","sfactor","prime","lt","rho","xf","cz","minus","sm","boxfactor","fib","integer_part","simpson","tol","maxdepth","adsimp","fa","fb","V0","state","nanEncountered","sl","V1","V2","maxDepthCount","Ci","Si","Ei","Infinity","Shi","Chi","cosh","Li","gamma_incomplete","rect","sinc","tri","dk","dk0","d0","xk","powb","dk_dec","gte","ld","same_delta","delta","decimal","useGroup","asHash","wrapCondition","asDecimal","frac","exec","negative","digits","passed","divmod","operator","Scientific","om","txt","pg","pwg","E_TO_EXP","charAt","cv","parens","primeFactors","startsWith","substr","isScientific","fromScientific","convert","simple","Fraction","quickConversion","bin","preprocessors","names","actions","Slice","Collection","Token","node","node_type","column","type","OPERATOR","operators","FUNCTION","precedence","MAX_PRECEDENCE","leftAssoc","append","getItems","pretty_print","collection","is_prefix","VARIABLE_OR_LITERAL","UNIT","KEYWORD","classes","complex","prec","re","im","sinh","removeDen","squared","tanh","sech","csch","coth","acosh","asinh","atanh","asech","acsch","acoth","hyp","phi","USE_BIG","atan2","trig","getQuadrant","dividedBy","trigh","units","action","prefix","postfix","operation","overloaded","overloadAction","overloadLeftAssoc","vectorFn","brackets","id","is_open","is_close","maps_to","SYMBOLIC_MIN_MAX","symMinMax","sigfigs","scientific","pfactor","identity","cbrt","mat","cols","rows","vec1","vec2","dot","cross","tolerance","col_index","col","rationalize","conjugate","theta","getval","aval","bval","set1","set2","union","intersection","difference","intersects","is_subset","override","which","with_what","restore","what","extend","force_call","fn_name","callfunction","allowed_args","fn_settings","num_allowed_args","is_array","min_args","max_args","num_args","error_msg","numericArgs","fmodules","fmodule","bigConvert","operator_filter_regex","ostr","RegExp","setOperator","postif","getOperator","aliasOperator","getOperators","getBrackets","Node","token","initConstants","CONSTANTS","peekers","pre_operator","post_operator","pre_function","post_function","tokenize","regex","lpos","tokens","scopes","target","open_brackets","has_space","addScope","scope_type","new_scope","goUp","get_operator_str","start_at","substring","chunkify","operator_str","_operators","ch","add_token","at","add_function","set_last_position","position","last_token_is_numeric","bracket","pair","nxt","is_operator","toRPN","prefixes","collapse","destination","next_is_operator","last_on_stack","parseRPN","rpn","substitutions","is_comma","fromSet","fn_args","ret","getter","il","element","isUnit","toHTML","indent","tab","repeat","html","tree","location","group1","group2","before","prepare_expression","toObject","expression_string","objectify","isConversion","chunkAtCommas","chunks","rem_brackets","V","retnum","retden","is_negative","setPower","qa","tw","asbig","numVal","log_sym","log_base","img_part","sIsConstant","toExponential","rank","testSQRT","toTeX","expression_or_obj","decimals","TeX","cdot","narr","next_is_array","next_is_minus","before_last","remove_redundant_powers","nobj","LaTeX","braces","expr","argSplit","new_den","getFunction","addPreprocessor","shift_cells","PreprocessorError","getPreprocessors","removePreprocessor","aIsSymbol","bIsSymbol","unit","Unit","aneg","bneg","inf","ap","bp","h1","h2","powEQ","aIsComposite","bIsComposite","PN","PNEQ","valEQ","attach","insert","shell","canIterate","bothPL","bIsMatrix","eachElement","row","dimensions","toFixed","bnum","bden","a_pow","a_multiplier","ONN","combine","bm","isSymbolP1","isSymbolP2","toEX","logV","ndiv","ddiv","ps","isMatrixB","isMatrixA","isVectorA","isVectorB","raised","aIsZero","bIsZero","nre","nim","bIsConstant","aIsConstant","bIsInt","multiplyPower","sgn","_a","_b","log_a","neg_num","nr","tn","evenr","evenp","evennp","_result","fct","testPow","isEX","IGNORE_E","comma","percent","assign","function_assign","bool2Symbol","lte","log10","LOG10E","trunc","getExpression","expression_number","asType","expression","text_","first_arg","buildFunction","Build","isPolynomial","for_symbol","otype","hasFunction","exponent","removeLeadingZeroes","removeTrailingZeroes","dot_location","leadingZeroes","wholes","copy","rounded","next_two","ed","is_neg","isFrac","m_dc","qcompare","isnegative","all","isToNth","nthPower","nthMultiplier","isSquare","mfactors","out_","in_","xt","multivariate","exclude_x","toArray","fn_group","same_pow","a_is_unit_multiplier","find","needle","nargs","isMonomial","check_all","check_symbols","retainSign","isSymbolic","isInverse","properties","keepSign","deep","power_only","is_one","isImgSymbol","keyForGroup","hash","contents","is_parens","sort_fn","expand_symbol","collected","isCombination","opts","qc","fullConversion","nparts","stripSign","cparts","parser","keep","space","LaTeXArray","rowTeX","m_array","v_array","formatFrac","p_array","greek","alpha","beta","zeta","eta","iota","kappa","lambda","mu","nu","omnikron","sigma","tau","upsilon","chi","psi","omega","Gamma","Delta","Epsilon","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega","arccos","ker","limsup","arcsin","lg","ln","Pr","sup","arctan","hom","LN","dim","liminf","inverted","formatSubscripts","t_varray","den_map","num_map","num_c","den_c","setBrackets","container","counter","laTex","combine_power","isBracketed","formatP","mn","md","vn","vd","top","bottom","glue","is_pow","square","brace","angle","filterTokens","filtered","next_token","raw_tokens","parse_next","items","lw","rl","arrayPrefill","custom","modulus","eql","toUnitVector","angleFrom","mod1","mod2","theta_val","isParallelTo","isAntiparallelTo","isPerpendicularTo","magnitude","tex","zeroMatrix","raw_values","nc","toRightTriangular","isSingular","augment","np","els","new_element","ki","imatrix","kp","inverse_elements","nel","nj","canMultiplyFromLeft","sameSize","MM","kj","toVector","newline","to_decimal","row_tex","_union","_intersection","dependencies","_rename","reformat","deps","getProperName","continued_fraction","compileDependencies","dep_string","replacements","components","getArgsDeps","arg_array","supplements","ftext","xports","ftext_complex","ftext_function","bn","alias","LOG_FNS","arrayAddSlices","slices","arr1","arr2","toNumber","indx","comboSort","combined","nb","compare","comparison","random","customType","info","_roots","sameSign","stringReplace","with_str","libExports","fndec","convertToLaTeX","convertFromLaTeX","add_on","getWarnings","setConstant","constant","getConstant","getEquation","reserved","asArray","clear","equation_number","keep_EXPRESSIONS_fixed","flush","expressions","asObject","asLaTeX","parent_obj","validVarName","varname","supported","numEquations","numExpressions","getVar","clearVars","load","loader","linker","replaceFunction","new_num_args","withOperator","htmlTree","addPeeker","removePeeker","BASE","MAX_INT","MAX_INT_ARR","smallToArray","LOG_MAX_INT","Integer","radix","parseValue","parseBase","BigInteger","isSmall","SmallInteger","isPrecise","arrayToSmall","compareAbs","createArray","truncate","l_a","l_b","carry","addAny","addSmall","a_l","b_l","borrow","subtractSmall","multiplyLong","a_i","multiplySmall","shiftLeft","multiplyKaratsuba","abcd","multiplySmallAndArray","divModSmall","divModAny","self","quotientDigit","divisorMostSignificantDigit","divMod1","xlen","highx","highy","divMod2","qSign","mSign","isBasicPrime","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","modPow","subtractAny","small","_multiplyBySmall","over","isPositive","isOdd","compareTo","notEquals","greater","greaterOrEquals","geq","lesserOrEquals","leq","strict","bits","bitLength","logN","isProbablePrime","iterations","randBetween","modInv","lastT","lastR","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","toJSNumber","shiftRight","remQuo","and","or","xor","LOBMASK_I","roughLOB","integerLogarithm","tmp","absBase","charCodeAt","parseInt","charCode","parseBaseFromArray","digit","toBase","out","toBaseString","parseStringValue","decimalPlace","parseNumberValue","toJSON","minusOne","isInstance","low","restricted","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","O","absoluteValue","constructor","comparedTo","cmp","cosine","G","cubeRoot","Z","decimalPlaces","dp","dividedToIntegerBy","divToInt","greaterThanOrEqualTo","hyperbolicCosine","hyperbolicSine","hyperbolicTangent","inverseCosine","isNeg","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","inverseSine","inverseTangent","isPos","lessThanOrEqualTo","logarithm","naturalExponential","naturalLogarithm","negated","sine","squareRoot","tangent","mul","toBinary","toDecimalPlaces","toDP","R","toFraction","toHexadecimal","toHex","toNearest","toOctal","toPower","LN10","toPrecision","toSignificantDigits","toSD","truncated","I","H","$","W","Y","en","rn","sn","on","un","cn","an","defaults","getRandomValues","randomBytes","hn","dn","gn","wn","Nn","En","yn","Mn","qn","On","Dn","Uint32Array","Fn","An","Sn","Zn","Pn","Rn","Ln","Tn","Un","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","isDecimal","hypot","log2","default","Decimal","define","_createForOfIteratorHelper","allowArrayLike","it","iterator","_e","TypeError","normalCompletion","didErr","_e2","_typeof","_possibleConstructorReturn","assertThisInitialized","_createSuper","Derived","hasNativeReflectConstruct","isNativeReflectConstruct","Super","getPrototypeOf","NewTarget","Reflect","construct","_getPrototypeOf","setPrototypeOf","__proto__","_inherits","subClass","superClass","defineProperty","writable","configurable","_isNativeReflectConstruct","sham","Proxy","Boolean","_construct","Parent","Class","instance","bind","_wrapNativeSuper","_cache","Map","has","Wrapper","enumerable"],"sourceRoot":""}