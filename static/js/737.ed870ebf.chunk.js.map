{"version":3,"file":"static/js/737.ed870ebf.chunk.js","mappings":"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","sources":["views/input-boxes/SimpleParametersList.jsx","views/plotter/GraphBox.jsx","views/plotter/GraphMenu.jsx","views/topics/chapter06/nyquist-plot/parameters.jsx","views/topics/chapter06/nyquist-plot/index.jsx","views/ui-component/progressbar/ProgressBar.jsx"],"sourcesContent":["import { Grid, InputAdornment, TextField } from \"@mui/material\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst SimpleParametersList = ({ parameters, setters, labels, units }) => {\r\n    return (\r\n        <Fragment>\r\n            {parameters instanceof Array &&\r\n                parameters.map((param, i) => (\r\n                    <Grid md={12} sm={4} xs={6} item>\r\n                        <TextField\r\n                            onChange={(e) => setters[i](e.target.value)}\r\n                            value={param}\r\n                            sx={{ width: \"100%\" }}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"left\">\r\n                                        <MathJax>{labels[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: units[i] && (\r\n                                    <InputAdornment position=\"right\">\r\n                                        <MathJax>{units[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SimpleParametersList;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst GraphBox = ({ traces, title, width, height = 500, logX }) => {\r\n    /*const temp_layout = {\r\n        xaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n        yaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n    };*/\r\n\r\n    return (\r\n        <Plot \r\n            style={{ textAlign: \"center\" }}\r\n            //id=\"graphBox\"\r\n            data={traces}\r\n            layout={{\r\n                // width: 1000,\r\n                // autosize: true,\r\n                margin: {\r\n                    t: 30, //top margin\r\n                    l: 30, //left margin\r\n                    r: 20, //right margin\r\n                    b: 30, //bottom margin\r\n                },\r\n                xaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true,\r\n                    type: !logX ? \"dec\" : \"log\"\r\n                },\r\n                yaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true\r\n\r\n                },\r\n                height,\r\n                title,\r\n                // hoverlabel: { bgcolor: \"#FFF\" },\r\n                hoverlabel: {align:'auto', boxmode: 'overlay', font:{color:'#000000FF'}},\r\n                legend: {orientation: 'h'}//, y: -0.3},\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GraphBox;\r\n","import PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}\r\n                {capture && <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>}\r\n\r\n                {reset && <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>}\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import { Grid, Button } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport ProgressBar from \"views/ui-component/progressbar/ProgressBar\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$Num = [$$\",\r\n    \"$$Den = [$$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n    \"$$N = $$\"\r\n];\r\nconst parameterUnits = [\"$$]$$\", \"$$]$$\", \"$$Hz$$\", \"$$Hz$$\", null];\r\n\r\nconst NyquistPlotParameters = ({\r\n    rawNumerator,\r\n    rawDenominator,\r\n    $rawNumerator,\r\n    $rawDenominator,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    phaseInRadianScale,\r\n    setPhaseInRadianScale,\r\n    N,\r\n    $N,\r\n    responseTime,\r\n}) => {\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[rawNumerator, rawDenominator, w_min, w_max, N]}\r\n                    setters={[$rawNumerator, $rawDenominator, $w_min, $w_max, $N]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n                <Grid xs={12} style={{paddingLeft: '3%'}} container>\r\n                    <Grid xs={6} sx={{ p: 1 }}  item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(false)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                !phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            درجه\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(\"rad\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            رادیان\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid xs={12} sx={{ mt: 1 }} item>\r\n                    <ProgressBar background=\"lightcoral\" id=\"precvious_plots_progressbar\" />\r\n                </Grid>\r\n                <Grid xs={12} sx={{ mt: 1 }} item>\r\n                    <ProgressBar id=\"nyquist_progressbar\" />\r\n                </Grid>\r\n                {responseTime && (\r\n                    <Grid xs={12} sx={{ mt: 1 }} item>\r\n                        <p style={{ textAlign: \"center\", color: \"coral\" }}>\r\n                            مدت زمان عملیات: {responseTime}\r\n                        </p>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default NyquistPlotParameters;\r\n","// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"views/plotter/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"views/plotter/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { makeProgress } from \"toolshed\";\r\nimport NyquistPlotParameters from \"./parameters\";\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\n\r\nconst makeTrace = (x, y, thickness, legend, _3d, mode = \"lines\") => {\r\n    return {\r\n        x,\r\n        y,\r\n        z: _3d ? Array(x.length).fill(0) : null,\r\n        line: {\r\n            // color:'rgb(17, 157, 255)'\r\n            width: thickness,\r\n        },\r\n        type: \"scatter\" + (_3d ? \"3d\" : \"\"),\r\n        mode,\r\n        name: `$$${legend}$$`,\r\n    };\r\n};\r\n\r\nlet currentRawNum = \"\",\r\n    currentRawDen = \"\";\r\nconst NyquistPlot = () => {\r\n    const [rawNumerator, $rawNumerator] = useState(\"1\");\r\n    const [rawDenominator, $rawDenominator] = useState(\"1 1\");\r\n    const [fraction, $fraction] = useState([[1], [1, 1]]);\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(-10);\r\n    const [w_max, $w_max] = useState(10);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n    const [responseTime, setResponseTime] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n\r\n        if (capturedSystems.findIndex((sys) => H_s.equals(sys.H)) === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                H_s,\r\n                thickness,\r\n                legend:\r\n                    symbols.out + \"_{\" + (systems.length + 1).toString() + \"}\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const currentPlotProgressBarElement = document.getElementById(\r\n                        \"nyquist_progressbar\"\r\n                    ),\r\n                    previousPlotsProgressBarElement = document.getElementById(\r\n                        \"precvious_plots_progressbar\"\r\n                    );\r\n                const h_s = new TransferFunction(fraction[0], fraction[1]);\r\n                // if (!h_s.equals(H_s))\r\n                {\r\n                    $H_s(h_s);\r\n                    $response(\"$$\" + h_s.label(\"H\") + \"$$\");\r\n                    setResponseTime(\"درحال رسم\");\r\n                    // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n                    // so that the traces will be loaded with new conditions\r\n                    let repeatedSystem = false;\r\n                    const startTime = new Date();\r\n                    const all = Array(systems.length);\r\n                    for (let i = 0; i < systems.length; i++) {\r\n                        await makeProgress(\r\n                            previousPlotsProgressBarElement,\r\n                            (100 * i) / systems.length\r\n                        );\r\n                        const [x, y] = await calculus.complexPointify(\r\n                            systems[i].H_s.nyquist,\r\n                            +w_min,\r\n                            +w_max,\r\n                            +N\r\n                        );\r\n                        if (h_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n                        all[i] = makeTrace(\r\n                            x,\r\n                            y,\r\n                            systems[i].thickness,\r\n                            systems[i].legend,\r\n                            is3DPlotEnabled,\r\n                            \"lines\"\r\n                        );\r\n                    }\r\n                    if (all.length)\r\n                        await makeProgress(\r\n                            previousPlotsProgressBarElement,\r\n                            100\r\n                        );\r\n\r\n                    if (!repeatedSystem) {\r\n                        // if current system isnt in traces list => add it temperory to plot\r\n\r\n                        let [x, y] = await calculus.complexPointify(\r\n                            h_s.nyquist,\r\n                            +w_min,\r\n                            +w_max,\r\n                            +N,\r\n                            currentPlotProgressBarElement\r\n                        );\r\n                        const newsys = makeTrace(\r\n                            x,\r\n                            y,\r\n                            thickness,\r\n                            `${symbols.out}(${symbols.in})`,\r\n                            is3DPlotEnabled,\r\n                            \"lines\"\r\n                        );\r\n                        all.push(newsys);\r\n                        const endTime = new Date();\r\n                        setResponseTime(\r\n                            (+endTime - +startTime) / 1000 + \" ثانیه\"\r\n                        );\r\n                        await makeProgress(currentPlotProgressBarElement, 100);\r\n                    }\r\n\r\n                    $traces(all);\r\n                }\r\n            } catch (ex) {\r\n                console.log(ex);\r\n            }\r\n        })();\r\n    }, [fraction, w_min, w_max, is3DPlotEnabled, thickness, systems, N]);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            rawNumerator.trim() !== currentRawNum ||\r\n            rawDenominator.trim() !== currentRawDen\r\n        ) {\r\n            const num = calculus.stringToArray(rawNumerator),\r\n                den = calculus.stringToArray(rawDenominator);\r\n            currentRawDen = rawDenominator;\r\n            currentRawNum = rawNumerator;\r\n            $fraction([num, den]);\r\n        }\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">نمودار نایکوئیست</h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <NyquistPlotParameters\r\n                                    rawNumerator={rawNumerator}\r\n                                    rawDenominator={rawDenominator}\r\n                                    $rawNumerator={$rawNumerator}\r\n                                    $rawDenominator={$rawDenominator}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                    responseTime={responseTime}\r\n                                    N={N}\r\n                                    $N={$N}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"پاسخ فرکانسی\"\r\n                                            traces={traces}\r\n                                        />\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default NyquistPlot;\r\n","const ProgressBar = ({\r\n    id,\r\n    color = \"white\",\r\n    background = \"lightgreen\",\r\n    borderRadius = \"10px\",\r\n}) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"0%\",\r\n                textAlign: \"right\",\r\n                background,\r\n                color,\r\n                borderRadius,\r\n                padding: \"1%\",\r\n            }}\r\n            id={id}\r\n        ></div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;\r\n"],"names":["parameters","setters","labels","units","Fragment","Array","map","param","i","md","sm","xs","item","onChange","e","target","value","sx","width","InputProps","startAdornment","position","endAdornment","traces","title","height","logX","style","textAlign","data","layout","margin","t","l","r","b","xaxis","rangemode","zeroline","type","yaxis","hoverlabel","align","boxmode","font","color","legend","orientation","capture","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","direction","container","component","onClick","spacing","mt","alignItems","parameterFormulas","parameterUnits","rawNumerator","rawDenominator","$rawNumerator","$rawDenominator","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","N","$N","responseTime","SubCard","darkBorder","Grid","gridSpacing","SimpleParametersList","paddingLeft","p","Button","textTransform","variant","ProgressBar","background","id","symbols","makeTrace","x","y","_3d","mode","z","length","fill","line","name","currentRawNum","currentRawDen","fraction","$fraction","H_s","$H_s","systems","$systems","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","setResponseTime","currentPlotProgressBarElement","document","getElementById","previousPlotsProgressBarElement","h_s","TransferFunction","label","repeatedSystem","startTime","Date","all","makeProgress","calculus","nyquist","equals","newsys","push","endTime","console","log","trim","num","den","MainCard","className","sys","index","formula","fontSize","MathJax","marginTop","GraphMenu","capturedSystems","findIndex","H","toString","changes","lg","GraphBox","borderRadius","padding"],"sourceRoot":""}