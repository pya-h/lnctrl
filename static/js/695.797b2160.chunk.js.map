{"version":3,"file":"static/js/695.797b2160.chunk.js","mappings":"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","sources":["math/algebra/complex.js","math/algebra/functions/exp.js","math/algebra/functions/fraction.js","math/algebra/functions/poly.js","math/input-signals/signals.js","math/solvers/equation.js","math/solvers/formula.js","math/algebra/functions/transfer.js","math/algebra/functions/trigonometric.js","errors/algebra/NotScalarError.js","math/algebra/index.js","math/input-signals/index.js"],"sourcesContent":["import Algebra from \".\";\r\nimport { round, isDigit } from \"../calculus\";\r\n\r\nclass Complex extends Algebra {\r\n    constructor(preal, pimage = 0, params = {}) {\r\n        super(preal, { symbol: \"j\", type: \"complex\", b: pimage, ...params });\r\n    }\r\n    static ToCouples = (arrComplex) => {\r\n        const n = arrComplex.length;\r\n        if (n >= 1) {\r\n            const reals = Array(n).fill(0),\r\n                imaginaries = Array(n).fill(0);\r\n            for (let i = 0; i < n; i++) {\r\n                if (arrComplex[i] instanceof Complex) {\r\n                    reals[i] = arrComplex[i].real();\r\n                    imaginaries[i] = arrComplex[i].imaginary();\r\n                } else\r\n                    reals[i] = arrComplex[i];\r\n            }\r\n            return [reals, imaginaries];\r\n        }\r\n        return [];\r\n    }\r\n    hasMultiTerms = () =>\r\n        this.plus || (this.a.toString() !== \"0\" && this.b.toString() !== \"0\");\r\n\r\n    toString = (parenthesis = false, showJ1 = false) => {\r\n        if (this.isZero())\r\n            return \"0\";\r\n        const rl = this.a;\r\n        let formula = parenthesis && this.hasMultiTerms() ? \"(\" : \"\";\r\n        if (rl !== 0)\r\n            formula +=\r\n            rl instanceof Algebra ?\r\n            rl.toString(rl.hasMultiTerms()) :\r\n            round(rl);\r\n        let im = this.b;\r\n        if (im !== 0) {\r\n            //if (im < 0 || (im instanceof Algebra)) { im = im.negation()\r\n            if (im < 0) {\r\n                im *= -1;\r\n                formula += \" - \";\r\n            } else if (im instanceof Algebra && im.getA() < 0) {\r\n                im.setA(-im.getA());\r\n                formula += \" - \";\r\n            } else if (rl !== 0) formula += \" + \";\r\n\r\n            formula += this.symbol;\r\n            if (im !== 1 || showJ1)\r\n                formula +=\r\n                im instanceof Algebra ?\r\n                im.toString(im.hasMultiTerms()) :\r\n                round(im);\r\n        }\r\n        if (this.plus) formula += this.join(); // if there's a next term: casscade toString() calls\r\n\r\n        return parenthesis ? formula + \")\" : formula;\r\n    }; // a + jb\r\n\r\n    real = () => this.a;\r\n    imaginary = () => this.b;\r\n\r\n    copy = (linkPrevious = false) =>\r\n        new Complex(this.a, this.b, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    conjugate = () =>\r\n        new Complex(\r\n            this.a,\r\n            this.b instanceof Algebra ? this.b.negation() : -this.b\r\n        );\r\n\r\n    negation = () =>\r\n        new Complex(\r\n            this.a instanceof Algebra ? this.a.negation() : -this.a,\r\n            this.b instanceof Algebra ? this.b.negation() : -this.b\r\n        );\r\n\r\n    magnitude$2 = () => this.a ** 2 + this.b ** 2;\r\n\r\n    magnitude = () => (this.a ** 2 + this.b ** 2) ** 0.5;\r\n\r\n    phase = () => {\r\n        const definiteA = +this.a,\r\n            definiteB = +this.b;\r\n        if (this.a === definiteA && this.b === definiteB)\r\n            return Math.atan2(definiteB, definiteA);\r\n        if (this.b instanceof Algebra)\r\n            return t => Math.atan2(this.b.$(t), (this.a instanceof Algebra ? this.a.$(t) : definiteA))\r\n        if (this.a instanceof Algebra)\r\n            return t => Math.atan2(definiteB, this.a.$(t));\r\n        return NaN;\r\n    }\r\n    isReal = () => this.b === 0;\r\n\r\n    hasSameTypeWith = (x) =>\r\n        (this.isReal() && x.isReal()) || (!this.isReal() && !x.isReal()); // both full imaginray or both real\r\n    realify = () => new Complex(this.a, 0); // return a simple real value in Complex object format (for methods that only accept Complex values)\r\n\r\n    add = (operand) => {\r\n        let Re = null,\r\n            Im = null;\r\n        if (operand instanceof Complex) {\r\n            if (this.a instanceof Algebra) Re = this.a.add(operand.real());\r\n            else if (operand.real() instanceof Algebra)\r\n                Re = operand.real().add(this.a);\r\n            else Re = this.a + operand.real();\r\n\r\n            if (this.b instanceof Algebra) Im = this.b.add(operand.imaginary());\r\n            else if (operand.imaginary() instanceof Algebra)\r\n                Im = operand.imaginary().add(this.b);\r\n            else Im = this.b + operand.imaginary();\r\n        } else {\r\n            if (this.a instanceof Algebra) Re = this.a.add(operand);\r\n            else if (operand instanceof Algebra) Re = operand.add(this.a);\r\n            else Re = this.a + operand;\r\n\r\n            Im = this.b;\r\n        }\r\n        return new Complex(Re, Im);\r\n    };\r\n\r\n    substract = (operand) => this.add(operand.negation());\r\n\r\n    equals = (operand) => {\r\n        if (operand instanceof Complex) {\r\n            // two complex number are equal to eachother if both thier real parts are the same, and their imaginary parts are the same\r\n            let realPartsEqual = false;\r\n            if (this.a instanceof Algebra)\r\n                realPartsEqual = this.a.equals(operand.real());\r\n            else if (operand.real() instanceof Algebra)\r\n                realPartsEqual = operand.real().equals(this.a);\r\n            else realPartsEqual = this.a === operand.real();\r\n            if (!realPartsEqual) return false;\r\n\r\n            if (this.b instanceof Algebra)\r\n                return this.b.equals(operand.imaginary());\r\n            else if (operand.imaginary() instanceof Algebra)\r\n                return operand.imaginary().equals(this.b);\r\n            return this.b === operand.imaginary();\r\n        }\r\n\r\n        // if operand is not a complex number then the only way it can be equal with this object of Complex,\r\n        // is for this object to have a zero imaginary part:\r\n        return (\r\n            this.isReal() &&\r\n            (operand instanceof Algebra ?\r\n                operand.equals(this.a) :\r\n                operand === this.a)\r\n        );\r\n    };\r\n\r\n    isConjugateWith = (operand) => this.conjugate().equals(operand);\r\n    multiply = (operand) => {\r\n        let Re = [],\r\n            Im = [];\r\n        if (operand instanceof Complex) {\r\n            // first term\r\n            if (this.a instanceof Algebra) {\r\n                Re.push(this.a.multiply(operand.real()));\r\n                Im.push(this.a.multiply(operand.imaginary()));\r\n            } else {\r\n                Re.push(\r\n                    operand.a instanceof Algebra ?\r\n                    operand.a.multiply(this.a) :\r\n                    operand.a * this.a\r\n                );\r\n\r\n                Im.push(\r\n                    operand.b instanceof Algebra ?\r\n                    operand.b.multiply(this.a) :\r\n                    this.a * operand.b\r\n                );\r\n            }\r\n\r\n            // second term\r\n            if (this.b instanceof Algebra) {\r\n                Re.push(this.b.multiply(operand.imaginary()));\r\n                Im.push(this.b.multiply(operand.real()));\r\n            } else {\r\n                Re.push(\r\n                    operand.b instanceof Algebra ?\r\n                    operand.b.multiply(this.b) :\r\n                    operand.b * this.b\r\n                );\r\n\r\n                Im.push(\r\n                    operand.a instanceof Algebra ?\r\n                    operand.a.multiply(this.b) :\r\n                    this.b * operand.a\r\n                );\r\n            }\r\n            return new Complex(Re[0] - Re[1], Im[0] + Im[1]);\r\n        } else {\r\n            Re =\r\n                this.a instanceof Algebra ?\r\n                this.a.multiply(operand) :\r\n                operand instanceof Algebra ?\r\n                operand.multiply(this.a) :\r\n                this.a * operand;\r\n\r\n            Im =\r\n                this.b instanceof Algebra ?\r\n                this.b.multiply(operand) :\r\n                operand instanceof Algebra ?\r\n                operand.multiply(this.b) :\r\n                this.b * operand;\r\n\r\n        }\r\n        return new Complex(Re, Im);\r\n    };\r\n\r\n    devide = (denominator) => {\r\n        if (denominator instanceof Complex) {\r\n            const result = this.multiply(denominator.conjugate()).devide(\r\n                denominator.magnitude$2()\r\n            );\r\n            // CHECK THIS\r\n            if (isNaN(result.real()))\r\n                result.setA(0);\r\n            if (isNaN(result.imaginary()))\r\n                result.setB(0);\r\n            return result;\r\n        } else if (denominator instanceof Algebra) {\r\n            // USE super().devide ?\r\n            return this.copy(); // for now to avoid craches\r\n        } else return this.multiply(1 / denominator); // number\r\n    };\r\n\r\n    raiseTo = (power) => {\r\n        let result = this.copy(true);\r\n        // for now power must be integr\r\n        if (Math.floor(power) === power)\r\n            for (let i = 1; i < power; i++) {\r\n                result = result.multiply(this);\r\n            }\r\n\r\n        return result;\r\n    };\r\n\r\n    devideInverse = (k) =>\r\n        (k instanceof Algebra ? k : new Complex(k, 0)).devide(this);\r\n\r\n    static extract = (strNumber) => {\r\n        // extract a string to a complex object\r\n\r\n        strNumber = strNumber.replace(/\\s/g, \"\");\r\n        let i = strNumber[0] === \"-\" || strNumber[0] === \"+\" ? 1 : 0;\r\n        let real = 0;\r\n        if (strNumber[i] !== \"j\") {\r\n            for (; i < strNumber.length && isDigit(strNumber[i]); i++);\r\n            real = Number(strNumber.slice(0, i) || 0);\r\n        }\r\n\r\n        let sign = 1;\r\n        for (; i < strNumber.length &&\r\n            (strNumber[i] === \"j\" ||\r\n                strNumber[i] === \"+\" ||\r\n                strNumber[i] === \"-\"); i++\r\n        )\r\n            if (strNumber[i] === \"-\") sign = -1;\r\n\r\n        const img = Number(strNumber.slice(i, strNumber.length) || 0);\r\n        return new Complex(real, sign * img);\r\n    };\r\n\r\n    isZero = () => this.a === 0 && this.b === 0;\r\n\r\n    static MultiplyFactors = (factors, s) => {\r\n        // list of factors (usually roots) multiply at a certain point\r\n        // (s + f1) * (s + f2) * ... * (s + fn)\r\n        if(!(s instanceof Complex))\r\n            s = new Complex(s, 0);\r\n        let result = new Complex(1, 0);\r\n        for(const factor of factors){\r\n            let term = s.substract(factor.value);\r\n            if(factor.order > 1)\r\n                term = term.raiseTo(factor.order);\r\n            result = result.multiply(term);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    actual = () => this.isReal() ? this.real() : this;\r\n}\r\n\r\nexport default Complex;","import Algebra from \"math/algebra\";\r\nimport Complex from \"math/algebra//complex\";\r\nimport { Cos, Sin } from \"./trigonometric\";\r\n\r\nexport default class Exp extends Algebra {\r\n    constructor(a, b, symbol = \"t\", params = {}) {\r\n        // ae^bt\r\n        super(a, { symbol, type: \"exp\", b, ...params });\r\n    }\r\n\r\n    copy = (linkPrevious = false) =>\r\n        new Exp(this.a, this.b, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    toSin = () => {\r\n        const exp = this.copy();\r\n        if (exp.type === \"exp\" && exp.b instanceof Complex) {\r\n            if (exp.b instanceof Complex && exp.b.real() === 0) {\r\n                const cos = new Cos(exp.a, exp.b.imaginary());\r\n                const sin = new Sin(exp.a, exp.b.imaginary());\r\n                return new Complex(cos, sin);\r\n            }\r\n        }\r\n        return exp; // if doesnt math the condition then just return exponential function itself\r\n    };\r\n\r\n    amplitude = (t) => {\r\n        // NOT SURE\r\n        // if (this.b instanceof Complex || t instanceof Complex) {\r\n        //     if (this.a === +this.a) return this.a;\r\n        //     else if (this.a instanceof Algebra && this.symbol === this.a.symbol)\r\n        //         return this.a.$(t);\r\n        // } else return this.valueAt(t);\r\n    };\r\n    phase = (w) => {\r\n        const jw = new Complex(0, w);\r\n        let pb = +this.b;\r\n        if(this.b === pb)\r\n            return pb * w;\r\n        if(this.b instanceof Algebra){\r\n            pb = this.b.$(jw);\r\n            return jw.multiply(pb).imaginary();\r\n        }\r\n        \r\n    };\r\n    valueAt = (t) => {\r\n        const numericT = +t;\r\n        if (numericT === t) {\r\n            const a = Algebra.valueOf(this.a, numericT),\r\n                b = Algebra.valueOf(this.b, numericT);\r\n            return a * Math.exp(b * numericT);\r\n        } else if (t instanceof Complex) {\r\n            if (!t.real()) {\r\n                return new Exp(\r\n                    this.a,\r\n                    new Complex(0, this.b * t.imaginary()),\r\n                    this.symbol\r\n                ).toSin();\r\n            } else if (t.imaginary()) {\r\n                // edit this\r\n                return (\r\n                    new Exp(this.a, this.b, this.symbol).valueAt(t.real()) *\r\n                    new Exp(\r\n                        1,\r\n                        new Complex(0, this.b * t.imaginary()),\r\n                        this.symbol\r\n                    ).toSin()\r\n                );\r\n            }\r\n            // t is real\r\n            else return this.valueAt(t.real());\r\n        }\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport Poly from \"./poly\";\r\nimport TransferFunction from \"./transfer\";\r\n\r\nexport default class Fraction extends Algebra {\r\n    constructor(num, den = [1], symbol = \"t\", params = {}) {\r\n        // ke^ct\r\n        if (!(num instanceof Algebra)) {\r\n            if (!(num instanceof Array)) num = [num];\r\n            // this.a\r\n            else if (num.length === 0) num = [0];\r\n        }\r\n        if (!(den instanceof Algebra)) {\r\n            if (!(den instanceof Array)) den = [den];\r\n            // this.b\r\n            else if (den.length === 0) den = [1];\r\n        }\r\n        super(num, { symbol, type: \"frac\", b: den, ...params });\r\n    }\r\n\r\n    copy = (linkPrevious = false) =>\r\n        new Fraction(this.a, this.b, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    lim = () => {\r\n        // for all fractions with all kind of numerator and denominator\r\n    };\r\n\r\n    numerator = () =>\r\n        this.a instanceof Algebra\r\n            ? this.a.copy(true)\r\n            : new Poly(this.a, this.symbol);\r\n    denominator = () =>\r\n        this.b instanceof Algebra\r\n            ? this.b.copy(true)\r\n            : new Poly(this.b, this.symbol);\r\n\r\n    setNumerator = (num) => {\r\n        if (!(num instanceof Algebra)) {\r\n            if (!(num instanceof Array)) num = [num];\r\n            // this.a\r\n            else if (num.length === 0) num = [0];\r\n        }\r\n        return this.setA(num);\r\n    };\r\n\r\n    setDenominator = (den) => {\r\n        if (!(den instanceof Algebra)) {\r\n            if (!(den instanceof Array)) den = [den];\r\n            // this.b\r\n            else if (den.length === 0) den = [1];\r\n        }\r\n        return this.setB(den);\r\n    };\r\n    valueAt = (t) => {\r\n        const num = this.numerator().$(t);\r\n        const den = this.denominator().$(t);\r\n\r\n        if (num instanceof Algebra) return num.devide(den);\r\n        if (den instanceof Algebra) return den.devideInverse(num);\r\n        if (den) return num / den;\r\n        // THROW zero denominator ERROR\r\n        return undefined;\r\n    };\r\n\r\n    multiply = (operand) => {\r\n        let y = this.copy(true);\r\n        if (operand instanceof Fraction) {\r\n            const num = this.numerator().multiply(operand.numerator()),\r\n                den = this.denominator().multiply(operand.denominator());\r\n            y = num.devide(den);\r\n        } else {\r\n            const num = this.numerator().multiply(operand.numerator());\r\n            y = num.devide(this.denominator());\r\n        }\r\n        if (this.plus) y.plus = this.plus.multiply(operand);\r\n        return y;\r\n    };\r\n    toFormula = () =>\r\n        \"(\" +\r\n        this.numerator().toFormula() +\r\n        \")/(\" +\r\n        this.denominator().toFormula() +\r\n        \")\";\r\n\r\n    toTransferFunction = () => new TransferFunction(this.getA(), this.getB());\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport Complex from \"../complex\";\r\nimport Fraction from \"./fraction\";\r\n\r\nexport default class Poly extends Algebra {\r\n    static atn = (a, n, symbol = \"t\") => {\r\n        const aArray = Array(n + 1).fill(0);\r\n        aArray[0] = a;\r\n        return new Poly(aArray, symbol);\r\n    };\r\n    constructor(a, symbol = \"t\", params = {}) {\r\n        // ke^ct\r\n        super(a, { symbol, type: \"poly\", ...params });\r\n    }\r\n\r\n    copy = (linkPrevious = false) =>\r\n        new Poly(this.a, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    degree = () => this.a.length - 1;\r\n\r\n    valueAt = (t) => {\r\n        if (typeof t === \"number\") return Algebra.polynomialValueAt(this.a, t);\r\n        else if (t instanceof Complex) {\r\n            const n = this.a.length - 1;\r\n            if (n >= 0) {\r\n                let powerTerm = 1,\r\n                    result =\r\n                        this.a[n] instanceof Complex\r\n                            ? this.a[n].copy()\r\n                            : new Complex(this.a[n], 0);\r\n                for (let i = n - 1; i >= 0; i--) {\r\n                    powerTerm = t.multiply(powerTerm);\r\n                    result = result.add(powerTerm.multiply(this.a[i]));\r\n                }\r\n                return result;\r\n            }\r\n            return 0;\r\n        }\r\n        return NaN;\r\n    };\r\n\r\n    static Symbolic = (\r\n        degree,\r\n        symbol = \"t\",\r\n        halfTermsVisible = 2,\r\n        coef = \"a\",\r\n        inline = false\r\n    ) => {\r\n        let res = inline ? \"\" : \"$$\";\r\n        if (degree === \"n\") {\r\n            res += `${coef}_n ${symbol}^n + `;\r\n            for (let i = 1; i < halfTermsVisible; i++)\r\n                res += `${coef}_{n - ${i}}${symbol}^{n - ${i}} + `;\r\n            res += \" ... \";\r\n            for (let i = halfTermsVisible - 1; i > 0; i--)\r\n                res += ` + ${coef}_{${i}}${symbol}^{${i}}`;\r\n            res += ` + ${coef}_0`;\r\n        } else if (typeof degree === \"number\") {\r\n            for (; degree >= 0; degree--) {\r\n                res += `${coef}_{${degree}}`;\r\n                if (degree > 0) res += `${symbol}^{${degree}} + `;\r\n            }\r\n        }\r\n        return res + (inline ? \"\" : \" $$\");\r\n    };\r\n    derivative = (against = this.symbol) => {\r\n        const result = this.copy(true);\r\n        if (against === this.symbol) {\r\n            if (!result.dot) {\r\n                const n = result.a.length - 1;\r\n                const da = Array(n).fill(0);\r\n                for (let i = n; i >= 1; i--) da[n - i] = i * result.a[n - i];\r\n                result.a = [...da];\r\n            }\r\n            if (result.plus) result.plus = result.plus.derivative();\r\n        }\r\n        return result;\r\n    };\r\n\r\n    expression = () => {\r\n        if (this.a instanceof Array) {\r\n            const n = this.a.length - 1;\r\n            if (\r\n                !n ||\r\n                !this.a.slice(0, n).filter((ci) => ci.toString() !== \"0\").length\r\n            )\r\n                return this.a[n].toString();\r\n            return this.a\r\n                .map((a_i, i) =>\r\n                    a_i\r\n                        ? Algebra.coefy(a_i, i, n) +\r\n                          (i < n\r\n                              ? this.symbol +\r\n                                (i < n - 1 ? \"^\" + (n - i).toString() : \"\")\r\n                              : \"\")\r\n                        : \"\"\r\n                )\r\n                .join(\"\"); // joins all the coefficients, symbols, etc all together as for polynomal functions\r\n        }\r\n        return this.a.toString();\r\n    };\r\n\r\n    devide = (operand) => {\r\n        if (operand instanceof Poly && this.symbol === operand.symbol) {\r\n            return new Fraction(this.getA(), operand.getA(), this.symbol);\r\n        }\r\n        if (operand === +operand) return this.multiply(1 / Number(operand));\r\n        return this.copy();\r\n        // is it true??\r\n        // return super.devide();\r\n    };\r\n\r\n    // edit this function to remove unnecessary white spaces\r\n    toFormula = () => {\r\n        if (this.a instanceof Array) {\r\n            const n = this.a.length - 1;\r\n            if (\r\n                !n ||\r\n                !this.a.slice(0, n).filter((ci) => ci.toString() !== \"0\").length\r\n            )\r\n                return this.a[n].toString();\r\n            return this.a\r\n                .map((a_i, i) =>\r\n                    a_i\r\n                        ? Algebra.coefy(a_i, i, n) +\r\n                          (i < n\r\n                              ? this.symbol +\r\n                                (i < n - 1 ? \"^\" + (n - i).toString() : \"\")\r\n                              : \"\")\r\n                        : \"\"\r\n                )\r\n                .join(\"\"); // joins all the coefficients, symbols, etc all together as for polynomal functions\r\n        }\r\n        return this.a.toString();\r\n    };\r\n}\r\n","import StandardInputSignal from \"math/input-signals\";\r\nimport Poly from \"math/algebra/functions/poly\";\r\n\r\nexport class Step extends StandardInputSignal {\r\n    constructor(amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"u\", symbol); // \\\\delta is the equivalent of small delta in mathjax\r\n    }\r\n    copy = () => new Step(this.amp, this.symbol);\r\n\r\n    $ = (t) => (t >= 0) * this.amp;\r\n}\r\n\r\nexport class Puls extends StandardInputSignal {\r\n    constructor(Delta = 1, amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"\\\\sqcap\", symbol);\r\n        this.Delta = Delta;\r\n    }\r\n    copy = () => new Puls(this.Delta, this.amp, this.symbol);\r\n    $ = (t) => (t >= 0 && t <= this.Delta) * this.amp / this.Delta;\r\n}\r\n\r\nexport class Impact extends StandardInputSignal {\r\n    constructor(amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"\\\\delta\", symbol); // \\\\delta is the equivalent of small delta in mathjax\r\n    }\r\n    copy = () => new Impact(this.amp, this.symbol);\r\n\r\n    $ = (t) => this.amp * (t === 0);\r\n}\r\n\r\nexport class Ramp extends Poly {\r\n    constructor(amplitude, symbol = \"t\") {\r\n        super([amplitude, 0], symbol);\r\n        this.amplitude = amplitude; // just for calculating the value of this\r\n        this.selfmultiply(Step());\r\n    }\r\n    copy = () => new Ramp(this.amplitude, this.symbol);\r\n\r\n    $ = (t) => (t >= 0) * t * this.amplitude;\r\n}\r\n\r\n\r\nexport class Parabolic extends Poly { //EDIT\r\n    constructor(amplitude, symbol = \"t\") {\r\n        super([amplitude, 0, 0], symbol);\r\n        this.amplitude = amplitude; // just for calculating the value of this\r\n        this.selfmultiply(Step());\r\n    }\r\n    copy = () => new Parabolic(this.amplitude, this.symbol);\r\n    $ = (t) => (t >= 0 ? t * this.amplitude : 0);\r\n}\r\n","import Algebra from \"../algebra/index\";\r\nimport { isDigit, precision, round } from \"math/calculus\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Poly from \"../algebra/functions/poly\";\r\nconst Algebrite = require(\"algebrite\");\r\n\r\nexport default class Equation {\r\n    static zeroPrecision = round(10 ** -precision.get());\r\n    constructor(exp, symbol = \"x\") {\r\n        if (exp instanceof Array) {\r\n            this.algebra = new Poly(exp);\r\n            this.symbol = symbol;\r\n            this.expression = \"\";\r\n            const n = exp.length - 1;\r\n            this.degree = n;\r\n            for (\r\n                let i = 0;\r\n                i < exp.length;\r\n                this.expression += Equation.GetAlgebriteTerm(\r\n                    n - i,\r\n                    exp[i],\r\n                    i,\r\n                    symbol\r\n                ),\r\n                    i++\r\n            );\r\n        } else if (typeof exp === \"string\") {\r\n            this.expression = exp;\r\n            this.algebra = null;\r\n            this.symbol = symbol;\r\n        } else if (exp instanceof Poly) {\r\n            this.expression = \"\";\r\n            this.algebra = exp.copy();\r\n            this.symbol = this.exp.symbol;\r\n            const expression = this.getA();\r\n            const n = expression.length - 1;\r\n            this.degree = n; // unknown\r\n            for (\r\n                let i = 0;\r\n                i < expression.length;\r\n                this.expression += Equation.GetAlgebriteTerm(\r\n                    n - i,\r\n                    expression[i],\r\n                    i,\r\n                    symbol\r\n                ),\r\n                    i++\r\n            );\r\n        } else if (exp instanceof Algebra) {\r\n            // THIS IS TEMPORARY\r\n            this.expression = exp.toString(); // wrong EDIT THIS LATER\r\n            this.algebra = exp.copy();\r\n            this.symbol = this.exp.symbol;\r\n            this.degree = undefined; // unknown\r\n        }\r\n        this.symbol = symbol;\r\n    }\r\n\r\n    static GetAlgebriteTerm = (termDegree, coef, index, symbol) => {\r\n        if (coef === +coef) {\r\n            // means that coef is not a string\r\n            const intExpI = coef | 0;\r\n            const symbolicPart =\r\n                termDegree > 0 ? `*${symbol}^${termDegree}` : \"\";\r\n            if (intExpI !== coef) {\r\n                // means that coef is a float number\r\n                Algebrite.run(`a${index} = ${coef}`);\r\n                return (coef >= 0 ? \"+\" : \"\") + `a${index}${symbolicPart}`;\r\n            } else\r\n                return (intExpI >= 0 ? \"+\" : \"\") + `${intExpI}${symbolicPart}`;\r\n        }\r\n        // here it means coef is a string like '11/2' or '1/4', ...\r\n        return `${coef}${symbol}^${termDegree}`;\r\n    };\r\n    solve = () => {\r\n        // for factorable equations use: algebrite.roots\r\n        let x = Algebrite.nroots(this.expression)\r\n            .toString()\r\n            .replaceAll(\"...\", \"\");\r\n        x = x.slice(1, x.length - 1);\r\n        x = x.split(\",\").filter((xi) => xi && xi !== \"\"); // now x is converted from a string to the array of x answers (as Numbers);\r\n        // edit string to array\r\n        return x.map((xi, i) => {\r\n            // let [real, image] = xi.split(/\\+|-/).filter((xi) => xi && xi !== \"\");\r\n            let separatorIndex = 1;\r\n            for (; separatorIndex < xi.length; separatorIndex++)\r\n                if (\r\n                    (xi[separatorIndex] === \"+\" ||\r\n                        xi[separatorIndex] === \"-\") &&\r\n                    isDigit(xi[separatorIndex - 1]) &&\r\n                    isDigit(xi[separatorIndex + 1])\r\n                )\r\n                    break;\r\n\r\n            let terms = [];\r\n            terms.push(xi.slice(0, separatorIndex));\r\n            if (separatorIndex < xi.length)\r\n                terms.push(xi.slice(separatorIndex, xi.length - 2));\r\n            \r\n            if (terms.length === 1) {\r\n                const magnitude = terms[0].replace(\"*i\", \"\");\r\n                return magnitude === terms[0]\r\n                    ? new Complex(Number(magnitude))\r\n                    : new Complex(0, Number(magnitude));\r\n            } else return new Complex(Number(terms[0]), Number(terms[1]));\r\n        });\r\n    };\r\n\r\n    // AlgebraRoots = () => {\r\n    //     // convert roots returning string to\r\n    //     if (!this.roots || this.roots.length === 0) this.solve();\r\n    // };\r\n\r\n    approximate = (\r\n        method = Equation.Methods.newton,\r\n        N = 10,\r\n        boundary = 1000\r\n    ) => {\r\n        const allRoots = [];\r\n        // newton reaches to approx fast\r\n        // so N = 10 is enough (?????)\r\n        const isUnique = (newRoot) =>\r\n            !isNaN(newRoot) &&\r\n            allRoots.findIndex((rt) =>\r\n                !(rt instanceof Complex) ? rt === newRoot : rt.equals(newRoot)\r\n            ) === -1;\r\n        const isUniqueComplex = (newRoot) =>\r\n            newRoot instanceof Complex &&\r\n            allRoots.findIndex((rt) => newRoot.equals(rt)) === -1;\r\n\r\n        if (this.expression instanceof Algebra) {\r\n            let a0 = 0;\r\n            for (let i = this.expression.a.length - 1; i >= 0; i--)\r\n                if (this.expression.a[i]) {\r\n                    a0 = this.expression.a[i];\r\n                    break;\r\n                }\r\n            const an = this.expression.a[0];\r\n\r\n            if (a0 && an !== 0) boundary = Math.abs(a0 / an);\r\n\r\n            for (let x0 = -boundary; x0 <= boundary; x0++) {\r\n                let x = method(this.algebra, x0, N);\r\n                if (!isNaN(x)) {\r\n                    const rx = round(x);\r\n                    if (isUnique(rx)) allRoots.push(rx);\r\n                }\r\n                x = method(this.algebra, new Complex(0, x0), N);\r\n                if (isUniqueComplex(x)) allRoots.push(x);\r\n            }\r\n        }\r\n        return allRoots;\r\n    };\r\n    // approximation methods\r\n    durandKerner = (N = 20) => {\r\n        if (this.algebra instanceof Algebra) {\r\n            const f = this.algebra.$;\r\n            const n = this.algebra.degree();\r\n            let guess;\r\n            do {\r\n                guess = new Complex(Math.random(), Math.random());\r\n            } while (guess.isReal());\r\n            const roots = Array(n)\r\n                .fill(0)\r\n                .map((_) => []);\r\n\r\n            roots[0].push(new Complex(1, 0));\r\n            for (let i = 1; i < n; i++)\r\n                roots[i][0] = guess.multiply(roots[i - 1][0]);\r\n            for (let iter = 0; iter < N; iter++) {\r\n                for (let i = 0; i < n; i++) {\r\n                    const xiN = roots[i][iter].copy();\r\n                    let sndTermDen = new Complex(1, 0);\r\n                    for (let j = 0; j < n; j++) {\r\n                        if (i !== j) {\r\n                            const xjN = roots[j][roots[j].length - 1];\r\n                            sndTermDen = sndTermDen.multiply(\r\n                                xiN.substract(xjN)\r\n                            );\r\n                        }\r\n                    }\r\n                    let sndTerm = f(xiN).devide(sndTermDen);\r\n                    // USING PUSH MAY SLOW DOWN THE ALGORITHM\r\n                    roots[i].push(xiN.substract(sndTerm));\r\n                }\r\n            }\r\n            return roots.map((r) => r[r.length - 1]);\r\n        }\r\n    };\r\n\r\n    static Methods = {\r\n        // needs work!\r\n        newton: (algebraf, x0 = 0, N = 20) => {\r\n            const f = algebraf.$;\r\n            const df = algebraf.derivative().$;\r\n            const xs = Array(N + 1).fill(0);\r\n            const dfx0 = df(x0);\r\n            if (dfx0 && (!(dfx0 instanceof Complex) || !dfx0.isZero())) {\r\n                if (x0 instanceof Complex) {\r\n                    xs[0] = x0;\r\n                    for (let i = 0; i < N; i++) {\r\n                        // const dfxsi = df(xs[i]);\r\n                        // console.log(\"xs[i] = \", xs[i].toString(), \"=> f(x) = \", f(xs[i]).toString(), \"=> df =\", dfxsi.toString(), \"res = \", f(xs[i]).devide(df(xs[i])))\r\n                        xs[i + 1] = xs[i].substract(f(xs[i]).devide(df(xs[i])));\r\n                    }\r\n\r\n                    const fx = f(xs[N]);\r\n                    if (\r\n                        Math.abs(fx.real()) > Equation.zeroPrecision ||\r\n                        Math.abs(fx.imaginary()) > Equation.zeroPrecision\r\n                    )\r\n                        return NaN;\r\n                } else {\r\n                    xs[0] = x0;\r\n\r\n                    for (let i = 0; i < N; i++) {\r\n                        xs[i + 1] = xs[i] - f(xs[i]) / df(xs[i]);\r\n                    }\r\n\r\n                    if (f(xs[N]) > Equation.zeroPrecision) return NaN;\r\n                }\r\n                //integrity check!\r\n                return xs[xs.length - 1];\r\n            }\r\n            return NaN;\r\n        },\r\n        // needs work!\r\n        middlePoint: (\r\n            f,\r\n            boundary = 1000\r\n            // decimalPrecision = precision.get()\r\n        ) => {\r\n            // NOTE: works fine for some equations\r\n            // and wronge for some others like:  x ** 2 - 4*x  - 5\r\n            boundary = Math.abs(boundary);\r\n            const expectedRate = Equation.zeroPrecision;\r\n            const poles = [];\r\n            let xa = 0,\r\n                xb = 1;\r\n            for (let i = 0; i < boundary; i++) {\r\n                xa = -boundary + i;\r\n                xb = boundary - i;\r\n\r\n                let rate =\r\n                    (xb - xa) / (2 * Math.max(Math.abs(xa), Math.abs(xb)));\r\n                let p = null;\r\n                while (rate >= expectedRate) {\r\n                    p = (xa + xb) / 2;\r\n                    if (!f(p)) break;\r\n                    else if (f(p) * f(xa) < 0) xb = p;\r\n                    else {\r\n                        xa = p;\r\n                        rate =\r\n                            (xb - xa) /\r\n                            (2 * Math.max(Math.abs(xa), Math.abs(xb)));\r\n                    }\r\n                }\r\n                if (!f(p)) poles.push(round(p));\r\n            }\r\n            return new Set(poles);\r\n        },\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport { isDigit } from \"math/calculus\";\r\nimport Complex from \"math/algebra/complex\";\r\nconst nerdamer = require(\"nerdamer/all.min\");\r\n\r\nexport default class Formula {\r\n    constructor(mathPhrase, symbol = null, expressions = null) {\r\n        /// all type of parameters must be converted to an string mathPhrases (f)\r\n        if (mathPhrase instanceof Algebra) {\r\n            this.f = mathPhrase.toFormula();\r\n            this.symbol = mathPhrase.symbol;\r\n        } else if (typeof mathPhrase === \"string\") {\r\n            this.f = mathPhrase;\r\n            this.symbol = symbol;\r\n        }\r\n        this.expressions = expressions ? expressions : nerdamer(this.f); // normally its the nerdamer expressions\r\n    }\r\n\r\n    // differentiate function\r\n    df = (against = this.symbol) => {\r\n        const expressions = nerdamer.diff(this.f, against);\r\n        return new Formula(expressions.toString(), this.symbol, expressions);\r\n    };\r\n    iL = (timeSymbol = \"t\") => {\r\n        // inverse laplace transform\r\n        const expressions = nerdamer(\r\n            `ilt(${this.f}, ${this.symbol}, ${timeSymbol})`\r\n        );\r\n        return new Formula(expressions.toString(), timeSymbol, expressions);\r\n    };\r\n\r\n    L = (frequencySymbol = \"s\") => {\r\n        // laplace\r\n        const expressions = nerdamer(\r\n            `laplace(${this.f}, ${this.symbol}, ${frequencySymbol})`\r\n        );\r\n        return new Formula(\r\n            expressions.toString(),\r\n            frequencySymbol,\r\n            expressions\r\n        );\r\n    };\r\n\r\n    $ = (t = undefined) => {\r\n        // returns the containing f as a normal funtion or single value in a certain point\r\n        // get value at certain point\r\n        const knownVariables = [];\r\n        knownVariables[this.symbol] = t;\r\n        return t\r\n            ? nerdamer(this.f, { ...knownVariables })\r\n                  .evaluate()\r\n                  .toDecimal()\r\n            : nerdamer(this.f).toDecimal();\r\n    };\r\n\r\n    // solve equations\r\n    x = () => {\r\n        // nerdamer.solveEquations(this.f, this.symbol);\r\n\r\n        let roots = nerdamer(this.f)\r\n            .solveFor(this.symbol)\r\n            .map((ri) =>\r\n                (!ri.toString().includes(\"sqrt\")\r\n                    ? ri\r\n                    : ri.evaluate()\r\n                ).toDecimal()\r\n            );\r\n        //roots = roots.split(\",\").filter((ri) => ri && ri !== \"\"); // now x is converted from a string to the array of x answers (as +s);\r\n        // edit string to array\r\n        return roots.map((ri, i) => {\r\n            // let [real, image] = ri.split(/\\+|-/).filter((ri) => ri && ri !== \"\");\r\n            let separatorIndex = 1;\r\n            for (; separatorIndex < ri.length; separatorIndex++)\r\n                if (\r\n                    (ri[separatorIndex] === \"+\" ||\r\n                        ri[separatorIndex] === \"-\") &&\r\n                    (isDigit(ri[separatorIndex - 1]) ||\r\n                        ri[separatorIndex - 1] === \"i\") &&\r\n                    (isDigit(ri[separatorIndex + 1]) ||\r\n                        ri[separatorIndex + 1] === \"i\")\r\n                )\r\n                    break;\r\n\r\n            let terms = [];\r\n            terms.push(ri.slice(0, separatorIndex));\r\n            if (separatorIndex < ri.length)\r\n                terms.push(ri.slice(separatorIndex, ri.length));\r\n\r\n            if (terms.length === 1) {\r\n                const magnitude = terms[0].replace(\"*i\", \"\").replace(\"i\", \"1\");\r\n                return magnitude === terms[0]\r\n                    ? new Complex(+magnitude)\r\n                    : new Complex(0, +magnitude);\r\n            } else {\r\n                let b = terms[1].replace(\"*i\", \"\").replace(\"i\", \"1\");\r\n                if (b !== terms[1]) return new Complex(+terms[0], +b);\r\n                // if not, means the first term was image\r\n                b = terms[0].replace(\"*i\", \"\").replace(\"i\", \"1\");\r\n                return new Complex(+terms[1], +b);\r\n            }\r\n        });\r\n    };\r\n    toString = () => nerdamer(this.f).toTeX();\r\n\r\n    toAlgebra = () => {\r\n        if (this.expressions instanceof Algebra) return this.expressions.copy();\r\n    };\r\n    static GetTerm = (termDegree, coef, symbol) => {\r\n        if (coef === +coef) {\r\n            // means that coef is not a string\r\n            const symbolicPart =\r\n                termDegree > 0 ? `*${symbol}^${termDegree}` : \"\";\r\n            return (coef >= 0 ? \"+\" : \"\") + `${coef}${symbolicPart}`;\r\n        }\r\n        // here it means coef is a string like '11/2' or '1/4', ...\r\n        return `${coef}${symbol}^${termDegree}`;\r\n    };\r\n\r\n    static RepetitiveFactors = (f, roots, symbol) => {\r\n        const fullRoots = [...roots];\r\n        for (const root of roots) {\r\n            const knowns = [];\r\n            knowns[symbol] = root.toString(false, true).replace(\"j\", \"i*\");\r\n            for (\r\n                let fi = nerdamer.diff(f);\r\n                !+nerdamer(fi, {...knowns}).toDecimal();\r\n                fullRoots.push(root.copy()), fi = nerdamer.diff(fi)\r\n            );\r\n        }\r\n        return fullRoots;\r\n    };\r\n}\r\n","import Algebra from \"../index\";\r\nimport Complex from \"../complex\";\r\nimport Exp from \"./exp\";\r\nimport Fraction from \"./fraction\";\r\nimport { Step } from \"math/input-signals/signals\";\r\nimport Poly from \"./poly\";\r\nimport { Cos, Sin } from \"./trigonometric\";\r\nimport { round } from \"math/calculus/index\";\r\nimport Equation from \"math/solvers/equation\";\r\nimport { makeProgress } from \"toolshed\";\r\nimport Formula from \"math/solvers/formula\";\r\n\r\nexport default class TransferFunction extends Fraction {\r\n    static Specials = {\r\n        $1: (k, a) =>\r\n            new TransferFunction([k], [1, a]).setRoots([], [-a]).setOrder(1),\r\n        $2: (k, a, b = a instanceof Complex ? a.conjugate : a) => {\r\n            // k / (s + a)(s + b) => must be converted to => k / (s2 + 2(a+b)s + ab)\r\n            let aplusb =\r\n                a instanceof Algebra\r\n                    ? a.add(b)\r\n                    : b instanceof Algebra\r\n                    ? b.add(a)\r\n                    : b + a;\r\n            let ab =\r\n                a instanceof Algebra\r\n                    ? a.multiply(b)\r\n                    : b instanceof Algebra\r\n                    ? b.multiply(a)\r\n                    : b * a;\r\n            if (aplusb instanceof Complex && aplusb.isReal())\r\n                aplusb = aplusb.real();\r\n            if (ab instanceof Complex && ab.isReal()) ab = ab.real();\r\n\r\n            return new TransferFunction(\r\n                [k],\r\n                [1, aplusb instanceof Algebra ? aplusb.negation() : -aplusb, ab]\r\n            )\r\n                .setRoots([], [a, b])\r\n                .setOrder(2);\r\n        },\r\n        $WnZ: (w_n, zeta) => new TransferFunction(null, null, { w_n, zeta }),\r\n        $design: (t_rise, overshoot) =>\r\n            new TransferFunction(null, null, { overshoot, t_rise }),\r\n\r\n        $PID: (Kp, Ti, Td) =>\r\n            Ti !== 0\r\n                ? new TransferFunction([Kp * Ti * Td, Kp * Ti, Kp], [Ti, 0])\r\n                : new TransferFunction([Kp * Td, Kp], [1]),\r\n        $Roots: (zeros, poles) => {\r\n            let num = new Poly([1], \"s\"),\r\n                den = new Poly([1], \"s\");\r\n            for (let i = 0; i < zeros.length; i++) {\r\n                if (zeros[i] instanceof Complex)\r\n                    num = num.multiply(new Poly([1, zeros[i].negation()], \"s\"));\r\n                else {\r\n                    num = num.multiply(new Poly([1, -zeros[i]], \"s\"));\r\n                    zeros[i] = new Complex(zeros[i], 0);\r\n                }\r\n            }\r\n            for (let i = 0; i < poles.length; i++) {\r\n                if (poles[i] instanceof Complex)\r\n                    den = den.multiply(new Poly([1, poles[i].negation()], \"s\"));\r\n                else {\r\n                    den = den.multiply(new Poly([1, -poles[i]], \"s\"));\r\n                    poles[i] = new Complex(poles[i], 0);\r\n                }\r\n            }\r\n            return num.devide(den).toTransferFunction().setRoots(zeros, poles);\r\n        },\r\n    };\r\n\r\n    static RootOrders = (Roots) => {\r\n        Roots = Roots.sort((p1, p2) => p1.real() - p2.real());\r\n        const orders = [];\r\n        for (let i = 0; i < Roots.length; i++) {\r\n            let j = i + 1,\r\n                order = 1;\r\n            for (; j < Roots.length && Roots[i].equals(Roots[j]); j++, order++);\r\n            orders.push({ value: Roots[i], order });\r\n            i = j - 1;\r\n        }\r\n        return orders;\r\n    };\r\n    static OmegaZetaPoles = (w_n, zeta) => {\r\n        if (Math.abs(zeta) >= 1) {\r\n            const alpha = -zeta * w_n;\r\n            const beta = w_n * (zeta * zeta - 1) ** 0.5;\r\n            return [alpha + beta, alpha - beta];\r\n        }\r\n        const alpha = -zeta * w_n;\r\n        const beta = w_n * (1 - zeta * zeta) ** 0.5;\r\n        return [new Complex(alpha, beta), new Complex(alpha, -beta)];\r\n    };\r\n    constructor(numerator, denominator, params = {}) {\r\n        let zeros = [],\r\n            poles = [];\r\n        if (params) {\r\n            if (params.overshoot && params.t_rise) {\r\n                params.overshoot = Number(params.overshoot);\r\n                params.t_rise = Number(params.t_rise);\r\n                const logMp = Math.log10(params.overshoot);\r\n                params.zeta =\r\n                    -logMp / (Math.PI * Math.PI + logMp * logMp) ** 0.5;\r\n                params.w_d = Math.PI / params.t_rise;\r\n                params.w_n =\r\n                    params.w_d / (1 - params.zeta * params.zeta) ** 0.5;\r\n            }\r\n\r\n            if (params.w_n) {\r\n                params.w_n = Number(params.w_n);\r\n                params.zeta = Number(params.zeta);\r\n                // if the user sends w_n params it will override the given zero/pole list\r\n                const { w_n, zeta } = params;\r\n                const wn2 = w_n * w_n;\r\n                numerator = wn2;\r\n                denominator = [1, 2 * zeta * w_n, wn2];\r\n                poles = TransferFunction.OmegaZetaPoles(w_n, zeta);\r\n                zeros = [];\r\n            }\r\n        }\r\n        super(numerator, denominator, \"s\", params);\r\n        // SIMPL;IFY\r\n        this.poles = [...poles]; //edit solve equations\r\n        this.zeros = [...zeros];\r\n        if (!this.a instanceof Array) this.a = [this.a];\r\n        if (this.a.length === 1 && !this.w_n) {\r\n            if (\r\n                this.b.length === 3 &&\r\n                this.b[this.b.length - 1] === this.a[0]\r\n            ) {\r\n                this.w_n = this.a[0];\r\n                this.zeta = this.b[1] / (2 * this.w_n);\r\n                this.timeConstant = round(1 / (this.zeta * this.w_n));\r\n                this.t_settle = 4 * this.timeConstant;\r\n                if (params && params.w_d) this.w_d = params.w_d;\r\n                else if (this.zeta >= -1 && this.zeta <= 1)\r\n                    this.w_d = this.w_n * (1 - this.zeta ** 2) ** 0.5;\r\n                this.order = 2;\r\n                this.setRoots(\r\n                    [],\r\n                    TransferFunction.OmegaZetaPoles(this.w_n, this.zeta)\r\n                );\r\n            }\r\n        }\r\n        if (!this.order)\r\n            this.order =\r\n                denominator instanceof Array ? denominator.length - 1 : 1;\r\n        if (params.overshoot && params.t_rise) {\r\n            [this.overshoot, this.t_rise] = [params.overshoot, params.t_rise];\r\n        } else {\r\n            const dampingCharasteristics =\r\n                this.getDampingSystemCharasteristics();\r\n            if (dampingCharasteristics) {\r\n                this.overshoot = dampingCharasteristics.overshoot;\r\n                this.t_rise = dampingCharasteristics.t_rise;\r\n            }\r\n        }\r\n        if (\r\n            (!this.zeros || !this.zeros.length) &&\r\n            (!this.poles || !this.poles.length)\r\n        ) {\r\n            const [zs, ps] = this.roots();\r\n            this.setRoots(zs, ps);\r\n        }\r\n    }\r\n\r\n    roots = () => {\r\n        // roots hasnt been decided by user\r\n        let zeros = [],\r\n            poles = [];\r\n        if (\r\n            this.a instanceof Array &&\r\n            this.b instanceof Array && // if all elements of numerator and denominator are actual numbers\r\n            !this.a.find((ai) => ai !== +ai) &&\r\n            !this.b.find((bi) => bi !== +bi)\r\n        ) {\r\n            // CONSTANT COEFFICIENT POLYNOMIAL EQUATIONS\r\n            zeros =\r\n                this.a.length > 1\r\n                    ? new Formula(this.numerator().toFormula(), this.symbol).x()\r\n                    : // ? new Equation(this.a, this.symbol).solve()\r\n                      [];\r\n            poles =\r\n                this.b.length > 1\r\n                    ? new Formula(\r\n                          this.denominator().toFormula(),\r\n                          this.symbol\r\n                      ).x()\r\n                    : //? new Equation(this.b, this.symbol).solve()\r\n                      [];\r\n            if (zeros.length < this.a.length - 1) {\r\n                zeros = Formula.RepetitiveFactors(\r\n                    this.numerator().toFormula(),\r\n                    zeros,\r\n                    this.symbol\r\n                );\r\n            }\r\n            if (poles.length < this.b.length - 1) {\r\n                poles = Formula.RepetitiveFactors(\r\n                    this.denominator().toFormula(),\r\n                    poles,\r\n                    this.symbol\r\n                );\r\n            }\r\n        } else {\r\n            // if the equation isnt a simple constant coefficient polynomial\r\n        }\r\n\r\n        return [zeros, poles];\r\n    };\r\n\r\n    setRoots = (zeros, poles) => {\r\n        this.poles = poles\r\n            .map((pi) =>\r\n                pi instanceof Complex ? pi.copy() : new Complex(pi, 0)\r\n            )\r\n            .sort((p1, p2) => p1.real() - p2.real());\r\n        this.zeros = zeros\r\n            .map((zi) =>\r\n                zi instanceof Complex ? zi.copy() : new Complex(zi, 0)\r\n            )\r\n            .sort((z1, z2) => z1.real() - z2.real());\r\n\r\n        return this;\r\n    };\r\n\r\n    getDampingSystemCharasteristics = () =>\r\n        this.w_d\r\n            ? {\r\n                  t_rise: round(Math.PI / this.w_d),\r\n                  // WHAT IF W_D === 0?\r\n                  overshoot:\r\n                      this.zeta >= -1 && this.zeta <= 1\r\n                          ? round(\r\n                                100 *\r\n                                    Math.exp(\r\n                                        -(this.zeta * Math.PI) /\r\n                                            (1 - this.zeta ** 2) ** 0.5\r\n                                    )\r\n                            )\r\n                          : null,\r\n              }\r\n            : null;\r\n\r\n    getOrder = () => this.order;\r\n    setOrder = (order) => {\r\n        this.order = order;\r\n        return this;\r\n    };\r\n    getPoles = () => this.poles;\r\n    setPoles = (poles) => {\r\n        this.poles = TransferFunction.map((pi) =>\r\n            pi instanceof Complex ? pi.copy() : new Complex(pi, 0)\r\n        );\r\n        return this;\r\n    };\r\n    getZeros = () => this.zeros;\r\n    setZeros = (zeros) => {\r\n        this.zeros = zeros.map((zi) =>\r\n            zi instanceof Complex ? zi.copy() : new Complex(zi, 0)\r\n        );\r\n        return this;\r\n    };\r\n\r\n    poleOrder = (pole) =>\r\n        this.poles.filter((pi) => Algebra.areTheseTwoEqual(pole, pi)).length;\r\n\r\n    derivative = (against = this.symbol) => {\r\n        let result = this.copy(true);\r\n        if (against === this.symbol) {\r\n            const rplus = result.plus;\r\n            if (!result.dot) {\r\n                const f = this.numerator(), g = this.denominator();\r\n                const num = f.derivative().multiply(g).substract(g.derivative().multiply(f));\r\n                result = num.devide(g.multiply(g)).toTransferFunction();\r\n            }\r\n            if (rplus) result.plus = rplus.derivative();\r\n        }\r\n        return result;\r\n    };\r\n    laplace = () => this.copy(); // actually it has no laplace, this is for disfunctioning the laplace method in the parent class Algebra\r\n    laplaceInverse = () => {\r\n        // const m = this.zeros.length - 1; // number of zeros\r\n        // const n = this.poles.length - 1; // number of poles\r\n        const zeros = TransferFunction.RootOrders(this.zeros),\r\n            poles = TransferFunction.RootOrders(this.poles); // compact zero/pole list containing the orders\r\n        const coefs = [];\r\n        for (let i = 0; i < poles.length; i++) {\r\n            // for(let j  = 0; j < poles[i].order; i++)\r\n            const s = poles[i].value;\r\n            const otherPoles = [...poles];\r\n            otherPoles.splice(i, 1);\r\n            const num =\r\n                    zeros.length > 0\r\n                        ? Complex.MultiplyFactors(zeros, s)\r\n                        : new Complex(1, 0),\r\n                den = Complex.MultiplyFactors(otherPoles, s);\r\n            coefs.push(num.devide(den));\r\n            if (poles[i].order > 1) {\r\n                const ci = coefs.length - 1\r\n                coefs[ci] = [coefs[ci]];\r\n                let dF = TransferFunction.Specials.$Roots(zeros.map(z => z.value), otherPoles.map(p => p.value));\r\n                for (let q = 1; q < poles[i].order; q++) {\r\n                    dF = dF.derivative();\r\n                    coefs[ci].push(dF.$(s));\r\n\r\n                }\r\n            }\r\n        }\r\n        // edit THIIIIIIIIIIIIIS\r\n        let g_s = new TransferFunction(coefs[0].actual(), [\r\n                1,\r\n                poles[0].value.negation().actual(),\r\n            ]),\r\n            c_t = new Exp(coefs[0].actual(), poles[0].value.actual());\r\n        for (let i = 1; i < coefs.length; i++) {\r\n            g_s = g_s.add(\r\n                new TransferFunction(coefs[i].actual(), [\r\n                    1,\r\n                    poles[i].value.negation().actual(),\r\n                ])\r\n            );\r\n            c_t = c_t.add(new Exp(coefs[i].actual(), poles[i].value.actual()));\r\n        }\r\n        return { $s: g_s, $t: c_t };\r\n    };\r\n\r\n    stepify = () => {\r\n        const lstep = this.copy();\r\n        lstep.b.push(0); //update denominator\r\n        lstep.poles.push(new Complex(0, 0));\r\n        return lstep;\r\n    };\r\n    step = () => {\r\n        // normally will automatically return the time domain answer\r\n        // unless inLaplaceDomain is true\r\n        // PUT INPUT SIGNAL AT THE END\r\n        const m = this.zeros.length; // number of zeros\r\n        const n = this.poles.length; // number of poles\r\n        const nreal = this.poles.filter(\r\n            (pi) => !(pi instanceof Complex) || pi.isReal()\r\n        ).length; // number of real poles; can be eig   her 2 or 0\r\n        if (m === 0) {\r\n            const k = this.numerator();\r\n            if (n === 0) {\r\n                // return u(t)\r\n                // DEFINE U(T) IN ALGEBRA\r\n            }\r\n            if (n === 1) {\r\n            } else if (n === 2) {\r\n                const a = -this.poles[0],\r\n                    b = -this.poles[1];\r\n                if (nreal === 2) {\r\n                    // if (a > 0 && b > 0) {\r\n                    if (a !== b)\r\n                        // two independent polesdddd\r\n                        // two negative independent poles\r\n                        return new Exp(1 / a, -a)\r\n                            .add(new Exp(-1 / b, -b))\r\n                            .multiply(k / (a - b))\r\n                            .multiply(new Step())\r\n                            .add(new Step(k / (a * b)));\r\n                    else {\r\n                        const a2 = a * a;\r\n                        return new Exp(-k / a2, -a)\r\n                            .multiply(new Poly([a, 1]))\r\n                            .multiply(new Step())\r\n                            .add(new Step(k / a2));\r\n                    }\r\n                    // } else {\r\n                    //     // repetetive poles\r\n                    // }\r\n                } else if (nreal === 0) {\r\n                    // two conjugated complex poles\r\n                    //UNDERSHOOT BUG FIXLAYS HERE\r\n                    const a = -this.poles[0].real(),\r\n                        b = this.poles[0].imaginary();\r\n                    const ka2b2 = k / (a ** 2 + b ** 2);\r\n                    // FIND BUUUUUUG\r\n                    // return new Exp(-ka2b2, -a)\r\n                    //     .multiply(new Cos(1, b).add(new Sin(a / b, b)))\r\n                    //     .multiply(new Step())\r\n                    //     .add(new Step(ka2b2));\r\n                    return new Exp(-ka2b2, -a)\r\n                        .multiply(new Cos(1, b))\r\n                        .add(new Exp(-ka2b2, -a).multiply(new Sin(a / b, b)))\r\n                        .multiply(new Step())\r\n                        .add(new Step(ka2b2));\r\n                }\r\n                // else if( nreal == 1) // this cant happen, but what if sth went wrong?\r\n            }\r\n        }\r\n        // if its not in special mode:\r\n        return new Formula(this.stepify().toFormula(), this.symbol).iL();\r\n    };\r\n    copy = (linkPrevious = false) =>\r\n        new TransferFunction(this.a, this.b, {\r\n            overshoot: this.overshoot,\r\n            t_rise: this.t_rise,\r\n            t_settle: this.t_settle,\r\n            w_d: this.w_d,\r\n            timeConstant: this.timeConstant,\r\n            w_n: this.w_n,\r\n            zeta: this.zeta,\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        }).setRoots(this.zeros, this.poles);\r\n\r\n    lim = (s0) => {\r\n        let num, den;\r\n        // for simple polynomial numerator and denominator fractions\r\n        // IMPLEMENT HOPITAL AS WELL?\r\n        if (!s0) {\r\n            // s -> 0)\r\n\r\n            num = { a: 0, sp: this.a.length - 1 };\r\n            den = { b: 1, sp: this.b.length - 1 };\r\n            for (; num.sp > 0 && this.a[num.sp] === 0; num.sp--);\r\n            num.a = this.a[num.sp];\r\n            for (; den.sp > 0 && this.b[den.sp] === 0; den.sp--);\r\n            den.b = this.b[den.sp];\r\n            num.sp = this.a.length - num.sp - 1;\r\n            den.sp = this.b.length - den.sp - 1;\r\n            if (num.sp === den.sp) return num.a / den.b;\r\n            else {\r\n                const sMinPower = Math.min(den.sp, num.sp);\r\n                if (sMinPower) {\r\n                    num.sp -= sMinPower;\r\n                    den.sp -= sMinPower;\r\n                }\r\n                // now one of num.sp or den.sp is zero\r\n                if (den.sp)\r\n                    // zero on denominator\r\n                    return Infinity;\r\n                // if den.sp == 0 and num.sp != 0\r\n                return 0;\r\n            }\r\n        } else if (s0 === Infinity) {\r\n            // s -> infinity\r\n            num = { a: 0, sp: 0 };\r\n            den = { b: 1, sp: 0 };\r\n            for (; num.sp < this.a.length && this.a[num.sp] === 0; num.sp++);\r\n            num.a = this.a[num.sp];\r\n            for (; den.sp < this.b.length && this.b[den.sp] === 0; den.sp++);\r\n            den.b = this.b[den.sp];\r\n            num.sp = this.a.length - num.sp - 1;\r\n            den.sp = this.b.length - den.sp - 1;\r\n            if (num.sp === den.sp) return num.a / den.b;\r\n            // else\r\n            const sMinPower = Math.min(den.sp, num.sp);\r\n            if (sMinPower) {\r\n                num.sp -= sMinPower;\r\n                den.sp -= sMinPower;\r\n            }\r\n            // now one of num.sp or den.sp is zero\r\n            if (den.sp)\r\n                // zero on denominator\r\n                return 0;\r\n            // if den.sp == 0 and num.sp != 0\r\n            return Infinity;\r\n        } else {\r\n            // if s0 is just a no-zero limited number\r\n            num = this.numerator().$(s0);\r\n            den = this.denominator().$(s0);\r\n            if (den)\r\n                // simple non zero denominator limit\r\n                return num / den;\r\n            // if den == 0\r\n            // use Hopital or other limit methods\r\n            //return (num.a * (s0 ** num.sp)) / (den.b * (s0 ** den.sp));\r\n        }\r\n    };\r\n    errors = () => {\r\n        const sGs = this.multiply(new Poly([1, 0], \"s\"));\r\n        const s2Gs = sGs.multiply(new Poly([1, 0], \"s\"));\r\n        return {\r\n            Ks: round(this.lim(0)),\r\n            Kr: round(sGs.lim(0)),\r\n            Ka: round(s2Gs.lim(0)),\r\n        };\r\n    };\r\n    // $ = (t) => this.laplaceInverse().$(t); // valueOf function in certain point; I used character $ in many places as,\r\n    // acronym for \"set\" in setters, so $ here means that set the t ( or x or whatever) with a certain point\r\n\r\n    amplitude = (w) => {\r\n        // w === omega\r\n        const jw = new Complex(0, w);\r\n        const num = this.numerator(),\r\n            den = this.denominator();\r\n        const numAmp = !(num instanceof Exp)\r\n                ? num.$(jw).magnitude()\r\n                : Math.abs(num.getA()),\r\n            denAmp = !(den instanceof Exp)\r\n                ? den.$(jw).magnitude()\r\n                : Math.abs(den.getB());\r\n        return numAmp / denAmp;\r\n        // this is for find exact match of the devide function\r\n        // but im sure num and den are Complex so i directly stated the result\r\n\r\n        // if(num instanceof Complex)\r\n        //     return num.magnitude() / (den instanceof Complex ? den.magnitude : den).magnitude();\r\n        // if(den instanceof Complex)\r\n        //     return num instanceof Algebra ? num.devide(den.magnitude()) : num / den.magnitude();\r\n        // if(num instanceof Algebra)\r\n        //     return num.devide(den);\r\n        // if(den instanceof Algebra)\r\n        //     return den.devideInverse(num);\r\n        // // signal input?\r\n        // if(den)\r\n        //     return num / den;\r\n        // return NaN;\r\n    };\r\n\r\n    phase = (w) => {\r\n        const jw = new Complex(0, w);\r\n        let num = this.numerator(),\r\n            den = this.denominator();\r\n        const numPhase = !(num instanceof Exp)\r\n                ? num.$(jw).phase()\r\n                : num.phase(w), //exponentials have their own shortcut for phase()\r\n            denPhase = !(den instanceof Exp) ? den.$(jw).phase() : den.phase(w);\r\n        if (+denPhase === denPhase && +numPhase === numPhase)\r\n            return numPhase - denPhase;\r\n        // for now Complex.phase() returns numbers or functions:\r\n        // numPhase or denPhase instanceof Function then:\r\n        return (\r\n            (numPhase instanceof Function ? numPhase(w) : numPhase) -\r\n            (denPhase instanceof Function ? denPhase(w) : denPhase)\r\n        );\r\n        // else if(numPhase instanceof Algebra)\r\n        //     return numPhase.$(w) - den.phase();\r\n        // return NaN;\r\n    };\r\n\r\n    static PolarToComplex = (A, phi) =>\r\n        new Complex(A * Math.cos(phi), A * Math.sin(phi));\r\n    nyquist = (w, method = \"complex\") =>\r\n        method === \"complex\"\r\n            ? this.$(new Complex(0, w))\r\n            : TransferFunction.PolarToComplex(this.amplitude(w), this.phase(w));\r\n\r\n    bode = (w) => 20 * Math.log10(this.amplitude(w));\r\n\r\n    toFormula = () => {\r\n        // const [zeros, poles] = this.repetitiveRoots();\r\n        const num =\r\n            this.zeros.length > 0\r\n                ? this.zeros\r\n                      .map(\r\n                          (zi) =>\r\n                              \"(\" +\r\n                              this.symbol +\r\n                              \" - \" +\r\n                              zi.toString(false, true).replace(\"j\", \"i*\") +\r\n                              \")\"\r\n                      )\r\n                      .join(\"*\")\r\n                : \"1\";\r\n        const den =\r\n            this.poles.length > 0\r\n                ? this.poles\r\n                      .map(\r\n                          (pi) =>\r\n                              \"(\" +\r\n                              this.symbol +\r\n                              \" - \" +\r\n                              pi.toString(false, true).replace(\"j\", \"i*\") +\r\n                              \")\"\r\n                      )\r\n                      .join(\"*\")\r\n                : \"1\";\r\n        return `(${num})/(${den})`;\r\n    };\r\n\r\n    // ****************************************************** //\r\n    // SOLVE THIS WITH nerdamer again\r\n    rootLocus = async (k_min, k_max, progressBarObject, N = 1000) => {\r\n        // return root locus values for plotting\r\n\r\n        // TEMPORARY:\r\n        let dk = (k_max - k_min) / N;\r\n        const a = this.getA(), // numerator\r\n            b = this.getB(); // denominator => a / b\r\n        const na = a.length - 1,\r\n            nb = b.length - 1;\r\n        const reals = [],\r\n            imaginaries = [];\r\n        const progressLength = k_max - k_min;\r\n        const newTerm = Formula.GetTerm; // Equation.GetAlgebriteTerm;\r\n        for (let k = k_min, progress = 0; k <= k_max; k += dk, progress += dk) {\r\n            // in this piece: using short form codes and using objects is set to minimum\r\n            // because root locus is time consuming and putting all the codes in one main loop is better\r\n            // const delta = b.add(a.multiply(k));\r\n            let delta = null,\r\n                expression = \"\";\r\n            // USE ARRAY DIRECT PROCESS FOR FASTER RESPONSE\r\n            // NUM + K * DEN\r\n            if (na <= nb) {\r\n                delta = Array(nb);\r\n                const offsetB = nb - na;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetB;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(nb - i, delta[i], this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetB;\r\n                    i <= na;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(na - i, delta[ib], this.symbol),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            } else {\r\n                delta = Array(na);\r\n                const offsetA = na - nb;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetA;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(na - i, delta[i], this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetA;\r\n                    i <= nb;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(nb - i, delta[ib], this.symbol),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            }\r\n            const poles = new Formula(expression, this.symbol).x();\r\n            await makeProgress(\r\n                progressBarObject,\r\n                (100 * progress) / progressLength\r\n            );\r\n\r\n            for (let i = 0; i < poles.length; i++) {\r\n                if (poles[i] instanceof Complex) {\r\n                    reals.push(poles[i].real());\r\n                    imaginaries.push(poles[i].imaginary());\r\n                } else {\r\n                    reals.push(poles[i]);\r\n                    imaginaries.push(0);\r\n                }\r\n            }\r\n        }\r\n        await makeProgress(progressBarObject, 100);\r\n        return [reals, imaginaries];\r\n    };\r\n\r\n    rootsByAlgebriteLocus = async (\r\n        k_min,\r\n        k_max,\r\n        progressBarObject,\r\n        N = 1000\r\n    ) => {\r\n        // return root locus values for plotting\r\n\r\n        // TEMPORARY:\r\n        let dk = (k_max - k_min) / N;\r\n        const a = this.getA(), // numerator\r\n            b = this.getB(); // denominator => a / b\r\n        const na = a.length - 1,\r\n            nb = b.length - 1;\r\n        const reals = [],\r\n            imaginaries = [];\r\n        const progressLength = k_max - k_min;\r\n        const newTerm = Equation.GetAlgebriteTerm;\r\n        for (let k = k_min, progress = 0; k <= k_max; k += dk, progress += dk) {\r\n            // in this piece: using short form codes and using objects is set to minimum\r\n            // because root locus is time consuming and putting all the codes in one main loop is better\r\n            // const delta = b.add(a.multiply(k));\r\n            let delta = null,\r\n                expression = \"\";\r\n            // USE ARRAY DIRECT PROCESS FOR FASTER RESPONSE\r\n            // NUM + K * DEN\r\n            if (na <= nb) {\r\n                delta = Array(nb);\r\n                const offsetB = nb - na;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetB;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(nb - i, delta[i], i, this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetB;\r\n                    i <= na;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(\r\n                            na - i,\r\n                            delta[ib],\r\n                            ib,\r\n                            this.symbol\r\n                        ),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            } else {\r\n                delta = Array(na);\r\n                const offsetA = na - nb;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetA;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(na - i, delta[i], i, this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetA;\r\n                    i <= nb;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(\r\n                            nb - i,\r\n                            delta[ib],\r\n                            ib,\r\n                            this.symbol\r\n                        ),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            }\r\n            // const roots = new Equation(new Poly(delta)).roots();\r\n            const poles = new Equation(expression).solve();\r\n\r\n            await makeProgress(\r\n                progressBarObject,\r\n                (100 * progress) / progressLength\r\n            );\r\n\r\n            for (let i = 0; i < poles.length; i++) {\r\n                if (poles[i] instanceof Complex) {\r\n                    reals.push(poles[i].real());\r\n                    imaginaries.push(poles[i].imaginary());\r\n                } else {\r\n                    reals.push(poles[i]);\r\n                    imaginaries.push(0);\r\n                }\r\n            }\r\n        }\r\n        await makeProgress(progressBarObject, 100);\r\n        return [reals, imaginaries];\r\n    };\r\n\r\n    controlFeedback = (controller) => {\r\n        const cs_gs = this.multiply(controller);\r\n        return cs_gs\r\n            .numerator()\r\n            .devide(cs_gs.numerator().add(cs_gs.denominator()))\r\n            .toTransferFunction();\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Exp from \"./exp\";\r\nimport Fraction from \"./fraction\";\r\n\r\nexport class Sin extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        if(w === +w && w < 0){\r\n            w *= -1;\r\n            A *= -1;\r\n        }\r\n        super(A, { symbol, type: \"sin\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Sin(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    toExp = () => {\r\n        const sin = this.copy();\r\n        const exp1 = new Exp(sin.a / 2, new Complex(0, -sin.b));\r\n        const exp2 = new Exp(-sin.a / 2, new Complex(0, sin.b));\r\n        return new Complex(0, exp1.add(exp2));\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.sin(w * t + teta)\r\n    }\r\n}\r\n\r\nexport class Cos extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        if(+w === w && w < 0) w *= -1; // cos(-w) = cos(w);\r\n        super(A, { symbol, type: \"cos\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Cos(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    toExp = () => {\r\n        const cos = this.copy();\r\n        const exp1 = new Exp(cos.a / 2, new Complex(0, cos.b));\r\n        const exp2 = new Exp(cos.a / 2, new Complex(0, -cos.b));\r\n        return exp1.add(exp2);\r\n    };\r\n\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.cos(w * t + teta)\r\n    }\r\n}\r\n\r\nexport class Tan extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        super(A, { symbol, type: \"tan\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Tan(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    toExp = () => {\r\n        const tan = this.copy();\r\n        const exp1 = new Exp(1, new Complex(0, -tan.b));\r\n        const numeratorExp2 = new Exp(-1, new Complex(0, tan.b));\r\n        const denominatorExp2 = new Exp(1, new Complex(0, tan.b));\r\n        return new Fraction(exp1.add(numeratorExp2), exp1.add(denominatorExp2));\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.tan(w * t + teta)\r\n    }\r\n}\r\n\r\nexport class Cot extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        super(A, { symbol, type: \"cot\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Cot(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    toExp = () => {\r\n        const cot = this.copy();\r\n        const exp1 = new Exp(1, new Complex(0, -cot.b));\r\n        const numeratorExp2 = new Exp(-1, new Complex(0, cot.b));\r\n        const denominatorExp2 = new Exp(1, new Complex(0, cot.b));\r\n        return new Fraction(exp1.add(denominatorExp2), exp1.add(numeratorExp2));\r\n    };\r\n\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.cot(w * t + teta)\r\n    }\r\n}\r\n","import { error_codes } from \"config\";\r\n\r\nexport default class NotScalarError extends Error {\r\n    \r\n    constructor(cause = null){ // the parameter with problem\r\n        super(cause ? `${cause} => این عبارت باید اسکالر باشد!!` : \"این خطا بدلیل استفاده از یک عبارت غیر اسکالر در مکان غیر مجاز رخ داده است!\")\r\n        this.name = \"NotNumberError\";\r\n        this.type = \"Numeric\";\r\n        this.code = error_codes.not_scalar;\r\n        this.cause = cause;\r\n    }\r\n\r\n    describe = () => {\r\n        console.log(this.message + (this.cause ? \"\\n\" + this.cause : \"\"));\r\n        return this.message + (this.cause ? \"\\n\" + this.cause.toString() : \"\");\r\n    }\r\n}","import NotScalarError from \"errors/algebra/NotScalarError\";\r\nimport StandardInputSignal from \"math/input-signals\";\r\nimport { round, strictPrecisionFormat } from \"../calculus\";\r\n\r\nclass Algebra {\r\n    // symbolic expressions\r\n    constructor(\r\n        a,\r\n        { symbol = \"t\", type = \"poly\", b, dot, plus, teta = 0, previous, input }\r\n    ) {\r\n        // dot is the interface between terms\r\n        // g(t) = a * f(t) * {dot: as Algebra}\r\n        // teta is the offset for wt + alpha in sin/cos/tan/..\r\n\r\n        this.symbol = symbol;\r\n        this.type = type.toLowerCase();\r\n        this.setA(a).setB(b).setTeta(teta);\r\n\r\n        this.input = input; // u(t), r(t), puls, ...\r\n        if (dot) {\r\n            this.dot = dot.copy();\r\n        } // multiply a Algebra from different type into 'this'\r\n\r\n        if (plus) {\r\n            this.plus = plus.copy();\r\n            this.simplify();\r\n        } // add another Algebra with different type to this one\r\n\r\n        this.previous = previous; // the previous term in the chained Algebra objects\r\n        // term.plus => next term, term.previous => previous term, term.dot => an algebra from another type that is multiplied to actual term\r\n        // F(u) = a.f(u).dot(u) + term.plus(u)\r\n        this.link();\r\n    }\r\n    static identify = (parameter) => {\r\n        if (parameter instanceof Array)\r\n        return parameter.map((pi) =>\r\n                pi instanceof Algebra || pi instanceof StandardInputSignal\r\n                    ? pi.copy()\r\n                    : round(pi)\r\n            );\r\n        else if (parameter instanceof Algebra) {\r\n            return parameter.copy();\r\n        } else if (typeof parameter === \"number\") return round(parameter);\r\n        else if (typeof parameter === \"string\") return parameter;\r\n        else if (!parameter) return 0;\r\n        throw new NotScalarError(parameter);\r\n    };\r\n    setA = (a) => {\r\n        this.a = Algebra.identify(a);\r\n        return this;\r\n    };\r\n    getA = () => this.a;\r\n\r\n    setB = (b) => {\r\n        this.b = Algebra.identify(b);\r\n        return this;\r\n    };\r\n    getB = () => this.b;\r\n\r\n    setTeta = (teta) => {\r\n        this.teta = Algebra.identify(teta);\r\n        return this;\r\n    };\r\n    getTeta = () => this.teta;\r\n    setInputSignal = (input) => {\r\n        this.input = input;\r\n        return this;\r\n    };\r\n    // CONNECT AND LINK METHODS, FIND FIRST TERM AND LAST TERM AND ...\r\n    end = () => {\r\n        // returns the end term in the algebratic chain\r\n        let last = this;\r\n        while (last.plus) last = last.plus;\r\n        return last;\r\n    };\r\n\r\n    first = () => {\r\n        // returns the first term in the algebratic chain\r\n        let fst = this;\r\n        while (fst.previous) fst = fst.previous;\r\n        return fst;\r\n    };\r\n\r\n    enddot = () => {\r\n        // returns the end term in the algebratic chain\r\n        let last = this;\r\n        while (last.dot) last = last.dot;\r\n        return last;\r\n    };\r\n\r\n    firstdot = () => {\r\n        // returns the first term in the algebratic chain\r\n        let fst = this;\r\n        // WRONG *****************************\r\n        //while (fst.previous) fst = fst.previous;\r\n        return fst;\r\n    };\r\n    link = () => {\r\n        // some times .previous links are broken; so i decided to write this method just to make sure everything is connected\r\n        let term = this.first();\r\n        if (!term) term = this; // in case this.first() returns wrong answer\r\n        while (term.plus) {\r\n            if (term.plus) term.plus.previous = term;\r\n            term = term.plus; // go to next term in the chain\r\n        }\r\n        return this;\r\n    };\r\n\r\n    copy = (linkPrevious = false) =>\r\n        new Algebra(this.a, {\r\n            type: this.type,\r\n            b: this.b,\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            symbol: this.symbol,\r\n            teta: this.teta,\r\n            input: this.input,\r\n            previous: linkPrevious ? this.previous : null,\r\n        });\r\n\r\n    // SORT THE MULTIPLIERD TERMS ( TERMS CONNECTED WITH this.dot) IN A SPECIFIC ORDER (FOR BETTER SHOW AND COMPARE AND ETC.)\r\n    // LOOK HERE IT STILL HAS BUGS\r\n    sort = () => {\r\n        // sort .dot in special order: poly - exp - frac - ...\r\n        const orders = [\"poly\", \"exp\", \"frac\"];\r\n        let position = this;\r\n        for (const order of orders) {\r\n            while (position) {\r\n                let func = position.dot;\r\n                while (func) {\r\n                    if (func.type === order && !position.isPrior(order)) {\r\n                        const temp = position.copy();\r\n                        position.a =\r\n                            func.a instanceof Array ? [...func.a] : func.a;\r\n                        position.type = func.type;\r\n                        position.symbol = func.symbol;\r\n                        if (func.b instanceof Array) position.b = [...func.b];\r\n                        else position.b = func.b;\r\n\r\n                        func.a = temp.a instanceof Array ? [...temp.a] : temp.a;\r\n                        func.type = temp.type;\r\n                        func.symbol = temp.symbol;\r\n                        if (temp.b instanceof Array) func.b = [...temp.b];\r\n                        else func.b = temp.b;\r\n                    }\r\n                    func = func.dot;\r\n                }\r\n                position = position.dot;\r\n            }\r\n        }\r\n    };\r\n\r\n    isPrior = (order) => {\r\n        const orders = [\"poly\", \"exp\", \"frac\"];\r\n        const thisValue = orders.findIndex((or) => or === this.type);\r\n        const orderValue = orders.findIndex((or) => or === order);\r\n        return thisValue <= orderValue;\r\n    };\r\n\r\n    // CHECK IF ONE TERMS CAN BE ADDED TO ANOTHER ONE (MEANING THEY HAVE SAME PARAMETRIC TERMS)\r\n    unifiable = (exp) => {\r\n        // check if this is unifiable with expression:exp\r\n        //this.sort();\r\n        //exp.sort();\r\n        if (exp && this.type === exp.type && this.symbol === exp.symbol) {\r\n            // check if this and exp are sumable\r\n            // check .dot s:\r\n            let isUnifiable = true;\r\n            if (this.dot || exp.dot)\r\n                isUnifiable = this.dot && this.dot.unifiable(exp.dot);\r\n\r\n            if (this.b instanceof Array && exp.b instanceof Array) {\r\n                if (this.b.length === exp.b.length) {\r\n                    const sameOnes = this.b.filter(\r\n                        (item, idx) => item === exp.b[idx]\r\n                    );\r\n                    return isUnifiable && this.b.length === sameOnes.length;\r\n                }\r\n            } else if (this.b instanceof Algebra)\r\n                return isUnifiable && this.b.equals(exp.b);\r\n            return isUnifiable && exp.b === this.b;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    static valueOf = (x, t = 0) => {\r\n        if (x) {\r\n            let value = 0;\r\n            if (x instanceof Algebra || x instanceof StandardInputSignal)\r\n                value = x.$(t);\r\n            else if (x instanceof Array)\r\n                value = Algebra.polynomialValueAt(x, t);\r\n            else value = x;\r\n            return value;\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    static polynomialValueAt = (arr, t) => {\r\n        let value = 0;\r\n        const n = arr.length - 1;\r\n        for (let i = 0; i <= n; i++) {\r\n            value += arr[i] * t ** (n - i);\r\n        }\r\n        return value;\r\n    };\r\n    // REMOVE REDUNDANT TERMS, SIGNS AND ETC.\r\n    simplify = () => {\r\n        let term = this.first();\r\n        while (term) {\r\n            if (term instanceof Algebra) {\r\n                if (\r\n                    term.a === 0 ||\r\n                    Algebra.polynomial(term.a, term.symbol) === 0\r\n                ) {\r\n                    if (term.previous) {\r\n                        term.previous.plus = term.plus;\r\n                    } else {\r\n                        // remove first term and transfer the second term to first one\r\n                        if (this === term) term.redundant = true;\r\n                        if (term.plus) {\r\n                            term = term.plus.copy(true);\r\n                            if (term.plus) {\r\n                                term.plus = term.plus.plus;\r\n                                if (term.plus) term.plus.previous = term;\r\n                            }\r\n                            term.previous = null;\r\n                        }\r\n                    }\r\n                    // }\r\n                }\r\n            }\r\n            term = term.plus;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    $ = (t) => {\r\n        // valueOf function in certain point\r\n        // I used character $ in many places as acronym for \"set\" in setters, so $ here means that set the t ( or x or whatever) with a certain point\r\n        // for each type just implement the method literally\r\n        let result = this.valueAt(t);\r\n        if (this.dot) result *= this.dot.$(t);\r\n        if (this.plus) result += this.plus.$(t);\r\n\r\n        return result;\r\n    };\r\n\r\n    label = (name = undefined, index = undefined) =>\r\n        (name\r\n            ? name +\r\n              (index !== undefined ? \"_{\" + index + \"}\" : \"\") +\r\n              \"(\" +\r\n              this.symbol +\r\n              \") = \"\r\n            : \"\") + this.toString();\r\n\r\n    // RETURNS THE BEST AND SIMPLE AND SHORTEST WAY TO SHOW COEFFICIENTS\r\n    static coefy = (a_i, i, n) => {\r\n        if (a_i instanceof Algebra) {\r\n            let str = \"\";\r\n            let ai = a_i.copy();\r\n            if (i > 0) {\r\n                // write a method to edit all the + - occuring next to each other in toString()\r\n                if (ai.type === \"complex\" && +ai.a === ai.a) {\r\n                    if (ai.a < 0) {\r\n                        str += \" - \";\r\n                        ai.a *= -1;\r\n                    } else if (!ai.a) {\r\n                        ai.b = +ai.b;\r\n                        if (ai.b < 0) {\r\n                            str += \" - \";\r\n                            ai.b *= -1;\r\n                        } else str += \" + \";\r\n                    } else str += \" + \";\r\n                } else str += \" + \";\r\n            }\r\n            return str + ai.toString(i < n && a_i.hasMultiTerms());\r\n        }\r\n        if (a_i instanceof StandardInputSignal) {\r\n            //EDIT THIS PART TOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\r\n            let str = i > 0 ? \" + \" : \"\";\r\n            return str + a_i.toString(i < n && a_i.hasMultiTerms());\r\n        } else {\r\n            if (n === 0) return strictPrecisionFormat(a_i);\r\n            if (a_i === 0) return \"\";\r\n            if (i !== 0) {\r\n                let s = \"\";\r\n                if (a_i < 0) {\r\n                    s += \" - \";\r\n                    a_i *= -1;\r\n                } else s += \" + \";\r\n\r\n                if (a_i === 1 && i < n) return s;\r\n                return s + strictPrecisionFormat(a_i);\r\n            }\r\n            if (a_i === 1) return \"\";\r\n            if (a_i === -1) return \"-\";\r\n\r\n            return strictPrecisionFormat(a_i);\r\n        }\r\n    };\r\n\r\n    // DECIPHER THE OBJECT TO ITS POLYNOMINAL FORM (IF IT IS ONE ACTUALLY)\r\n    static polynomial = (coefs, symbol) => {\r\n        if (coefs instanceof Array) {\r\n            const n = coefs.length - 1;\r\n            if (\r\n                !n ||\r\n                !coefs.slice(0, n).filter((ci) => ci.toString() !== \"0\").length\r\n            )\r\n                return coefs[n].toString();\r\n            return coefs\r\n                .map((a_i, i) =>\r\n                    a_i\r\n                        ? Algebra.coefy(a_i, i, n) +\r\n                          (i < n\r\n                              ? symbol +\r\n                                (i < n - 1\r\n                                    ? \"^{\" + (n - i).toString() + \"}\"\r\n                                    : \"\")\r\n                              : \"\")\r\n                        : \"\"\r\n                )\r\n                .join(\"\"); // joins all the coefficients, symbols, etc all together as for polynomal functions\r\n        }\r\n        return coefs.toString();\r\n    };\r\n\r\n    join = () => {\r\n        // connect this term to its next terms; considering the right use of + or -\r\n        if (this.plus) {\r\n            let operator = \"+\",\r\n                next = this.plus.copy();\r\n            if (next.a instanceof Array) {\r\n                if (next.a[0] < 0) {\r\n                    operator = \"-\";\r\n                    next.a[0] *= -1;\r\n                }\r\n            } else {\r\n                if (next.a < 0) {\r\n                    operator = \"-\";\r\n                    next.a *= -1;\r\n                }\r\n            }\r\n            return operator + next.toString();\r\n        }\r\n        return \"\";\r\n    };\r\n\r\n    hasMultiTerms = () => {\r\n        if (this.plus) return true;\r\n        if (this.a instanceof Array && this.type !== \"frac\")\r\n            return this.a.filter((ai) => ai !== 0).length > 1;\r\n        return false;\r\n    };\r\n    isTriangular = () =>\r\n        this.type === \"sin\" ||\r\n        this.type === \"cos\" ||\r\n        this.type === \"tan\" ||\r\n        this.type === \"cot\";\r\n\r\n    // MATHEMATICAL OPERATIONS\r\n    // static add = (expressions) => expressions.map((el) => el.toString()).join(\" + \");\r\n    add = (right) => {\r\n        // result = this + operand\r\n        let result = this.link().copy();\r\n        if (right instanceof Algebra) {\r\n            let operand = right.link().copy();\r\n\r\n            let x = result; // now we try to add each term with its unifiable term in y\r\n            while (x) {\r\n                let y = operand;\r\n                while (y) {\r\n                    if (x.unifiable(y)) {\r\n                        if (x.a instanceof Algebra) x.a = x.a.add(y.a);\r\n                        else if (y.a instanceof Algebra) x.a = y.a.add(x.a);\r\n                        // **************************************************\r\n                        // else if x.a || y.a instanceof StandardInputSignal\r\n                        // *********************************************\r\n                        else if (x.a instanceof Array) {\r\n                            if (y.a instanceof Array) {\r\n                                if (y.a.length > x.a.length) x.a = [...y.a];\r\n                                for (\r\n                                    let i = 1;\r\n                                    i <= y.a.length && i <= x.a.length;\r\n                                    i++\r\n                                )\r\n                                    x.a[x.a.length - i] += y.a[y.a.length - i];\r\n                            } else {\r\n                                x.a[x.a.length - 1] += y.a;\r\n                            }\r\n                        } else {\r\n                            x.a += y.a;\r\n                        }\r\n                        // remove the term in y that has been processed\r\n                        if (y.previous) {\r\n                            y.previous.plus = y.plus;\r\n                            if (y.plus) y.plus.previous = y.previous;\r\n                            y.a = 0;\r\n                        }\r\n\r\n                        // its the first term\r\n                        else operand = operand.plus;\r\n                        // after this the garbage collector will remove the term because it has no reference to it\r\n                    }\r\n                    y = y.plus;\r\n                }\r\n                // if(x.plus) x.plus.previous = x;\r\n                x = x.plus; // go to next term in the chain\r\n            }\r\n\r\n            if (operand) {\r\n                // if the above algorythm leaves operand with non-null value\r\n                /// it means there was terms in the operand's algebratic chain that are'nt unifiable with x terms\r\n                // so we must connect the leftovers to last terms of the result\r\n                if (Algebra.polynomial(result.a, result.symbol) !== \"0\") {\r\n                    if (\r\n                        Algebra.polynomial(operand.getA(), operand.symbol) !==\r\n                        \"0\"\r\n                    ) {\r\n                        let endTerm = result.end();\r\n                        endTerm.plus = operand;\r\n                        endTerm.plus.previous = result;\r\n                    }\r\n                } else result = operand.copy(); // connect to next term\r\n            }\r\n            return result.simplify();\r\n        } else if (right instanceof StandardInputSignal) {\r\n            const endTerm = result.end();\r\n            endTerm.plus = right.copy();\r\n            endTerm.plus.previous = endTerm;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    arrangeDots = () => {\r\n        let term = this;\r\n        let input = null;\r\n        while (term.dot) {\r\n            // enhance the algo for cases that more than one input signal erxists in .dot chain\r\n            if (term.dot instanceof StandardInputSignal) {\r\n                input = term.dot;\r\n                term.dot = term.dot.dot;\r\n            }\r\n            if (term.dot) term = term.dot;\r\n        }\r\n        term.dot = input;\r\n    };\r\n    // INCOMPLETE ***********\r\n    multiply = (operand) => {\r\n        const y = this.copy().link();\r\n        if (operand instanceof Algebra) {\r\n            // operand algebra or complex\r\n            // ***** TODO:  ****************\r\n            if (operand.type === \"poly\") {\r\n                if (this.type === \"poly\" || this.type === \"frac\") {\r\n                    // NEEDS ERDITING for FRACTIONs\r\n                    if (this.symbol === operand.symbol) {\r\n                        const ao = operand.getA();\r\n                        const no = ao.length - 1;\r\n                        const As = [];\r\n                        for (let i = no; i >= 0; i--) {\r\n                            if (operand.a[i]) {\r\n                                const zeros = Array(no - i).fill(0);\r\n                                const a = [...y.a].map((yai) =>\r\n                                    yai instanceof Algebra\r\n                                        ? yai.multiply(operand.a[i])\r\n                                        : operand.a[i] instanceof Algebra\r\n                                        ? operand.a[i].multiply(yai)\r\n                                        : yai * operand.a[i]\r\n                                );\r\n                                a.push(...zeros);\r\n                                As.push(a);\r\n                            }\r\n                        }\r\n                        // now sum all the products\r\n                        let product = As.pop();\r\n                        for (let j = 0; j < As.length; j++)\r\n                            for (\r\n                                let i = 1;\r\n                                i <= As[j].length && i <= product.length;\r\n                                i++\r\n                            )\r\n                                if (\r\n                                    product[product.length - i] instanceof\r\n                                    Algebra\r\n                                )\r\n                                    product[product.length - i] = product[\r\n                                        product.length - i\r\n                                    ].add(As[j][As[j].length - i]);\r\n                                else if (\r\n                                    As[j][As[j].length - i] instanceof Algebra\r\n                                )\r\n                                    product[product.length - i] = As[j][\r\n                                        As[j].length - i\r\n                                    ].add(product[product.length - i]);\r\n                                else\r\n                                    product[product.length - i] +=\r\n                                        As[j][As[j].length - i];\r\n\r\n                        y.a = product;\r\n                        if (operand.dot) {\r\n                            // link dots ***IS THIS TRUE?>***\r\n                            const endDotTerm = y.enddot();\r\n                            endDotTerm.dot = operand.dot.copy(); // multiply\r\n                            endDotTerm.dot.previous = endDotTerm;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (y.type !== operand.type && operand.plus) {\r\n                // like: exp(f(...)) * [Asin(...) * Bcos(...)]\r\n                // UPDATE SELF MULTIPLY AFTER SOLVING THIS ISSUE\r\n                y.plus = y.multiply(operand.plus.copy());\r\n                const lastyDot = y.enddot();\r\n                if (\r\n                    typeof y.a === \"number\" &&\r\n                    typeof operand.a === \"number\" &&\r\n                    operand.a !== 1\r\n                ) {\r\n                    y.a *= operand.a;\r\n                    operand.a = 1;\r\n                }\r\n                lastyDot.dot = operand.copy();\r\n                lastyDot.dot.previous = lastyDot;\r\n                // UPDATE SELF MULTIPLY AFTER SOLVING THIS ISSUE\r\n            } else {\r\n                const endDotTerm = y.enddot();\r\n                if (typeof y.a === \"number\" && typeof operand.a === \"number\") {\r\n                    y.a *= operand.a;\r\n                    operand.a = 1;\r\n                }\r\n                endDotTerm.dot = operand.copy(); // multiply\r\n                endDotTerm.dot.previous = endDotTerm;\r\n            }\r\n            if (y.plus) y.plus = y.plus.multiply(operand);\r\n            if (operand.plus) y.end().plus = y.multiply(operand.plus);\r\n            return y; // for now just to avoid crashes\r\n        } else if (operand instanceof StandardInputSignal) {\r\n            // const endDotTerm = y.enddot();\r\n            // endDotTerm.dot = operand.copy(); // multiply\r\n            // endDotTerm.dot.previous = endDotTerm;\r\n            y.input = operand.copy();\r\n            if (y.plus) y.plus = y.plus.multiply(operand);\r\n        } else {\r\n            // scalar multiply\r\n            if (operand instanceof Algebra) {\r\n            } else {\r\n                if (y.a instanceof Array) y.a = y.a.map((ai) => operand * ai);\r\n                else if (y.a instanceof Algebra) y.a = y.a.multiply(operand);\r\n                else y.a = y.a * operand;\r\n            }\r\n            if (y.plus) y.plus = y.plus.multiply(operand);\r\n        }\r\n        return y;\r\n    };\r\n\r\n    selfmultiply = (operand) => {\r\n        if (operand instanceof Algebra) {\r\n            // operand algebra or complex\r\n            // ***** TODO:  ****************\r\n            if (operand.type === \"poly\") {\r\n                if (this.type === \"poly\" || this.type === \"frac\") {\r\n                    // NEEDS ERDITING for FRACTIONs\r\n                    if (this.symbol === operand.symbol) {\r\n                        const ao = operand.getA();\r\n                        const no = ao.length - 1;\r\n                        const As = [];\r\n                        for (let i = no; i >= 0; i--) {\r\n                            if (ao[i]) {\r\n                                const zeros = Array(no - i).fill(0);\r\n                                const a = [...this.a].map(\r\n                                    (yai) => yai * operand[i]\r\n                                );\r\n                                a.push(...zeros);\r\n                                As.push(a);\r\n                            }\r\n                        }\r\n                        // now sum all the products\r\n                        const product = As.pop();\r\n                        for (let j = 0; j < As.length; j++)\r\n                            for (\r\n                                let i = 1;\r\n                                i <= As[j].length && i <= product.length;\r\n                                i++\r\n                            )\r\n                                product[product.length - i] +=\r\n                                    As[j][As[j].length - i];\r\n                        this.a = product;\r\n                        if (operand.dot) {\r\n                            // link dots ***IS THIS TRUE?>***\r\n                            const endDotTerm = this.enddot();\r\n                            endDotTerm.dot = operand.dot.copy(); // multiply\r\n                            endDotTerm.dot.previous = endDotTerm;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (this.type !== operand.type && operand.plus) {\r\n                // like: exp(f(...)) * [Asin(...) * Bcos(...)]\r\n                // UPDATE SELF MULTIPLY AFTER SOLVING THIS ISSUE\r\n                this.plus = this.selfmultiply(operand.plus.copy());\r\n                const lastyDot = this.enddot();\r\n                if (\r\n                    typeof this.a === \"number\" &&\r\n                    typeof operand.a === \"number\" &&\r\n                    operand.a !== 1\r\n                ) {\r\n                    this.a *= operand.a;\r\n                    operand.a = 1;\r\n                }\r\n                lastyDot.dot = operand.copy();\r\n                lastyDot.dot.previous = lastyDot;\r\n                // UPDATE SELF MULTIPLY AFTER SOLVING THIS ISSUE\r\n            } else {\r\n                const endDotTerm = this.enddot();\r\n                if (\r\n                    typeof this.a === \"number\" &&\r\n                    typeof operand.a === \"number\"\r\n                ) {\r\n                    this.a *= operand.a;\r\n                    operand.a = 1;\r\n                }\r\n                endDotTerm.dot = operand.copy(); // multiply\r\n                endDotTerm.dot.previous = endDotTerm;\r\n            }\r\n            if (this.plus) this.plus.selfmultiply(operand);\r\n            // if (operand.plus) this.end().plus = this.selfmultiply(operand.plus);\r\n        } else if (operand instanceof StandardInputSignal) {\r\n            // this.dot = operand.copy(); // multiply\r\n            // this.dot.previous = this;\r\n            this.input = operand.copy();\r\n            if (this.plus) this.plus.selfmultiply(operand);\r\n            if (operand.plus) this.end().plus = this.multiply(operand.plus);\r\n        } else {\r\n            // scalar multiply\r\n            if (this.a instanceof Array)\r\n                this.a = this.a.map((ai) => operand * ai);\r\n            else this.a *= operand;\r\n\r\n            if (this.plus) this.plus.selfmultiply(operand);\r\n        }\r\n    };\r\n\r\n    negation = () => this.multiply(-1);\r\n\r\n    substract = (operand) => this.add(operand.negation());\r\n\r\n    devide = (operand) => {\r\n        if (operand === +operand)\r\n            // scaler\r\n            return this.multiply(1 / +operand);\r\n        // u need to handle Complex objects as Algebra using their type to recognize them\r\n        if (operand instanceof Algebra) {\r\n            if (operand.type === \"poly\" && this.symbol === operand.symbol) {\r\n                return new Algebra(this.getA(), {\r\n                    type: \"frac\",\r\n                    b: operand.getA(),\r\n                    symbol: this.symbol,\r\n                });\r\n            }\r\n            return this.copy(); // for now just to avoid crashes\r\n        }\r\n    };\r\n\r\n    devideInverse = (k) => {\r\n        if (k === +k) {\r\n            return new Algebra([k], {\r\n                symbol: this.symbol,\r\n                type: \"frac\",\r\n                b: [1],\r\n            });\r\n        } else if (k instanceof Algebra) return k.devide(this);\r\n    };\r\n\r\n    laplace = () => {};\r\n\r\n    static areTheSame = (el1, el2) => {\r\n        // checkes the sameness of parameters like .a .b .teta , etc.\r\n        if (el1 instanceof Algebra && el2 instanceof Algebra)\r\n            return el1.equals(el2);\r\n        else if (el1 instanceof Array && el2 instanceof Array) {\r\n            if (el1.length === el2.length) {\r\n                let i = 0;\r\n                for (i = 0; i < el1.length; i++) if (el1[i] !== el2[i]) break;\r\n                return i >= el1.length;\r\n            }\r\n        }\r\n        return typeof el1 === typeof el2 && el1 === el2;\r\n    };\r\n    equals = (operand) =>\r\n        operand instanceof Algebra &&\r\n        this.type === operand.type &&\r\n        this.symbol === operand.symbol &&\r\n        this.type === operand.type &&\r\n        this.symbol === operand.symbol &&\r\n        Algebra.areTheSame(this.a, operand.a) &&\r\n        Algebra.areTheSame(this.b, operand.b) &&\r\n        Algebra.areTheSame(this.teta, operand.teta) &&\r\n        (!this.dot || this.dot.equals(operand.dot)) &&\r\n        (!this.plus || this.plus.equals(operand.plus)) &&\r\n        (!this.previous || this.previous.equals(operand.previous));\r\n\r\n    static areTheseTwoEqual = (p1, p2) =>\r\n        p1 instanceof Algebra\r\n            ? p1.equals(p2)\r\n            : p2 instanceof Algebra\r\n            ? p2.equals(p1)\r\n            : p1 === p2;\r\n    // DECIPHERS THE CONNECT OBJECTS TO UNDERSTANDABLE MATHMATICALLY SHAPED TEXT\r\n    // IT IS FORMATTED COMPATIBLE FOR MathJax component\r\n    toString = (parenthesis = false) => {\r\n        // this.arrangeDots();\r\n        this.simplify(); // simplify current chain that's left from unknown number of operations\r\n        let formula = \"\";\r\n        // if ... + 0 || 0 + ... appears ===>>>>> see below !!\r\n        if (!this.a) return \"0\"; // what if **************************************** 0 / 0\r\n        if (parenthesis) formula += \"(\";\r\n        switch (this.type.toLowerCase()) {\r\n            case \"exp\": {\r\n                // if (this.a < 0) formula += \"(\";\r\n                let a0 = this.a;\r\n                if (a0 < 0) {\r\n                    formula += \"-\";\r\n                    a0 *= -1;\r\n                }\r\n                if (a0 !== 1)\r\n                    if (a0 instanceof Algebra)\r\n                        formula += a0.toString(\r\n                            a0 instanceof Algebra && a0.hasMultiTerms()\r\n                        );\r\n                    else if (a0 instanceof Array)\r\n                        // testTEST\r\n                        formula += Algebra.polynomial(a0, this.symbol);\r\n                    // FOR TEST\r\n                    else formula += strictPrecisionFormat(a0);\r\n                if (this.dot instanceof Algebra)\r\n                    formula += this.dot.toString(\r\n                        this.dot instanceof Algebra && this.dot.hasMultiTerms()\r\n                    );\r\n                if (this.b !== 0) {\r\n                    if (this.a !== 0) {\r\n                        formula += \"e^{\";\r\n                        let e0 = this.b;\r\n                        if (this.b instanceof Algebra)\r\n                            formula += this.b.toString(\r\n                                this.b instanceof Algebra &&\r\n                                    this.b.hasMultiTerms()\r\n                            );\r\n                        else if (this.b instanceof Array)\r\n                            formula += Algebra.polynomial(this.b, this.symbol);\r\n                        else {\r\n                            if (e0 < 0) {\r\n                                formula += \"-\";\r\n                                e0 *= -1;\r\n                            }\r\n                            if (e0 !== 1) formula += e0;\r\n                        }\r\n                        formula += this.symbol + \"}\";\r\n                    }\r\n                    if (this.input) formula += this.input.toString();\r\n                } else {\r\n                    if (a0 !== 1 || !this.dot)\r\n                        formula += strictPrecisionFormat(this.a);\r\n                }\r\n                // if (this.a < 0) formula += \")\";\r\n                if (this.plus) formula += this.join(); // if there's a next term: casscade toString() calls\r\n                break;\r\n            }\r\n            case \"poly\":\r\n                formula += Algebra.polynomial(this.a, this.symbol);\r\n                if (this.dot instanceof Algebra)\r\n                    formula += this.dot.toString(\r\n                        this.dot instanceof Algebra && this.dot.hasMultiTerms()\r\n                    );\r\n                if (this.input) {\r\n                    formula += (parenthesis ? \")\" : \"\") + this.input.toString();\r\n                    parenthesis = false;\r\n                }\r\n                if (this.plus) formula += this.join(); // if there's a next term: casscade toString() calls\r\n                break;\r\n            case \"frac\": {\r\n                if (this.dot instanceof Algebra)\r\n                    formula += this.dot.toString(\r\n                        this.dot instanceof Algebra && this.dot.hasMultiTerms()\r\n                    );\r\n                const numerator = Algebra.polynomial(this.a, this.symbol);\r\n                formula +=\r\n                    numerator !== \"0\"\r\n                        ? \"\\\\frac{\" +\r\n                          numerator +\r\n                          \"}{\" +\r\n                          Algebra.polynomial(this.b, this.symbol) +\r\n                          \"}\"\r\n                        : \"0\";\r\n                if (this.input) formula += this.input.toString();\r\n                if (this.plus) formula += this.join(); // if there's a next term: casscade toString() calls\r\n\r\n                break;\r\n            }\r\n            case \"sin\":\r\n            case \"asin\":\r\n            case \"cos\":\r\n            case \"tan\":\r\n            case \"cot\": {\r\n                // if (this.a < 0) formula += \"(\";\r\n                let a0 = this.a;\r\n                if (a0 < 0) {\r\n                    formula += \"-\";\r\n                    a0 *= -1;\r\n                }\r\n                if (a0 !== 1)\r\n                    if (a0 instanceof Algebra)\r\n                        formula += a0.toString(\r\n                            a0 instanceof Algebra && a0.hasMultiTerms()\r\n                        );\r\n                    else if (a0 instanceof Array)\r\n                        formula += Algebra.polynomial(a0, this.symbol);\r\n                    // FOR TEST\r\n                    else formula += strictPrecisionFormat(a0);\r\n                if (this.a !== 0) {\r\n                    if (this.dot && this.dot instanceof Algebra)\r\n                        formula += this.dot.toString(\r\n                            this.dot instanceof Algebra &&\r\n                                this.dot.hasMultiTerms()\r\n                        );\r\n                    if (this.b !== 0) {\r\n                        formula += this.type;\r\n                        if (this.b instanceof Algebra) {\r\n                            formula += this.b.toString(\r\n                                this.b instanceof Algebra &&\r\n                                    this.b.hasMultiTerms()\r\n                            );\r\n                        } else if (this.b instanceof Array)\r\n                            formula += Algebra.polynomial(this.b, this.symbol);\r\n                        // FOR TEST\r\n                        else {\r\n                            let w0 = this.b;\r\n                            formula += \"(\";\r\n                            if (w0 < 0) {\r\n                                formula += \"-\";\r\n                                w0 *= -1;\r\n                            }\r\n                            if (w0 !== 1) formula += strictPrecisionFormat(w0);\r\n                            formula += this.symbol;\r\n                            if (this.teta instanceof Algebra)\r\n                                formula += this.teta.toString();\r\n                            else if (this.teta) {\r\n                                let e0 = this.teta;\r\n                                if (e0 < 0) {\r\n                                    formula += \" - \";\r\n                                    e0 *= -1;\r\n                                } else formula += \" + \";\r\n                                formula += strictPrecisionFormat(e0);\r\n                            }\r\n                            formula += \")\";\r\n                        }\r\n                        if (this.input) formula += this.input.toString();\r\n                    }\r\n                    // simple num\r\n                } else {\r\n                    if (a0 !== 1 || !this.dot)\r\n                        formula += strictPrecisionFormat(this.a);\r\n                }\r\n                // if (this.a < 0) formula += \")\";\r\n                if (this.plus) formula += this.join(); // if there's a next term: casscade toString() calls\r\n                break;\r\n            }\r\n\r\n            default:\r\n                return null;\r\n        }\r\n        if (parenthesis) formula += \")\";\r\n\r\n        return formula;\r\n    };\r\n    toArray = () => {\r\n        let x = [];\r\n        const params = [\"a\", \"b\", \"teta\", \"symbol\", \"type\"],\r\n            linkers = [\"dot\", \"input\", \"plus\", \"previous\"];\r\n        for (const [key, value] of Object.entries(this)) {\r\n            if (typeof value !== \"function\") {\r\n                if (value) {\r\n                    // maximum toArray call happens\r\n                    if (params.filter((p) => p === key).length)\r\n                        x[key] =\r\n                            value instanceof Algebra ? value.toArray() : value;\r\n                    //)((value instanceof StandardInputSignal ? value.copy() : ));\r\n                    else if (linkers.filter((l) => l === key).length)\r\n                        x[key] =\r\n                            value instanceof StandardInputSignal\r\n                                ? value.copy()\r\n                                : value.toArray();\r\n                }\r\n            }\r\n        }\r\n        return x;\r\n    };\r\n}\r\n\r\nexport default Algebra;\r\n","import { round, strictPrecisionFormat } from \"../calculus\";\r\n\r\nexport default class StandardInputSignal {\r\n    constructor(amplitude = 1, type = \"u\", symbol = \"t\") {\r\n        this.symbol = symbol;\r\n        this.type = type;\r\n        this.amp = round(amplitude);\r\n    }\r\n\r\n    copy = () => new StandardInputSignal(this.amp, this.type, this.symbol);\r\n\r\n    toString = () => {\r\n        let str = \"\",\r\n            a = this.amp;\r\n        if (this.amp === -1) {\r\n            str += \"-\";\r\n            a *= -1;\r\n        }\r\n        if (a !== 1) str += strictPrecisionFormat(a);\r\n        return str + `${this.type}(${this.symbol})`;\r\n    };\r\n\r\n    ampiltude = () => this.amp;\r\n}\r\n"],"names":["Complex","preal","pimage","params","symbol","type","b","hasMultiTerms","plus","a","toString","parenthesis","showJ1","isZero","rl","formula","Algebra","round","im","getA","setA","join","real","imaginary","copy","linkPrevious","dot","previous","input","conjugate","negation","magnitude$2","magnitude","phase","definiteA","definiteB","Math","atan2","t","$","NaN","isReal","hasSameTypeWith","x","realify","add","operand","Re","Im","substract","equals","isConjugateWith","multiply","push","devide","denominator","result","isNaN","setB","raiseTo","power","floor","i","devideInverse","k","actual","ToCouples","arrComplex","n","length","reals","Array","fill","imaginaries","extract","strNumber","replace","isDigit","Number","slice","sign","img","MultiplyFactors","factors","s","factor","term","value","order","Exp","toSin","exp","cos","Cos","sin","Sin","amplitude","w","jw","pb","valueAt","numericT","Fraction","num","den","lim","numerator","Poly","setNumerator","setDenominator","y","toFormula","toTransferFunction","TransferFunction","getB","degree","powerTerm","derivative","against","da","expression","filter","ci","map","a_i","atn","aArray","Symbolic","halfTermsVisible","coef","inline","res","Step","amp","StandardInputSignal","Algebrite","require","Equation","solve","nroots","replaceAll","split","xi","separatorIndex","terms","approximate","method","Methods","newton","N","boundary","allRoots","isUnique","newRoot","findIndex","rt","isUniqueComplex","a0","an","abs","x0","algebra","rx","durandKerner","guess","f","random","roots","_","iter","xiN","sndTermDen","j","xjN","sndTerm","r","this","GetAlgebriteTerm","undefined","zeroPrecision","precision","termDegree","index","intExpI","symbolicPart","run","algebraf","df","xs","dfx0","fx","middlePoint","expectedRate","poles","xa","xb","rate","max","p","Set","nerdamer","Formula","mathPhrase","expressions","diff","iL","timeSymbol","L","frequencySymbol","knownVariables","evaluate","toDecimal","solveFor","ri","includes","toTeX","toAlgebra","GetTerm","RepetitiveFactors","fullRoots","root","knowns","fi","zeros","overshoot","t_rise","logMp","log10","zeta","PI","w_d","w_n","wn2","OmegaZetaPoles","find","ai","bi","setRoots","pi","sort","p1","p2","zi","z1","z2","getDampingSystemCharasteristics","getOrder","setOrder","getPoles","setPoles","getZeros","setZeros","poleOrder","pole","rplus","g","laplace","laplaceInverse","RootOrders","coefs","otherPoles","splice","dF","Specials","$Roots","z","q","g_s","c_t","$s","$t","stepify","lstep","step","m","nreal","a2","ka2b2","t_settle","timeConstant","s0","sp","sMinPower","min","Infinity","errors","sGs","s2Gs","Ks","Kr","Ka","numPhase","denPhase","Function","nyquist","PolarToComplex","bode","rootLocus","k_min","k_max","progressBarObject","dk","na","nb","progressLength","newTerm","progress","delta","offsetB","ib","offsetA","makeProgress","rootsByAlgebriteLocus","controlFeedback","controller","cs_gs","dampingCharasteristics","zs","ps","$1","$2","aplusb","ab","$WnZ","$design","$PID","Kp","Ti","Td","Roots","orders","alpha","beta","A","phi","teta","toExp","exp1","exp2","NotScalarError","cause","describe","console","log","message","name","code","error_codes","Error","identify","setTeta","getTeta","setInputSignal","end","last","first","fst","enddot","firstdot","link","position","func","isPrior","temp","or","unifiable","isUnifiable","sameOnes","item","idx","simplify","polynomial","redundant","label","operator","next","isTriangular","right","endTerm","arrangeDots","no","As","yai","product","pop","endDotTerm","lastyDot","selfmultiply","ao","areTheSame","toLowerCase","strictPrecisionFormat","e0","w0","toArray","linkers","key","l","Object","entries","parameter","valueOf","polynomialValueAt","arr","coefy","str","el1","el2","areTheseTwoEqual","ampiltude"],"sourceRoot":""}