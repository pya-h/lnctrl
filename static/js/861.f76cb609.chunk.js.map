{"version":3,"file":"static/js/861.f76cb609.chunk.js","mappings":"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","sources":["math/GraphBox.jsx","math/GraphMenu.jsx","views/input-boxes/SimpleParametersList.jsx","views/topics/chapter02/mass-spring-damper/lecture.jsx","views/topics/chapter02/mass-spring-damper/parameters.jsx","views/topics/chapter02/mass-spring-damper/index.jsx","views/topics/chapter02/MechanicSystemsModeling.jsx"],"sourcesContent":["import React from \"react\";\nimport Plot from \"react-plotly.js\";\n\nconst GraphBox = ({ traces, title, width, height = 500 }) => {\n    const temp_layout = {\n        xaxis: {\n            zeroline: true,\n            rangemode: \"tozero\",\n            autotick: false,\n            ticks: \"outside\",\n            tick0: 0,\n            dtick: 0.25,\n            ticklen: 8,\n            tickwidth: 4,\n            tickcolor: \"#000\",\n        },\n        yaxis: {\n            zeroline: true,\n            rangemode: \"tozero\",\n            autotick: false,\n            ticks: \"outside\",\n            tick0: 0,\n            dtick: 0.25,\n            ticklen: 8,\n            tickwidth: 4,\n            tickcolor: \"#000\",\n        },\n    };\n\n    return (\n        <Plot\n            style={{ textAlign: \"center\" }}\n            //id=\"graphBox\"\n            data={traces}\n            layout={{\n                // width: 1000,\n                // autosize: true,\n                margin: {\n                    t: 30, //top margin\n                    l: 30, //left margin\n                    r: 20, //right margin\n                    b: 30, //bottom margin\n                },\n                xaxis: {\n                    rangemode: \"tozero\",\n                },\n                yaxis: {\n                    rangemode: \"tozero\",\n                },\n                height,\n                title,\n                // hoverlabel: { bgcolor: \"#FFF\" },\n                hoverlabel: {align:'auto', boxmode: 'overlay', font:{color:'#000000FF'}},\n                legend: {orientation: 'h'}//, y: -0.3},\n            }}\n        />\n    );\n};\n\nexport default GraphBox;\n","import SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { useState, useEffect } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    graphFileName,\r\n    formulaFileName,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    const save = () => {\r\n        const graphBoxElement = document.getElementById(\"graphBox\");\r\n        // normal .blob has dark bakground\r\n        // convert background to light\r\n        const canvasWithBackground = document.createElement(\"canvas\");\r\n        canvasWithBackground.width = graphBoxElement.width;\r\n        canvasWithBackground.height = graphBoxElement.height;\r\n\r\n        const ctx = canvasWithBackground.getContext(\"2d\");\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, graphBoxElement.width, graphBoxElement.height);\r\n\r\n        ctx.drawImage(graphBoxElement, 0, 0);\r\n        // save\r\n        canvasWithBackground.toBlob((blob) => {\r\n            saveAs(blob, graphFileName);\r\n        });\r\n\r\n        html2canvas(document.getElementById(\"formulaBox\")).then((canvas) => {\r\n            canvas.toBlob((blob) => {\r\n                saveAs(blob, formulaFileName);\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={toggle3DMode}\r\n                >\r\n                    {is3DModeEnabled ? (\r\n                        <ThreeSixtyIcon />\r\n                    ) : (\r\n                        <ThreeDRotationIcon />\r\n                    )}\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"download graph\"\r\n                    component=\"span\"\r\n                    onClick={save}\r\n                >\r\n                    <SaveAltIcon />\r\n                </IconButton>\r\n\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import { Grid, InputAdornment, TextField } from \"@mui/material\";\nimport { MathJax } from \"better-react-mathjax\";\nimport { Fragment } from \"react\";\n\nconst SimpleParametersList = ({ parameters, setters, labels, units }) => {\n    return (\n        <Fragment>\n            {parameters instanceof Array &&\n                parameters.map((param, i) => (\n                    <Grid md={12} sm={4} xs={6} item>\n                        <TextField\n                            onChange={(e) => setters[i](e.target.value)}\n                            value={param}\n                            sx={{ width: \"100%\" }}\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"left\">\n                                        <MathJax>{labels[i]}</MathJax>\n                                    </InputAdornment>\n                                ),\n                                endAdornment: units[i] && (\n                                    <InputAdornment position=\"right\">\n                                        <MathJax>{units[i]}</MathJax>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </Grid>\n                ))}\n        </Fragment>\n    );\n};\n\nexport default SimpleParametersList;\n","import SubCard from \"../../../ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport mass_spring_damper_image from \"./images/mass-spring-damper.jpg.webp\";\r\nimport mechanic_system_elements from './images/mechanic-system-elements.jpg';\r\n\r\nimport \"views/topics/topics.css\";\r\n\r\nimport { MathJax } from \"better-react-mathjax\";\r\n\r\nconst formulaDisplacementDifferentialEquation =\r\n    \"$$m\\\\frac{d^2x(t)}{dt^2} + c\\\\frac{dx(t)}{dt} + kx(t) = F(t)$$\";\r\n\r\n\r\nconst MassSpringDamperLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"سیستم جرم فنر دمپر\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n        >\r\n            <Grid className=\"lecture-text\" item>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; همانطور که در سیستم های الکتریکی\r\n                    با یک مدار الکتریکی سروکار داشتیم که شامل ۳ المان اصلی\r\n                    بود،در سیستم های مکانیکی و هیدرولیکی هم عموما سه المان اصلی\r\n                    داریم:\r\n                </p>\r\n                <img\r\n                    className=\"lecture-image\"\r\n                    src={mass_spring_damper_image}\r\n                    alt=\"بارگذاری تصویر با مشکل مواجه شد\"\r\n                />\r\n            </Grid>\r\n            <Grid className=\"lecture-text\" item>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp;\r\n                    <span className=\"lecture-text-titr\">۱)‌ فنر: </span>\r\n                    اولین المان فنر هست که با اعمال یک نیرو می توانیم میزان کشش\r\n                    یا جمع شدگی یا فشردگی فنر را بدست آوریم. K ضریب ثابت فنر است\r\n                </p>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp;\r\n                    <span className=\"lecture-text-titr\">۲)‌ دمپر: </span>\r\n                    دومین المانی که در سیستم های مکانیکی و هیدرولیکی وجود دارد\r\n                    دمپر هست که با اعمال نیروی F می‌توان آن را باز یا بسته کرد.\r\n                </p>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp;\r\n                    <span className=\"lecture-text-titr\">۳)‌ جرم: </span>\r\n                    المان سوم، جرم است که اینرسی را در خود ذخیره می کند و با\r\n                    اعمال یک نیرو F می توان آن را جابه جا کرد. در سیستم های\r\n                    مکانیکی به طور معمول بین نیرو و جابه جایی المان یک رابطه\r\n                    برقرار است. در واقع نیرو به عنوان عامل محرک و جابه جایی به\r\n                    عنوان عامل متحرک عمل می‌کند.\r\n                </p>\r\n                <img\r\n                    className=\"lecture-image\"\r\n                    src={mechanic_system_elements}\r\n                    alt=\"بارگذاری تصویر با مشکل مواجه شد\"\r\n                />\r\n            </Grid>\r\n            <Grid className=\"lecture-text\" item>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp;\r\n                    پس از تحلیل این سیستم به معادله دیفرانسیل مرتبه دوم زیر می رسیم که پاسخ پاسخ آن در واقع میزان جابه جایی جرم m طی مدت زمان t خواهد بود.\r\n                </p>\r\n            </Grid>\r\n            <Grid item>\r\n                <MathJax>{formulaDisplacementDifferentialEquation}</MathJax>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default MassSpringDamperLecture;\r\n","import { Grid, Button } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport { useState, useEffect } from \"react\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$m = $$\",\r\n    \"$$c = $$\",\r\n    \"$$k = $$\",\r\n    \"$$F(t) = $$\",\r\n    \"$$x_i = $$\",\r\n    \"$$v_i = $$\",\r\n    \"$$t_i = $$\",\r\n    \"$$t_f = $$\",\r\n];\r\nconst parameterUnits = [\r\n    \"$$Kg$$\",\r\n    \"$$\\\\frac{N.s}{m}$$\",\r\n    \"$$\\\\frac{N}{m}$$\",\r\n    \"$$N$$\",\r\n    \"$$m$$\",\r\n    \"$$\\\\frac{m}{s}$$\",\r\n    \"$$sec$$\",\r\n    \"$$sec$$\",\r\n];\r\n\r\nconst MassSpringDamperParameters = ({\r\n    m,\r\n    c,\r\n    k,\r\n    F_t,\r\n    x_i,\r\n    v_i,\r\n    t_i,\r\n    t_f,\r\n    output,\r\n    $m,\r\n    $c,\r\n    $k,\r\n    $F_t,\r\n    $x_i,\r\n    $v_i,\r\n    $t_i,\r\n    $t_f,\r\n    $output,\r\n}) => {\r\n    const [out, $out] = useState(null);\r\n\r\n    useEffect(() => {\r\n        $out(output ? output.toLowerCase() : \"y\");\r\n    }, [output]);\r\n\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={0.6} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[m, c, k, F_t, x_i, v_i, t_i, t_f]}\r\n                    setters={[$m, $c, $k, $F_t, $x_i, $v_i, $t_i, $t_f]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n                <Grid xs={12} container>\r\n                    <Grid xs={4} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => $output(null)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={out === \"y\" ? \"contained\" : \"outlined\"}\r\n                        >\r\n                            x\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={4} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => $output(\"dy\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={out === \"dy\" ? \"contained\" : \"outlined\"}\r\n                        >\r\n                            v\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={4} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => $output(\"d2y\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={out === \"d2y\" ? \"contained\" : \"outlined\"}\r\n                        >\r\n                            a\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default MassSpringDamperParameters;\r\n","import MassSpringDamperLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport MassSpringDamperParameters from \"./parameters\";\r\n\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\n\r\nconst mechanicSystemEquation = (m, c, k, F_t) =>\r\n    \"$$\" +\r\n    m +\r\n    \"\\\\frac{d^2x(t)}{dt^2}\" +\r\n    (c ? \" + \" + (c !== 1 ? c : \"\") + \"\\\\frac{dx(t)}{dt}\" : \"\") +\r\n    (k ? \" + \" + (k !== 1 ? k : \"\") + \"x(t) = \" : \" = \") +\r\n    F_t +\r\n    \"$$\";\r\n\r\nconst indexedMechanicSystemEquation = (m, c, k, F_t, index) =>\r\n    \"$$\" +\r\n    m +\r\n    `\\\\frac{d^2x_{${index}}(t)}{dt^2}` +\r\n    (c ? ` + ` + (c !== 1 ? c : ``) + `\\\\frac{dx_{${index}}(t)}{dt}` : ``) +\r\n    (k ? ` + ` + (k !== 1 ? k : ``) + `x_{${index}}(t) = ` : ` = `) +\r\n    F_t +\r\n    \"$$\";\r\n\r\nconst symbols = {\r\n    in: \"t\",\r\n    out: (output) => {\r\n        switch (output) {\r\n            case \"dy\":\r\n                return \"v\";\r\n            case \"d2y\":\r\n                return \"a\";\r\n            default:\r\n                return \"x\";\r\n        }\r\n    },\r\n};\r\n\r\nconst MassSpringDamperExample = () => {\r\n    const [m, $m] = useState(100);\r\n    const [c, $c] = useState(1.0);\r\n    const [k, $k] = useState(1.0);\r\n    const [F_t, $F_t] = useState(0.0);\r\n    const [t_i, $t_i] = useState(0);\r\n    const [t_f, $t_f] = useState(5);\r\n    const [x_i, $x_i] = useState(0.0);\r\n    const [v_i, $v_i] = useState(1.0);\r\n    const [systems, setSystems] = useState([]);\r\n    const [traces, setTraces] = useState([]);\r\n    const [diffEquation, setDiffEquation] = useState(null);\r\n    const [thickness, setThickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, setGraphCaptured] = useState(false);\r\n    const [output, $output] = useState(null); // y or null as x(t) | dy as v(t) | d2y as a(t)\r\n    const [is3DPlotEnabled, set3DPlotEnabled] = useState(false);\r\n\r\n    const toggle3DPlot = () => set3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) =>\r\n                sys.v_i === Number(v_i) &&\r\n                sys.x_i === Number(x_i) &&\r\n                sys.m === Number(m) &&\r\n                sys.c === Number(c) &&\r\n                sys.k === Number(k) &&\r\n                sys.F_t === F_t &&\r\n                sys.output === output\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                x_i: Number(x_i),\r\n                v_i: Number(v_i),\r\n                m: Number(m),\r\n                c: Number(c),\r\n                k: Number(k),\r\n                F_t,\r\n                output,\r\n                thickness,\r\n                legend: '$$' + symbols.out(output) + '_{' + (systems.length + 1).toString() + '}$$',\r\n            });\r\n            setSystems(capturedSystems);\r\n            setGraphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fyt = (t, x, v) => Number((F_t - Number(c) * v - Number(k) * x) / Number(m));\r\n        const [x, y, dy] = calculus.ODE.euiler(2, t_i, t_f, {\r\n            y0: Number(x_i),\r\n            dy_dt0: Number(v_i),\r\n            fyt,\r\n            output,\r\n        }); // solve the diff eq by the eiuler method for 2nd order differential equations\r\n\r\n        if (output && output.toLowerCase() === \"d2y\")\r\n            for (\r\n                let i = 0;\r\n                i < x.length;\r\n                i++ // which one is faster? for loop or xi.map(...)  ? ==> i think for is faster and better\r\n            )\r\n                y[i] = fyt(x[i], y[i], dy[i]); // a(t) is actually the fyt defined above; first calculate x(t) [y] and v(t) [dy_dt] and then use it to calculate a\r\n        setDiffEquation(mechanicSystemEquation(m, c, k, F_t));\r\n\r\n        // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n        // so that the traces will be loaded with new conditions\r\n        const all = systems.map((e, index) => {\r\n            const fyt = (t, x, v) => Number((e.F_t - e.c * v - e.k * x) / e.m);\r\n            let [xi, yi, dyi] = calculus.ODE.euiler(2, t_i, t_f, {\r\n                y0: e.x_i,\r\n                dy_dt0: e.v_i,\r\n                fyt,\r\n                output: e.output,\r\n            }); // solve the diff eq by the eiuler method for 2nd order differential equations (N: >=100)\r\n\r\n            if (e.output && e.output.toLowerCase() === \"d2y\")\r\n                // using for loop inside a .map method causes error ; so i used xi.map\r\n                yi = xi.map((t, i) => fyt(t, yi[i], dyi[i])); // a(t) is actually the fyt defined above; first calculate x(t) [y] and v(t) [dy_dt] and then use it to calculate a\r\n\r\n            return {\r\n                x: xi,\r\n                y: yi,\r\n                z: is3DPlotEnabled ? Array(xi.length).fill(0) : null,\r\n                line: {\r\n                    // color: e.color...\r\n                    width: e.thickness,\r\n                },\r\n                // color,\r\n                type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                mode: \"lines\",\r\n                name: e.legend,\r\n            };\r\n        });\r\n\r\n        const index = systems.findIndex(\r\n            (sys) =>\r\n                sys.v_i === Number(v_i) &&\r\n                sys.x_i === Number(x_i) &&\r\n                sys.m === Number(m) &&\r\n                sys.c === Number(c) &&\r\n                sys.k === Number(k) &&\r\n                sys.F_t === F_t &&\r\n                sys.output === output\r\n        );\r\n        if (index === -1)\r\n            // if current system isnt in traces list => add it temperory to plot\r\n            all.push({\r\n                x,\r\n                y,\r\n                z: is3DPlotEnabled ? Array(x.length).fill(0) : null,\r\n                // color,\r\n                line: {\r\n                    // color:'rgb(17, 157, 255)'\r\n                    width: thickness,\r\n                },\r\n                type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                mode: \"lines\",\r\n                name: `${symbols.out(output)}(${symbols.in})`,\r\n            });\r\n\r\n        setTraces(all);\r\n    }, [\r\n        m,\r\n        c,\r\n        k,\r\n        F_t,\r\n        t_i,\r\n        t_f,\r\n        x_i,\r\n        v_i,\r\n        output,\r\n        is3DPlotEnabled,\r\n        thickness,\r\n        systems,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setGraphCaptured(false);\r\n    }, [m, c, k, F_t, x_i, v_i, output]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) setThickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <Grid container direction=\"column\" spacing={1}>\r\n            <Grid\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                item\r\n            >\r\n                <MassSpringDamperLecture />\r\n            </Grid>\r\n\r\n            <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                <SubCard sx={{ direction: \"ltr\" }}>\r\n                    <Grid\r\n                        id=\"formulaBox\"\r\n                        sx={{ margin: \"auto\" }}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        {systems.map((sys, index) => {\r\n                            if (!index) {\r\n                                sys.index = index + 1;\r\n                            } else if (\r\n                                sys.m === systems[index - 1].m &&\r\n                                sys.c === systems[index - 1].c &&\r\n                                sys.k === systems[index - 1].k &&\r\n                                sys.F_t === systems[index - 1].F_t\r\n                            ) {\r\n                                sys.index = systems[index - 1].index;\r\n                            } else {\r\n                                sys.index = systems[index - 1].index + 1;\r\n                            }\r\n\r\n                            const formula = indexedMechanicSystemEquation(\r\n                                sys.m,\r\n                                sys.c,\r\n                                sys.k,\r\n                                sys.F_t,\r\n                                sys.index\r\n                            );\r\n                            return (\r\n                                <Grid md={6} sm={12} item>\r\n                                    <MathJax>{formula}</MathJax>\r\n                                </Grid>\r\n                            );\r\n                        })}\r\n                        {!isGraphCatured && (\r\n                            <Grid md={6} sm={12}>\r\n                                <MathJax>{diffEquation}</MathJax>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </SubCard>\r\n            </Grid>\r\n            <Grid\r\n                spacing={2}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                container\r\n            >\r\n                <Grid\r\n                    md={3}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                    container\r\n                >\r\n                    <Grid xs={12}>\r\n                        <MassSpringDamperParameters\r\n                            m={m}\r\n                            c={c}\r\n                            k={k}\r\n                            F_t={F_t}\r\n                            x_i={x_i}\r\n                            v_i={v_i}\r\n                            t_i={t_i}\r\n                            t_f={t_f}\r\n                            output={output}\r\n                            $m={$m}\r\n                            $c={$c}\r\n                            $k={$k}\r\n                            $F_t={$F_t}\r\n                            $x_i={$x_i}\r\n                            $v_i={$v_i}\r\n                            $t_i={$t_i}\r\n                            $t_f={$t_f}\r\n                            $output={$output}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid md={9} sm={12} xs={12} item>\r\n                    <SubCard>\r\n                        <GraphMenu\r\n                            capture={capture}\r\n                            formulaFileName={\r\n                                \"Water Tank Level Equations _ \" +\r\n                                [...systems.map((sys) => sys.legend)].join() +\r\n                                \".png\"\r\n                            }\r\n                            graphFileName={\r\n                                [\r\n                                    ...systems.map(\r\n                                        (sys) =>\r\n                                            `${sys.legend}{m=${sys.m}_c=${sys.c}_k=${sys.k}_F(t)=${sys.F_t}_x_i=${sys.x_i}_v_i=${sys.v_i}} `\r\n                                    ),\r\n                                ].join(\", \") + \".png\"\r\n                            }\r\n                            reset={() => setSystems([])}\r\n                            update={(changes) => update(changes)}\r\n                            toggle3DPlot={toggle3DPlot}\r\n                        />\r\n                    </SubCard>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        <SubCard>\r\n                            <GraphBox\r\n                                title=\"منحنی مشخصه های گاری\"\r\n                                traces={traces}\r\n                            />\r\n                        </SubCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MassSpringDamperExample;\r\n","import \"views/topics/topics.css\";\r\n\r\nimport { Grid } from \"@mui/material\";\r\n// project imports\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport MassSpringDamperExample from './mass-spring-damper/index';\r\n\r\nconst MechanicSystemsModeling = () => {\r\n    return (\r\n        <MainCard style={{background: 'transparent'}}>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">مدل سازی سیستم های مکانیکی</h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <MassSpringDamperExample />\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default MechanicSystemsModeling;\r\n"],"names":["traces","title","width","height","style","textAlign","data","layout","margin","t","l","r","b","xaxis","rangemode","yaxis","hoverlabel","align","boxmode","font","color","legend","orientation","capture","graphFileName","formulaFileName","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","sx","direction","container","md","sm","xs","item","component","onClick","graphBoxElement","document","getElementById","canvasWithBackground","createElement","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","blob","saveAs","html2canvas","then","canvas","spacing","mt","alignItems","value","onChange","e","parameters","setters","labels","units","Fragment","Array","map","param","i","target","InputProps","startAdornment","position","endAdornment","SubCard","darkBorder","Grid","className","src","mass_spring_damper_image","alt","mechanic_system_elements","MathJax","parameterFormulas","parameterUnits","m","c","k","F_t","x_i","v_i","t_i","t_f","output","$m","$c","$k","$F_t","$x_i","$v_i","$t_i","$t_f","$output","out","$out","toLowerCase","SimpleParametersList","p","Button","textTransform","variant","symbols","systems","setSystems","setTraces","diffEquation","setDiffEquation","setThickness","isGraphCatured","setGraphCaptured","is3DPlotEnabled","set3DPlotEnabled","fyt","x","v","Number","calculus","y0","dy_dt0","y","dy","length","mechanicSystemEquation","all","index","xi","yi","dyi","z","fill","line","type","mode","name","findIndex","sys","push","id","formula","indexedMechanicSystemEquation","marginTop","GraphMenu","capturedSystems","toString","join","changes","lg","GraphBox","MainCard","background","gridSpacing"],"sourceRoot":""}