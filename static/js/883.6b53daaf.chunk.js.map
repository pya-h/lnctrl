{"version":3,"file":"static/js/883.6b53daaf.chunk.js","mappings":"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","sources":["views/input-boxes/SimpleParametersList.jsx","views/plotter/GraphMenu.jsx","views/plotter/PlotlyBox.jsx","views/topics/chapter06/bode-plot/parameters.jsx","views/topics/chapter06/bode-plot/index.jsx","views/ui-component/cards/MainCard.js"],"sourcesContent":["import { Grid, InputAdornment, TextField } from \"@mui/material\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst SimpleParametersList = ({ parameters, setters, labels, units }) => {\r\n    return (\r\n        <Fragment>\r\n            {parameters instanceof Array &&\r\n                parameters.map((param, i) => (\r\n                    <Grid md={12} sm={4} xs={6} item>\r\n                        <TextField\r\n                            onChange={(e) => setters[i](e.target.value)}\r\n                            value={param}\r\n                            sx={{ width: \"100%\" }}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"left\">\r\n                                        <MathJax>{labels[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: units[i] && (\r\n                                    <InputAdornment position=\"right\">\r\n                                        <MathJax>{units[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SimpleParametersList;\r\n","import PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}\r\n                {capture && <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>}\r\n\r\n                {reset && <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>}\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst PlotlyBox = ({ traces, title, width, height = 500, logX, hideX, hideY, yRange, hideLegends }) => {\r\n    /*const temp_layout = {\r\n        xaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n        yaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n    };*/\r\n    return (\r\n        <Plot\r\n            style={{ textAlign: \"center\" }}\r\n            //id=\"PlotlyBox\"\r\n            data={traces}\r\n            layout={{\r\n                // width: 1000,\r\n                // autosize: true,\r\n                showlegend: !hideLegends,\r\n                margin: {\r\n                    t: 30, //top margin\r\n                    l: 30, //left margin\r\n                    r: 20, //right margin\r\n                    b: 30, //bottom margin\r\n                },\r\n                xaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true,\r\n                    type: !logX ? \"dec\" : \"log\",\r\n                    visible: !hideX\r\n                },\r\n                yaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true,\r\n                    visible: !hideY,\r\n                    range: yRange\r\n                },\r\n\r\n                height,\r\n                title,\r\n                // hoverlabel: { bgcolor: \"#FFF\" },\r\n                hoverlabel: {align:'auto', boxmode: 'overlay', font:{color:'#000000FF'}},\r\n                legend: {orientation: 'h'}//, y: -0.3},\r\n                \r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PlotlyBox;\r\n","import {\r\n    Grid,\r\n    Button,\r\n    Fab,\r\n    Slider,\r\n    TextField,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport AnimateButton from \"../../../ui-component/extended/AnimateButton\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { useState } from \"react\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$Num = [$$\",\r\n    \"$$Den = [$$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n    \"$$N = $$\",\r\n];\r\nconst parameterUnits = [\"$$]$$\", \"$$]$$\", \"$$Hz$$\", \"$$Hz$$\", null];\r\n\r\nconst BodePlotParameters = ({\r\n    rawNumerator,\r\n    rawDenominator,\r\n    $rawNumerator,\r\n    $rawDenominator,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    phaseInRadianScale,\r\n    setPhaseInRadianScale,\r\n    N,\r\n    $N,\r\n    multiplier,\r\n    $K,\r\n}) => {\r\n    const [kMax, setkMax] = useState(100);\r\n\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[rawNumerator, rawDenominator, w_min, w_max, N]}\r\n                    setters={[\r\n                        $rawNumerator,\r\n                        $rawDenominator,\r\n                        $w_min,\r\n                        $w_max,\r\n                        $N,\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n                <Grid xs={12} item>\r\n                    <hr />\r\n                </Grid>\r\n                <Grid xs={12} style={{ paddingLeft: \"3%\" }} container>\r\n                    <Grid xs={12} item>\r\n                        <Typography dir=\"rtl\" style={{ textAlign: \"center\" }}>\r\n                            خروجی فاز بر حسب:\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(false)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                !phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            درجه\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(\"rad\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            رادیان\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <hr />\r\n            <Grid\r\n                xs={12}\r\n                sx={{ pt: gridSpacing }}\r\n                spacing={gridSpacing}\r\n                style={{ textAlign: \"center\" }}\r\n                container\r\n            >\r\n                <Grid xs={12} item>\r\n                    <Typography>\r\n                        تاثیر ضرب اسکالر سیستم در نمودار بود\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid xs={4} item>\r\n                    <Fab\r\n                        size=\"large\"\r\n                        variant=\"circular\"\r\n                        onClick={() => multiplier(0.1)}\r\n                    >\r\n                        <AnimateButton type=\"scale\" direction=\"down\">\r\n                            <MathJax>{\"$$\\\\times\\\\frac{1}{10}$$\"}</MathJax>\r\n                        </AnimateButton>\r\n                    </Fab>\r\n                </Grid>\r\n                <Grid xs={4} item>\r\n                    <Fab\r\n                        size=\"large\"\r\n                        variant=\"circular\"\r\n                        onClick={() => multiplier(10)}\r\n                    >\r\n                        <AnimateButton type=\"scale\" direction=\"down\">\r\n                            <MathJax>{\"$$\\\\times 10$$\"}</MathJax>\r\n                        </AnimateButton>\r\n                    </Fab>\r\n                </Grid>\r\n                <Grid xs={4} item>\r\n                    <Fab\r\n                        size=\"large\"\r\n                        variant=\"circular\"\r\n                        onClick={() => multiplier(-1)}\r\n                    >\r\n                        <AnimateButton type=\"scale\" direction=\"down\">\r\n                            <MathJax>{\"$$\\\\lgroup - \\\\rgroup$$\"}</MathJax>\r\n                        </AnimateButton>\r\n                    </Fab>\r\n                </Grid>\r\n            </Grid>\r\n            <br />\r\n\r\n            <hr />\r\n            <br />\r\n            <Grid\r\n                xs={12}\r\n                style={{\r\n                    textAlign: \"center\",\r\n                    border: \"1px solid grey\",\r\n                    borderRadius: \"1rem\",\r\n                    paddingBottom: \"0.5rem\",\r\n                    paddingRight: \"0.5rem\",\r\n                    margin: \"auto\",\r\n                }}\r\n                spacing={gridSpacing}\r\n                container\r\n            >\r\n                <Grid xs={12} item>\r\n                    <Typography>تاثیر تغییر بهره در نمودار بود</Typography>\r\n                </Grid>\r\n                <Grid xs={9} item>\r\n                    <Slider\r\n                        sx={{ mt: 1 }}\r\n                        aria-label=\"Volume\"\r\n                        onChange={(e, value) => $K((value * kMax) / 100)}\r\n                    />\r\n                </Grid>\r\n                <Grid xs={3} item>\r\n                    <TextField\r\n                        onChange={(e) => setkMax(e.target.value)}\r\n                        value={kMax}\r\n                        sx={{ width: \"100%\" }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default BodePlotParameters;\r\n","// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"views/plotter/GraphMenu\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport PlotlyBox from \"views/plotter/PlotlyBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport BodePlotParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { browserLockBreaker } from \"toolshed\";\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\nlet currentRawNum = \"\",\r\n    currentRawDen = \"\";\r\n\r\nconst BodePlot = () => {\r\n    const [rawNumerator, $rawNumerator] = useState(\"1\");\r\n    const [rawDenominator, $rawDenominator] = useState(\"1 1\");\r\n    const [H_s, $H_s] = useState(null);\r\n    const [ktrace, $ktrace] = useState({\r\n        amplitude: [],\r\n        phase: [],\r\n        degreePhase: [],\r\n    });\r\n    const [w_min, $w_min] = useState(0);\r\n    const [w_max, $w_max] = useState(10);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState({\r\n        phase: [],\r\n        amplitude: [],\r\n        degreePhase: [],\r\n    });\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n    const [K, $K] = useState(1);\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n\r\n        if (capturedSystems.findIndex((sys) => H_s.equals(sys.H)) === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                H_s,\r\n                thickness,\r\n                legend:\r\n                    symbols.out + \"_{\" + (systems.length + 1).toString() + \"}\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // plot\r\n        if (H_s instanceof TransferFunction) {\r\n            (async () => {\r\n                try {\r\n                    $response(\"$$\" + H_s.label(\"H\") + \"$$\");\r\n                    // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n                    // so that the traces will be loaded with new conditions\r\n                    let repeatedSystem = false;\r\n                    const all = {\r\n                        amplitude: Array(systems.length),\r\n                        phase: Array(systems.length),\r\n                        degreePhase: Array(systems.length),\r\n                    };\r\n\r\n                    for (let i = 0; i < systems.length; i++) {\r\n                        if (i % 5 === 0) await browserLockBreaker();\r\n                        all.amplitude[i] = calculus.systemToTrace(\r\n                            systems[i].H_s.bode,\r\n                            +w_min,\r\n                            +w_max,\r\n                            systems[i].thickness,\r\n                            systems[i].legend,\r\n                            is3DPlotEnabled,\r\n                            +N\r\n                        );\r\n                        all.phase[i] = calculus.systemToTrace(\r\n                            systems[i].H_s.phase,\r\n                            +w_min,\r\n                            +w_max,\r\n                            systems[i].thickness,\r\n                            systems[i].legend,\r\n                            is3DPlotEnabled,\r\n                            +N\r\n                        );\r\n                        all.degreePhase[i] = { ...all.phase[i] };\r\n                        all.degreePhase[i].y = all.degreePhase[i].y.map(\r\n                            (yi) => yi * calculus.RadianToDegree\r\n                        );\r\n                        if (H_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n                    }\r\n\r\n                    if (!repeatedSystem) {\r\n                        const amp = calculus.systemToTrace(\r\n                                H_s.bode,\r\n                                +w_min,\r\n                                +w_max,\r\n                                thickness,\r\n                                `${symbols.out}(${symbols.in})`,\r\n                                is3DPlotEnabled,\r\n                                +N\r\n                            ),\r\n                            phase = calculus.systemToTrace(\r\n                                H_s.phase,\r\n                                +w_min,\r\n                                +w_max,\r\n                                thickness,\r\n                                `${symbols.out}(${symbols.in})`,\r\n                                is3DPlotEnabled,\r\n                                +N\r\n                            );\r\n                        const degreePhase = { ...phase };\r\n                        degreePhase.y = degreePhase.y.map(\r\n                            (yi) => yi * calculus.RadianToDegree\r\n                        );\r\n                        all.phase.push(phase);\r\n                        all.degreePhase.push(degreePhase);\r\n                        all.amplitude.push(amp);\r\n                    }\r\n                    $traces(all);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [H_s, systems, w_min, w_max, is3DPlotEnabled, thickness, N]);\r\n\r\n    useEffect(() => {\r\n        if (H_s instanceof TransferFunction && +K && +K !== 1) {\r\n            const KH_s = H_s.multiply(K);\r\n            const amplitude = calculus.systemToTrace(\r\n                KH_s.bode,\r\n                +w_min,\r\n                +w_max,\r\n                thickness,\r\n                `K=${K}`,\r\n                is3DPlotEnabled,\r\n                +N\r\n            );\r\n            const phase = calculus.systemToTrace(\r\n                KH_s.phase,\r\n                +w_min,\r\n                +w_max,\r\n                thickness,\r\n                `K=${K}`,\r\n                is3DPlotEnabled,\r\n                +N\r\n            );\r\n\r\n            const degreePhase = { ...phase };\r\n            degreePhase.y = degreePhase.y.map(\r\n                (yi) => yi * calculus.RadianToDegree\r\n            );\r\n\r\n            $ktrace({ amplitude, phase, degreePhase });\r\n        } else $ktrace({ amplitude: [], phase: [], degreePhase: [] });\r\n    }, [K, H_s, N, is3DPlotEnabled, w_min, w_max, thickness]);\r\n\r\n    const multiplyPlotBy = (value) => {\r\n        const currentLength = systems.length;\r\n        const multipliedSystem = H_s.multiply(value);\r\n        const newSystemList = systems.filter(\r\n            (sys) => !sys.H_s.equals(multipliedSystem)\r\n        );\r\n        if (newSystemList.length === currentLength) capture();\r\n        else $systems(newSystemList);\r\n        $H_s(multipliedSystem);\r\n    };\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (\r\n                rawNumerator.trim() !== currentRawNum ||\r\n                rawDenominator.trim() !== currentRawDen\r\n            ) {\r\n                const num = calculus.stringToArray(rawNumerator),\r\n                    den = calculus.stringToArray(rawDenominator);\r\n                const h_s = new TransferFunction(num, den);\r\n                currentRawNum = rawNumerator;\r\n                currentRawDen = rawDenominator;\r\n                $K(1);\r\n                $H_s(h_s);\r\n            }\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Typography>\r\n                    <h2 className=\"chapter-section-title\">نمودار بود</h2>\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <BodePlotParameters\r\n                                    rawNumerator={rawNumerator}\r\n                                    rawDenominator={rawDenominator}\r\n                                    $rawNumerator={$rawNumerator}\r\n                                    $rawDenominator={$rawDenominator}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                    N={N}\r\n                                    $N={$N}\r\n                                    $K={$K}\r\n                                    multiplier={multiplyPlotBy}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid xs={12} item>\r\n                                        <PlotlyBox\r\n                                            logX={true}\r\n                                            title=\"نمودار بود\"\r\n                                            traces={[\r\n                                                ...traces.amplitude,\r\n                                                ktrace.amplitude,\r\n                                            ]}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid xs={12} item>\r\n                                        <PlotlyBox\r\n                                            title=\"فاز\"\r\n                                            logX={true}\r\n                                            traces={\r\n                                                phaseInRadianScale\r\n                                                    ? [\r\n                                                          ...traces.phase,\r\n                                                          ktrace.phase,\r\n                                                      ]\r\n                                                    : [\r\n                                                          ...traces.degreePhase,\r\n                                                          ktrace.degreePhase,\r\n                                                      ]\r\n                                            }\r\n                                        />\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default BodePlot;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    overflowY: 'auto',\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n"],"names":["parameters","setters","labels","units","Fragment","Array","map","param","i","md","sm","xs","item","onChange","e","target","value","sx","width","InputProps","startAdornment","position","endAdornment","capture","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","direction","container","color","component","onClick","spacing","mt","alignItems","traces","title","height","logX","hideX","hideY","yRange","hideLegends","style","textAlign","data","layout","showlegend","margin","t","l","r","b","xaxis","rangemode","zeroline","type","visible","yaxis","range","hoverlabel","align","boxmode","font","legend","orientation","parameterFormulas","parameterUnits","rawNumerator","rawDenominator","$rawNumerator","$rawDenominator","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","N","$N","multiplier","$K","kMax","setkMax","SubCard","darkBorder","Grid","gridSpacing","SimpleParametersList","paddingLeft","Typography","dir","p","Button","textTransform","variant","pt","Fab","size","AnimateButton","MathJax","border","borderRadius","paddingBottom","paddingRight","Slider","TextField","symbols","currentRawNum","currentRawDen","H_s","$H_s","amplitude","phase","degreePhase","ktrace","$ktrace","systems","$systems","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","K","capturedSystems","findIndex","sys","equals","H","push","length","toString","TransferFunction","label","repeatedSystem","all","browserLockBreaker","calculus","bode","y","yi","amp","console","log","KH_s","multiply","trim","num","den","h_s","ex","MainCard","className","id","index","formula","fontSize","marginTop","currentLength","multipliedSystem","newSystemList","filter","GraphMenu","changes","PlotlyBox","headerSX","mr","forwardRef","ref","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","others","theme","useTheme","overflowY","borderColor","palette","primary","action"],"sourceRoot":""}