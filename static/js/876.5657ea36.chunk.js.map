{"version":3,"file":"static/js/876.5657ea36.chunk.js","mappings":"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","sources":["views/input-boxes/SimpleParametersList.jsx","views/plotter/GraphBox.jsx","views/plotter/GraphMenu.jsx","views/topics/chapter06/frequency-response/parameters.jsx","views/topics/chapter06/frequency-response/index.jsx"],"sourcesContent":["import { Grid, InputAdornment, TextField } from \"@mui/material\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst SimpleParametersList = ({ parameters, setters, labels, units }) => {\r\n    return (\r\n        <Fragment>\r\n            {parameters instanceof Array &&\r\n                parameters.map((param, i) => (\r\n                    <Grid md={12} sm={4} xs={6} item>\r\n                        <TextField\r\n                            onChange={(e) => setters[i](e.target.value)}\r\n                            value={param}\r\n                            sx={{ width: \"100%\" }}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"left\">\r\n                                        <MathJax>{labels[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: units[i] && (\r\n                                    <InputAdornment position=\"right\">\r\n                                        <MathJax>{units[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SimpleParametersList;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst GraphBox = ({ traces, title, width, height = 500, logX }) => {\r\n    /*const temp_layout = {\r\n        xaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n        yaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n    };*/\r\n\r\n    return (\r\n        <Plot \r\n            style={{ textAlign: \"center\" }}\r\n            //id=\"graphBox\"\r\n            data={traces}\r\n            layout={{\r\n                // width: 1000,\r\n                // autosize: true,\r\n                margin: {\r\n                    t: 30, //top margin\r\n                    l: 30, //left margin\r\n                    r: 20, //right margin\r\n                    b: 30, //bottom margin\r\n                },\r\n                xaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true,\r\n                    type: !logX ? \"dec\" : \"log\"\r\n                },\r\n                yaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true\r\n\r\n                },\r\n                height,\r\n                title,\r\n                // hoverlabel: { bgcolor: \"#FFF\" },\r\n                hoverlabel: {align:'auto', boxmode: 'overlay', font:{color:'#000000FF'}},\r\n                legend: {orientation: 'h'}//, y: -0.3},\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GraphBox;\r\n","import PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}\r\n                {capture && <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>}\r\n\r\n                {reset && <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>}\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import { Grid, Button } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from \"store/constant\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$Num = [$$\",\r\n    \"$$Den = [$$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n    \"$$N = $$\"\r\n];\r\nconst parameterUnits = [\"$$]$$\", \"$$]$$\", \"$$Hz$$\", \"$$Hz$$\", null];\r\n\r\nconst FrequencyResponseParameters = ({\r\n    rawNumerator,\r\n    rawDenominator,\r\n    $rawNumerator,\r\n    $rawDenominator,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    phaseInRadianScale,\r\n    setPhaseInRadianScale,\r\n    N,\r\n    $N\r\n}) => {\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[rawNumerator, rawDenominator, w_min, w_max, N]}\r\n                    setters={[$rawNumerator, $rawDenominator, $w_min, $w_max, $N]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n                <Grid xs={12} style={{paddingLeft: '3%'}} container>\r\n                    <Grid xs={6} sx={{ p: 1 }}  item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(false)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                !phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            درجه\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(\"rad\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            رادیان\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default FrequencyResponseParameters;\r\n","// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"views/plotter/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"views/plotter/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport FrequencyResponseParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\n\r\nconst FrequencyResponse = () => {\r\n    const [rawNumerator, $rawNumerator] = useState(\"1\");\r\n    const [rawDenominator, $rawDenominator] = useState(\"1 1\");\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(-10);\r\n    const [w_max, $w_max] = useState(10);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState({\r\n        phase: [],\r\n        amplitude: [],\r\n        degreePhase: [],\r\n    });\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n\r\n        if (capturedSystems.findIndex((sys) => H_s.equals(sys.H)) === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                H_s,\r\n                thickness,\r\n                legend:\r\n                    symbols.out + \"_{\" + (systems.length + 1).toString() + \"}\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n            console.log(capturedSystems);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const num = calculus.stringToArray(rawNumerator),\r\n                den = calculus.stringToArray(rawDenominator);\r\n            const h_s = new TransferFunction(num, den);\r\n            $H_s(h_s);\r\n            $response(\"$$\" + h_s.label(\"H\") + \"$$\");\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            let repeatedSystem = false;\r\n            const all = {\r\n                amplitude: Array(systems.length),\r\n                phase: Array(systems.length),\r\n                degreePhase: Array(systems.length),\r\n            };\r\n\r\n            for (let i = 0; i < systems.length; i++) {\r\n                all.amplitude[i] = calculus.systemToTrace(\r\n                    systems[i].H_s.amplitude,\r\n                    +w_min,\r\n                    +w_max,\r\n                    systems[i].thickness,\r\n                    systems[i].legend,\r\n                    is3DPlotEnabled,\r\n                    +N\r\n                );\r\n                all.phase[i] = calculus.systemToTrace(\r\n                    systems[i].H_s.phase,\r\n                    +w_min,\r\n                    +w_max,\r\n                    systems[i].thickness,\r\n                    systems[i].legend,\r\n                    is3DPlotEnabled,\r\n                    +N\r\n                );\r\n                all.degreePhase[i] = { ...all.phase[i] };\r\n                all.degreePhase[i].y = all.degreePhase[i].y.map(\r\n                    (yi) => yi * calculus.RadianToDegree\r\n                );\r\n\r\n                if (h_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n            }\r\n\r\n            if (!repeatedSystem) {\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                const amp = calculus.systemToTrace(\r\n                        h_s.amplitude,\r\n                        +w_min,\r\n                        +w_max,\r\n                        thickness,\r\n                        `${symbols.out}(${symbols.in})`,\r\n                        is3DPlotEnabled,\r\n                        +N\r\n                    ),\r\n                    phase = calculus.systemToTrace(\r\n                        h_s.phase,\r\n                        +w_min,\r\n                        +w_max,\r\n                        thickness,\r\n                        `${symbols.out}(${symbols.in})`,\r\n                        is3DPlotEnabled,\r\n                        +N\r\n                    );\r\n                const degreePhase = { ...phase };\r\n                degreePhase.y = degreePhase.y.map(\r\n                    (yi) => yi * calculus.RadianToDegree\r\n                );\r\n                all.phase.push(phase);\r\n                all.degreePhase.push(degreePhase);\r\n                all.amplitude.push(amp);\r\n            }\r\n\r\n            $traces(all);\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }, [\r\n        rawNumerator,\r\n        rawDenominator,\r\n        w_min,\r\n        w_max,\r\n        is3DPlotEnabled,\r\n        thickness,\r\n        systems,\r\n        N,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">\r\n                    {\" \"}\r\n                    پاسخ فرکانسی سیستم ها\r\n                </h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <FrequencyResponseParameters\r\n                                    rawNumerator={rawNumerator}\r\n                                    rawDenominator={rawDenominator}\r\n                                    $rawNumerator={$rawNumerator}\r\n                                    $rawDenominator={$rawDenominator}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                    N={N}\r\n                                    $N={$N}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid\r\n                                        spacing={gridSpacing}\r\n                                        direction=\"row\"\r\n                                        container\r\n                                    >\r\n                                        <Grid\r\n                                            lg={9}\r\n                                            md={9}\r\n                                            sm={12}\r\n                                            xs={12}\r\n                                            item\r\n                                        >\r\n                                            <GraphBox\r\n                                                title=\"اندازه\"\r\n                                                traces={traces.amplitude}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid\r\n                                            lg={9}\r\n                                            md={9}\r\n                                            sm={12}\r\n                                            xs={12}\r\n                                            item\r\n                                        >\r\n                                            <GraphBox\r\n                                                title=\"فاز\"\r\n                                                traces={\r\n                                                    phaseInRadianScale\r\n                                                        ? traces.phase\r\n                                                        : traces.degreePhase\r\n                                                }\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default FrequencyResponse;\r\n"],"names":["parameters","setters","labels","units","Fragment","Array","map","param","i","md","sm","xs","item","onChange","e","target","value","sx","width","InputProps","startAdornment","position","endAdornment","traces","title","height","logX","style","textAlign","data","layout","margin","t","l","r","b","xaxis","rangemode","zeroline","type","yaxis","hoverlabel","align","boxmode","font","color","legend","orientation","capture","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","direction","container","component","onClick","spacing","mt","alignItems","parameterFormulas","parameterUnits","rawNumerator","rawDenominator","$rawNumerator","$rawDenominator","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","N","$N","SubCard","darkBorder","Grid","gridSpacing","SimpleParametersList","paddingLeft","p","Button","textTransform","variant","symbols","H_s","$H_s","systems","$systems","phase","amplitude","degreePhase","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","num","calculus","den","h_s","TransferFunction","label","repeatedSystem","all","length","y","yi","equals","amp","push","ex","console","log","MainCard","className","id","sys","index","formula","fontSize","MathJax","marginTop","GraphMenu","capturedSystems","findIndex","H","toString","changes","lg","GraphBox"],"sourceRoot":""}