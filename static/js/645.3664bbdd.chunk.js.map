{"version":3,"file":"static/js/645.3664bbdd.chunk.js","mappings":"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","sources":["math/GraphMenu.jsx","views/ui-component/buttons/Switcher.jsx","views/topics/chapter03/second-order-tf-examining/by-params/lecture.jsx","views/topics/chapter03/second-order-tf-examining/by-params/parameters.jsx","views/topics/chapter03/second-order-tf-examining/by-params/index.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/lecture.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/parameters.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/index.jsx","views/topics/chapter03/second-order-tf-examining/index.jsx"],"sourcesContent":["import SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { useState, useEffect } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    graphFileName,\r\n    formulaFileName,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    const save = () => {\r\n        const graphBoxElement = document.getElementById(\"graphBox\");\r\n        // normal .blob has dark bakground\r\n        // convert background to light\r\n        const canvasWithBackground = document.createElement(\"canvas\");\r\n        canvasWithBackground.width = graphBoxElement.width;\r\n        canvasWithBackground.height = graphBoxElement.height;\r\n\r\n        const ctx = canvasWithBackground.getContext(\"2d\");\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, graphBoxElement.width, graphBoxElement.height);\r\n\r\n        ctx.drawImage(graphBoxElement, 0, 0);\r\n        // save\r\n        canvasWithBackground.toBlob((blob) => {\r\n            saveAs(blob, graphFileName);\r\n        });\r\n\r\n        html2canvas(document.getElementById(\"formulaBox\")).then((canvas) => {\r\n            canvas.toBlob((blob) => {\r\n                saveAs(blob, formulaFileName);\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}{\" \"}\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"download graph\"\r\n                    component=\"span\"\r\n                    onClick={save}\r\n                >\r\n                    <SaveAltIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import Button from \"@mui/material/Button\";\nimport Stack from \"@mui/material/Stack\";\nimport { purple } from \"@mui/material/colors\";\nimport { Grid } from \"@mui/material\";\nimport \"./buttons.css\";\nimport { useState } from \"react\";\n\nexport default function Switcher({ setSwitch, choices}) {\n    const [selected, setSelected] = useState(0); // 0 right, 1 left\n\n    // const selectedStyle = {variant: \"contained\", style: { width: '75%', backgroundColor: purple[600], color: 'white'}};\n    // const notSelectedStyle = {variant: \"outline\", style:{width: '25%' }};\n\n    return (\n        <Stack \n            className=\"switcher-stack\"\n            // sx={{py: 1}}\n            xs={12}\n            spacing={1}\n            direction=\"row\"\n        >\n            <Grid xs={12} dir=\"rtl\" container>\n                <Button\n                    onClick={() => {\n                        setSelected(1);\n                        if(choices.length > 1)\n                            setSwitch(1);\n                    }}\n                    className=\"switcher-button\"\n                    variant={\"outlined\"}\n                    style={{\n                        width: selected ? \"75%\" : \"25%\",\n                        background: selected ? purple[600] : \"transparent\",\n                        color: selected ? \"white\" : purple[700],\n                    }}\n                    // style={{width: selected ? '75%' : '25%'}}\n                    // {... (selected ? selectedStyle: notSelectedStyle)}\n                >\n                    {choices[1]}\n                </Button>\n                <Button\n                    onClick={() => {\n                        setSelected(0);\n                        if(choices.length > 0)\n                            setSwitch(0);\n                    }}\n                    className=\"switcher-button\"\n                    // {... (!selected ? selectedStyle: notSelectedStyle)}\n                    color=\"primary\"\n                    variant={\"contained\"}\n                    style={{\n                        width: !selected ? \"75%\" : \"25%\",\n                        background: !selected ? purple[600] : \"transparent\",\n                        color: !selected ? \"white\" : purple[700],\n                    }}\n                >\n                    {choices[0]}\n                </Button>\n            </Grid>\n        </Stack>\n    );\n}\n","import SubCard from \"views/ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"../../../topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { mathjaxSpaces } from \"toolshed\";\r\n\r\nconst sotfExtremeMortalFormula =\r\n    \"$$ s_{1,2} = -\\\\zeta\\\\omega_n \\\\pm\\\\omega_n \\\\sqrt{\\\\zeta ^ 2 - 1} \\\\\\\\ \" +\r\n    \" G(s) = \\\\frac{\\\\omega_n ^ 2}{s^2 + 2\\\\zeta\\\\omega_n s + \\\\omega_n ^ 2} \\\\\\\\\" +\r\n    \"C(s) = \\\\frac{\\\\omega_n ^ 2}{s(s^2 + 2\\\\zeta\\\\omega_n s + \\\\omega_n ^ 2)} \\\\\\\\\" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{\\\\omega_n ^ 2}{\\\\omega_n ^ 2} = 1 $$\";\r\nconst sotfTransientStepResponseFormula =\r\n    \"$$c(t) = 1 - e^{-\\\\zeta\\\\omega_n t} \\\\lgroup cos\\\\omega_d t + \\\\frac{\\\\zeta}{\\\\sqrt{1 - \\\\zeta^2}}sin\\\\omega_d t \\\\rgroup, \" + mathjaxSpaces(3) + \r\n    \"\\\\omega_d = \\\\omega_n \\\\sqrt{1 - \\\\zeta^2} \\\\\\\\ \" + \r\n    \" \\\\\\\\ c(t) = 1 - \\\\frac{1}{\\\\sqrt{\\\\zeta ^ 2 - 1}}e^{-\\\\zeta \\\\omega_n t}sin(\\\\omega_n \\\\lgroup\\\\sqrt{\\\\zeta ^ 2 - 1}\\\\rgroup t + cos^{-1}\\\\zeta) \\\\\\\\\" + \r\n    \"c(t) = 1 - \\\\frac{e ^ {-\\\\zeta \\\\omega_n t}}{\\\\sqrt{1 - \\\\zeta ^ 2}}sin \\\\lgroup \\\\omega_d t + tan^{-1}\\\\frac{\\\\sqrt{1 - \\\\zeta^2}}{\\\\zeta} \\\\rgroup$$\";\r\n\r\nconst sotfTransientImpulseResponseFormula =\r\n    \"$$c(t) = \\\\frac{\\\\omega_n}{\\\\sqrt{\\\\zeta ^ 2 - 1}}e^{-\\\\zeta \\\\omega_n t}sin(\\\\omega_n \\\\lgroup\\\\sqrt{\\\\zeta ^ 2 - 1}\\\\rgroup t)$$\";\r\n\r\nconst SOTFByParamsLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"تابع تبدیل مرتبه دو- بررسی پارامتری\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n            spacing={gridSpacing}\r\n        >\r\n            <Grid className=\"lecture-text\" style={{ fontSize: \"20px\" }} item>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; پاسخ سیستم مرتبه دوم به ورودی\r\n                    پله یکی از سه حالت زیر می باشد:\r\n                </p>\r\n            </Grid>\r\n            <SubCard>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfExtremeMortalFormula}</MathJax>\r\n                </Grid>\r\n                <Grid\r\n                    className=\"lecture-text\"\r\n                    style={{ fontSize: \"20px\" }}\r\n                    item\r\n                >\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; پاسخ حالت گذرای ورودی پله:\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfTransientStepResponseFormula}</MathJax>\r\n                </Grid>\r\n                <Grid\r\n                    className=\"lecture-text\"\r\n                    style={{ fontSize: \"20px\" }}\r\n                    item\r\n                >\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; پاسخ حالت گذرای ورودی ضربه:\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfTransientImpulseResponseFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByParamsLecture;\r\n","import { Grid } from \"@mui/material\";\r\nimport CoordinateSystem from \"views/input-boxes/CoordinateSystem\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$\\\\omega_{n} = $$\",\r\n    \"$$\\\\zeta = $$\",\r\n    \"$$t_i = $$\",\r\n    \"$$t_f = $$\",\r\n];\r\nconst parameterUnits = [null, null, \"$$sec$$\", \"$$sec$$\"];\r\n\r\nconst SOTFByParamsInputs = ({\r\n    w_n,\r\n    zeta,\r\n    $w_n,\r\n    $zeta,\r\n    t_i,\r\n    t_f,\r\n    $t_i,\r\n    $t_f,\r\n}) => {\r\n    const grids = 10;\r\n    const checkSetW_N = (value) => value && $w_n(value);\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={0.6} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[w_n, zeta, t_i, t_f]}\r\n                    setters={[\r\n                        checkSetW_N,\r\n                        $zeta,\r\n                        $t_i,\r\n                        $t_f,\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n\r\n                <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <p style={{ textAlign: \"center\" }}>\r\n                        مقدار پارامترها را از اینجا هم می توانید تغییر دهید\r\n                    </p>\r\n\r\n                    <CoordinateSystem\r\n                        point={{\r\n                            x: w_n,\r\n                            y: 0,\r\n                            select: ({x}) => {\r\n                                if(x) $w_n(x)\r\n                            }\r\n                        }}\r\n                        extra={{\r\n                            x: 0,\r\n                            y: zeta,\r\n                            select: ({y}) => {\r\n                                if(y) $zeta(y)\r\n                            }\r\n                        }}\r\n                        options={{ pointSize: 10, grids }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByParamsInputs;\r\n","import SOTFByParamsLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport SOTFByParamsInputs from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Describer from \"math/describer\";\r\n\r\nconst stepResponse = (tf, c_t = tf.step(), index = undefined) =>\r\n    \"$$\\\\begin{cases} \" +\r\n    tf.label(\"G\", index) +\r\n    \" \\\\\\\\ \\\\\\\\ \" +\r\n    c_t.label(\"c\", index) +\r\n    \"\\\\end{cases}$$\";\r\n\r\nconst symbols = {\r\n    in: \"t\",\r\n    out: \"c\",\r\n};\r\n\r\nconst SOTFExamineByParams = () => {\r\n    const [w_n, $w_n] = useState(1);\r\n    const [zeta, $zeta] = useState(0.1);\r\n    const [t_i, $t_i] = useState(0);\r\n    const [t_f, $t_f] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [C_t, $C_t] = useState(null);\r\n    const [G_s, $G_s] = useState(null);\r\n    const [GInfo, $GInfo] = useState(\"\");\r\n\r\n    const [response, $response] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    //update\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) => w_n === sys.w_n && zeta === sys.zeta\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                w_n,\r\n                zeta,\r\n                G_s,\r\n                C_t,\r\n                thickness,\r\n                legend:\r\n                    \"$$\" +\r\n                    symbols.out +\r\n                    \"_{\" +\r\n                    (systems.length + 1).toString() +\r\n                    \"}$$\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        let gtf = TransferFunction.Specials.$WnZ(w_n, zeta);\r\n        const tstep = gtf.step();\r\n        $G_s(gtf);\r\n        if (gtf) {\r\n            $C_t(tstep);\r\n            $GInfo(new Describer(gtf));\r\n            const [x, y] = calculus.pointify(tstep.$, Number(t_i), Number(t_f)); // N: 100\r\n            $response(stepResponse(gtf));\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            const all = systems.map((e, index) => {\r\n                const w_n2 = e.w_n * e.w_n;\r\n                let tgtf = new TransferFunction(\r\n                    [w_n2],\r\n                    [1, 2 * e.zeta * e.w_n, w_n2]\r\n                );\r\n\r\n                const [xi, yi] = calculus.pointify(\r\n                    tgtf.step().$,\r\n                    Number(t_i),\r\n                    Number(t_f)\r\n                ); // N: 100\r\n\r\n                return {\r\n                    x: xi,\r\n                    y: yi,\r\n                    z: is3DPlotEnabled ? Array(xi.length).fill(0) : null,\r\n                    line: {\r\n                        // color: e.color...\r\n                        width: e.thickness,\r\n                    },\r\n                    // color,\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: e.legend,\r\n                };\r\n            });\r\n\r\n            const index = systems.findIndex(\r\n                (sys) => w_n === sys.w_n && zeta === sys.zeta\r\n            );\r\n            if (index === -1)\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                all.push({\r\n                    x,\r\n                    y,\r\n                    z: is3DPlotEnabled ? Array(x.length).fill(0) : null,\r\n                    // color,\r\n                    line: {\r\n                        // color:'rgb(17, 157, 255)'\r\n                        width: thickness,\r\n                    },\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: `${symbols.out}(${symbols.in})`,\r\n                });\r\n\r\n            $traces(all);\r\n        }\r\n    }, [w_n, zeta, t_i, t_f, is3DPlotEnabled, thickness, systems]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [w_n, zeta]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <Grid container direction=\"column\" spacing={gridSpacing}>\r\n            <Grid\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                item\r\n            >\r\n                <SOTFByParamsLecture />\r\n            </Grid>\r\n\r\n            <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                <SubCard sx={{ direction: \"ltr\" }}>\r\n                    <Grid\r\n                        id=\"formulaBox\"\r\n                        sx={{ margin: \"auto\" }}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        {systems instanceof Array &&\r\n                            systems.map((sys, index) => {\r\n                                const formula = stepResponse(\r\n                                    sys.G_s,\r\n                                    sys.C_t,\r\n                                    index + 1\r\n                                );\r\n                                console.log(sys.C_t, sys.G_s);\r\n\r\n                                return (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        xs={12}\r\n                                        item\r\n                                    >\r\n                                        <MathJax>{formula}</MathJax>\r\n                                    </Grid>\r\n                                );\r\n                            })}\r\n                        {!isGraphCatured && (\r\n                            <Grid style={{ fontSize: \"18px\" }} xs={12}>\r\n                                <MathJax>{response}</MathJax>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </SubCard>\r\n            </Grid>\r\n            <Grid\r\n                spacing={2}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                container\r\n            >\r\n                <Grid\r\n                    md={3}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                    container\r\n                >\r\n                    <Grid xs={12}>\r\n                        <SOTFByParamsInputs\r\n                            w_n={w_n}\r\n                            zeta={zeta}\r\n                            t_i={t_i}\r\n                            t_f={t_f}\r\n                            $w_n={$w_n}\r\n                            $zeta={$zeta}\r\n                            $t_i={$t_i}\r\n                            $t_f={$t_f}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid md={9} sm={12} xs={12} item>\r\n                    <SubCard>\r\n                        <GraphMenu\r\n                            capture={capture}\r\n                            formulaFileName={\r\n                                \"Water Tank Level Equations _ \" +\r\n                                [...systems.map((sys) => sys.legend)].join() +\r\n                                \".png\"\r\n                            }\r\n                            graphFileName={\r\n                                [\r\n                                    ...systems.map(\r\n                                        (sys) =>\r\n                                            `${sys.legend}{w_n=${\r\n                                                sys.w_n\r\n                                            }_zeta=${sys.zeta}_k=${sys.k}_in=${\r\n                                                sys.inputSignal\r\n                                                    ? \"ramp\"\r\n                                                    : \"step\"\r\n                                            }}`\r\n                                    ),\r\n                                ].join(\", \") + \".png\"\r\n                            }\r\n                            reset={() => $systems([])}\r\n                            update={(changes) => update(changes)}\r\n                            toggle3DPlot={toggle3DPlot}\r\n                        />\r\n                    </SubCard>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        <SubCard>\r\n                            <GraphBox title=\"پاسخ پله\" traces={traces} />\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        {GInfo && <GInfo.Explain />}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SOTFExamineByParams;\r\n","import SubCard from \"views/ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"views/topics/topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { mathjaxSpaces } from \"toolshed\";\r\nimport { gridSpacing } from \"store/constant\";\r\n\r\nconst sotfExtremeMortalFormula =\r\n    \"$$ G(s) = \\\\frac{k}{(s + \\\\alpha) (s + \\\\beta)}\" +\r\n    mathjaxSpaces(3) +\r\n    \"\\\\alpha,\\\\beta > 0,\" +\r\n    mathjaxSpaces(1) +\r\n    \"\\\\alpha \\\\neq \\\\beta \\\\\\\\\" +\r\n    \"C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s(s + \\\\alpha) (s + \\\\beta)}\" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha\\\\beta} \\\\\\\\\" +\r\n    \"c(t) = (\\\\frac{k}{\\\\alpha\\\\beta} + \\\\frac{k}{\\\\alpha - \\\\beta} \\\\lgroup \\\\frac{e^{-\\\\alpha t}}{\\\\alpha} - \\\\frac{e^{-\\\\beta t}}{\\\\beta}\\\\rgroup)u(t)$$\";\r\nconst sotfCriticalFormula =\r\n    \"$$ G(s) = \\\\frac{k}{(s + \\\\alpha)^2}\" +\r\n    mathjaxSpaces(3) +\r\n    \"\\\\alpha,\\\\beta > 0,\" +\r\n    mathjaxSpaces(1) +\r\n    \"\\\\alpha = \\\\beta \\\\\\\\\" +\r\n    \"C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s(s + \\\\alpha)^2}\" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha^2} \\\\\\\\ \" +\r\n    \"c(t) = (\\\\frac{k}{\\\\alpha^2} - \\\\frac{k}{\\\\alpha^2} \\\\lgroup 1 + \\\\alpha t\\\\rgroup)e^{-\\\\alpha t}u(t)$$\";\r\n\r\nconst sotfWeakFormula =\r\n    \"$$ G(s) = \\\\frac{k}{s + \\\\alpha + j\\\\beta)(s + \\\\alpha - j\\\\beta)}\" +\r\n    mathjaxSpaces(3) +\r\n    \"\\\\alpha > 0 \\\\\\\\\" +\r\n    \" \\\\Longrightarrow G(s) = \\\\frac{k}{(s^2 + 2\\\\alpha s + (\\\\alpha ^ 2 + \\\\beta ^ 2) } \\\\\\\\ \" +\r\n    \"C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s^3 + 2\\\\alpha s^2 + (\\\\alpha ^ 2 + \\\\beta ^ 2)s } =  \" +\r\n    \"\\\\frac{1}{s} \\\\frac{k}{(s + \\\\alpha)^2 + \\\\beta ^ 2 }\\\\\\\\ \" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2} \\\\\\\\ \" +\r\n    \"c(t) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2}u(t) - \\\\frac{ke^{-\\\\alpha t}}{\\\\alpha ^ 2 + \\\\beta ^ 2} \\\\lgroup cos\\\\beta t + \\\\frac{\\\\alpha}{\\\\beta}sin\\\\beta t \\\\rgroup u(t) \\\\\\\\\" +\r\n    \"\\\\Longrightarrow c(t) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2}u(t) - \\\\frac{\\\\sqrt{\\\\alpha ^ 2 + \\\\beta ^ 2}}{\\\\beta}e^{-\\\\alpha t}sin(\\\\beta t + \\\\theta) u(t)$$\";\r\n\r\nconst SOTFByPolesLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"تابع تبدیل مرتبه دو- بررسی پارامتری\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n            spacing={gridSpacing}\r\n        >\r\n            <Grid className=\"lecture-text\"  style={{ fontSize: \"20px\" }} item>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; پاسخ سیستم مرتبه دوم به ورودی\r\n                    پله یکی از سه حالت زیر می باشد:\r\n                </p>\r\n            </Grid>\r\n            <SubCard>\r\n                <Grid sx={{ my: 4 }} className=\"lecture-text\" item>\r\n                    <h1>&nbsp; پاسخ میرای شدید</h1>\r\n                </Grid>\r\n                <Grid sx={{ my: 4 }}  style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب\r\n                        حقیقی منفی دارد.\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfExtremeMortalFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n            <SubCard sx={{ my: 4 }}>\r\n                <Grid className=\"lecture-text\" item>\r\n                    <h1>&nbsp; پاسخ میرای بحرانی</h1>\r\n                </Grid>\r\n                <Grid sx={{ my: 4 }}  style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب\r\n                        حقیقی منفی برابر دارد.\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfCriticalFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n            <SubCard sx={{ my: 4 }}>\r\n                <Grid className=\"lecture-text\" item>\r\n                    <h1>&nbsp; پاسخ میرای ضعیف (نوسانی)</h1>\r\n                </Grid>\r\n                <Grid sx={{ my: 4 }}  style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب\r\n                        مزدوج با مقدار حقیقی منفی دارد.\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfWeakFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n            <Grid sx={{ my: 4 }} style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                <p>&nbsp; &nbsp; &nbsp; &nbsp;\r\n                    پاسخ اکثر سیستم های خطی در عمل به صورت میرای ضعیف است. لذا معیارهای عملکرد در حوزه ی زمان برای بررسی و تحلیل سیستم های کنترل خطی\r\n                    از این پاسخ استخراج می شود.\r\n                </p>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByPolesLecture;\r\n","import { Grid } from \"@mui/material\";\r\nimport CoordinateSystem from \"views/input-boxes/CoordinateSystem\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$\\\\alpha = $$\",\r\n    \"$$\\\\beta = $$\",\r\n    \"$$k = $$\",\r\n    \"$$t_i = $$\",\r\n    \"$$t_f = $$\",\r\n];\r\nconst parameterUnits = [null, null, null, \"$$sec$$\", \"$$sec$$\"];\r\n\r\nconst SOTFByPolesInputs = ({\r\n    k,\r\n    alpha,\r\n    beta,\r\n    $k,\r\n    $alpha,\r\n    $beta,\r\n    t_i,\r\n    t_f,\r\n    $t_i,\r\n    $t_f,\r\n}) => {\r\n    const grids = 10;\r\n\r\n    const updatePoles = (newPole, other, $newPole, $other) => {\r\n        $newPole(newPole);\r\n        return newPole.isReal()\r\n            ? $other(other.realify())\r\n            : $other(newPole.conjugate());\r\n    };\r\n\r\n    const selectAlpha = (point) => {\r\n        if (point) {\r\n            const { x, y } = point;\r\n            updatePoles(new Complex(-x, -y), beta, $alpha, $beta);\r\n        }\r\n    };\r\n    const selectBeta = (point) => {\r\n        if (point) {\r\n            const { x, y } = point;\r\n            updatePoles(new Complex(-x, -y), alpha, $beta, $alpha);\r\n        }\r\n    };\r\n\r\n    const alphaTextBoxOnChange = (strValue) =>\r\n        updatePoles(Complex.extract(strValue), beta, $alpha, $beta);\r\n\r\n    const betaTextBoxOnChange = (strValue) =>\r\n        updatePoles(Complex.extract(strValue), alpha, $beta, $alpha);\r\n\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={0.6} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[alpha, beta, k, t_i, t_f]}\r\n                    setters={[\r\n                        alphaTextBoxOnChange,\r\n                        betaTextBoxOnChange,\r\n                        $k,\r\n                        $t_i,\r\n                        $t_f,\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n\r\n                <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <p style={{ textAlign: \"center\" }}>\r\n                        محل قطب ها را انتخاب کنید\r\n                    </p>\r\n\r\n                    <CoordinateSystem\r\n                        point={{\r\n                            x: -alpha.real(),\r\n                            y: -alpha.imaginary(),\r\n                            select: selectAlpha,\r\n                        }}\r\n                        extra={{\r\n                            x: -beta.real(),\r\n                            y: -beta.imaginary(),\r\n                            select: selectBeta,\r\n                        }}\r\n                        options={{ pointSize: 10, grids }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByPolesInputs;\r\n","import SOTFByPolesLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport SOTFByPolesInputs from \"./parameters\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Algebra from \"math/algebra/index\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Describer from 'math/describer';\r\n\r\nconst stepResponse = (tf, c_t = tf.step(), index = undefined) =>\r\n    \"$$\\\\begin{cases} \" +\r\n    tf.label(\"G\", index) +\r\n    \" \\\\\\\\ \\\\\\\\ \" +\r\n    c_t.label(\"c\", index) +\r\n    \"\\\\end{cases}$$\";\r\n\r\nconst symbols = {\r\n    in: \"t\",\r\n    out: \"c\",\r\n};\r\n\r\nconst SOTFExamineByPoles = () => {\r\n    const [alpha, $alpha] = useState(new Complex(1, 1));\r\n    const [beta, $beta] = useState(alpha.conjugate());\r\n    const [k, $k] = useState(1.0);\r\n    const [t_i, $t_i] = useState(0);\r\n    const [t_f, $t_f] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [C_t, $C_t] = useState(null);\r\n    const [G_s, $G_s] = useState(null);\r\n    const [GInfo, $GInfo] = useState(\"\");\r\n\r\n    const [response, $response] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    //update\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) => alpha.equals(sys.alpha) && beta.equals(sys.beta) && sys.k === k\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                alpha,\r\n                beta,\r\n                k,\r\n                G_s,\r\n                C_t,\r\n                thickness,\r\n                legend:\r\n                    \"$$\" +\r\n                    symbols.out +\r\n                    \"_{\" +\r\n                    (systems.length + 1).toString() +\r\n                    \"}$$\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let gtf = TransferFunction.Specials.$2(\r\n            Number(k),\r\n            alpha instanceof Algebra ? alpha.negation() : -alpha,\r\n            beta instanceof Algebra ? beta.negation() : -beta\r\n        );\r\n        const tstep = gtf.step();\r\n        $G_s(gtfr\n        if (gtf && alpha.hasSameTypeWith(beta)) {\r\n            $C_t(tstep);\r\n            $GInfo(new Describer(gtf));\r\n            const [x, y] = calculus.pointify(\r\n                tstep.$,\r\n                Number(t_i),\r\n                Number(t_f)\r\n            ); // N: 100\r\n            $response(stepResponse(gtf));\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            const all = systems.map((e, index) => {\r\n                let tgtf = TransferFunction.Specials.$2(\r\n                    Number(e.k),\r\n                    e.alpha instanceof Algebra ? e.alpha.negation() : -e.alpha,\r\n                    e.beta instanceof Algebra ? e.beta.negation() : -e.beta\r\n                );\r\n                \r\n                const [xi, yi] = calculus.pointify(\r\n                    tgtf.step().$,\r\n                    Number(t_i),\r\n                    Number(t_f)\r\n                ); // N: 100\r\n\r\n                return {\r\n                    x: xi,\r\n                    y: yi,\r\n                    z: is3DPlotEnabled ? Array(xi.length).fill(0) : null,\r\n                    line: {\r\n                        // color: e.color...\r\n                        width: e.thickness,\r\n                    },\r\n                    // color,\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: e.legend,\r\n                };\r\n            });\r\n\r\n            const index = systems.findIndex(\r\n                (sys) => alpha.equals(sys.alpha) && beta.equals(sys.beta) && sys.k === k\r\n            );\r\n            if (index === -1)\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                all.push({\r\n                    x,\r\n                    y,\r\n                    z: is3DPlotEnabled ? Array(x.length).fill(0) : null,\r\n                    // color,\r\n                    line: {\r\n                        // color:'rgb(17, 157, 255)'\r\n                        width: thickness,\r\n                    },\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: `${symbols.out}(${symbols.in})`,\r\n                });\r\n\r\n            $traces(all);\r\n        }\r\n    }, [alpha, beta, k, t_i, t_f, is3DPlotEnabled, thickness, systems]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [alpha, beta, k]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <Grid container direction=\"column\" spacing={gridSpacing}>\r\n            <Grid\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                item\r\n            >\r\n                <SOTFByPolesLecture />\r\n            </Grid>\r\n\r\n            <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                <SubCard sx={{ direction: \"ltr\" }}>\r\n                    <Grid\r\n                        id=\"formulaBox\"\r\n                        sx={{ margin: \"auto\" }}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        {systems instanceof Array &&  systems.map((sys, index) => {\r\n                            const formula = stepResponse(sys.G_s, sys.C_t, index + 1);\r\n                            console.log(sys.C_t, sys.G_s)\r\n\r\n                            return (\r\n                                <Grid style={{ fontSize: \"18px\" }} xs={12} item>\r\n                                    <MathJax>{formula}</MathJax>\r\n                                </Grid>\r\n                            );\r\n                        })}\r\n                        {!isGraphCatured && (\r\n                            <Grid style={{ fontSize: \"18px\" }} xs={12}>\r\n                                <MathJax>{response}</MathJax>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </SubCard>\r\n            </Grid>\r\n            <Grid\r\n                spacing={2}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                container\r\n            >\r\n                <Grid\r\n                    md={3}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                    container\r\n                >\r\n                    <Grid xs={12}>\r\n                        <SOTFByPolesInputs\r\n                            alpha={alpha}\r\n                            beta={beta}\r\n                            k={k}\r\n                            t_i={t_i}\r\n                            t_f={t_f}\r\n                            $alpha={$alpha}\r\n                            $beta={$beta}\r\n                            $k={$k}\r\n                            $t_i={$t_i}\r\n                            $t_f={$t_f}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid md={9} sm={12} xs={12} item>\r\n                    <SubCard>\r\n                        <GraphMenu\r\n                            capture={capture}\r\n                            formulaFileName={\r\n                                \"Water Tank Level Equations _ \" +\r\n                                [...systems.map((sys) => sys.legend)].join() +\r\n                                \".png\"\r\n                            }\r\n                            graphFileName={\r\n                                [\r\n                                    ...systems.map(\r\n                                        (sys) =>\r\n                                            `${sys.legend}{alpha=${\r\n                                                sys.alpha\r\n                                            }_beta=${sys.beta}_k=${sys.k}_in=${\r\n                                                sys.inputSignal\r\n                                                    ? \"ramp\"\r\n                                                    : \"step\"\r\n                                            }}`\r\n                                    ),\r\n                                ].join(\", \") + \".png\"\r\n                            }\r\n                            reset={() => $systems([])}\r\n                            update={(changes) => update(changes)}\r\n                            toggle3DPlot={toggle3DPlot}\r\n                        />\r\n                    </SubCard>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        <SubCard>\r\n                            <GraphBox title=\"پاسخ پله\" traces={traces} />\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        {GInfo && <GInfo.Explain />}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SOTFExamineByPoles;\r\n","import { Grid } from \"@mui/material\";\n// project imports\nimport MainCard from \"views/ui-component/cards/MainCard\";\nimport { gridSpacing } from \"store/constant\";\nimport Switcher from \"views/ui-component/buttons/Switcher\";\nimport { useState } from \"react\";\nimport SOTFExamineByParams from \"./by-params/index\";\nimport SOTFExamineByPoles from \"./by-poles/index\";\nimport \"views/topics/topics.css\";\n\nconst SecondOrderTransferFunctionExamining = () => {\n    const [mode, setMode] = useState(0);\n    const choices = [\"بررسی قطبی\", \"بررسی پارامتری\"];\n\n    return (\n        <Grid container>\n            <Grid\n                item\n                direction=\"row\"\n                sx={{ pt: 1 }}\n                container\n                spacing={gridSpacing}\n            >\n                <Switcher choices={choices} setSwitch={setMode} />\n            </Grid>\n            <MainCard style={{ background: \"#F5E1FD\" }}>\n                <Grid item spacing={gridSpacing}>\n                    {mode === 0 ? (\n                        <SOTFExamineByPoles />\n                    ) : (\n                        <SOTFExamineByParams />\n                    )}\n                </Grid>\n            </MainCard>\n        </Grid>\n    );\n};\n\nexport default SecondOrderTransferFunctionExamining;\n"],"names":["capture","graphFileName","formulaFileName","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","sx","direction","container","md","sm","xs","item","color","component","onClick","graphBoxElement","document","getElementById","canvasWithBackground","createElement","width","height","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","blob","saveAs","html2canvas","then","canvas","spacing","mt","alignItems","value","onChange","e","Switcher","setSwitch","choices","selected","setSelected","Stack","className","Grid","dir","Button","length","variant","style","background","purple","sotfTransientStepResponseFormula","mathjaxSpaces","SubCard","title","darkBorder","gridSpacing","fontSize","MathJax","parameterFormulas","parameterUnits","w_n","zeta","$w_n","$zeta","t_i","t_f","$t_i","$t_f","textAlign","SimpleParametersList","parameters","setters","labels","units","CoordinateSystem","point","x","y","select","extra","options","pointSize","grids","stepResponse","tf","c_t","step","index","undefined","label","symbols","systems","$systems","traces","$traces","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","C_t","$C_t","G_s","$G_s","GInfo","$GInfo","response","$response","gtf","TransferFunction","tstep","Describer","calculus","$","Number","all","map","w_n2","tgtf","xi","z","Array","fill","line","type","mode","name","legend","findIndex","sys","push","margin","id","formula","console","log","marginTop","GraphMenu","capturedSystems","toString","join","k","inputSignal","changes","lg","GraphBox","Explain","sotfExtremeMortalFormula","sotfCriticalFormula","sotfWeakFormula","my","alpha","beta","$k","$alpha","$beta","updatePoles","newPole","other","$newPole","$other","isReal","realify","conjugate","strValue","Complex","real","imaginary","Algebra","negation","hasSameTypeWith","equals","setMode","pt","MainCard"],"sourceRoot":""}