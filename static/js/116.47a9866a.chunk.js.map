{"version":3,"file":"static/js/116.47a9866a.chunk.js","mappings":"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","sources":["views/topics/chapter03/second-order-tf-examining/by-params/lecture.jsx","views/topics/chapter03/second-order-tf-examining/by-params/parameters.jsx","views/topics/chapter03/second-order-tf-examining/by-params/index.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/lecture.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/parameters.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/index.jsx","views/topics/chapter03/second-order-tf-examining/index.jsx"],"sourcesContent":["import { Grid, Typography } from \"@mui/material\";\r\nimport \"../../../topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport PinchPanCard from \"views/ui-component/cards/PinchPanCard\";\r\n\r\nconst SOTFByParamsLecture = () => {\r\n    return (\r\n        <PinchPanCard title=\"تابع تبدیل مرتبه دو- بررسی پارامتری\" border={true}>\r\n            <Grid xs={12} item>\r\n                <Typography sx={{ px: 2 }} style={{ lineHeight: \"2.5\" }}>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; پاسخ سیستم مرتبه دوم به ورودی\r\n                    پله یکی از سه حالت زیر می باشد:\r\n                    <MathJax style={{ fontSize: \"18px\" }}>\r\n                        {`$$ s_{1,2} = -\\\\zeta\\\\omega_n \\\\pm\\\\omega_n \\\\sqrt{\\\\zeta ^ 2 - 1} \\\\\\\\ \r\n                            G(s) = \\\\frac{\\\\omega_n ^ 2}{s^2 + 2\\\\zeta\\\\omega_n s + \\\\omega_n ^ 2} \\\\\\\\\r\n                            C(s) = \\\\frac{\\\\omega_n ^ 2}{s(s^2 + 2\\\\zeta\\\\omega_n s + \\\\omega_n ^ 2)} \\\\\\\\\r\n                            \\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{\\\\omega_n ^ 2}{\\\\omega_n ^ 2} = 1 $$`}\r\n                    </MathJax>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; پاسخ حالت گذرای ورودی پله:\r\n                    <MathJax style={{ fontSize: \"18px\" }}>\r\n                        {`$$c(t) = 1 - e^{-\\\\zeta\\\\omega_n t} \\\\lgroup cos\\\\omega_d t + \\\\frac{\\\\zeta}{\\\\sqrt{1 - \\\\zeta^2}}sin\\\\omega_d t \\\\rgroup, \\\\qquad\r\n                            \\\\omega_d = \\\\omega_n \\\\sqrt{1 - \\\\zeta^2} \\\\\\\\ \r\n                            \\\\\\\\ c(t) = 1 - \\\\frac{1}{\\\\sqrt{\\\\zeta ^ 2 - 1}}e^{-\\\\zeta \\\\omega_n t}sin(\\\\omega_n \\\\lgroup\\\\sqrt{\\\\zeta ^ 2 - 1}\\\\rgroup t + cos^{-1}\\\\zeta) \\\\\\\\\r\n                            c(t) = 1 - \\\\frac{e ^ {-\\\\zeta \\\\omega_n t}}{\\\\sqrt{1 - \\\\zeta ^ 2}}sin \\\\lgroup \\\\omega_d t + tan^{-1}\\\\frac{\\\\sqrt{1 - \\\\zeta^2}}{\\\\zeta} \\\\rgroup$$`}\r\n                    </MathJax>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; پاسخ حالت گذرای ورودی ضربه:\r\n                    <MathJax style={{ fontSize: \"18px\" }}>\r\n                        {\r\n                            \"$$c(t) = \\\\frac{\\\\omega_n}{\\\\sqrt{\\\\zeta ^ 2 - 1}}e^{-\\\\zeta \\\\omega_n t}sin(\\\\omega_n \\\\lgroup\\\\sqrt{\\\\zeta ^ 2 - 1}\\\\rgroup t)$$\"\r\n                        }\r\n                    </MathJax>\r\n                </Typography>\r\n            </Grid>\r\n        </PinchPanCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByParamsLecture;\r\n","import { Grid, Typography } from \"@mui/material\";\r\nimport CoordinateSystem from \"views/input-boxes/CoordinateSystem\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$\\\\omega_{n} = $$\",\r\n    \"$$\\\\zeta = $$\",\r\n    \"$$t_i = $$\",\r\n    \"$$t_f = $$\",\r\n    \"$$N = $$\"\r\n];\r\nconst parameterUnits = [null, null, \"$$sec$$\", \"$$sec$$\", null];\r\n\r\nconst SOTFByParamsInputs = ({\r\n    w_n,\r\n    zeta,\r\n    $w_n,\r\n    $zeta,\r\n    t_i,\r\n    t_f,\r\n    $t_i,\r\n    $t_f,\r\n    N,\r\n    $N\r\n}) => {\r\n    const grids = 10;\r\n    const checkSetW_N = (value) => value && $w_n(value);\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={0.6} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[w_n, zeta, t_i, t_f, N]}\r\n                    setters={[\r\n                        checkSetW_N,\r\n                        $zeta,\r\n                        $t_i,\r\n                        $t_f,\r\n                        $N\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n\r\n                <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <Typography style={{ textAlign: \"center\" }}>\r\n                        مقدار پارامترها را از اینجا هم می توانید تغییر دهید\r\n                    </Typography>\r\n\r\n                    <CoordinateSystem\r\n                        point={{\r\n                            x: w_n,\r\n                            y: 0,\r\n                            select: ({x}) => {\r\n                                if(x) $w_n(x)\r\n                            }\r\n                        }}\r\n                        extra={{\r\n                            x: 0,\r\n                            y: zeta,\r\n                            select: ({y}) => {\r\n                                if(y) $zeta(y)\r\n                            }\r\n                        }}\r\n                        options={{ pointSize: 10, grids }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByParamsInputs;\r\n","import SOTFByParamsLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"math/calculus\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"views/plotter/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport PlotlyBox from \"views/plotter/PlotlyBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport SOTFByParamsInputs from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/fraction\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Describer from \"math/describer\";\r\n\r\nconst stepResponse = (tf, c_t = tf.step(), index = undefined) =>\r\n    \"$$\\\\begin{cases} \" +\r\n    tf.label(\"G\", index) +\r\n    \" \\\\\\\\ \\\\\\\\ \" +\r\n    c_t.label(\"c\", index) +\r\n    \"\\\\end{cases}$$\";\r\n\r\nconst symbols = {\r\n    in: \"t\",\r\n    out: \"c\",\r\n};\r\n\r\nconst SOTFExamineByParams = () => {\r\n    const [w_n, $w_n] = useState(1);\r\n    const [zeta, $zeta] = useState(0.1);\r\n    const [t_i, $t_i] = useState(0);\r\n    const [t_f, $t_f] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [C_t, $C_t] = useState(null);\r\n    const [G_s, $G_s] = useState(null);\r\n    const [GInfo, $GInfo] = useState(\"\");\r\n    const [N, $N] = useState(1000);\r\n    const [response, $response] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    //update\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) => w_n === sys.w_n && zeta === sys.zeta\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                w_n,\r\n                zeta,\r\n                G_s,\r\n                C_t,\r\n                thickness,\r\n                legend:\r\n                    \"$$\" +\r\n                    symbols.out +\r\n                    \"_{\" +\r\n                    (systems.length + 1).toString() +\r\n                    \"}$$\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        let gtf = TransferFunction.Shortcuts.$WnZ(w_n, zeta);\r\n        const tstep = gtf.step();\r\n        $G_s(gtf);\r\n        if (gtf) {\r\n            $C_t(tstep);\r\n            $GInfo(new Describer(gtf));\r\n            const [x, y] = calculus.pointify(tstep.$, +t_i, +t_f, +N);\r\n            $response(stepResponse(gtf));\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            const all = systems.map((e, index) => {\r\n                const w_n2 = e.w_n * e.w_n;\r\n                let tgtf = new TransferFunction(\r\n                    [w_n2],\r\n                    [1, 2 * e.zeta * e.w_n, w_n2]\r\n                );\r\n\r\n                const [xi, yi] = calculus.pointify(tgtf.step().$, +t_i, +t_f, +N);\r\n\r\n                return {\r\n                    x: xi,\r\n                    y: yi,\r\n                    z: is3DPlotEnabled ? Array(xi.length).fill(0) : null,\r\n                    line: {\r\n                        // color: e.color...\r\n                        width: e.thickness,\r\n                    },\r\n                    // color,\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: e.legend,\r\n                };\r\n            });\r\n\r\n            const index = systems.findIndex(\r\n                (sys) => +w_n === sys.w_n && +zeta === sys.zeta\r\n            );\r\n            if (index === -1)\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                all.push({\r\n                    x,\r\n                    y,\r\n                    z: is3DPlotEnabled ? Array(x.length).fill(0) : null,\r\n                    // color,\r\n                    line: {\r\n                        // color:'rgb(17, 157, 255)'\r\n                        width: thickness,\r\n                    },\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: `${symbols.out}(${symbols.in})`,\r\n                });\r\n\r\n            $traces(all);\r\n        }\r\n    }, [w_n, zeta, t_i, t_f, is3DPlotEnabled, thickness, systems, N]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [w_n, zeta]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <Grid container direction=\"column\" spacing={gridSpacing}>\r\n            <Grid\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                item\r\n            >\r\n                <SOTFByParamsLecture />\r\n            </Grid>\r\n\r\n            <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                <SubCard sx={{ direction: \"ltr\" }}>\r\n                    <Grid\r\n                        id=\"formulaBox\"\r\n                        sx={{ margin: \"auto\" }}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        {systems instanceof Array &&\r\n                            systems.map((sys, index) => {\r\n                                const formula = stepResponse(\r\n                                    sys.G_s,\r\n                                    sys.C_t,\r\n                                    index + 1\r\n                                );\r\n\r\n                                return (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        xs={12}\r\n                                        item\r\n                                    >\r\n                                        <MathJax>{formula}</MathJax>\r\n                                    </Grid>\r\n                                );\r\n                            })}\r\n                        {!isGraphCatured && (\r\n                            <Grid style={{ fontSize: \"18px\" }} xs={12}>\r\n                                <MathJax>{response}</MathJax>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </SubCard>\r\n            </Grid>\r\n            <Grid\r\n                spacing={2}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                container\r\n            >\r\n                <Grid\r\n                    md={3}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                    container\r\n                >\r\n                    <Grid xs={12}>\r\n                        <SOTFByParamsInputs\r\n                            w_n={w_n}\r\n                            zeta={zeta}\r\n                            t_i={t_i}\r\n                            t_f={t_f}\r\n                            $w_n={$w_n}\r\n                            $zeta={$zeta}\r\n                            $t_i={$t_i}\r\n                            $t_f={$t_f}\r\n                            N={N}\r\n                            $N={$N}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid md={9} sm={12} xs={12} item>\r\n                    <SubCard>\r\n                        <GraphMenu\r\n                            capture={capture}\r\n                            reset={() => $systems([])}\r\n                            update={(changes) => update(changes)}\r\n                            toggle3DPlot={toggle3DPlot}\r\n                        />\r\n                    </SubCard>\r\n                    <hr />\r\n                    <Grid xs={12} item>\r\n                        <SubCard>\r\n                            <PlotlyBox title=\"پاسخ پله\" traces={traces} />\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <hr />\r\n                    <Grid xs={12} item>\r\n                        {GInfo && <GInfo.Explain />}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SOTFExamineByParams;\r\n","import { Grid, Typography } from \"@mui/material\";\r\nimport \"views/topics/topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\n\r\nimport PinchPanCard from \"views/ui-component/cards/PinchPanCard\";\r\n\r\nconst SOTFByPolesLecture = () => {\r\n    return (\r\n        <PinchPanCard title=\"تابع تبدیل مرتبه دو- بررسی پارامتری\" border={true}>\r\n            <Grid xs={12} item>\r\n                <Typography sx={{ px: 2 }} style={{ lineHeight: \"2.5\" }}>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; پاسخ سیستم مرتبه دوم به ورودی\r\n                    پله یکی از سه حالت زیر می باشد:\r\n                    <h1>&nbsp; پاسخ میرای شدید</h1>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب حقیقی\r\n                    منفی دارد.\r\n                    <MathJax style={{ fontSize: \"18px\" }}>\r\n                        {`$$ G(s) = \\\\frac{k}{(s + \\\\alpha) (s + \\\\beta)} \\\\qquad\r\n                            \\\\alpha,\\\\beta > 0, \\\\quad \\\\alpha \\\\neq \\\\beta \\\\\\\\\r\n                            C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s(s + \\\\alpha) (s + \\\\beta)}\r\n                            \\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha\\\\beta} \\\\\\\\\r\n                            c(t) = (\\\\frac{k}{\\\\alpha\\\\beta} + \\\\frac{k}{\\\\alpha - \\\\beta} \\\\lgroup \\\\frac{e^{-\\\\alpha t}}{\\\\alpha} - \\\\frac{e^{-\\\\beta t}}{\\\\beta}\\\\rgroup)u(t)$$`}\r\n                    </MathJax>\r\n                    <h1>&nbsp; پاسخ میرای بحرانی</h1>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب حقیقی\r\n                    منفی برابر دارد.\r\n                    <MathJax style={{ fontSize: \"18px\" }}>\r\n                        {`$$ G(s) = \\\\frac{k}{(s + \\\\alpha)^2} \\\\qquad\r\n                            \\\\alpha,\\\\beta > 0, \\\\quad \\\\alpha = \\\\beta \\\\\\\\\r\n                            C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s(s + \\\\alpha)^2}\r\n                            \\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha^2} \\\\\\\\ \r\n                            c(t) = (\\\\frac{k}{\\\\alpha^2} - \\\\frac{k}{\\\\alpha^2} \\\\lgroup 1 + \\\\alpha t\\\\rgroup)e^{-\\\\alpha t}u(t)$$`}\r\n                    </MathJax>\r\n                    <h1>&nbsp; پاسخ میرای ضعیف (نوسانی)</h1>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب مزدوج\r\n                    با مقدار حقیقی منفی دارد.\r\n                    <MathJax style={{ fontSize: \"18px\" }}>\r\n                        {`$$ G(s) = \\\\frac{k}{s + \\\\alpha + j\\\\beta)(s + \\\\alpha - j\\\\beta)} \\\\qquad\r\n                            \\\\alpha > 0 \\\\\\\\\r\n                            \\\\Longrightarrow G(s) = \\\\frac{k}{(s^2 + 2\\\\alpha s + (\\\\alpha ^ 2 + \\\\beta ^ 2) } \\\\\\\\ \r\n                            C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s^3 + 2\\\\alpha s^2 + (\\\\alpha ^ 2 + \\\\beta ^ 2)s } =  \r\n                            \\\\frac{1}{s} \\\\frac{k}{(s + \\\\alpha)^2 + \\\\beta ^ 2 }\\\\\\\\ \r\n                            \\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2} \\\\\\\\ \r\n                            c(t) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2}u(t) - \\\\frac{ke^{-\\\\alpha t}}{\\\\alpha ^ 2 + \\\\beta ^ 2} \\\\lgroup cos\\\\beta t + \\\\frac{\\\\alpha}{\\\\beta}sin\\\\beta t \\\\rgroup u(t) \\\\\\\\\r\n                            \\\\Longrightarrow c(t) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2}u(t) - \\\\frac{\\\\sqrt{\\\\alpha ^ 2 + \\\\beta ^ 2}}{\\\\beta}e^{-\\\\alpha t}sin(\\\\beta t + \\\\theta) u(t)$$`}\r\n                    </MathJax>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; پاسخ اکثر سیستم های خطی در عمل\r\n                    به صورت میرای ضعیف است. لذا معیارهای عملکرد در حوزه ی زمان\r\n                    برای بررسی و تحلیل سیستم های کنترل خطی از این پاسخ استخراج\r\n                    می شود.\r\n                </Typography>\r\n            </Grid>\r\n        </PinchPanCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByPolesLecture;\r\n","import { Grid, Typography } from \"@mui/material\";\r\nimport CoordinateSystem from \"views/input-boxes/CoordinateSystem\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$\\\\alpha = $$\",\r\n    \"$$\\\\beta = $$\",\r\n    \"$$k = $$\",\r\n    \"$$t_i = $$\",\r\n    \"$$t_f = $$\",\r\n    \"$$N = $$\"\r\n];\r\nconst parameterUnits = [null, null, null, \"$$sec$$\", \"$$sec$$\", null];\r\n\r\nconst SOTFByPolesInputs = ({\r\n    k,\r\n    alpha,\r\n    beta,\r\n    $k,\r\n    $alpha,\r\n    $beta,\r\n    t_i,\r\n    t_f,\r\n    $t_i,\r\n    $t_f,\r\n    N,\r\n    $N\r\n}) => {\r\n    const grids = 10;\r\n\r\n    const updatePoles = (newPole, other, $newPole, $other) => {\r\n        $newPole(newPole);\r\n        return newPole.isReal()\r\n            ? $other(other.realify())\r\n            : $other(newPole.conjugate());\r\n    };\r\n\r\n    const selectAlpha = (point) => {\r\n        if (point) {\r\n            const { x, y } = point;\r\n            updatePoles(new Complex(-x, -y), beta, $alpha, $beta);\r\n        }\r\n    };\r\n    const selectBeta = (point) => {\r\n        if (point) {\r\n            const { x, y } = point;\r\n            updatePoles(new Complex(-x, -y), alpha, $beta, $alpha);\r\n        }\r\n    };\r\n\r\n    const alphaTextBoxOnChange = (strValue) =>\r\n        updatePoles(Complex.extract(strValue), beta, $alpha, $beta);\r\n\r\n    const betaTextBoxOnChange = (strValue) =>\r\n        updatePoles(Complex.extract(strValue), alpha, $beta, $alpha);\r\n\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={0.6} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[alpha, beta, k, t_i, t_f, N]}\r\n                    setters={[\r\n                        alphaTextBoxOnChange,\r\n                        betaTextBoxOnChange,\r\n                        $k,\r\n                        $t_i,\r\n                        $t_f,\r\n                        $N\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n\r\n                <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <Typography style={{ textAlign: \"center\" }}>\r\n                        محل قطب ها را انتخاب کنید\r\n                    </Typography>\r\n\r\n                    <CoordinateSystem\r\n                        point={{\r\n                            x: -alpha.real(),\r\n                            y: -alpha.imaginary(),\r\n                            select: selectAlpha,\r\n                        }}\r\n                        extra={{\r\n                            x: -beta.real(),\r\n                            y: -beta.imaginary(),\r\n                            select: selectBeta,\r\n                        }}\r\n                        options={{ pointSize: 10, grids }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByPolesInputs;\r\n","import SOTFByPolesLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"math/calculus\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"views/plotter/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport PlotlyBox from \"views/plotter/PlotlyBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport SOTFByPolesInputs from \"./parameters\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Algebra from \"math/algebra/index\";\r\nimport TransferFunction from \"math/algebra/functions/fraction\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Describer from \"math/describer\";\r\nimport { getCache, cacheParameters} from 'toolshed';\r\n\r\nconst stepResponse = (tf, c_t = tf.step(), index = undefined) =>\r\n    \"$$\\\\begin{cases} \" +\r\n    tf.label(\"G\", index) +\r\n    \" \\\\\\\\ \\\\\\\\ \" +\r\n    c_t.label(\"c\", index) +\r\n    \"\\\\end{cases}$$\";\r\n\r\nconst symbols = {\r\n    in: \"t\",\r\n    out: \"c\",\r\n};\r\n\r\nconst SOTFExamineByPoles = () => {\r\n    const [alpha, $alpha] = useState(new Complex(1, 1));\r\n    const [beta, $beta] = useState(alpha.conjugate());\r\n    const [k, $k] = useState(1.0);\r\n    const [t_i, $t_i] = useState(0);\r\n    const [t_f, $t_f] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [C_t, $C_t] = useState(null);\r\n    const [G_s, $G_s] = useState(null);\r\n    const [GInfo, $GInfo] = useState(\"\");\r\n    const [N, $N] = useState(1000);\r\n    const [response, $response] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    //update\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) =>\r\n                alpha.equals(sys.alpha) && beta.equals(sys.beta) && sys.k === k\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                alpha,\r\n                beta,\r\n                k,\r\n                G_s,\r\n                C_t,\r\n                thickness,\r\n                legend:\r\n                    \"$$\" +\r\n                    symbols.out +\r\n                    \"_{\" +\r\n                    (systems.length + 1).toString() +\r\n                    \"}$$\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let gtf = TransferFunction.Shortcuts.$2(\r\n            +k,\r\n            alpha instanceof Algebra ? alpha.negation() : -alpha,\r\n            beta instanceof Algebra ? beta.negation() : -beta\r\n        );\r\n        const tstep = gtf.step();\r\n        $G_s(gtf);\r\n        if (gtf && alpha.hasSameTypeWith(beta)) {\r\n            $C_t(tstep);\r\n            $GInfo(new Describer(gtf));\r\n            const [x, y] = calculus.pointify(tstep.$, +t_i, +t_f, +N); \r\n            $response(stepResponse(gtf));\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            const all = systems.map((e, index) => {\r\n                let tgtf = TransferFunction.Shortcuts.$2(\r\n                    +e.k,\r\n                    e.alpha instanceof Algebra ? e.alpha.negation() : -e.alpha,\r\n                    e.beta instanceof Algebra ? e.beta.negation() : -e.beta\r\n                );\r\n\r\n                const [xi, yi] = calculus.pointify(\r\n                    tgtf.step().$,\r\n                    +t_i,\r\n                    +t_f,\r\n                    +N\r\n                ); \r\n\r\n                return {\r\n                    x: xi,\r\n                    y: yi,\r\n                    z: is3DPlotEnabled ? Array(xi.length).fill(0) : null,\r\n                    line: {\r\n                        // color: e.color...\r\n                        width: e.thickness,\r\n                    },\r\n                    // color,\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: e.legend,\r\n                };\r\n            });\r\n\r\n            const index = systems.findIndex(\r\n                (sys) =>\r\n                    alpha.equals(sys.alpha) &&\r\n                    beta.equals(sys.beta) &&\r\n                    sys.k === k\r\n            );\r\n            if (index === -1)\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                all.push({\r\n                    x,\r\n                    y,\r\n                    z: is3DPlotEnabled ? Array(x.length).fill(0) : null,\r\n                    // color,\r\n                    line: {\r\n                        // color:'rgb(17, 157, 255)'\r\n                        width: thickness,\r\n                    },\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: `${symbols.out}(${symbols.in})`,\r\n                });\r\n\r\n            $traces(all);\r\n        }\r\n        cacheParameters(\"ch04-hw\", {alpha, beta, k, t_i, t_f});\r\n\r\n    }, [alpha, beta, k, t_i, t_f, is3DPlotEnabled, thickness, systems, N]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [alpha, beta, k]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <Grid container direction=\"column\" spacing={gridSpacing}>\r\n            <Grid\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                item\r\n            >\r\n                <SOTFByPolesLecture />\r\n            </Grid>\r\n\r\n            <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                <SubCard sx={{ direction: \"ltr\" }}>\r\n                    <Grid\r\n                        id=\"formulaBox\"\r\n                        sx={{ margin: \"auto\" }}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        {systems instanceof Array &&\r\n                            systems.map((sys, index) => {\r\n                                const formula = stepResponse(\r\n                                    sys.G_s,\r\n                                    sys.C_t,\r\n                                    index + 1\r\n                                );\r\n\r\n                                return (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        xs={12}\r\n                                        item\r\n                                    >\r\n                                        <MathJax>{formula}</MathJax>\r\n                                    </Grid>\r\n                                );\r\n                            })}\r\n                        {!isGraphCatured && (\r\n                            <Grid style={{ fontSize: \"18px\" }} xs={12}>\r\n                                <MathJax>{response}</MathJax>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </SubCard>\r\n            </Grid>\r\n            <Grid\r\n                spacing={2}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                container\r\n            >\r\n                <Grid\r\n                    md={3}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                    container\r\n                >\r\n                    <Grid xs={12}>\r\n                        <SOTFByPolesInputs\r\n                            alpha={alpha}\r\n                            beta={beta}\r\n                            k={k}\r\n                            t_i={t_i}\r\n                            t_f={t_f}\r\n                            $alpha={$alpha}\r\n                            $beta={$beta}\r\n                            $k={$k}\r\n                            $t_i={$t_i}\r\n                            $t_f={$t_f}\r\n                            N={N}\r\n                            $N={$N}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid md={9} sm={12} xs={12} item>\r\n                    <SubCard>\r\n                        <GraphMenu\r\n                            capture={capture}\r\n                            reset={() => $systems([])}\r\n                            update={(changes) => update(changes)}\r\n                            toggle3DPlot={toggle3DPlot}\r\n                        />\r\n                    </SubCard>\r\n                    <hr />\r\n                    <Grid xs={12} item>\r\n                        <SubCard>\r\n                            <PlotlyBox title=\"پاسخ پله\" traces={traces} />\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <hr />\r\n                    <Grid xs={12} item>\r\n                        {GInfo && <GInfo.Explain />}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SOTFExamineByPoles;\r\n","import { Grid } from \"@mui/material\";\r\n// project imports\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Switcher from \"views/ui-component/buttons/Switcher\";\r\nimport { useState } from \"react\";\r\nimport SOTFExamineByParams from \"./by-params/index\";\r\nimport SOTFExamineByPoles from \"./by-poles/index\";\r\nimport \"views/topics/topics.css\";\r\n\r\nconst SecondOrderTransferFunctionExamining = () => {\r\n    const [mode, setMode] = useState(0);\r\n    const choices = [\"بررسی قطبی\", \"بررسی پارامتری\"];\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid\r\n                direction=\"row\"\r\n                sx={{ pt: 1, pr: 5}}\r\n                item\r\n                xs={12}\r\n                spacing={gridSpacing}\r\n            >\r\n                <Switcher choices={choices} setSwitch={setMode} />\r\n            </Grid>\r\n            <Grid item>\r\n                <MainCard style={{ background: \"#F5E1FD\" }}>\r\n                    <Grid item spacing={gridSpacing}>\r\n                        {mode === 0 ? (\r\n                            <SOTFExamineByPoles />\r\n                        ) : (\r\n                            <SOTFExamineByParams />\r\n                        )}\r\n                    </Grid>\r\n                </MainCard>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SecondOrderTransferFunctionExamining;\r\n"],"names":["PinchPanCard","title","border","Grid","xs","item","Typography","sx","px","style","lineHeight","MathJax","fontSize","parameterFormulas","parameterUnits","w_n","zeta","$w_n","$zeta","t_i","t_f","$t_i","$t_f","N","$N","SubCard","darkBorder","direction","textAlign","height","spacing","container","SimpleParametersList","parameters","setters","value","labels","units","mt","md","sm","CoordinateSystem","point","x","y","select","extra","options","pointSize","grids","stepResponse","tf","c_t","step","index","undefined","label","symbols","useState","systems","$systems","traces","$traces","thickness","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","C_t","$C_t","G_s","$G_s","GInfo","$GInfo","response","$response","useEffect","gtf","TransferFunction","tstep","Describer","calculus","$","all","map","e","w_n2","tgtf","xi","z","Array","length","fill","line","width","type","mode","name","legend","findIndex","sys","push","gridSpacing","margin","id","formula","marginTop","GraphMenu","capture","capturedSystems","toString","reset","update","changes","toggle3DPlot","PlotlyBox","Explain","k","alpha","beta","$k","$alpha","$beta","updatePoles","newPole","other","$newPole","$other","isReal","realify","conjugate","strValue","Complex","real","imaginary","Algebra","negation","hasSameTypeWith","equals","cacheParameters","setMode","pt","pr","Switcher","choices","setSwitch","MainCard","background"],"sourceRoot":""}