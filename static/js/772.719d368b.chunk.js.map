{"version":3,"file":"static/js/772.719d368b.chunk.js","mappings":"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","sources":["math/GraphBox.jsx","math/GraphMenu.jsx","views/input-boxes/SimpleParametersList.jsx","views/topics/chapter06/rc-filter-frequency-response/lecture.jsx","views/topics/chapter06/rc-filter-frequency-response/parameters.jsx","views/topics/chapter06/rc-filter-frequency-response/index.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst GraphBox = ({ traces, title, width, height = 500 }) => {\r\n    /*const temp_layout = {\r\n        xaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n        yaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n    };*/\r\n\r\n    return (\r\n        <Plot\r\n            style={{ textAlign: \"center\" }}\r\n            //id=\"graphBox\"\r\n            data={traces}\r\n            layout={{\r\n                // width: 1000,\r\n                // autosize: true,\r\n                margin: {\r\n                    t: 30, //top margin\r\n                    l: 30, //left margin\r\n                    r: 20, //right margin\r\n                    b: 30, //bottom margin\r\n                },\r\n                xaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true\r\n                },\r\n                yaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true\r\n\r\n                },\r\n                height,\r\n                title,\r\n                // hoverlabel: { bgcolor: \"#FFF\" },\r\n                hoverlabel: {align:'auto', boxmode: 'overlay', font:{color:'#000000FF'}},\r\n                legend: {orientation: 'h'}//, y: -0.3},\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GraphBox;\r\n","import SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { useState, useEffect } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    graphFileName,\r\n    formulaFileName,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    const save = () => {\r\n        const graphBoxElement = document.getElementById(\"graphBox\");\r\n        // normal .blob has dark bakground\r\n        // convert background to light\r\n        const canvasWithBackground = document.createElement(\"canvas\");\r\n        canvasWithBackground.width = graphBoxElement.width;\r\n        canvasWithBackground.height = graphBoxElement.height;\r\n\r\n        const ctx = canvasWithBackground.getContext(\"2d\");\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, graphBoxElement.width, graphBoxElement.height);\r\n\r\n        ctx.drawImage(graphBoxElement, 0, 0);\r\n        // save\r\n        canvasWithBackground.toBlob((blob) => {\r\n            saveAs(blob, graphFileName);\r\n        });\r\n\r\n        html2canvas(document.getElementById(\"formulaBox\")).then((canvas) => {\r\n            canvas.toBlob((blob) => {\r\n                saveAs(blob, formulaFileName);\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}{\" \"}\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"download graph\"\r\n                    component=\"span\"\r\n                    onClick={save}\r\n                >\r\n                    <SaveAltIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import { Grid, InputAdornment, TextField } from \"@mui/material\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { evaluate } from \"math/calculus\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst SimpleParametersList = ({ parameters, setters, labels, units }) => {\r\n    return (\r\n        <Fragment>\r\n            {parameters instanceof Array &&\r\n                parameters.map((param, i) => (\r\n                    <Grid md={12} sm={4} xs={6} item>\r\n                        <TextField\r\n                            onChange={(e) => setters[i](e.target.value)}\r\n                            value={param}\r\n                            sx={{ width: \"100%\" }}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"left\">\r\n                                        <MathJax>{labels[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: units[i] && (\r\n                                    <InputAdornment position=\"right\">\r\n                                        <MathJax>{units[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SimpleParametersList;\r\n","import SubCard from \"../../../ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"views/topics/topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport rc_filter_circuit from './visual/rc_filter_circuit.png';\r\nconst firstOrderTransferFunctionFormFormula = \"$$G(s) = \\\\frac{k}{s + a}$$\";\r\n\r\nconst RCFilterFrequencyResponseLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"تابع تبدیل مرتبه یک\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n        >\r\n            <Grid className=\"lecture-text\" item>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; این توابع تبدیل به فرم زیر می\r\n                    باشند:\r\n                </p>\r\n            </Grid>\r\n            <Grid item>\r\n                <MathJax>{firstOrderTransferFunctionFormFormula}</MathJax>\r\n            </Grid>\r\n            <Grid className=\"lecture-text\" item>\r\n                <h1 style={{ marginTop: \"5%\", marginBottom: \"3%\" }}>\r\n                    &nbsp;پاسخ حالت ماندگار\r\n                </h1>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; دیاگرام یک سیستم LTI ساده بصورت\r\n                    زیر می باشد:\r\n                </p>\r\n            </Grid>\r\n            <Grid item>\r\n                <img\r\n                    className=\"lecture-image\"\r\n                    src={rc_filter_circuit}\r\n                    alt=\"بارگذاری تصویر با مشکل مواجه شد\"\r\n                />\r\n            </Grid>\r\n           \r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default RCFilterFrequencyResponseLecture;\r\n","import { Grid, Button } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from 'store/constant';\r\n\r\nconst parameterFormulas = [\r\n    \"$$R = $$\",\r\n    \"$$C = $$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n];\r\nconst parameterUnits = [\"$$k\\\\Omega$$\", \"$$\\\\mu F$$\", \"$$Hz$$\", \"$$Hz$$\"];\r\n\r\nconst RCFilterFrequencyResponseParameters = ({\r\n    R,\r\n    C,\r\n    $R,\r\n    $C,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    phaseInRadianScale,\r\n    setPhaseInRadianScale\r\n}) => {\r\n    // const grids = 10;\r\n    // const selectR = (point) => {\r\n    //     if (point) $R(point.x);\r\n    // };\r\n    // const selectC = (point) => {\r\n    //     if (point) $C(point.y);\r\n    // };\r\n\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n            \r\n                <SimpleParametersList parameters={[R, C, w_min, w_max]} setters={[$R, $C, $w_min, $w_max]} labels={parameterFormulas} units={parameterUnits} />\r\n                <Grid xs={12} style={{paddingLeft: '3%'}} container>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(false)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={!phaseInRadianScale ? \"contained\" : \"outlined\"}\r\n                        >\r\n                            درجه\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(\"rad\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={phaseInRadianScale ? \"contained\" : \"outlined\"}\r\n                        >\r\n                            رادیان\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                {/* <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <p style={{textAlign: 'center'}}>محل قطب را انتخاب کنید</p>\r\n                    <CoordinateSystem\r\n                        point={{ x: R, y: 0, select: selectR }}\r\n                        extra={{\r\n                            x: 0,\r\n                            y: C,\r\n                            select: selectC,\r\n                        }}\r\n                        options={{ pointSize: 10, grids }}\r\n                    />\r\n                </Grid> */}\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default RCFilterFrequencyResponseParameters;","import RCFilterFrequencyResponseLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport RCFilterFrequencyResponseParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\nconst radianToDegreeScaleConstant = 180 / Math.PI;\r\n\r\nconst makeTrace = (x, y, thickness, legend, _3d, mode = \"lines\") => {\r\n    return {\r\n        x,\r\n        y,\r\n        z: _3d ? Array(x.length).fill(0) : null,\r\n        // color,\r\n        line: {\r\n            // color:'rgb(17, 157, 255)'\r\n            width: thickness,\r\n        },\r\n        type: \"scatter\" + (_3d ? \"3d\" : \"\"),\r\n        mode,\r\n        name: `$$${legend}$$`,\r\n    };\r\n};\r\nconst toTrace = (f, w_min, w_max, thickness, legend, _3d, N = 1000) => {\r\n    const [x, y] = calculus.pointify(f, w_min, w_max, N);\r\n    return makeTrace(x, y, thickness, legend, _3d);\r\n};\r\n\r\nconst RCFilterFrequencyResponseExample = () => {\r\n    const [R, $R] = useState(0.001);\r\n    const [C, $C] = useState(1.0);\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(-5);\r\n    const [w_max, $w_max] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState({\r\n        whole: [],\r\n        phase: [],\r\n        amplitude: [],\r\n        degreePhase: [],\r\n    });\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) => sys.R === +R && sys.C === +C\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                R: +R,\r\n                C: +C,\r\n                H_s,\r\n                thickness,\r\n                legend: symbols.out + \"_{\" + (systems.length + 1).toString(),\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const h_s = new TransferFunction([1], [+R * +C * 10e3, 1]);\r\n                $H_s(h_s);\r\n                $response(\"$$\" + h_s.label(\"H\") + \"$$\");\r\n                // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n                // so that the traces will be loaded with new conditions\r\n                let repeatedSystem = false;\r\n                const all = {\r\n                    amplitude: Array(systems.length),\r\n                    phase: Array(systems.length),\r\n                    degreePhase: Array(systems.length),\r\n                    whole: Array(systems.length),\r\n                };\r\n\r\n                for (let i = 0; i < systems.length; i++) {\r\n                    all.amplitude[i] = toTrace(\r\n                        systems[i].H_s.amplitude,\r\n                        +w_min,\r\n                        +w_max,\r\n                        systems[i].thickness,\r\n                        systems[i].legend,\r\n                        is3DPlotEnabled,\r\n                        N\r\n                    );\r\n                    all.phase[i] = toTrace(\r\n                        systems[i].H_s.phase,\r\n                        +w_min,\r\n                        +w_max,\r\n                        systems[i].thickness,\r\n                        systems[i].legend,\r\n                        is3DPlotEnabled,\r\n                        N\r\n                    );\r\n                    all.degreePhase[i] = { ...all.phase[i] };\r\n                    all.degreePhase[i].y = all.degreePhase[i].y.map(\r\n                        (yi) => yi * radianToDegreeScaleConstant\r\n                    );\r\n                    const [x, y] = await calculus.complexPointify(\r\n                        systems[i].H_s.frequencyResponse,\r\n                        +w_min,\r\n                        +w_max,\r\n                        N\r\n                    );\r\n                    all.whole[i] = makeTrace(\r\n                        x,\r\n                        y,\r\n                        systems[i].thickness,\r\n                        systems[i].legend,\r\n                        is3DPlotEnabled,\r\n                        \"lines\"\r\n                    );\r\n\r\n                    if (h_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n                }\r\n\r\n                if (!repeatedSystem) {\r\n                    // if current system isnt in traces list => add it temperory to plot\r\n                    const [x, y] = await calculus.complexPointify(\r\n                        h_s.frequencyResponse,\r\n                        +w_min,\r\n                        +w_max,\r\n                        N\r\n                    );\r\n\r\n                    const whole = makeTrace(\r\n                            x,\r\n                            y,\r\n                            thickness,\r\n                            `${symbols.out}(${symbols.in})`,\r\n                            is3DPlotEnabled,\r\n                            \"lines\"\r\n                        ),\r\n                        amps = toTrace(\r\n                            h_s.amplitude,\r\n                            +w_min,\r\n                            +w_max,\r\n                            thickness,\r\n                            `${symbols.out}(${symbols.in})`,\r\n                            is3DPlotEnabled,\r\n                            N\r\n                        ),\r\n                        phase = toTrace(\r\n                            h_s.phase,\r\n                            +w_min,\r\n                            +w_max,\r\n                            thickness,\r\n                            `${symbols.out}(${symbols.in})`,\r\n                            is3DPlotEnabled,\r\n                            N\r\n                        );\r\n                    const degreePhase = { ...phase };\r\n                    degreePhase.y = degreePhase.y.map(\r\n                        (yi) => yi * radianToDegreeScaleConstant\r\n                    );\r\n\r\n                    all.whole.push(whole);\r\n                    all.phase.push(phase);\r\n                    all.degreePhase.push(degreePhase);\r\n                    all.amplitude.push(amps);\r\n                }\r\n\r\n                $traces(all);\r\n            } catch (ex) {\r\n                console.log(ex);\r\n            }\r\n        })();\r\n    }, [R, C, w_min, w_max, is3DPlotEnabled, thickness, systems, N]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [R, C]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">پاسخ فرکانسی فیلتر RC</h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        item\r\n                    >\r\n                        <RCFilterFrequencyResponseLecture />\r\n                    </Grid>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <RCFilterFrequencyResponseParameters\r\n                                    C={C}\r\n                                    R={R}\r\n                                    $C={(value) => {\r\n                                        if (value >= 0) $C(value);\r\n                                    }}\r\n                                    $R={(value) => {\r\n                                        if (value >= 0) $R(value);\r\n                                    }}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    formulaFileName={\r\n                                        \"Water Tank Level Equations _ \" +\r\n                                        [\r\n                                            ...systems.map((sys) => sys.legend),\r\n                                        ].join() +\r\n                                        \".png\"\r\n                                    }\r\n                                    graphFileName={\r\n                                        [\r\n                                            ...systems.map(\r\n                                                (sys) =>\r\n                                                    `${sys.legend}{alpha=${\r\n                                                        sys.a\r\n                                                    }_k=${sys.k}_in=${\r\n                                                        sys.inputSignal\r\n                                                            ? \"ramp\"\r\n                                                            : \"step\"\r\n                                                    }}`\r\n                                            ),\r\n                                        ].join(\", \") + \".png\"\r\n                                    }\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"پاسخ فرکانسی\"\r\n                                            traces={traces.whole}\r\n                                        />\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <Grid\r\n                                    spacing={gridSpacing}\r\n                                    direction=\"row\"\r\n                                    container\r\n                                >\r\n                                    <Grid lg={6} md={6} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"اندازه\"\r\n                                            traces={traces.amplitude}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid lg={6} md={6} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"فاز\"\r\n                                            traces={\r\n                                                phaseInRadianScale\r\n                                                    ? traces.phase\r\n                                                    : traces.degreePhase\r\n                                            }\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </SubCard>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default RCFilterFrequencyResponseExample;\r\n"],"names":["traces","title","width","height","style","textAlign","data","layout","margin","t","l","r","b","xaxis","rangemode","zeroline","yaxis","hoverlabel","align","boxmode","font","color","legend","orientation","capture","graphFileName","formulaFileName","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","sx","direction","container","md","sm","xs","item","component","onClick","graphBoxElement","document","getElementById","canvasWithBackground","createElement","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","blob","saveAs","html2canvas","then","canvas","spacing","mt","alignItems","value","onChange","e","parameters","setters","labels","units","Fragment","Array","map","param","i","target","InputProps","startAdornment","position","endAdornment","SubCard","darkBorder","Grid","className","MathJax","marginTop","marginBottom","src","rc_filter_circuit","alt","parameterFormulas","parameterUnits","R","C","$R","$C","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","gridSpacing","SimpleParametersList","paddingLeft","p","Button","textTransform","variant","symbols","radianToDegreeScaleConstant","Math","PI","makeTrace","x","y","_3d","mode","z","length","fill","line","type","name","toTrace","f","N","calculus","H_s","$H_s","systems","$systems","whole","phase","amplitude","degreePhase","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","h_s","TransferFunction","label","repeatedSystem","all","yi","frequencyResponse","equals","amps","push","console","log","MainCard","id","sys","index","formula","fontSize","GraphMenu","capturedSystems","findIndex","toString","join","a","k","inputSignal","changes","lg","GraphBox"],"sourceRoot":""}