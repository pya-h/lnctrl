{"version":3,"file":"static/js/925.7cf20235.chunk.js","mappings":"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","sources":["math/GraphBox.jsx","views/input-boxes/SimpleParametersList.jsx","views/topics/chapter03/design-damping-system/lecture.jsx","views/topics/chapter03/design-damping-system/parameters.jsx","views/topics/chapter03/design-damping-system/index.jsx","views/ui-component/cards/MainCard.js"],"sourcesContent":["import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst GraphBox = ({ traces, title, width, height = 500, logX }) => {\r\n    /*const temp_layout = {\r\n        xaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n        yaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n    };*/\r\n\r\n    return (\r\n        <Plot\r\n            style={{ textAlign: \"center\" }}\r\n            //id=\"graphBox\"\r\n            data={traces}\r\n            layout={{\r\n                // width: 1000,\r\n                // autosize: true,\r\n                margin: {\r\n                    t: 30, //top margin\r\n                    l: 30, //left margin\r\n                    r: 20, //right margin\r\n                    b: 30, //bottom margin\r\n                },\r\n                xaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true,\r\n                    type: !logX ? \"dec\" : \"log\"\r\n                },\r\n                yaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true\r\n\r\n                },\r\n                height,\r\n                title,\r\n                // hoverlabel: { bgcolor: \"#FFF\" },\r\n                hoverlabel: {align:'auto', boxmode: 'overlay', font:{color:'#000000FF'}},\r\n                legend: {orientation: 'h'}//, y: -0.3},\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GraphBox;\r\n","import { Grid, InputAdornment, TextField } from \"@mui/material\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { evaluate } from \"math/calculus\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst SimpleParametersList = ({ parameters, setters, labels, units }) => {\r\n    return (\r\n        <Fragment>\r\n            {parameters instanceof Array &&\r\n                parameters.map((param, i) => (\r\n                    <Grid md={12} sm={4} xs={6} item>\r\n                        <TextField\r\n                            onChange={(e) => setters[i](e.target.value)}\r\n                            value={param}\r\n                            sx={{ width: \"100%\" }}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"left\">\r\n                                        <MathJax>{labels[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: units[i] && (\r\n                                    <InputAdornment position=\"right\">\r\n                                        <MathJax>{units[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SimpleParametersList;\r\n","import SubCard from \"views/ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"../../topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { mathjaxSpaces } from \"toolshed\";\r\n\r\nconst t_riseFormula =\r\n    \"$$ t_{pk} = \\\\frac{k\\\\pi}{\\\\omega_n \\\\sqrt{1 - \\\\zeta^2}} = \\\\frac{k\\\\pi}{\\\\omega_d} \" +\r\n    mathjaxSpaces(3) +\r\n    \" k = 1, 2, 3, ...\\\\\\\\\" +\r\n    \" t_{rise} = t_p = \\\\frac{\\\\pi}{\\\\omega_d} $$\";\r\nconst overshootFormula = `$$M_p = e^{\\\\frac{-\\\\zeta \\\\pi}{\\\\sqrt{1 - \\\\zeta^2}}} = e ^ {-\\\\pi cot\\\\theta} \\\\\\\\\r\n    \\\\zeta = \\\\frac{-\\\\ln M_p}{\\\\sqrt{\\\\pi^2 + \\\\lgroup \\\\ln M_p \\\\rgroup ^ 2}} $$`;\r\n\r\nconst DesignSystemByCharsLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"طراحی سیستم از طریق مشخصات میرایی\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n            spacing={gridSpacing}\r\n        >\r\n            <Grid className=\"lecture-text\" style={{ fontSize: \"20px\" }} item>\r\n                <p>&nbsp; &nbsp; &nbsp; &nbsp; \r\n                    زمان اوج (Rise Time)</p>\r\n            </Grid>\r\n            <Grid style={{ fontSize: \"20px\" }} item>\r\n                <MathJax>{t_riseFormula}</MathJax>\r\n            </Grid>\r\n            <Grid className=\"lecture-text\" style={{ fontSize: \"20px\" }} item>\r\n                <p>&nbsp; &nbsp; &nbsp; &nbsp; بالازدگی (Overshoot)</p>\r\n            </Grid>\r\n            <Grid style={{ fontSize: \"20px\" }} item>\r\n                <MathJax>{overshootFormula}</MathJax>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default DesignSystemByCharsLecture;\r\n","import { Grid } from \"@mui/material\";\r\nimport CoordinateSystem from \"views/input-boxes/CoordinateSystem\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$M_{p} = $$\",\r\n    \"$$t_{rise} = $$\",\r\n    \"$$t_i = $$\",\r\n    \"$$t_f = $$\",\r\n];\r\nconst parameterUnits = [\"%\", \"$$sec$$\", \"$$sec$$\", \"$$sec$$\"];\r\n\r\nconst DesignSystemByCharsParameters = ({\r\n    M_p,\r\n    t_rise,\r\n    $M_p,\r\n    $t_rise,\r\n    t_i,\r\n    t_f,\r\n    $t_i,\r\n    $t_f,\r\n}) => {\r\n    const grids = 1;\r\n    const checkRiseTime = (value) => value >= 0 && $t_rise(value);\r\n    const checkOvershoot = (value) => value >= 0 && $M_p(value);\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={0.6} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[ M_p, t_rise, t_i, t_f]}\r\n                    setters={[ checkOvershoot, checkRiseTime, $t_i, $t_f]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n\r\n                <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <p style={{ textAlign: \"center\" }}>\r\n                    مقدار پارامترها را از اینجا هم می توانید تغییر دهید\r\n                    </p>\r\n\r\n                    <CoordinateSystem\r\n                        point={{\r\n                            y: M_p,\r\n                            x: 0,\r\n                            select: ({ y }) => {\r\n                                if (y && y >= 0) $M_p(y);\r\n                            },\r\n                        }}\r\n                        extra={{\r\n                            y: 0,\r\n                            x: t_rise,\r\n                            select: ({ x }) => {\r\n                                if (x && x >= 0) $t_rise(x);\r\n                            },\r\n                        }}\r\n                        options={{ pointSize: 10, grids}}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default DesignSystemByCharsParameters;\r\n","import DesignSystemByCharsLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport DesignSystemByCharsParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Describer from \"math/describer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\n\r\nconst stepResponse = (tf, c_t = tf.step(), index = undefined) =>\r\n    \"$$\\\\begin{cases} \" +\r\n    tf.label(\"G\", index) +\r\n    \" \\\\\\\\ \\\\\\\\ \" +\r\n    c_t.label(\"c\", index) +\r\n    \"\\\\end{cases}$$\";\r\n\r\nconst symbols = {\r\n    in: \"t\",\r\n    out: \"c\",\r\n};\r\n\r\nconst DesignSystemByCharacteristics = () => {\r\n    const [M_p, $M_p] = useState(1);\r\n    const [t_rise, $t_rise] = useState(1);\r\n    const [t_i, $t_i] = useState(0);\r\n    const [t_f, $t_f] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [C_t, $C_t] = useState(null);\r\n    const [G_s, $G_s] = useState(null);\r\n    const [GInfo, $GInfo] = useState(\"\");\r\n\r\n    const [response, $response] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n    //update\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) => M_p === sys.M_p && t_rise === sys.t_rise\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                M_p: Number(M_p),\r\n                t_rise: Number(t_rise),\r\n                G_s,\r\n                C_t,\r\n                thickness,\r\n                legend:\r\n                    \"$$\" +\r\n                    symbols.out +\r\n                    \"_{\" +\r\n                    (systems.length + 1).toString() +\r\n                    \"}$$\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        let gtf = TransferFunction.Specials.$design(\r\n            Number(t_rise),\r\n            Number(M_p)\r\n        );\r\n        const tstep = gtf.step();\r\n        $G_s(gtf);\r\n        if (gtf) {\r\n            $C_t(tstep);\r\n            $GInfo(new Describer(gtf));\r\n            const [x, y] = calculus.pointify(tstep.$, Number(t_i), Number(t_f)); // N: 100\r\n            $response(stepResponse(gtf));\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            const all = systems.map((e, index) => {\r\n                const M_p2 = e.M_p * e.M_p;\r\n                let tgtf = new TransferFunction(\r\n                    [M_p2],\r\n                    [1, 2 * e.t_rise * e.M_p, M_p2]\r\n                );\r\n\r\n                const [xi, yi] = calculus.pointify(\r\n                    tgtf.step().$,\r\n                    Number(t_i),\r\n                    Number(t_f)\r\n                ); // N: 100\r\n\r\n                return {\r\n                    x: xi,\r\n                    y: yi,\r\n                    z: is3DPlotEnabled ? Array(xi.length).fill(0) : null,\r\n                    line: {\r\n                        // color: e.color...\r\n                        width: e.thickness,\r\n                    },\r\n                    // color,\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: e.legend,\r\n                };\r\n            });\r\n\r\n            const index = systems.findIndex(\r\n                (sys) => M_p === sys.M_p && t_rise === sys.t_rise\r\n            );\r\n            if (index === -1)\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                all.push({\r\n                    x,\r\n                    y,\r\n                    z: is3DPlotEnabled ? Array(x.length).fill(0) : null,\r\n                    // color,\r\n                    line: {\r\n                        // color:'rgb(17, 157, 255)'\r\n                        width: thickness,\r\n                    },\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: `${symbols.out}(${symbols.in})`,\r\n                });\r\n\r\n            $traces(all);\r\n        }\r\n    }, [M_p, t_rise, t_i, t_f, is3DPlotEnabled, thickness, systems]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [M_p, t_rise]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">\r\n                    طراحی سیستم با استفاده از مشخصات میرایی سیستم{\" \"}\r\n                </h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={gridSpacing}>\r\n                    <Grid\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        item\r\n                    >\r\n                        <DesignSystemByCharsLecture />\r\n                    </Grid>\r\n\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems instanceof Array &&\r\n                                    systems.map((sys, index) => {\r\n                                        const formula = stepResponse(\r\n                                            sys.G_s,\r\n                                            sys.C_t,\r\n                                            index + 1\r\n                                        );\r\n\r\n                                        return (\r\n                                            <Grid\r\n                                                style={{ fontSize: \"18px\" }}\r\n                                                xs={12}\r\n                                                item\r\n                                            >\r\n                                                <MathJax>{formula}</MathJax>\r\n                                            </Grid>\r\n                                        );\r\n                                    })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid style={{ fontSize: \"18px\" }} xs={12}>\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <DesignSystemByCharsParameters\r\n                                    M_p={M_p}\r\n                                    t_rise={t_rise}\r\n                                    t_i={t_i}\r\n                                    t_f={t_f}\r\n                                    $M_p={$M_p}\r\n                                    $t_rise={$t_rise}\r\n                                    $t_i={$t_i}\r\n                                    $t_f={$t_f}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    formulaFileName={\r\n                                        \"Water Tank Level Equations _ \" +\r\n                                        [\r\n                                            ...systems.map((sys) => sys.legend),\r\n                                        ].join() +\r\n                                        \".png\"\r\n                                    }\r\n                                    graphFileName={\r\n                                        [\r\n                                            ...systems.map(\r\n                                                (sys) =>\r\n                                                    `${sys.legend}{M_p=${\r\n                                                        sys.M_p\r\n                                                    }_t_rise=${sys.t_rise}_k=${\r\n                                                        sys.k\r\n                                                    }_in=${\r\n                                                        sys.inputSignal\r\n                                                            ? \"ramp\"\r\n                                                            : \"step\"\r\n                                                    }}`\r\n                                            ),\r\n                                        ].join(\", \") + \".png\"\r\n                                    }\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <GraphBox\r\n                                        title=\"پاسخ پله\"\r\n                                        traces={traces}\r\n                                    />\r\n                                </SubCard>\r\n                            </Grid>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                {GInfo && <GInfo.Explain />}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default DesignSystemByCharacteristics;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    overflowY: 'auto',\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n"],"names":["traces","title","width","height","logX","style","textAlign","data","layout","margin","t","l","r","b","xaxis","rangemode","zeroline","type","yaxis","hoverlabel","align","boxmode","font","color","legend","orientation","parameters","setters","labels","units","Fragment","Array","map","param","i","md","sm","xs","item","onChange","e","target","value","sx","InputProps","startAdornment","position","endAdornment","t_riseFormula","mathjaxSpaces","SubCard","darkBorder","direction","spacing","gridSpacing","Grid","className","fontSize","MathJax","parameterFormulas","parameterUnits","M_p","t_rise","$M_p","$t_rise","t_i","t_f","$t_i","$t_f","container","SimpleParametersList","mt","CoordinateSystem","point","y","x","select","extra","options","pointSize","grids","stepResponse","tf","c_t","step","index","undefined","label","symbols","useState","systems","$systems","$traces","thickness","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","C_t","$C_t","G_s","$G_s","GInfo","$GInfo","response","$response","useEffect","gtf","TransferFunction","Number","tstep","Describer","calculus","$","all","M_p2","tgtf","xi","z","length","fill","line","mode","name","findIndex","sys","push","MainCard","id","formula","marginTop","GraphMenu","capture","capturedSystems","toString","formulaFileName","join","graphFileName","k","inputSignal","reset","update","changes","toggle3DPlot","lg","GraphBox","Explain","headerSX","mr","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","others","theme","useTheme","overflowY","borderColor","palette","primary","action","variant"],"sourceRoot":""}