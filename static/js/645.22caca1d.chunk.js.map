{"version":3,"file":"static/js/645.22caca1d.chunk.js","mappings":"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","sources":["views/ui-component/buttons/Switcher.jsx","views/topics/chapter03/second-order-tf-examining/by-params/lecture.jsx","views/topics/chapter03/second-order-tf-examining/by-params/parameters.jsx","views/topics/chapter03/second-order-tf-examining/by-params/index.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/lecture.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/parameters.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/index.jsx","views/topics/chapter03/second-order-tf-examining/index.jsx"],"sourcesContent":["import Button from \"@mui/material/Button\";\nimport Stack from \"@mui/material/Stack\";\nimport { purple } from \"@mui/material/colors\";\nimport { Grid } from \"@mui/material\";\nimport \"./buttons.css\";\nimport { useState } from \"react\";\n\nexport default function Switcher({ setSwitch, choices}) {\n    const [selected, setSelected] = useState(0); // 0 right, 1 left\n\n    // const selectedStyle = {variant: \"contained\", style: { width: '75%', backgroundColor: purple[600], color: 'white'}};\n    // const notSelectedStyle = {variant: \"outline\", style:{width: '25%' }};\n\n    return (\n        <Stack \n            className=\"switcher-stack\"\n            // sx={{py: 1}}\n            xs={12}\n            spacing={1}\n            direction=\"row\"\n        >\n            <Grid xs={12} dir=\"rtl\" container>\n                <Button\n                    onClick={() => {\n                        setSelected(1);\n                        if(choices.length > 1)\n                            setSwitch(1);\n                    }}\n                    className=\"switcher-button\"\n                    variant={\"outlined\"}\n                    style={{\n                        width: selected ? \"75%\" : \"25%\",\n                        background: selected ? purple[600] : \"transparent\",\n                        color: selected ? \"white\" : purple[700],\n                    }}\n                    // style={{width: selected ? '75%' : '25%'}}\n                    // {... (selected ? selectedStyle: notSelectedStyle)}\n                >\n                    {choices[1]}\n                </Button>\n                <Button\n                    onClick={() => {\n                        setSelected(0);\n                        if(choices.length > 0)\n                            setSwitch(0);\n                    }}\n                    className=\"switcher-button\"\n                    // {... (!selected ? selectedStyle: notSelectedStyle)}\n                    color=\"primary\"\n                    variant={\"contained\"}\n                    style={{\n                        width: !selected ? \"75%\" : \"25%\",\n                        background: !selected ? purple[600] : \"transparent\",\n                        color: !selected ? \"white\" : purple[700],\n                    }}\n                >\n                    {choices[0]}\n                </Button>\n            </Grid>\n        </Stack>\n    );\n}\n","import SubCard from \"views/ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"../../../topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { mathjaxSpaces } from \"toolshed\";\r\n\r\nconst sotfExtremeMortalFormula =\r\n    \"$$ s_{1,2} = -\\\\zeta\\\\omega_n \\\\pm\\\\omega_n \\\\sqrt{\\\\zeta ^ 2 - 1} \\\\\\\\ \" +\r\n    \" G(s) = \\\\frac{\\\\omega_n ^ 2}{s^2 + 2\\\\zeta\\\\omega_n s + \\\\omega_n ^ 2} \\\\\\\\\" +\r\n    \"C(s) = \\\\frac{\\\\omega_n ^ 2}{s(s^2 + 2\\\\zeta\\\\omega_n s + \\\\omega_n ^ 2)} \\\\\\\\\" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{\\\\omega_n ^ 2}{\\\\omega_n ^ 2} = 1 $$\";\r\nconst sotfTransientStepResponseFormula =\r\n    \"$$c(t) = 1 - e^{-\\\\zeta\\\\omega_n t} \\\\lgroup cos\\\\omega_d t + \\\\frac{\\\\zeta}{\\\\sqrt{1 - \\\\zeta^2}}sin\\\\omega_d t \\\\rgroup, \" + mathjaxSpaces(3) + \r\n    \"\\\\omega_d = \\\\omega_n \\\\sqrt{1 - \\\\zeta^2} \\\\\\\\ \" + \r\n    \" \\\\\\\\ c(t) = 1 - \\\\frac{1}{\\\\sqrt{\\\\zeta ^ 2 - 1}}e^{-\\\\zeta \\\\omega_n t}sin(\\\\omega_n \\\\lgroup\\\\sqrt{\\\\zeta ^ 2 - 1}\\\\rgroup t + cos^{-1}\\\\zeta) \\\\\\\\\" + \r\n    \"c(t) = 1 - \\\\frac{e ^ {-\\\\zeta \\\\omega_n t}}{\\\\sqrt{1 - \\\\zeta ^ 2}}sin \\\\lgroup \\\\omega_d t + tan^{-1}\\\\frac{\\\\sqrt{1 - \\\\zeta^2}}{\\\\zeta} \\\\rgroup$$\";\r\n\r\nconst sotfTransientImpulseResponseFormula =\r\n    \"$$c(t) = \\\\frac{\\\\omega_n}{\\\\sqrt{\\\\zeta ^ 2 - 1}}e^{-\\\\zeta \\\\omega_n t}sin(\\\\omega_n \\\\lgroup\\\\sqrt{\\\\zeta ^ 2 - 1}\\\\rgroup t)$$\";\r\n\r\nconst SOTFByParamsLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"تابع تبدیل مرتبه دو- بررسی پارامتری\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n            spacing={gridSpacing}\r\n        >\r\n            <Grid className=\"lecture-text\" style={{ fontSize: \"20px\" }} item>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; پاسخ سیستم مرتبه دوم به ورودی\r\n                    پله یکی از سه حالت زیر می باشد:\r\n                </p>\r\n            </Grid>\r\n            <SubCard>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfExtremeMortalFormula}</MathJax>\r\n                </Grid>\r\n                <Grid\r\n                    className=\"lecture-text\"\r\n                    style={{ fontSize: \"20px\" }}\r\n                    item\r\n                >\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; پاسخ حالت گذرای ورودی پله:\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfTransientStepResponseFormula}</MathJax>\r\n                </Grid>\r\n                <Grid\r\n                    className=\"lecture-text\"\r\n                    style={{ fontSize: \"20px\" }}\r\n                    item\r\n                >\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; پاسخ حالت گذرای ورودی ضربه:\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfTransientImpulseResponseFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByParamsLecture;\r\n","import { Grid } from \"@mui/material\";\r\nimport CoordinateSystem from \"views/input-boxes/CoordinateSystem\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$\\\\omega_{n} = $$\",\r\n    \"$$\\\\zeta = $$\",\r\n    \"$$t_i = $$\",\r\n    \"$$t_f = $$\",\r\n];\r\nconst parameterUnits = [null, null, \"$$sec$$\", \"$$sec$$\"];\r\n\r\nconst SOTFByParamsInputs = ({\r\n    w_n,\r\n    zeta,\r\n    $w_n,\r\n    $zeta,\r\n    t_i,\r\n    t_f,\r\n    $t_i,\r\n    $t_f,\r\n}) => {\r\n    const grids = 10;\r\n    const checkSetW_N = (value) => value && $w_n(value);\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={0.6} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[w_n, zeta, t_i, t_f]}\r\n                    setters={[\r\n                        checkSetW_N,\r\n                        $zeta,\r\n                        $t_i,\r\n                        $t_f,\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n\r\n                <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <p style={{ textAlign: \"center\" }}>\r\n                        مقدار پارامترها را از اینجا هم می توانید تغییر دهید\r\n                    </p>\r\n\r\n                    <CoordinateSystem\r\n                        point={{\r\n                            x: w_n,\r\n                            y: 0,\r\n                            select: ({x}) => {\r\n                                if(x) $w_n(x)\r\n                            }\r\n                        }}\r\n                        extra={{\r\n                            x: 0,\r\n                            y: zeta,\r\n                            select: ({y}) => {\r\n                                if(y) $zeta(y)\r\n                            }\r\n                        }}\r\n                        options={{ pointSize: 10, grids }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByParamsInputs;\r\n","import SOTFByParamsLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport SOTFByParamsInputs from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transferFunction\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Describer from \"math/describer\";\r\n\r\nconst stepResponse = (tf, c_t = tf.step(), index = undefined) =>\r\n    \"$$\\\\begin{cases} \" +\r\n    tf.label(\"G\", index) +\r\n    \" \\\\\\\\ \\\\\\\\ \" +\r\n    c_t.label(\"c\", index) +\r\n    \"\\\\end{cases}$$\";\r\n\r\nconst symbols = {\r\n    in: \"t\",\r\n    out: \"c\",\r\n};\r\n\r\nconst SOTFExamineByParams = () => {\r\n    const [w_n, $w_n] = useState(1);\r\n    const [zeta, $zeta] = useState(0.1);\r\n    const [t_i, $t_i] = useState(0);\r\n    const [t_f, $t_f] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [C_t, $C_t] = useState(null);\r\n    const [G_s, $G_s] = useState(null);\r\n    const [GInfo, $GInfo] = useState(\"\");\r\n\r\n    const [response, $response] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    //update\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) => w_n === sys.w_n && zeta === sys.zeta\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                w_n,\r\n                zeta,\r\n                G_s,\r\n                C_t,\r\n                thickness,\r\n                legend:\r\n                    \"$$\" +\r\n                    symbols.out +\r\n                    \"_{\" +\r\n                    (systems.length + 1).toString() +\r\n                    \"}$$\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        let gtf = TransferFunction.Specials.$WnZ(w_n, zeta);\r\n        const tstep = gtf.step();\r\n        $G_s(gtf);\r\n        if (gtf) {\r\n            $C_t(tstep);\r\n            $GInfo(new Describer(gtf));\r\n            const [x, y] = calculus.pointify(tstep.$, Number(t_i), Number(t_f)); // N: 100\r\n            $response(stepResponse(gtf));\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            const all = systems.map((e, index) => {\r\n                const w_n2 = e.w_n * e.w_n;\r\n                let tgtf = new TransferFunction(\r\n                    [w_n2],\r\n                    [1, 2 * e.zeta * e.w_n, w_n2]\r\n                );\r\n\r\n                const [xi, yi] = calculus.pointify(\r\n                    tgtf.step().$,\r\n                    Number(t_i),\r\n                    Number(t_f)\r\n                ); // N: 100\r\n\r\n                return {\r\n                    x: xi,\r\n                    y: yi,\r\n                    z: is3DPlotEnabled ? Array(xi.length).fill(0) : null,\r\n                    line: {\r\n                        // color: e.color...\r\n                        width: e.thickness,\r\n                    },\r\n                    // color,\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: e.legend,\r\n                };\r\n            });\r\n\r\n            const index = systems.findIndex(\r\n                (sys) => w_n === sys.w_n && zeta === sys.zeta\r\n            );\r\n            if (index === -1)\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                all.push({\r\n                    x,\r\n                    y,\r\n                    z: is3DPlotEnabled ? Array(x.length).fill(0) : null,\r\n                    // color,\r\n                    line: {\r\n                        // color:'rgb(17, 157, 255)'\r\n                        width: thickness,\r\n                    },\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: `${symbols.out}(${symbols.in})`,\r\n                });\r\n\r\n            $traces(all);\r\n        }\r\n    }, [w_n, zeta, t_i, t_f, is3DPlotEnabled, thickness, systems]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [w_n, zeta]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <Grid container direction=\"column\" spacing={gridSpacing}>\r\n            <Grid\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                item\r\n            >\r\n                <SOTFByParamsLecture />\r\n            </Grid>\r\n\r\n            <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                <SubCard sx={{ direction: \"ltr\" }}>\r\n                    <Grid\r\n                        id=\"formulaBox\"\r\n                        sx={{ margin: \"auto\" }}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        {systems instanceof Array &&\r\n                            systems.map((sys, index) => {\r\n                                const formula = stepResponse(\r\n                                    sys.G_s,\r\n                                    sys.C_t,\r\n                                    index + 1\r\n                                );\r\n                                console.log(sys.C_t, sys.G_s);\r\n\r\n                                return (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        xs={12}\r\n                                        item\r\n                                    >\r\n                                        <MathJax>{formula}</MathJax>\r\n                                    </Grid>\r\n                                );\r\n                            })}\r\n                        {!isGraphCatured && (\r\n                            <Grid style={{ fontSize: \"18px\" }} xs={12}>\r\n                                <MathJax>{response}</MathJax>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </SubCard>\r\n            </Grid>\r\n            <Grid\r\n                spacing={2}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                container\r\n            >\r\n                <Grid\r\n                    md={3}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                    container\r\n                >\r\n                    <Grid xs={12}>\r\n                        <SOTFByParamsInputs\r\n                            w_n={w_n}\r\n                            zeta={zeta}\r\n                            t_i={t_i}\r\n                            t_f={t_f}\r\n                            $w_n={$w_n}\r\n                            $zeta={$zeta}\r\n                            $t_i={$t_i}\r\n                            $t_f={$t_f}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid md={9} sm={12} xs={12} item>\r\n                    <SubCard>\r\n                        <GraphMenu\r\n                            capture={capture}\r\n                            formulaFileName={\r\n                                \"Water Tank Level Equations _ \" +\r\n                                [...systems.map((sys) => sys.legend)].join() +\r\n                                \".png\"\r\n                            }\r\n                            graphFileName={\r\n                                [\r\n                                    ...systems.map(\r\n                                        (sys) =>\r\n                                            `${sys.legend}{w_n=${\r\n                                                sys.w_n\r\n                                            }_zeta=${sys.zeta}_k=${sys.k}_in=${\r\n                                                sys.inputSignal\r\n                                                    ? \"ramp\"\r\n                                                    : \"step\"\r\n                                            }}`\r\n                                    ),\r\n                                ].join(\", \") + \".png\"\r\n                            }\r\n                            reset={() => $systems([])}\r\n                            update={(changes) => update(changes)}\r\n                            toggle3DPlot={toggle3DPlot}\r\n                        />\r\n                    </SubCard>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        <SubCard>\r\n                            <GraphBox title=\"پاسخ پله\" traces={traces} />\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        {GInfo && <GInfo.Explain />}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SOTFExamineByParams;\r\n","import SubCard from \"views/ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"views/topics/topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { mathjaxSpaces } from \"toolshed\";\r\nimport { gridSpacing } from \"store/constant\";\r\n\r\nconst sotfExtremeMortalFormula =\r\n    \"$$ G(s) = \\\\frac{k}{(s + \\\\alpha) (s + \\\\beta)}\" +\r\n    mathjaxSpaces(3) +\r\n    \"\\\\alpha,\\\\beta > 0,\" +\r\n    mathjaxSpaces(1) +\r\n    \"\\\\alpha \\\\neq \\\\beta \\\\\\\\\" +\r\n    \"C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s(s + \\\\alpha) (s + \\\\beta)}\" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha\\\\beta} \\\\\\\\\" +\r\n    \"c(t) = (\\\\frac{k}{\\\\alpha\\\\beta} + \\\\frac{k}{\\\\alpha - \\\\beta} \\\\lgroup \\\\frac{e^{-\\\\alpha t}}{\\\\alpha} - \\\\frac{e^{-\\\\beta t}}{\\\\beta}\\\\rgroup)u(t)$$\";\r\nconst sotfCriticalFormula =\r\n    \"$$ G(s) = \\\\frac{k}{(s + \\\\alpha)^2}\" +\r\n    mathjaxSpaces(3) +\r\n    \"\\\\alpha,\\\\beta > 0,\" +\r\n    mathjaxSpaces(1) +\r\n    \"\\\\alpha = \\\\beta \\\\\\\\\" +\r\n    \"C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s(s + \\\\alpha)^2}\" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha^2} \\\\\\\\ \" +\r\n    \"c(t) = (\\\\frac{k}{\\\\alpha^2} - \\\\frac{k}{\\\\alpha^2} \\\\lgroup 1 + \\\\alpha t\\\\rgroup)e^{-\\\\alpha t}u(t)$$\";\r\n\r\nconst sotfWeakFormula =\r\n    \"$$ G(s) = \\\\frac{k}{s + \\\\alpha + j\\\\beta)(s + \\\\alpha - j\\\\beta)}\" +\r\n    mathjaxSpaces(3) +\r\n    \"\\\\alpha > 0 \\\\\\\\\" +\r\n    \" \\\\Longrightarrow G(s) = \\\\frac{k}{(s^2 + 2\\\\alpha s + (\\\\alpha ^ 2 + \\\\beta ^ 2) } \\\\\\\\ \" +\r\n    \"C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s^3 + 2\\\\alpha s^2 + (\\\\alpha ^ 2 + \\\\beta ^ 2)s } =  \" +\r\n    \"\\\\frac{1}{s} \\\\frac{k}{(s + \\\\alpha)^2 + \\\\beta ^ 2 }\\\\\\\\ \" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2} \\\\\\\\ \" +\r\n    \"c(t) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2}u(t) - \\\\frac{ke^{-\\\\alpha t}}{\\\\alpha ^ 2 + \\\\beta ^ 2} \\\\lgroup cos\\\\beta t + \\\\frac{\\\\alpha}{\\\\beta}sin\\\\beta t \\\\rgroup u(t) \\\\\\\\\" +\r\n    \"\\\\Longrightarrow c(t) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2}u(t) - \\\\frac{\\\\sqrt{\\\\alpha ^ 2 + \\\\beta ^ 2}}{\\\\beta}e^{-\\\\alpha t}sin(\\\\beta t + \\\\theta) u(t)$$\";\r\n\r\nconst SOTFByPolesLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"تابع تبدیل مرتبه دو- بررسی پارامتری\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n            spacing={gridSpacing}\r\n        >\r\n            <Grid className=\"lecture-text\"  style={{ fontSize: \"20px\" }} item>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; پاسخ سیستم مرتبه دوم به ورودی\r\n                    پله یکی از سه حالت زیر می باشد:\r\n                </p>\r\n            </Grid>\r\n            <SubCard>\r\n                <Grid sx={{ my: 4 }} className=\"lecture-text\" item>\r\n                    <h1>&nbsp; پاسخ میرای شدید</h1>\r\n                </Grid>\r\n                <Grid sx={{ my: 4 }}  style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب\r\n                        حقیقی منفی دارد.\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfExtremeMortalFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n            <SubCard sx={{ my: 4 }}>\r\n                <Grid className=\"lecture-text\" item>\r\n                    <h1>&nbsp; پاسخ میرای بحرانی</h1>\r\n                </Grid>\r\n                <Grid sx={{ my: 4 }}  style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب\r\n                        حقیقی منفی برابر دارد.\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfCriticalFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n            <SubCard sx={{ my: 4 }}>\r\n                <Grid className=\"lecture-text\" item>\r\n                    <h1>&nbsp; پاسخ میرای ضعیف (نوسانی)</h1>\r\n                </Grid>\r\n                <Grid sx={{ my: 4 }}  style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب\r\n                        مزدوج با مقدار حقیقی منفی دارد.\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfWeakFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n            <Grid sx={{ my: 4 }} style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                <p>&nbsp; &nbsp; &nbsp; &nbsp;\r\n                    پاسخ اکثر سیستم های خطی در عمل به صورت میرای ضعیف است. لذا معیارهای عملکرد در حوزه ی زمان برای بررسی و تحلیل سیستم های کنترل خطی\r\n                    از این پاسخ استخراج می شود.\r\n                </p>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByPolesLecture;\r\n","import { Grid } from \"@mui/material\";\r\nimport CoordinateSystem from \"views/input-boxes/CoordinateSystem\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$\\\\alpha = $$\",\r\n    \"$$\\\\beta = $$\",\r\n    \"$$k = $$\",\r\n    \"$$t_i = $$\",\r\n    \"$$t_f = $$\",\r\n];\r\nconst parameterUnits = [null, null, null, \"$$sec$$\", \"$$sec$$\"];\r\n\r\nconst SOTFByPolesInputs = ({\r\n    k,\r\n    alpha,\r\n    beta,\r\n    $k,\r\n    $alpha,\r\n    $beta,\r\n    t_i,\r\n    t_f,\r\n    $t_i,\r\n    $t_f,\r\n}) => {\r\n    const grids = 10;\r\n\r\n    const updatePoles = (newPole, other, $newPole, $other) => {\r\n        $newPole(newPole);\r\n        return newPole.isReal()\r\n            ? $other(other.realify())\r\n            : $other(newPole.conjugate());\r\n    };\r\n\r\n    const selectAlpha = (point) => {\r\n        if (point) {\r\n            const { x, y } = point;\r\n            updatePoles(new Complex(-x, -y), beta, $alpha, $beta);\r\n        }\r\n    };\r\n    const selectBeta = (point) => {\r\n        if (point) {\r\n            const { x, y } = point;\r\n            updatePoles(new Complex(-x, -y), alpha, $beta, $alpha);\r\n        }\r\n    };\r\n\r\n    const alphaTextBoxOnChange = (strValue) =>\r\n        updatePoles(Complex.extract(strValue), beta, $alpha, $beta);\r\n\r\n    const betaTextBoxOnChange = (strValue) =>\r\n        updatePoles(Complex.extract(strValue), alpha, $beta, $alpha);\r\n\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={0.6} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[alpha, beta, k, t_i, t_f]}\r\n                    setters={[\r\n                        alphaTextBoxOnChange,\r\n                        betaTextBoxOnChange,\r\n                        $k,\r\n                        $t_i,\r\n                        $t_f,\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n\r\n                <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <p style={{ textAlign: \"center\" }}>\r\n                        محل قطب ها را انتخاب کنید\r\n                    </p>\r\n\r\n                    <CoordinateSystem\r\n                        point={{\r\n                            x: -alpha.real(),\r\n                            y: -alpha.imaginary(),\r\n                            select: selectAlpha,\r\n                        }}\r\n                        extra={{\r\n                            x: -beta.real(),\r\n                            y: -beta.imaginary(),\r\n                            select: selectBeta,\r\n                        }}\r\n                        options={{ pointSize: 10, grids }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByPolesInputs;\r\n","import SOTFByPolesLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport SOTFByPolesInputs from \"./parameters\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Algebra from \"math/algebra/index\";\r\nimport TransferFunction from \"math/algebra/functions/transferFunction\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Describer from 'math/describer';\r\n\r\nconst stepResponse = (tf, c_t = tf.step(), index = undefined) =>\r\n    \"$$\\\\begin{cases} \" +\r\n    tf.label(\"G\", index) +\r\n    \" \\\\\\\\ \\\\\\\\ \" +\r\n    c_t.label(\"c\", index) +\r\n    \"\\\\end{cases}$$\";\r\n\r\nconst symbols = {\r\n    in: \"t\",\r\n    out: \"c\",\r\n};\r\n\r\nconst SOTFExamineByPoles = () => {\r\n    const [alpha, $alpha] = useState(new Complex(1, 1));\r\n    const [beta, $beta] = useState(alpha.conjugate());\r\n    const [k, $k] = useState(1.0);\r\n    const [t_i, $t_i] = useState(0);\r\n    const [t_f, $t_f] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [C_t, $C_t] = useState(null);\r\n    const [G_s, $G_s] = useState(null);\r\n    const [GInfo, $GInfo] = useState(\"\");\r\n\r\n    const [response, $response] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    //update\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) => alpha.equals(sys.alpha) && beta.equals(sys.beta) && sys.k === k\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                alpha,\r\n                beta,\r\n                k,\r\n                G_s,\r\n                C_t,\r\n                thickness,\r\n                legend:\r\n                    \"$$\" +\r\n                    symbols.out +\r\n                    \"_{\" +\r\n                    (systems.length + 1).toString() +\r\n                    \"}$$\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let gtf = TransferFunction.Specials.$2(\r\n            Number(k),\r\n            alpha instanceof Algebra ? alpha.negation() : -alpha,\r\n            beta instanceof Algebra ? beta.negation() : -beta\r\n        );\r\n        const tstep = gtf.step();\r\n        $G_s(gtfr\n        if (gtf && alpha.hasSameTypeWith(beta)) {\r\n            $C_t(tstep);\r\n            $GInfo(new Describer(gtf));\r\n            const [x, y] = calculus.pointify(\r\n                tstep.$,\r\n                Number(t_i),\r\n                Number(t_f)\r\n            ); // N: 100\r\n            $response(stepResponse(gtf));\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            const all = systems.map((e, index) => {\r\n                let tgtf = TransferFunction.Specials.$2(\r\n                    Number(e.k),\r\n                    e.alpha instanceof Algebra ? e.alpha.negation() : -e.alpha,\r\n                    e.beta instanceof Algebra ? e.beta.negation() : -e.beta\r\n                );\r\n                \r\n                const [xi, yi] = calculus.pointify(\r\n                    tgtf.step().$,\r\n                    Number(t_i),\r\n                    Number(t_f)\r\n                ); // N: 100\r\n\r\n                return {\r\n                    x: xi,\r\n                    y: yi,\r\n                    z: is3DPlotEnabled ? Array(xi.length).fill(0) : null,\r\n                    line: {\r\n                        // color: e.color...\r\n                        width: e.thickness,\r\n                    },\r\n                    // color,\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: e.legend,\r\n                };\r\n            });\r\n\r\n            const index = systems.findIndex(\r\n                (sys) => alpha.equals(sys.alpha) && beta.equals(sys.beta) && sys.k === k\r\n            );\r\n            if (index === -1)\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                all.push({\r\n                    x,\r\n                    y,\r\n                    z: is3DPlotEnabled ? Array(x.length).fill(0) : null,\r\n                    // color,\r\n                    line: {\r\n                        // color:'rgb(17, 157, 255)'\r\n                        width: thickness,\r\n                    },\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: `${symbols.out}(${symbols.in})`,\r\n                });\r\n\r\n            $traces(all);\r\n        }\r\n    }, [alpha, beta, k, t_i, t_f, is3DPlotEnabled, thickness, systems]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [alpha, beta, k]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <Grid container direction=\"column\" spacing={gridSpacing}>\r\n            <Grid\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                item\r\n            >\r\n                <SOTFByPolesLecture />\r\n            </Grid>\r\n\r\n            <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                <SubCard sx={{ direction: \"ltr\" }}>\r\n                    <Grid\r\n                        id=\"formulaBox\"\r\n                        sx={{ margin: \"auto\" }}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        {systems instanceof Array &&  systems.map((sys, index) => {\r\n                            const formula = stepResponse(sys.G_s, sys.C_t, index + 1);\r\n                            console.log(sys.C_t, sys.G_s)\r\n\r\n                            return (\r\n                                <Grid style={{ fontSize: \"18px\" }} xs={12} item>\r\n                                    <MathJax>{formula}</MathJax>\r\n                                </Grid>\r\n                            );\r\n                        })}\r\n                        {!isGraphCatured && (\r\n                            <Grid style={{ fontSize: \"18px\" }} xs={12}>\r\n                                <MathJax>{response}</MathJax>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </SubCard>\r\n            </Grid>\r\n            <Grid\r\n                spacing={2}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                container\r\n            >\r\n                <Grid\r\n                    md={3}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                    container\r\n                >\r\n                    <Grid xs={12}>\r\n                        <SOTFByPolesInputs\r\n                            alpha={alpha}\r\n                            beta={beta}\r\n                            k={k}\r\n                            t_i={t_i}\r\n                            t_f={t_f}\r\n                            $alpha={$alpha}\r\n                            $beta={$beta}\r\n                            $k={$k}\r\n                            $t_i={$t_i}\r\n                            $t_f={$t_f}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid md={9} sm={12} xs={12} item>\r\n                    <SubCard>\r\n                        <GraphMenu\r\n                            capture={capture}\r\n                            formulaFileName={\r\n                                \"Water Tank Level Equations _ \" +\r\n                                [...systems.map((sys) => sys.legend)].join() +\r\n                                \".png\"\r\n                            }\r\n                            graphFileName={\r\n                                [\r\n                                    ...systems.map(\r\n                                        (sys) =>\r\n                                            `${sys.legend}{alpha=${\r\n                                                sys.alpha\r\n                                            }_beta=${sys.beta}_k=${sys.k}_in=${\r\n                                                sys.inputSignal\r\n                                                    ? \"ramp\"\r\n                                                    : \"step\"\r\n                                            }}`\r\n                                    ),\r\n                                ].join(\", \") + \".png\"\r\n                            }\r\n                            reset={() => $systems([])}\r\n                            update={(changes) => update(changes)}\r\n                            toggle3DPlot={toggle3DPlot}\r\n                        />\r\n                    </SubCard>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        <SubCard>\r\n                            <GraphBox title=\"پاسخ پله\" traces={traces} />\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        {GInfo && <GInfo.Explain />}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SOTFExamineByPoles;\r\n","import { Grid } from \"@mui/material\";\n// project imports\nimport MainCard from \"views/ui-component/cards/MainCard\";\nimport { gridSpacing } from \"store/constant\";\nimport Switcher from \"views/ui-component/buttons/Switcher\";\nimport { useState } from \"react\";\nimport SOTFExamineByParams from \"./by-params/index\";\nimport SOTFExamineByPoles from \"./by-poles/index\";\nimport \"views/topics/topics.css\";\n\nconst SecondOrderTransferFunctionExamining = () => {\n    const [mode, setMode] = useState(0);\n    const choices = [\"بررسی قطبی\", \"بررسی پارامتری\"];\n\n    return (\n        <Grid container>\n            <Grid\n                item\n                direction=\"row\"\n                sx={{ pt: 1 }}\n                container\n                spacing={gridSpacing}\n            >\n                <Switcher choices={choices} setSwitch={setMode} />\n            </Grid>\n            <MainCard style={{ background: \"#F5E1FD\" }}>\n                <Grid item spacing={gridSpacing}>\n                    {mode === 0 ? (\n                        <SOTFExamineByPoles />\n                    ) : (\n                        <SOTFExamineByParams />\n                    )}\n                </Grid>\n            </MainCard>\n        </Grid>\n    );\n};\n\nexport default SecondOrderTransferFunctionExamining;\n"],"names":["Switcher","setSwitch","choices","useState","selected","setSelected","Stack","className","xs","spacing","direction","Grid","dir","container","Button","onClick","length","variant","style","width","background","purple","color","sotfTransientStepResponseFormula","mathjaxSpaces","SubCard","title","darkBorder","sx","gridSpacing","fontSize","item","MathJax","parameterFormulas","parameterUnits","w_n","zeta","$w_n","$zeta","t_i","t_f","$t_i","$t_f","textAlign","height","SimpleParametersList","parameters","setters","value","labels","units","mt","md","sm","CoordinateSystem","point","x","y","select","extra","options","pointSize","grids","stepResponse","tf","c_t","step","index","undefined","label","symbols","systems","$systems","traces","$traces","thickness","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","C_t","$C_t","G_s","$G_s","GInfo","$GInfo","response","$response","useEffect","gtf","TransferFunction","tstep","Describer","calculus","$","Number","all","map","e","w_n2","tgtf","xi","z","Array","fill","line","type","mode","name","legend","findIndex","sys","push","margin","id","formula","console","log","marginTop","GraphMenu","capture","capturedSystems","toString","formulaFileName","join","graphFileName","k","inputSignal","reset","update","changes","toggle3DPlot","lg","GraphBox","Explain","sotfExtremeMortalFormula","sotfCriticalFormula","sotfWeakFormula","my","alpha","beta","$k","$alpha","$beta","updatePoles","newPole","other","$newPole","$other","isReal","realify","conjugate","strValue","Complex","real","imaginary","Algebra","negation","hasSameTypeWith","equals","setMode","pt","MainCard"],"sourceRoot":""}