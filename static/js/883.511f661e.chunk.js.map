{"version":3,"file":"static/js/883.511f661e.chunk.js","mappings":"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","sources":["views/input-boxes/SimpleParametersList.jsx","views/plotter/GraphBox.jsx","views/plotter/GraphMenu.jsx","views/topics/chapter06/bode-plot/parameters.jsx","views/topics/chapter06/bode-plot/index.jsx"],"sourcesContent":["import { Grid, InputAdornment, TextField } from \"@mui/material\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst SimpleParametersList = ({ parameters, setters, labels, units }) => {\r\n    return (\r\n        <Fragment>\r\n            {parameters instanceof Array &&\r\n                parameters.map((param, i) => (\r\n                    <Grid md={12} sm={4} xs={6} item>\r\n                        <TextField\r\n                            onChange={(e) => setters[i](e.target.value)}\r\n                            value={param}\r\n                            sx={{ width: \"100%\" }}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"left\">\r\n                                        <MathJax>{labels[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: units[i] && (\r\n                                    <InputAdornment position=\"right\">\r\n                                        <MathJax>{units[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SimpleParametersList;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst GraphBox = ({ traces, title, width, height = 500, logX }) => {\r\n    /*const temp_layout = {\r\n        xaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n        yaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n    };*/\r\n\r\n    return (\r\n        <Plot \r\n            style={{ textAlign: \"center\" }}\r\n            //id=\"graphBox\"\r\n            data={traces}\r\n            layout={{\r\n                // width: 1000,\r\n                // autosize: true,\r\n                margin: {\r\n                    t: 30, //top margin\r\n                    l: 30, //left margin\r\n                    r: 20, //right margin\r\n                    b: 30, //bottom margin\r\n                },\r\n                xaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true,\r\n                    type: !logX ? \"dec\" : \"log\"\r\n                },\r\n                yaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true\r\n\r\n                },\r\n                height,\r\n                title,\r\n                // hoverlabel: { bgcolor: \"#FFF\" },\r\n                hoverlabel: {align:'auto', boxmode: 'overlay', font:{color:'#000000FF'}},\r\n                legend: {orientation: 'h'}//, y: -0.3},\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default GraphBox;\r\n","import PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}\r\n                {capture && <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>}\r\n\r\n                {reset && <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>}\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import { Grid, Button, Fab, Slider, TextField } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport AnimateButton from \"../../../ui-component/extended/AnimateButton\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { useState } from \"react\";\r\n\r\nconst parameterFormulas = [\r\n  \"$$Num = [$$\",\r\n  \"$$Den = [$$\",\r\n  \"$$\\\\omega_{min} = $$\",\r\n  \"$$\\\\omega_{max} = $$\",\r\n  \"$$N = $$\",\r\n];\r\nconst parameterUnits = [\"$$]$$\", \"$$]$$\", \"$$Hz$$\", \"$$Hz$$\", null];\r\n\r\nconst BodePlotParameters = ({\r\n  rawNumerator,\r\n  rawDenominator,\r\n  $rawNumerator,\r\n  $rawDenominator,\r\n  w_min,\r\n  w_max,\r\n  $w_min,\r\n  $w_max,\r\n  phaseInRadianScale,\r\n  setPhaseInRadianScale,\r\n  N,\r\n  $N,\r\n  multiplier,\r\n  K,\r\n  $K,\r\n}) => {\r\n  const [kMax, setkMax] = useState(100);\r\n\r\n  return (\r\n    <SubCard\r\n      darkBorder\r\n      title=\"پارامترها\"\r\n      sx={{\r\n        direction: \"ltr\",\r\n        textAlign: \"right\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      <Grid spacing={gridSpacing} container direction=\"row\">\r\n        <SimpleParametersList\r\n          parameters={[rawNumerator, rawDenominator, w_min, w_max, N]}\r\n          setters={[$rawNumerator, $rawDenominator, $w_min, $w_max, $N]}\r\n          labels={parameterFormulas}\r\n          units={parameterUnits}\r\n        />\r\n        <Grid xs={12} item>\r\n          <hr />\r\n        </Grid>\r\n        <Grid xs={12} style={{ paddingLeft: \"3%\" }} container>\r\n          <Grid xs={12} item>\r\n            <p dir=\"rtl\" style={{ textAlign: \"center\" }}>\r\n              خروجی فاز بر حسب:\r\n            </p>\r\n          </Grid>\r\n          <Grid xs={6} sx={{ p: 1 }} item>\r\n            <Button\r\n              onClick={() => setPhaseInRadianScale(false)}\r\n              style={{ width: \"100%\", textTransform: \"none\" }}\r\n              variant={!phaseInRadianScale ? \"contained\" : \"outlined\"}\r\n            >\r\n              درجه\r\n            </Button>\r\n          </Grid>\r\n          <Grid xs={6} sx={{ p: 1 }} item>\r\n            <Button\r\n              onClick={() => setPhaseInRadianScale(\"rad\")}\r\n              style={{ width: \"100%\", textTransform: \"none\" }}\r\n              variant={phaseInRadianScale ? \"contained\" : \"outlined\"}\r\n            >\r\n              رادیان\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <hr />\r\n      <Grid\r\n        xs={12}\r\n        sx={{ pt: gridSpacing }}\r\n        spacing={gridSpacing}\r\n        style={{ textAlign: \"center\" }}\r\n        container\r\n      >\r\n        <Grid xs={12} item>\r\n          تاثیر ضرب اسکالر سیستم در نمودار بود\r\n        </Grid>\r\n        <Grid xs={4} item>\r\n          <Fab size=\"large\" variant=\"circular\" onClick={() => multiplier(0.1)}>\r\n            <AnimateButton type=\"scale\" direction=\"down\">\r\n              <MathJax>{\"$$\\\\times\\\\frac{1}{10}$$\"}</MathJax>\r\n            </AnimateButton>\r\n          </Fab>\r\n        </Grid>\r\n        <Grid xs={4} item>\r\n          <Fab size=\"large\" variant=\"circular\" onClick={() => multiplier(10)}>\r\n            <AnimateButton type=\"scale\" direction=\"down\">\r\n              <MathJax>{\"$$\\\\times 10$$\"}</MathJax>\r\n            </AnimateButton>\r\n          </Fab>\r\n        </Grid>\r\n        <Grid xs={4} item>\r\n          <Fab size=\"large\" variant=\"circular\" onClick={() => multiplier(-1)}>\r\n            <AnimateButton type=\"scale\" direction=\"down\">\r\n              <MathJax>{\"$$\\\\lgroup - \\\\rgroup$$\"}</MathJax>\r\n            </AnimateButton>\r\n          </Fab>\r\n        </Grid>\r\n      </Grid>\r\n      <br />\r\n\r\n      <hr />\r\n      <br />\r\n      <Grid\r\n        xs={12}\r\n        style={{\r\n          textAlign: \"center\",\r\n          border: \"1px solid grey\",\r\n          borderRadius: \"1rem\",\r\n          paddingBottom: \"0.5rem\",\r\n          paddingRight: \"0.5rem\",\r\n          margin: \"auto\",\r\n        }}\r\n        spacing={gridSpacing}\r\n        container\r\n      >\r\n        <Grid xs={12} item>\r\n          تاثیر تغییر بهره در نمودار بود\r\n        </Grid>\r\n        <Grid xs={9} item>\r\n          <Slider\r\n            sx={{ mt: 1 }}\r\n            aria-label=\"Volume\"\r\n            onChange={(e, value) => $K((value * kMax) / 100)}\r\n          />\r\n        </Grid>\r\n        <Grid xs={3} item>\r\n          <TextField\r\n            onChange={(e) => setkMax(e.target.value)}\r\n            value={kMax}\r\n            sx={{ width: \"100%\" }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </SubCard>\r\n  );\r\n};\r\n\r\nexport default BodePlotParameters;\r\n","// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"views/plotter/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"views/plotter/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport BodePlotParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { browserLockBreaker } from \"toolshed\";\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\nlet currentRawNum = \"\",\r\n    currentRawDen = \"\";\r\n\r\nconst BodePlot = () => {\r\n    const [rawNumerator, $rawNumerator] = useState(\"1\");\r\n    const [rawDenominator, $rawDenominator] = useState(\"1 1\");\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(0);\r\n    const [w_max, $w_max] = useState(10);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState({\r\n        phase: [],\r\n        amplitude: [],\r\n        degreePhase: [],\r\n    });\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n    const [K, $K] = useState(1);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n\r\n        if (capturedSystems.findIndex((sys) => H_s.equals(sys.H)) === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                H_s,\r\n                thickness,\r\n                legend:\r\n                    symbols.out + \"_{\" + (systems.length + 1).toString() + \"}\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // plot\r\n        if (H_s) {\r\n            (async () => {\r\n                try {\r\n                    $response(\"$$\" + H_s.label(\"H\") + \"$$\");\r\n                    // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n                    // so that the traces will be loaded with new conditions\r\n                    let repeatedSystem = false;\r\n                    const all = {\r\n                        amplitude: Array(systems.length),\r\n                        phase: Array(systems.length),\r\n                        degreePhase: Array(systems.length),\r\n                    };\r\n\r\n                    for (let i = 0; i < systems.length; i++) {\r\n                        if (i % 5 === 0) await browserLockBreaker();\r\n                        all.amplitude[i] = calculus.systemToTrace(\r\n                            systems[i].H_s.bode,\r\n                            +w_min,\r\n                            +w_max,\r\n                            systems[i].thickness,\r\n                            systems[i].legend,\r\n                            is3DPlotEnabled,\r\n                            +N\r\n                        );\r\n                        all.phase[i] = calculus.systemToTrace(\r\n                            systems[i].H_s.phase,\r\n                            +w_min,\r\n                            +w_max,\r\n                            systems[i].thickness,\r\n                            systems[i].legend,\r\n                            is3DPlotEnabled,\r\n                            +N\r\n                        );\r\n                        all.degreePhase[i] = { ...all.phase[i] };\r\n                        all.degreePhase[i].y = all.degreePhase[i].y.map(\r\n                            (yi) => yi * calculus.RadianToDegree\r\n                        );\r\n                        if (H_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n                    }\r\n\r\n                    if (!repeatedSystem) {\r\n                        const amp = calculus.systemToTrace(\r\n                                H_s.bode,\r\n                                +w_min,\r\n                                +w_max,\r\n                                thickness,\r\n                                `${symbols.out}(${symbols.in})`,\r\n                                is3DPlotEnabled,\r\n                                +N\r\n                            ),\r\n                            phase = calculus.systemToTrace(\r\n                                H_s.phase,\r\n                                +w_min,\r\n                                +w_max,\r\n                                thickness,\r\n                                `${symbols.out}(${symbols.in})`,\r\n                                is3DPlotEnabled,\r\n                                +N\r\n                            );\r\n                        const degreePhase = { ...phase };\r\n                        degreePhase.y = degreePhase.y.map(\r\n                            (yi) => yi * calculus.RadianToDegree\r\n                        );\r\n                        all.phase.push(phase);\r\n                        all.degreePhase.push(degreePhase);\r\n                        all.amplitude.push(amp);\r\n                    }\r\n                    $traces(all);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [H_s, systems, w_min, w_max, is3DPlotEnabled, thickness, N]);\r\n\r\n    const multiplyPlotBy = (value) => {\r\n        const currentLength = systems.length;\r\n        const multipliedSystem = H_s.multiply(value);\r\n        const newSystemList = systems.filter(\r\n            (sys) => !sys.H_s.equals(multipliedSystem)\r\n        );\r\n        if (newSystemList.length === currentLength) capture();\r\n        else $systems(newSystemList);\r\n        $H_s(multipliedSystem);\r\n    };\r\n    const traceGainChange = () => {\r\n        const KH_s = H_s.multiply(K);\r\n        return calculus.systemToTrace(\r\n            KH_s.bode,\r\n            +w_min,\r\n            +w_max,\r\n            thickness,\r\n            `K=${K}`,\r\n            is3DPlotEnabled,\r\n            +N\r\n        );\r\n    };\r\n    useEffect(() => {\r\n        try {\r\n            if (\r\n                rawNumerator.trim() !== currentRawNum ||\r\n                rawDenominator.trim() !== currentRawDen\r\n            ) {\r\n                const num = calculus.stringToArray(rawNumerator),\r\n                    den = calculus.stringToArray(rawDenominator);\r\n                const h_s = new TransferFunction(num, den);\r\n                currentRawNum = rawNumerator;\r\n                currentRawDen = rawDenominator;\r\n                $H_s(h_s);\r\n                $K(1);\r\n            }\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">نمودار بود</h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <BodePlotParameters\r\n                                    rawNumerator={rawNumerator}\r\n                                    rawDenominator={rawDenominator}\r\n                                    $rawNumerator={$rawNumerator}\r\n                                    $rawDenominator={$rawDenominator}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                    N={N}\r\n                                    $N={$N}\r\n                                    K={K}\r\n                                    $K={$K}\r\n                                    multiplier={multiplyPlotBy}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid lg={9} md={9} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            logX={true}\r\n                                            title=\"نمودار بود\"\r\n                                            traces={K !== 1 ? [...traces.amplitude, traceGainChange()] : traces.amplitude}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid lg={9} md={9} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"فاز\"\r\n                                            logX={true}\r\n                                            traces={\r\n                                                phaseInRadianScale\r\n                                                    ? traces.phase\r\n                                                    : traces.degreePhase\r\n                                            }\r\n                                        />\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default BodePlot;\r\n"],"names":["parameters","setters","labels","units","Fragment","Array","map","param","i","md","sm","xs","item","onChange","e","target","value","sx","width","InputProps","startAdornment","position","endAdornment","traces","title","height","logX","style","textAlign","data","layout","margin","t","l","r","b","xaxis","rangemode","zeroline","type","yaxis","hoverlabel","align","boxmode","font","color","legend","orientation","capture","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","direction","container","component","onClick","spacing","mt","alignItems","parameterFormulas","parameterUnits","rawNumerator","rawDenominator","$rawNumerator","$rawDenominator","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","N","$N","multiplier","$K","K","kMax","setkMax","SubCard","darkBorder","Grid","gridSpacing","SimpleParametersList","paddingLeft","dir","p","Button","textTransform","variant","pt","Fab","size","AnimateButton","MathJax","border","borderRadius","paddingBottom","paddingRight","Slider","TextField","symbols","currentRawNum","currentRawDen","H_s","$H_s","systems","$systems","phase","amplitude","degreePhase","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","capturedSystems","findIndex","sys","equals","H","push","length","toString","label","repeatedSystem","all","browserLockBreaker","calculus","bode","y","yi","amp","console","log","trim","num","den","h_s","TransferFunction","ex","MainCard","className","id","index","formula","fontSize","marginTop","currentLength","multipliedSystem","multiply","newSystemList","filter","GraphMenu","changes","lg","GraphBox","KH_s","traceGainChange"],"sourceRoot":""}