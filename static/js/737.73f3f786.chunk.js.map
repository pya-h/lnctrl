{"version":3,"file":"static/js/737.73f3f786.chunk.js","mappings":"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","sources":["math/GraphMenu.jsx","views/topics/chapter06/nyquist-plot/parameters.jsx","views/topics/chapter06/nyquist-plot/index.jsx","views/ui-component/progressbar/ProgressBar.jsx"],"sourcesContent":["import SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { useState, useEffect } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    graphFileName,\r\n    formulaFileName,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    const save = () => {\r\n        const graphBoxElement = document.getElementById(\"graphBox\");\r\n        // normal .blob has dark bakground\r\n        // convert background to light\r\n        const canvasWithBackground = document.createElement(\"canvas\");\r\n        canvasWithBackground.width = graphBoxElement.width;\r\n        canvasWithBackground.height = graphBoxElement.height;\r\n\r\n        const ctx = canvasWithBackground.getContext(\"2d\");\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, graphBoxElement.width, graphBoxElement.height);\r\n\r\n        ctx.drawImage(graphBoxElement, 0, 0);\r\n        // save\r\n        canvasWithBackground.toBlob((blob) => {\r\n            saveAs(blob, graphFileName);\r\n        });\r\n\r\n        html2canvas(document.getElementById(\"formulaBox\")).then((canvas) => {\r\n            canvas.toBlob((blob) => {\r\n                saveAs(blob, formulaFileName);\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}{\" \"}\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"download graph\"\r\n                    component=\"span\"\r\n                    onClick={save}\r\n                >\r\n                    <SaveAltIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import { Grid, Button } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport ProgressBar from \"views/ui-component/progressbar/ProgressBar\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$Num = [$$\",\r\n    \"$$Den = [$$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n    \"$$N = $$\"\r\n];\r\nconst parameterUnits = [\"$$]$$\", \"$$]$$\", \"$$Hz$$\", \"$$Hz$$\", null];\r\n\r\nconst NyquistPlotParameters = ({\r\n    rawNumerator,\r\n    rawDenominator,\r\n    $rawNumerator,\r\n    $rawDenominator,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    phaseInRadianScale,\r\n    setPhaseInRadianScale,\r\n    N,\r\n    $N,\r\n    responseTime,\r\n}) => {\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[rawNumerator, rawDenominator, w_min, w_max, N]}\r\n                    setters={[$rawNumerator, $rawDenominator, $w_min, $w_max, $N]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n                <Grid xs={12} style={{paddingLeft: '3%'}} container>\r\n                    <Grid xs={6} sx={{ p: 1 }}  item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(false)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                !phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            درجه\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(\"rad\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            رادیان\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                <Grid xs={12} sx={{ mt: 1 }} item>\r\n                    <ProgressBar id=\"fr_progressbar\" />\r\n                </Grid>\r\n                {responseTime && (\r\n                    <Grid xs={12} sx={{ mt: 1 }} item>\r\n                        <p style={{ textAlign: \"center\", color: \"coral\" }}>\r\n                            مدت زمان عملیات: {responseTime}\r\n                        </p>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default NyquistPlotParameters;\r\n","// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { makeProgress } from \"toolshed\";\r\nimport NyquistPlotParameters from './parameters';\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\n\r\nconst makeTrace = (x, y, thickness, legend, _3d, mode = \"lines\") => {\r\n    return {\r\n        x,\r\n        y,\r\n        z: _3d ? Array(x.length).fill(0) : null,\r\n        line: {\r\n            // color:'rgb(17, 157, 255)'\r\n            width: thickness,\r\n        },\r\n        type: \"scatter\" + (_3d ? \"3d\" : \"\"),\r\n        mode,\r\n        name: `$$${legend}$$`,\r\n    };\r\n};\r\n\r\nconst NyquistPlot = () => {\r\n    const [rawNumerator, $rawNumerator] = useState(\"1\");\r\n    const [rawDenominator, $rawDenominator] = useState(\"1 1\");\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(-10);\r\n    const [w_max, $w_max] = useState(10);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n    const [responseTime, setResponseTime] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n\r\n        if (capturedSystems.findIndex((sys) => H_s.equals(sys.H)) === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                H_s,\r\n                thickness,\r\n                legend:\r\n                    symbols.out + \"_{\" + (systems.length + 1).toString() + \"}\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const num = calculus.stringToArray(rawNumerator),\r\n                den = calculus.stringToArray(rawDenominator);\r\n                const progressBarElement =\r\n                document.getElementById(\"fr_progressbar\");\r\n                const h_s = new TransferFunction(num, den);\r\n                $H_s(h_s);\r\n                $response(\"$$\" + h_s.label(\"H\") + \"$$\");\r\n                await makeProgress(progressBarElement, 0);\r\n                setResponseTime('درحال محاسبه');\r\n                // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n                // so that the traces will be loaded with new conditions\r\n                let repeatedSystem = false;\r\n                const startTime = new Date();\r\n                const all = systems.map(async (sys, i) => {\r\n                    const [x, y] = await calculus.complexPointify(\r\n                        sys.H_s.nyquist,\r\n                        +w_min,\r\n                        +w_max,\r\n                        +N\r\n                    );\r\n                    if (h_s.equals(sys.H_s)) repeatedSystem = true;\r\n                    await makeProgress(\r\n                        progressBarElement,\r\n                        (100 * i) / (systems.length + 1)\r\n                    );\r\n                    return makeTrace(\r\n                        x,\r\n                        y,\r\n                        sys.thickness,\r\n                        sys.legend,\r\n                        is3DPlotEnabled,\r\n                        \"lines\"\r\n                    );\r\n                });\r\n                if (!repeatedSystem) {\r\n                    // if current system isnt in traces list => add it temperory to plot\r\n\r\n                    let [x, y] = await calculus.complexPointify(\r\n                        h_s.nyquist,\r\n                        +w_min,\r\n                        +w_max,\r\n                        +N\r\n                    );\r\n                    const newsys = makeTrace(\r\n                        x,\r\n                        y,\r\n                        thickness,\r\n                        `${symbols.out}(${symbols.in})`,\r\n                        is3DPlotEnabled,\r\n                        \"lines\"\r\n                    );\r\n                    all.push(newsys);\r\n                    const endTime = new Date();\r\n                    setResponseTime(((+endTime - +startTime) / 1000) + \" ثانیه\");\r\n                }\r\n                await makeProgress(progressBarElement, 100);\r\n\r\n                $traces(all);\r\n            } catch (ex) {\r\n                console.log(ex);\r\n            }\r\n        })();\r\n    }, [\r\n        rawNumerator,\r\n        rawDenominator,\r\n        w_min,\r\n        w_max,\r\n        is3DPlotEnabled,\r\n        thickness,\r\n        systems,\r\n        N,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">\r\n                    {\" \"}\r\n                    پاسخ فرکانسی سیستم ها\r\n                </h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <NyquistPlotParameters\r\n                                    rawNumerator={rawNumerator}\r\n                                    rawDenominator={rawDenominator}\r\n                                    $rawNumerator={$rawNumerator}\r\n                                    $rawDenominator={$rawDenominator}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                    responseTime={responseTime}\r\n                                    N={N}\r\n                                    $N={$N}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    formulaFileName={\r\n                                        \"Water Tank Level Equations _ \" +\r\n                                        [\r\n                                            ...systems.map((sys) => sys.legend),\r\n                                        ].join() +\r\n                                        \".png\"\r\n                                    }\r\n                                    graphFileName={\r\n                                        [\r\n                                            ...systems.map(\r\n                                                (sys) =>\r\n                                                    `${sys.legend}{alpha=${\r\n                                                        sys.a\r\n                                                    }_k=${sys.k}_in=${\r\n                                                        sys.inputSignal\r\n                                                            ? \"ramp\"\r\n                                                            : \"step\"\r\n                                                    }}`\r\n                                            ),\r\n                                        ].join(\", \") + \".png\"\r\n                                    }\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"پاسخ فرکانسی\"\r\n                                            traces={traces}\r\n                                        />\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default NyquistPlot;\r\n","const ProgressBar = ({\r\n    id,\r\n    color = \"white\",\r\n    background = \"lightgreen\",\r\n    borderRadius = \"10px\",\r\n}) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"0%\",\r\n                textAlign: \"right\",\r\n                background,\r\n                color,\r\n                borderRadius,\r\n                padding: \"1%\",\r\n            }}\r\n            id={id}\r\n        ></div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;\r\n"],"names":["capture","graphFileName","formulaFileName","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","sx","direction","container","md","sm","xs","item","color","component","onClick","graphBoxElement","document","getElementById","canvasWithBackground","createElement","width","height","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","blob","saveAs","html2canvas","then","canvas","spacing","mt","alignItems","value","onChange","e","parameterFormulas","parameterUnits","rawNumerator","rawDenominator","$rawNumerator","$rawDenominator","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","N","$N","responseTime","SubCard","darkBorder","title","textAlign","Grid","gridSpacing","SimpleParametersList","parameters","setters","labels","units","style","paddingLeft","p","Button","textTransform","variant","ProgressBar","id","symbols","makeTrace","x","y","legend","_3d","mode","z","Array","length","fill","line","type","name","H_s","$H_s","systems","$systems","traces","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","setResponseTime","num","calculus","den","progressBarElement","h_s","TransferFunction","label","makeProgress","repeatedSystem","startTime","Date","all","map","sys","i","nyquist","equals","newsys","push","endTime","console","log","MainCard","className","margin","index","formula","fontSize","MathJax","marginTop","GraphMenu","capturedSystems","findIndex","H","toString","join","a","k","inputSignal","changes","lg","GraphBox","background","borderRadius","padding"],"sourceRoot":""}