{"version":3,"file":"static/js/883.b9c6dd49.chunk.js","mappings":"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","sources":["math/GraphMenu.jsx","views/topics/chapter06/bode-plot/parameters.jsx","views/topics/chapter06/bode-plot/index.jsx"],"sourcesContent":["import SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { useState, useEffect } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    graphFileName,\r\n    formulaFileName,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    const save = () => {\r\n        const graphBoxElement = document.getElementById(\"graphBox\");\r\n        // normal .blob has dark bakground\r\n        // convert background to light\r\n        const canvasWithBackground = document.createElement(\"canvas\");\r\n        canvasWithBackground.width = graphBoxElement.width;\r\n        canvasWithBackground.height = graphBoxElement.height;\r\n\r\n        const ctx = canvasWithBackground.getContext(\"2d\");\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, graphBoxElement.width, graphBoxElement.height);\r\n\r\n        ctx.drawImage(graphBoxElement, 0, 0);\r\n        // save\r\n        canvasWithBackground.toBlob((blob) => {\r\n            saveAs(blob, graphFileName);\r\n        });\r\n\r\n        html2canvas(document.getElementById(\"formulaBox\")).then((canvas) => {\r\n            canvas.toBlob((blob) => {\r\n                saveAs(blob, formulaFileName);\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}{\" \"}\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"download graph\"\r\n                    component=\"span\"\r\n                    onClick={save}\r\n                >\r\n                    <SaveAltIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import { Grid, Button, Fab } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport AnimateButton from \"../../../ui-component/extended/AnimateButton\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$Num = [$$\",\r\n    \"$$Den = [$$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n    \"$$N = $$\",\r\n];\r\nconst parameterUnits = [\"$$]$$\", \"$$]$$\", \"$$Hz$$\", \"$$Hz$$\", null];\r\n\r\nconst BodePlotParameters = ({\r\n    rawNumerator,\r\n    rawDenominator,\r\n    $rawNumerator,\r\n    $rawDenominator,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    phaseInRadianScale,\r\n    setPhaseInRadianScale,\r\n    N,\r\n    $N,\r\n    multiplier,\r\n}) => {\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[rawNumerator, rawDenominator, w_min, w_max, N]}\r\n                    setters={[\r\n                        $rawNumerator,\r\n                        $rawDenominator,\r\n                        $w_min,\r\n                        $w_max,\r\n                        $N,\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n                <Grid xs={12} style={{ paddingLeft: \"3%\" }} container>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(false)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                !phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            درجه\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(\"rad\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            رادیان\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <hr />\r\n            <Grid\r\n                xs={12}\r\n                sx={{ pt: gridSpacing }}\r\n                spacing={gridSpacing}\r\n                style={{ textAlign: \"center\" }}\r\n                container\r\n            >\r\n                <Grid xs={12} item>تاثیر ضرب اسکالر سیستم در نمودار بود</Grid>\r\n                <Grid xs={4} item>\r\n                    <Fab\r\n                        size=\"large\"\r\n                        variant=\"circular\"\r\n                        onClick={() => multiplier(0.1)}\r\n                    >\r\n                        <AnimateButton type=\"scale\" direction=\"down\">\r\n                            <MathJax>{\"$$\\\\times\\\\frac{1}{10}$$\"}</MathJax>\r\n                        </AnimateButton>\r\n                    </Fab>\r\n                </Grid>\r\n                <Grid xs={4} item>\r\n                    <Fab\r\n                        size=\"large\"\r\n                        variant=\"circular\"\r\n                        onClick={() => multiplier(10)}\r\n                    >\r\n                        <AnimateButton type=\"scale\" direction=\"down\">\r\n                            <MathJax>{\"$$\\\\times 10$$\"}</MathJax>\r\n                        </AnimateButton>\r\n                    </Fab>\r\n                </Grid>\r\n                <Grid xs={4} item>\r\n                    <Fab\r\n                        size=\"large\"\r\n                        variant=\"circular\"\r\n                        onClick={() => multiplier(-1)}\r\n                    >\r\n                        <AnimateButton type=\"scale\" direction=\"down\">\r\n                            <MathJax>{\"$$\\\\lgroup - \\\\rgroup$$\"}</MathJax>\r\n                        </AnimateButton>\r\n                    </Fab>\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default BodePlotParameters;\r\n","// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport BodePlotParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { preventBrowserLock } from 'toolshed';\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\n\r\nconst BodePlot = () => {\r\n    const [rawNumerator, $rawNumerator] = useState(\"1\");\r\n    const [rawDenominator, $rawDenominator] = useState(\"1 1\");\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(0);\r\n    const [w_max, $w_max] = useState(10);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState({\r\n        phase: [],\r\n        amplitude: [],\r\n        degreePhase: [],\r\n    });\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n\r\n        if (capturedSystems.findIndex((sys) => H_s.equals(sys.H)) === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                H_s,\r\n                thickness,\r\n                legend:\r\n                    symbols.out + \"_{\" + (systems.length + 1).toString() + \"}\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // plot\r\n        if (H_s) {\r\n            (async () => {\r\n                try {\r\n                    $response(\"$$\" + H_s.label(\"H\") + \"$$\");\r\n                    // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n                    // so that the traces will be loaded with new conditions\r\n                    let repeatedSystem = false;\r\n                    const all = {\r\n                        amplitude: Array(systems.length),\r\n                        phase: Array(systems.length),\r\n                        degreePhase: Array(systems.length),\r\n                    };\r\n\r\n                    for (let i = 0; i < systems.length; i++) {\r\n                        if(i % 5 === 0) await preventBrowserLock();\r\n                        all.amplitude[i] = calculus.systemToTrace(\r\n                            systems[i].H_s.bode,\r\n                            +w_min,\r\n                            +w_max,\r\n                            systems[i].thickness,\r\n                            systems[i].legend,\r\n                            is3DPlotEnabled,\r\n                            N\r\n                        );\r\n                        all.phase[i] = calculus.systemToTrace(\r\n                            systems[i].H_s.phase,\r\n                            +w_min,\r\n                            +w_max,\r\n                            systems[i].thickness,\r\n                            systems[i].legend,\r\n                            is3DPlotEnabled,\r\n                            N\r\n                        );\r\n                        all.degreePhase[i] = { ...all.phase[i] };\r\n                        all.degreePhase[i].y = all.degreePhase[i].y.map(\r\n                            (yi) => yi * calculus.RadianToDegree\r\n                        );\r\n                        if (H_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n                    }\r\n\r\n                    if (!repeatedSystem) {\r\n                        const amps = calculus.systemToTrace(\r\n                                H_s.bode,\r\n                                +w_min,\r\n                                +w_max,\r\n                                thickness,\r\n                                `${symbols.out}(${symbols.in})`,\r\n                                is3DPlotEnabled,\r\n                                N\r\n                            ),\r\n                            phase = calculus.systemToTrace(\r\n                                H_s.phase,\r\n                                +w_min,\r\n                                +w_max,\r\n                                thickness,\r\n                                `${symbols.out}(${symbols.in})`,\r\n                                is3DPlotEnabled,\r\n                                N\r\n                            );\r\n                        const degreePhase = { ...phase };\r\n                        degreePhase.y = degreePhase.y.map(\r\n                            (yi) => yi * calculus.RadianToDegree\r\n                        );\r\n                        all.phase.push(phase);\r\n                        all.degreePhase.push(degreePhase);\r\n                        all.amplitude.push(amps);\r\n                    }\r\n                    $traces(all);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [H_s, systems, w_min, w_max, is3DPlotEnabled, thickness, N]);\r\n\r\n    const multiplyPlotBy = (value) => {\r\n        const currentLength = systems.length;\r\n        const multipliedSystem = H_s.multiply(value);\r\n        const newSystemList = systems.filter(\r\n            (sys) => !sys.H_s.equals(multipliedSystem)\r\n        );\r\n        if (newSystemList.length === currentLength) capture();\r\n        else $systems(newSystemList);\r\n        $H_s(multipliedSystem);\r\n    };\r\n    useEffect(() => {\r\n        try {\r\n            const num = calculus.stringToArray(rawNumerator),\r\n                den = calculus.stringToArray(rawDenominator);\r\n            const h_s = new TransferFunction(num, den);\r\n            $H_s(h_s);\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">نمودار بود</h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <BodePlotParameters\r\n                                    rawNumerator={rawNumerator}\r\n                                    rawDenominator={rawDenominator}\r\n                                    $rawNumerator={$rawNumerator}\r\n                                    $rawDenominator={$rawDenominator}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                    N={N}\r\n                                    $N={$N}\r\n                                    multiplier={multiplyPlotBy}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    formulaFileName={\r\n                                        \"Water Tank Level Equations _ \" +\r\n                                        [\r\n                                            ...systems.map((sys) => sys.legend),\r\n                                        ].join() +\r\n                                        \".png\"\r\n                                    }\r\n                                    graphFileName={\r\n                                        [\r\n                                            ...systems.map(\r\n                                                (sys) =>\r\n                                                    `${sys.legend}{alpha=${\r\n                                                        sys.a\r\n                                                    }_k=${sys.k}_in=${\r\n                                                        sys.inputSignal\r\n                                                            ? \"ramp\"\r\n                                                            : \"step\"\r\n                                                    }}`\r\n                                            ),\r\n                                        ].join(\", \") + \".png\"\r\n                                    }\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid lg={9} md={9} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            logX={true}\r\n                                            title=\"نمودار بود\"\r\n                                            traces={traces.amplitude}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid lg={9} md={9} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"فاز\"\r\n                                            logX={true}\r\n                                            traces={\r\n                                                phaseInRadianScale\r\n                                                    ? traces.phase\r\n                                                    : traces.degreePhase\r\n                                            }\r\n                                        />\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default BodePlot;\r\n"],"names":["capture","graphFileName","formulaFileName","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","sx","direction","container","md","sm","xs","item","color","component","onClick","graphBoxElement","document","getElementById","canvasWithBackground","createElement","width","height","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","blob","saveAs","html2canvas","then","canvas","spacing","mt","alignItems","value","onChange","e","parameterFormulas","parameterUnits","rawNumerator","rawDenominator","$rawNumerator","$rawDenominator","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","N","$N","multiplier","SubCard","darkBorder","title","textAlign","Grid","gridSpacing","SimpleParametersList","parameters","setters","labels","units","style","paddingLeft","p","Button","textTransform","variant","pt","Fab","size","AnimateButton","type","MathJax","symbols","H_s","$H_s","systems","$systems","phase","amplitude","degreePhase","traces","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","capturedSystems","findIndex","sys","equals","H","push","legend","length","toString","label","repeatedSystem","all","Array","i","preventBrowserLock","calculus","bode","y","map","yi","amps","console","log","num","den","h_s","TransferFunction","ex","MainCard","className","margin","id","index","formula","fontSize","marginTop","currentLength","multipliedSystem","multiply","newSystemList","filter","GraphMenu","join","a","k","inputSignal","changes","lg","GraphBox","logX"],"sourceRoot":""}