{"version":3,"file":"static/js/695.ac695ce0.chunk.js","mappings":"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","sources":["math/algebra/functions/exp.js","math/algebra/functions/fraction.js","math/algebra/functions/poly.js","math/input-signals/signals.js","math/solvers/equation.js","math/solvers/formula.js","math/algebra/functions/zero.js","math/algebra/functions/transfer.js","math/algebra/functions/trigonometric.js"],"sourcesContent":["import Algebra from \"math/algebra\";\r\nimport Complex from \"math/algebra//complex\";\r\nimport { Cos, Sin } from \"./trigonometric\";\r\n\r\nexport default class Exp extends Algebra {\r\n    constructor(a, b, symbol = \"t\", params = {}) {\r\n        // ae^bt\r\n        super(a, { symbol, type: \"exp\", b, ...params });\r\n    }\r\n\r\n    copy = (\r\n        linkPrevious = false // copy everything\r\n    ) =>\r\n        new Exp(this.a, this.b, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    hardcopy = () =>\r\n        // shallow copy just for single term copy\r\n        new Exp(this.a, this.b, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    toSin = () => {\r\n        const exp = this.copy();\r\n        if (\r\n            exp.type === \"exp\" &&\r\n            exp.b instanceof Complex &&\r\n            exp.b.isComplex()\r\n        ) {\r\n            if (exp.b instanceof Complex) {\r\n                if (exp.b.real() === 0 || exp.b.toString() === \"0\") {\r\n                    const b = exp.b.imaginary();\r\n                    const cos = new Cos(exp.a, b);\r\n                    const sin =\r\n                        b >= 0\r\n                            ? new Sin(exp.a, b)\r\n                            : new Sin(\r\n                                  exp.a instanceof Algebra\r\n                                      ? exp.a.negation()\r\n                                      : -exp.a,\r\n                                  -b\r\n                              );\r\n                    return new Complex(cos, sin);\r\n                } else\r\n                    return new Exp(\r\n                        new Exp(\r\n                            exp.a,\r\n                            Complex.jX(exp.b.imaginary()),\r\n                            exp.symbol\r\n                        ).toSin(),\r\n                        exp.b.real(),\r\n                        exp.symbol\r\n                    );\r\n            }\r\n        }\r\n        return exp; // if doesnt math the condition then just return exponential function itself\r\n    };\r\n\r\n    amplitude = (t) => {\r\n        // NOT SURE\r\n        // if (this.b instanceof Complex || t instanceof Complex) {\r\n        //     if (this.a === +this.a) return this.a;\r\n        //     else if (this.a instanceof Algebra && this.symbol === this.a.symbol)\r\n        //         return this.a.$(t);\r\n        // } else return this.valueAt(t);\r\n    };\r\n    phase = (w) => {\r\n        const jw = Complex.jX(w);\r\n        let pb = +this.b;\r\n        if (this.b === pb) return pb * w;\r\n        if (this.b instanceof Algebra) {\r\n            pb = this.b.$(jw);\r\n            return jw.multiply(pb).imaginary();\r\n        }\r\n    };\r\n\r\n    decomposition = () => {\r\n        if (this.b instanceof Complex)\r\n            return new Exp(\r\n                new Exp(this.a, Complex.jX(this.b.imaginary()), this.symbol),\r\n                this.b.real(),\r\n                this.symbol\r\n            );\r\n        return this.copy();\r\n    };\r\n    valueAt = (t) => {\r\n        const numericT = +t;\r\n        if (numericT === t) {\r\n            const a = Algebra.valueOf(this.a, numericT),\r\n                b = Algebra.valueOf(this.b, numericT);\r\n            return a * Math.exp(b * numericT);\r\n        } else if (t instanceof Complex) {\r\n            if (!t.real()) {\r\n                return new Exp(\r\n                    this.a,\r\n                    Complex.jX(this.b * t.imaginary()),\r\n                    this.symbol\r\n                ).toSin();\r\n            } else if (t.imaginary()) {\r\n                // edit this\r\n                return (\r\n                    new Exp(this.a, this.b, this.symbol).valueAt(t.real()) *\r\n                    new Exp(\r\n                        1,\r\n                        Complex.jX(this.b * t.imaginary()),\r\n                        this.symbol\r\n                    ).toSin()\r\n                );\r\n            }\r\n            // t is real\r\n            else return this.valueAt(t.real());\r\n        }\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport Complex from \"../complex\";\r\nimport Poly from \"./poly\";\r\nimport TransferFunction from \"./transfer\";\r\n\r\nexport default class Fraction extends Algebra {\r\n    constructor(num, den = [1], symbol = \"t\", params = {}) {\r\n        // ke^ct\r\n        if (!(num instanceof Algebra)) {\r\n            if (!(num instanceof Array)) num = [num];\r\n            // this.a\r\n            else if (num.length === 0) num = [0];\r\n        }\r\n        if (!(den instanceof Algebra)) {\r\n            if (!(den instanceof Array)) den = [den];\r\n            // this.b\r\n            else if (den.length === 0) den = [1];\r\n        }\r\n        super(num, { symbol, type: \"frac\", b: den instanceof Array ? den.map(di => di instanceof Complex ? di.actual() : di) : den, ...params });\r\n    }\r\n\r\n    copy = (\r\n        linkPrevious = false // copy everything\r\n    ) =>\r\n        new Fraction(this.a, this.b, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n\r\n    hardcopy = () =>\r\n        // shallow copy just for copying single term\r\n        new Fraction(this.a, this.b, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    lim = () => {\r\n        // for all fractions with all kind of numerator and denominator\r\n    };\r\n\r\n    numerator = () =>\r\n        this.a instanceof Algebra\r\n            ? this.a.copy(true)\r\n            : new Poly(this.a, this.symbol);\r\n    denominator = () =>\r\n        this.b instanceof Algebra\r\n            ? this.b.copy(true)\r\n            : new Poly(this.b, this.symbol);\r\n\r\n    setNumerator = (num) => {\r\n        if (!(num instanceof Algebra)) {\r\n            if (!(num instanceof Array)) num = [num];\r\n            // this.a\r\n            else if (num.length === 0) num = [0];\r\n        }\r\n        return this.setA(num);\r\n    };\r\n\r\n    setDenominator = (den) => {\r\n        if (!(den instanceof Algebra)) {\r\n            if (!(den instanceof Array)) den = [den];\r\n            // this.b\r\n            else if (den.length === 0) den = [1];\r\n        }\r\n        return this.setB(den);\r\n    };\r\n    valueAt = (t) => {\r\n        const num = this.numerator().$(t);\r\n        const den = this.denominator().$(t);\r\n\r\n        if (num instanceof Algebra) return num.devide(den);\r\n        if (den instanceof Algebra) return den.devideInverse(num);\r\n        if (den) return num / den;\r\n        // THROW zero denominator ERROR\r\n        return undefined;\r\n    };\r\n\r\n    multiply = (operand) => {\r\n        let y = this.copy(true);\r\n        if (operand instanceof Fraction) {\r\n            const num = this.numerator().multiply(operand.numerator()),\r\n                den = this.denominator().multiply(operand.denominator());\r\n            y = num.devide(den);\r\n        } else {\r\n            const num = this.numerator().multiply(operand);\r\n            y = num.devide(this.denominator());\r\n        }\r\n        if (this.plus) y.plus = this.plus.multiply(operand);\r\n        return y;\r\n    };\r\n    toFormula = () =>\r\n        \"(\" +\r\n        this.numerator().toFormula() +\r\n        \")/(\" +\r\n        this.denominator().toFormula() +\r\n        \")\";\r\n\r\n    toTransferFunction = () => new TransferFunction(this.getA(), this.getB());\r\n\r\n    isIntegrator = () => this.toTransferFunction().isIntegrator();\r\n\r\n    add2gether = (operand) => {\r\n        \r\n    }\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport Complex from \"../complex\";\r\nimport Fraction from \"./fraction\";\r\n\r\nexport default class Poly extends Algebra {\r\n    static atn = (a, n, symbol = \"t\") => {\r\n        const aArray = Array(n + 1).fill(0);\r\n        aArray[0] = a;\r\n        return new Poly(aArray, symbol);\r\n    };\r\n    constructor(a, symbol = \"t\", params = {}) {\r\n        // ke^ct\r\n        if (typeof a === \"number\") a = [a];\r\n        super(a, { symbol, type: \"poly\", ...params });\r\n    }\r\n\r\n    copy = (\r\n        linkPrevious = false // copy everything\r\n    ) =>\r\n        new Poly(this.a, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    hardcopy = () =>\r\n        // shallow copy; signle term copy\r\n        new Poly(this.a, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    degree = () => this.a.length - 1;\r\n\r\n    valueAt = (t) => {\r\n        if (typeof t === \"number\") return Algebra.polynomialValueAt(this.a, t);\r\n        else if (t instanceof Complex) {\r\n            const n = this.a.length - 1;\r\n            if (n >= 0) {\r\n                let powerTerm = 1,\r\n                    result =\r\n                        this.a[n] instanceof Complex\r\n                            ? this.a[n].copy()\r\n                            : new Complex(this.a[n], 0);\r\n                for (let i = n - 1; i >= 0; i--) {\r\n                    powerTerm = t.multiply(powerTerm);\r\n                    result = result.add(powerTerm.multiply(this.a[i]));\r\n                }\r\n                return result;\r\n            }\r\n            return 0;\r\n        }\r\n        return NaN;\r\n    };\r\n\r\n    static Symbolic = (\r\n        degree,\r\n        symbol = \"t\",\r\n        halfTermsVisible = 2,\r\n        coef = \"a\",\r\n        inline = false\r\n    ) => {\r\n        let res = inline ? \"\" : \"$$\";\r\n        if (degree === \"n\") {\r\n            res += `${coef}_n ${symbol}^n + `;\r\n            for (let i = 1; i < halfTermsVisible; i++)\r\n                res += `${coef}_{n - ${i}}${symbol}^{n - ${i}} + `;\r\n            res += \" ... \";\r\n            for (let i = halfTermsVisible - 1; i > 0; i--)\r\n                res += ` + ${coef}_{${i}}${symbol}^{${i}}`;\r\n            res += ` + ${coef}_0`;\r\n        } else if (typeof degree === \"number\") {\r\n            for (; degree >= 0; degree--) {\r\n                res += `${coef}_{${degree}}`;\r\n                if (degree > 0) res += `${symbol}^{${degree}} + `;\r\n            }\r\n        }\r\n        return res + (inline ? \"\" : \" $$\");\r\n    };\r\n    derivative = (against = this.symbol) => {\r\n        const result = this.copy(true);\r\n        if (against === this.symbol) {\r\n            if (!result.dot) {\r\n                const n = result.a.length - 1;\r\n                const da = Array(n).fill(0);\r\n                for (let i = n; i >= 1; i--) da[n - i] = i * result.a[n - i];\r\n                result.a = [...da];\r\n            }\r\n            if (result.plus) result.plus = result.plus.derivative();\r\n        }\r\n        return result;\r\n    };\r\n\r\n    expression = () => {\r\n        if (this.a instanceof Array) {\r\n            const n = this.a.length - 1;\r\n            if (\r\n                !n ||\r\n                !this.a.slice(0, n).filter((ci) => ci.toString() !== \"0\").length\r\n            )\r\n                return this.a[n].toString();\r\n            return this.a\r\n                .map((a_i, i) =>\r\n                    a_i\r\n                        ? Algebra.coefy(a_i, i, n) +\r\n                          (i < n\r\n                              ? this.symbol +\r\n                                (i < n - 1 ? \"^\" + (n - i).toString() : \"\")\r\n                              : \"\")\r\n                        : \"\"\r\n                )\r\n                .join(\"\"); // joins all the coefficients, symbols, etc all together as for polynomal functions\r\n        }\r\n        return this.a.toString();\r\n    };\r\n\r\n    devide = (operand) => {\r\n        if (operand instanceof Poly && this.symbol === operand.symbol) {\r\n            return new Fraction(this.getA(), operand.getA(), this.symbol);\r\n        }\r\n        if (operand === +operand) return this.multiply(1 / Number(operand));\r\n        else if (operand instanceof Algebra)\r\n            return new Fraction(this.getA(), operand, this.symbol);\r\n        return this.copy();\r\n        // is it true??\r\n        // return super.devide();\r\n    };\r\n\r\n    // edit this function to remove unnecessary white spaces\r\n    toFormula = () => {\r\n        if (this.a instanceof Array) {\r\n            const n = this.a.length - 1;\r\n            if (\r\n                !n ||\r\n                !this.a.slice(0, n).filter((ci) => ci.toString() !== \"0\").length\r\n            )\r\n                return this.a[n].toString();\r\n            return this.a\r\n                .map((a_i, i) =>\r\n                    a_i\r\n                        ? Algebra.coefy(a_i, i, n) +\r\n                          (i < n\r\n                              ? this.symbol +\r\n                                (i < n - 1 ? \"^\" + (n - i).toString() : \"\")\r\n                              : \"\")\r\n                        : \"\"\r\n                )\r\n                .join(\"\"); // joins all the coefficients, symbols, etc all together as for polynomal functions\r\n        }\r\n        return this.a.toString();\r\n    };\r\n\r\n    mostSignificantCoefficient = () => {\r\n        const an = this.a.filter((bi) => bi !== 0)[0];\r\n        return an instanceof Complex\r\n            ? !an.isUnit()\r\n                ? an\r\n                : 1\r\n            : an;\r\n    };\r\n}\r\n","import StandardInputSignal from \"math/input-signals\";\r\nimport Poly from \"math/algebra/functions/poly\";\r\n\r\nexport class Step extends StandardInputSignal {\r\n    constructor(amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"u\", symbol); // \\\\delta is the equivalent of small delta in mathjax\r\n    }\r\n    copy = () => new Step(this.amp, this.symbol);\r\n\r\n    $ = (t) => (t >= 0) * this.amp;\r\n}\r\n\r\nexport class Puls extends StandardInputSignal {\r\n    constructor(Delta = 1, amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"\\\\sqcap\", symbol);\r\n        this.Delta = Delta;\r\n    }\r\n    copy = () => new Puls(this.Delta, this.amp, this.symbol);\r\n    $ = (t) => (t >= 0 && t <= this.Delta) * this.amp / this.Delta;\r\n}\r\n\r\nexport class Impact extends StandardInputSignal {\r\n    constructor(amplitude = 1, symbol = \"t\") {\r\n        super(amplitude, \"\\\\delta\", symbol); // \\\\delta is the equivalent of small delta in mathjax\r\n    }\r\n    copy = () => new Impact(this.amp, this.symbol);\r\n\r\n    $ = (t) => this.amp * (t === 0);\r\n}\r\n\r\nexport class Ramp extends Poly {\r\n    constructor(amplitude, symbol = \"t\") {\r\n        super([amplitude, 0], symbol);\r\n        this.amplitude = amplitude; // just for calculating the value of this\r\n        this.selfmultiply(Step());\r\n    }\r\n    copy = () => new Ramp(this.amplitude, this.symbol);\r\n\r\n    $ = (t) => (t >= 0) * t * this.amplitude;\r\n}\r\n\r\n\r\nexport class Parabolic extends Poly { //EDIT\r\n    constructor(amplitude, symbol = \"t\") {\r\n        super([amplitude, 0, 0], symbol);\r\n        this.amplitude = amplitude; // just for calculating the value of this\r\n        this.selfmultiply(Step());\r\n    }\r\n    copy = () => new Parabolic(this.amplitude, this.symbol);\r\n    $ = (t) => (t >= 0 ? t * this.amplitude : 0);\r\n}\r\n","import Algebra from \"../algebra/index\";\r\nimport { isDigit, precision, round } from \"math/calculus\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Poly from \"../algebra/functions/poly\";\r\nconst Algebrite = require(\"algebrite\");\r\n\r\nexport default class Equation {\r\n    static zeroPrecision = round(10 ** -precision.get());\r\n    constructor(exp, symbol = \"x\") {\r\n        if (exp instanceof Array) {\r\n            this.algebra = new Poly(exp);\r\n            this.symbol = symbol;\r\n            this.expression = \"\";\r\n            const n = exp.length - 1;\r\n            this.degree = n;\r\n            for (\r\n                let i = 0;\r\n                i < exp.length;\r\n                this.expression += Equation.GetAlgebriteTerm(\r\n                    n - i,\r\n                    exp[i],\r\n                    i,\r\n                    symbol\r\n                ),\r\n                    i++\r\n            );\r\n        } else if (typeof exp === \"string\") {\r\n            this.expression = exp;\r\n            this.algebra = null;\r\n            this.symbol = symbol;\r\n        } else if (exp instanceof Poly) {\r\n            this.expression = \"\";\r\n            this.algebra = exp.copy();\r\n            this.symbol = this.exp.symbol;\r\n            const expression = this.getA();\r\n            const n = expression.length - 1;\r\n            this.degree = n; // unknown\r\n            for (\r\n                let i = 0;\r\n                i < expression.length;\r\n                this.expression += Equation.GetAlgebriteTerm(\r\n                    n - i,\r\n                    expression[i],\r\n                    i,\r\n                    symbol\r\n                ),\r\n                    i++\r\n            );\r\n        } else if (exp instanceof Algebra) {\r\n            // THIS IS TEMPORARY\r\n            this.expression = exp.toString(); // wrong EDIT THIS LATER\r\n            this.algebra = exp.copy();\r\n            this.symbol = this.exp.symbol;\r\n            this.degree = undefined; // unknown\r\n        }\r\n        this.symbol = symbol;\r\n    }\r\n\r\n    static GetAlgebriteTerm = (termDegree, coef, index, symbol) => {\r\n        if (coef === +coef) {\r\n            // means that coef is not a string\r\n            const intExpI = coef | 0;\r\n            const symbolicPart =\r\n                termDegree > 0 ? `*${symbol}^${termDegree}` : \"\";\r\n            if (intExpI !== coef) {\r\n                // means that coef is a float number\r\n                Algebrite.run(`a${index} = ${coef}`);\r\n                return (coef >= 0 ? \"+\" : \"\") + `a${index}${symbolicPart}`;\r\n            } else\r\n                return (intExpI >= 0 ? \"+\" : \"\") + `${intExpI}${symbolicPart}`;\r\n        }\r\n        // here it means coef is a string like '11/2' or '1/4', ...\r\n        return `${coef}${symbol}^${termDegree}`;\r\n    };\r\n    solve = () => {\r\n        // for factorable equations use: algebrite.roots\r\n        let x = Algebrite.nroots(this.expression)\r\n            .toString()\r\n            .replaceAll(\"...\", \"\");\r\n        x = x.slice(1, x.length - 1);\r\n        x = x.split(\",\").filter((xi) => xi && xi !== \"\"); // now x is converted from a string to the array of x answers (as Numbers);\r\n        // edit string to array\r\n        return x.map((xi, i) => {\r\n            // let [real, image] = xi.split(/\\+|-/).filter((xi) => xi && xi !== \"\");\r\n            let separatorIndex = 1;\r\n            for (; separatorIndex < xi.length; separatorIndex++)\r\n                if (\r\n                    (xi[separatorIndex] === \"+\" ||\r\n                        xi[separatorIndex] === \"-\") &&\r\n                    isDigit(xi[separatorIndex - 1]) &&\r\n                    isDigit(xi[separatorIndex + 1])\r\n                )\r\n                    break;\r\n\r\n            let terms = [];\r\n            terms.push(xi.slice(0, separatorIndex));\r\n            if (separatorIndex < xi.length)\r\n                terms.push(xi.slice(separatorIndex, xi.length - 2));\r\n            \r\n            if (terms.length === 1) {\r\n                const magnitude = terms[0].replace(\"*i\", \"\");\r\n                return magnitude === terms[0]\r\n                    ? new Complex(Number(magnitude))\r\n                    : Complex.jX(Number(magnitude));\r\n            } else return new Complex(Number(terms[0]), Number(terms[1]));\r\n        });\r\n    };\r\n\r\n    // AlgebraRoots = () => {\r\n    //     // convert roots returning string to\r\n    //     if (!this.roots || this.roots.length === 0) this.solve();\r\n    // };\r\n\r\n    approximate = (\r\n        method = Equation.Methods.newton,\r\n        N = 10,\r\n        boundary = 1000\r\n    ) => {\r\n        const allRoots = [];\r\n        // newton reaches to approx fast\r\n        // so N = 10 is enough (?????)\r\n        const isUnique = (newRoot) =>\r\n            !isNaN(newRoot) &&\r\n            allRoots.findIndex((rt) =>\r\n                !(rt instanceof Complex) ? rt === newRoot : rt.equals(newRoot)\r\n            ) === -1;\r\n        const isUniqueComplex = (newRoot) =>\r\n            newRoot instanceof Complex &&\r\n            allRoots.findIndex((rt) => newRoot.equals(rt)) === -1;\r\n\r\n        if (this.expression instanceof Algebra) {\r\n            let a0 = 0;\r\n            for (let i = this.expression.a.length - 1; i >= 0; i--)\r\n                if (this.expression.a[i]) {\r\n                    a0 = this.expression.a[i];\r\n                    break;\r\n                }\r\n            const an = this.expression.a[0];\r\n\r\n            if (a0 && an !== 0) boundary = Math.abs(a0 / an);\r\n\r\n            for (let x0 = -boundary; x0 <= boundary; x0++) {\r\n                let x = method(this.algebra, x0, N);\r\n                if (!isNaN(x)) {\r\n                    const rx = round(x);\r\n                    if (isUnique(rx)) allRoots.push(rx);\r\n                }\r\n                x = method(this.algebra, Complex.jX(x0), N);\r\n                if (isUniqueComplex(x)) allRoots.push(x);\r\n            }\r\n        }\r\n        return allRoots;\r\n    };\r\n    // approximation methods\r\n    durandKerner = (N = 20) => {\r\n        if (this.algebra instanceof Algebra) {\r\n            const f = this.algebra.$;\r\n            const n = this.algebra.degree();\r\n            let guess;\r\n            do {\r\n                guess = new Complex(Math.random(), Math.random());\r\n            } while (guess.isReal());\r\n            const roots = Array(n)\r\n                .fill(0)\r\n                .map((_) => []);\r\n\r\n            roots[0].push(new Complex(1, 0));\r\n            for (let i = 1; i < n; i++)\r\n                roots[i][0] = guess.multiply(roots[i - 1][0]);\r\n            for (let iter = 0; iter < N; iter++) {\r\n                for (let i = 0; i < n; i++) {\r\n                    const xiN = roots[i][iter].copy();\r\n                    let sndTermDen = new Complex(1, 0);\r\n                    for (let j = 0; j < n; j++) {\r\n                        if (i !== j) {\r\n                            const xjN = roots[j][roots[j].length - 1];\r\n                            sndTermDen = sndTermDen.multiply(\r\n                                xiN.substract(xjN)\r\n                            );\r\n                        }\r\n                    }\r\n                    let sndTerm = f(xiN).devide(sndTermDen);\r\n                    // USING PUSH MAY SLOW DOWN THE ALGORITHM\r\n                    roots[i].push(xiN.substract(sndTerm));\r\n                }\r\n            }\r\n            return roots.map((r) => r[r.length - 1]);\r\n        }\r\n    };\r\n\r\n    static Methods = {\r\n        // needs work!\r\n        newton: (algebraf, x0 = 0, N = 20) => {\r\n            const f = algebraf.$;\r\n            const df = algebraf.derivative().$;\r\n            const xs = Array(N + 1).fill(0);\r\n            const dfx0 = df(x0);\r\n            if (dfx0 && (!(dfx0 instanceof Complex) || !dfx0.isZero())) {\r\n                if (x0 instanceof Complex) {\r\n                    xs[0] = x0;\r\n                    for (let i = 0; i < N; i++) {\r\n                        // const dfxsi = df(xs[i]);\r\n                        xs[i + 1] = xs[i].substract(f(xs[i]).devide(df(xs[i])));\r\n                    }\r\n\r\n                    const fx = f(xs[N]);\r\n                    if (\r\n                        Math.abs(fx.real()) > Equation.zeroPrecision ||\r\n                        Math.abs(fx.imaginary()) > Equation.zeroPrecision\r\n                    )\r\n                        return NaN;\r\n                } else {\r\n                    xs[0] = x0;\r\n\r\n                    for (let i = 0; i < N; i++) {\r\n                        xs[i + 1] = xs[i] - f(xs[i]) / df(xs[i]);\r\n                    }\r\n\r\n                    if (f(xs[N]) > Equation.zeroPrecision) return NaN;\r\n                }\r\n                //integrity check!\r\n                return xs[xs.length - 1];\r\n            }\r\n            return NaN;\r\n        },\r\n        // needs work!\r\n        middlePoint: (\r\n            f,\r\n            boundary = 1000\r\n            // decimalPrecision = precision.get()\r\n        ) => {\r\n            // NOTE: works fine for some equations\r\n            // and wronge for some others like:  x ** 2 - 4*x  - 5\r\n            boundary = Math.abs(boundary);\r\n            const expectedRate = Equation.zeroPrecision;\r\n            const poles = [];\r\n            let xa = 0,\r\n                xb = 1;\r\n            for (let i = 0; i < boundary; i++) {\r\n                xa = -boundary + i;\r\n                xb = boundary - i;\r\n\r\n                let rate =\r\n                    (xb - xa) / (2 * Math.max(Math.abs(xa), Math.abs(xb)));\r\n                let p = null;\r\n                while (rate >= expectedRate) {\r\n                    p = (xa + xb) / 2;\r\n                    if (!f(p)) break;\r\n                    else if (f(p) * f(xa) < 0) xb = p;\r\n                    else {\r\n                        xa = p;\r\n                        rate =\r\n                            (xb - xa) /\r\n                            (2 * Math.max(Math.abs(xa), Math.abs(xb)));\r\n                    }\r\n                }\r\n                if (!f(p)) poles.push(round(p));\r\n            }\r\n            return new Set(poles);\r\n        },\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport { isDigit } from \"math/calculus\";\r\nimport Complex from \"math/algebra/complex\";\r\nconst nerdamer = require(\"nerdamer/all.min\");\r\n\r\nexport default class Formula {\r\n    constructor(mathPhrase, symbol = null, expressions = null) {\r\n        /// all type of parameters must be converted to an string mathPhrases (f)\r\n        if (mathPhrase instanceof Algebra) {\r\n            this.f = mathPhrase.toFormula();\r\n            this.symbol = mathPhrase.symbol;\r\n        } else if (typeof mathPhrase === \"string\") {\r\n            this.f = mathPhrase;\r\n            this.symbol = symbol;\r\n        }\r\n        this.expressions = expressions ? expressions : nerdamer(this.f); // normally its the nerdamer expressions\r\n    }\r\n\r\n    // differentiate function\r\n    df = (against = this.symbol) => {\r\n        const expressions = nerdamer.diff(this.f, against);\r\n        return new Formula(expressions.toString(), this.symbol, expressions);\r\n    };\r\n    iL = (timeSymbol = \"t\") => {\r\n        // inverse laplace transform\r\n        const expressions = nerdamer(\r\n            `ilt(${this.f}, ${this.symbol}, ${timeSymbol})`\r\n        );\r\n        return new Formula(expressions.toString(), timeSymbol, expressions);\r\n    };\r\n\r\n    L = (frequencySymbol = \"s\") => {\r\n        // laplace\r\n        const expressions = nerdamer(\r\n            `laplace(${this.f}, ${this.symbol}, ${frequencySymbol})`\r\n        );\r\n        return new Formula(\r\n            expressions.toString(),\r\n            frequencySymbol,\r\n            expressions\r\n        );\r\n    };\r\n\r\n    $ = (t = undefined) => {\r\n        // returns the containing f as a normal funtion or single value in a certain point\r\n        // get value at certain point\r\n        const knownVariables = [];\r\n        knownVariables[this.symbol] = t;\r\n        return t\r\n            ? nerdamer(this.f, { ...knownVariables })\r\n                  .evaluate()\r\n                  .toDecimal()\r\n            : nerdamer(this.f).toDecimal();\r\n    };\r\n\r\n    // solve equations\r\n    x = () => {\r\n        // nerdamer.solveEquations(this.f, this.symbol);\r\n\r\n        let roots = nerdamer(this.f)\r\n            .solveFor(this.symbol)\r\n            .map((ri) =>\r\n                (!ri.toString().includes(\"sqrt\")\r\n                    ? ri\r\n                    : ri.evaluate()\r\n                ).toDecimal()\r\n            );\r\n        //roots = roots.split(\",\").filter((ri) => ri && ri !== \"\"); // now x is converted from a string to the array of x answers (as +s);\r\n        // edit string to array\r\n        return roots.map((ri, i) => {\r\n            // let [real, image] = ri.split(/\\+|-/).filter((ri) => ri && ri !== \"\");\r\n            let separatorIndex = 1;\r\n            for (; separatorIndex < ri.length; separatorIndex++)\r\n                if (\r\n                    (ri[separatorIndex] === \"+\" ||\r\n                        ri[separatorIndex] === \"-\") &&\r\n                    (isDigit(ri[separatorIndex - 1]) ||\r\n                        ri[separatorIndex - 1] === \"i\") &&\r\n                    (isDigit(ri[separatorIndex + 1]) ||\r\n                        ri[separatorIndex + 1] === \"i\")\r\n                )\r\n                    break;\r\n\r\n            let terms = [];\r\n            terms.push(ri.slice(0, separatorIndex));\r\n            if (separatorIndex < ri.length)\r\n                terms.push(ri.slice(separatorIndex, ri.length));\r\n\r\n            if (terms.length === 1) {\r\n                const magnitude = terms[0].replace(\"*i\", \"\").replace(\"i\", \"1\");\r\n                return magnitude === terms[0]\r\n                    ? new Complex(+magnitude)\r\n                    : Complex.jX(+magnitude);\r\n            } else {\r\n                let b = terms[1].replace(\"*i\", \"\").replace(\"i\", \"1\");\r\n                if (b !== terms[1]) return new Complex(+terms[0], +b);\r\n                // if not, means the first term was image\r\n                b = terms[0].replace(\"*i\", \"\").replace(\"i\", \"1\");\r\n                return new Complex(+terms[1], +b);\r\n            }\r\n        });\r\n    };\r\n    toString = () => nerdamer(this.f).toTeX();\r\n\r\n    toAlgebra = () => {\r\n        if (this.expressions instanceof Algebra) return this.expressions.copy();\r\n    };\r\n    static GetTerm = (termDegree, coef, symbol) => {\r\n        if (coef === +coef) {\r\n            // means that coef is not a string\r\n            const symbolicPart =\r\n                termDegree > 0 ? `*${symbol}^${termDegree}` : \"\";\r\n            return (coef >= 0 ? \"+\" : \"\") + `${coef}${symbolicPart}`;\r\n        }\r\n        // here it means coef is a string like '11/2' or '1/4', ...\r\n        return `${coef}${symbol}^${termDegree}`;\r\n    };\r\n\r\n    static RepetitiveFactors = (f, roots, symbol) => {\r\n        const fullRoots = [...roots];\r\n        for (const root of roots) {\r\n            const knowns = [];\r\n            knowns[symbol] = root.toString(false, true).replace(\"j\", \"i*\");\r\n            for (\r\n                let fi = nerdamer.diff(f);\r\n                !+nerdamer(fi, {...knowns}).toDecimal();\r\n                fullRoots.push(root.copy()), fi = nerdamer.diff(fi)\r\n            );\r\n        }\r\n        return fullRoots;\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\n\nexport default class Zero extends Algebra {\n    constructor(params) {\n        // ke^ct\n        super(0, { symbol: null, type: \"poly\"});\n    }\n\n    degree = () => 0;\n\n    valueAt = (t) => 0;\n\n    toString = () => {\n        let str = \"0\";\n        if (this.plus) str = this.plus.toString();\n\n        return str;\n    };\n    devide = (operand) => new Zero();\n\n    add = (operand) => operand.hardcopy().linkPlus(this.plus);\n\n    multiply = (operand) => new Zero();\n\n    replace = (operand) => {\n        this.a = operand.getA();\n        this.b = operand.getB();\n        this.teta = operand.getTeta();\n        this.symbol = operand.getSymbol();\n        this.type = operand.getType();\n        this.dot = operand.dot.copy();\n    };\n}\n","import Algebra from \"../index\";\r\nimport Complex from \"../complex\";\r\nimport Exp from \"./exp\";\r\nimport Fraction from \"./fraction\";\r\nimport { Step } from \"math/input-signals/signals\";\r\nimport Poly from \"./poly\";\r\nimport { Cos, Sin } from \"./trigonometric\";\r\nimport { round } from \"math/calculus/index\";\r\nimport Equation from \"math/solvers/equation\";\r\nimport { makeProgress } from \"toolshed\";\r\nimport Formula from \"math/solvers/formula\";\r\nimport Zero from \"./zero\";\r\nimport { min } from \"../../calculus/index\";\r\n\r\nexport default class TransferFunction extends Fraction {\r\n    static Shortcuts = {\r\n        $1: (k, a) =>\r\n            new TransferFunction([k], [1, a]).setRoots([], [-a]).setOrder(1),\r\n        $2: (k, a, b = a instanceof Complex ? a.conjugate : a) => {\r\n            // k / (s + a)(s + b) => must be converted to => k / (s2 + 2(a+b)s + ab)\r\n            let aplusb =\r\n                a instanceof Algebra\r\n                    ? a.add(b)\r\n                    : b instanceof Algebra\r\n                    ? b.add(a)\r\n                    : b + a;\r\n            let ab =\r\n                a instanceof Algebra\r\n                    ? a.multiply(b)\r\n                    : b instanceof Algebra\r\n                    ? b.multiply(a)\r\n                    : b * a;\r\n            if (aplusb instanceof Complex && aplusb.isReal())\r\n                aplusb = aplusb.real();\r\n            if (ab instanceof Complex && ab.isReal()) ab = ab.real();\r\n\r\n            return new TransferFunction(\r\n                [k],\r\n                [1, aplusb instanceof Algebra ? aplusb.negation() : -aplusb, ab]\r\n            )\r\n                .setRoots([], [a, b])\r\n                .setOrder(2);\r\n        },\r\n        $WnZ: (w_n, zeta) => new TransferFunction(null, null, { w_n, zeta }),\r\n        $design: (t_rise, overshoot) =>\r\n            new TransferFunction(null, null, { overshoot, t_rise }),\r\n\r\n        $PID: (Kp, Ti, Td) =>\r\n            Ti !== 0\r\n                ? new TransferFunction([Kp * Ti * Td, Kp * Ti, Kp], [Ti, 0])\r\n                : new TransferFunction([Kp * Td, Kp], [1]),\r\n        $Roots: (zeros, poles, numeratorGain = 1, denominatorGain = 1) => {\r\n            let num = new Poly([numeratorGain], \"s\"),\r\n                den = new Poly([denominatorGain], \"s\");\r\n            for (let i = 0; i < zeros.length; i++) {\r\n                if (zeros[i] instanceof Complex)\r\n                    num = num.multiply(new Poly([1, zeros[i].negation()], \"s\"));\r\n                else {\r\n                    num = num.multiply(new Poly([1, -zeros[i]], \"s\"));\r\n                    zeros[i] = new Complex(zeros[i], 0);\r\n                }\r\n            }\r\n            for (let i = 0; i < poles.length; i++) {\r\n                if (poles[i] instanceof Complex)\r\n                    den = den.multiply(new Poly([1, poles[i].negation()], \"s\"));\r\n                else {\r\n                    den = den.multiply(new Poly([1, -poles[i]], \"s\"));\r\n                    poles[i] = new Complex(poles[i], 0);\r\n                }\r\n            }\r\n            return num.devide(den).toTransferFunction().setRoots(zeros, poles);\r\n        },\r\n        $DelayedIntegrator: (amplitude, delay, degree) =>\r\n            // k / (s + a) ^ n : k =amplitude, a = delay, n = degree\r\n            // new TransferFunction(amplitude, [new Poly([1, delay], \"s\"), ...Array(degree).fill(0)])\r\n            new TransferFunction(1, [1, delay])\r\n                .raise(degree)\r\n                .multiply(amplitude),\r\n    };\r\n\r\n    static RootOrders = (Roots) => {\r\n        Roots = Roots.sort((p1, p2) => p1.real() - p2.real());\r\n        const orders = [];\r\n        for (let i = 0; i < Roots.length; i++) {\r\n            let j = i + 1,\r\n                order = 1;\r\n            for (; j < Roots.length && Roots[i].equals(Roots[j]); j++, order++);\r\n            orders.push({ value: Roots[i], order });\r\n            i = j - 1;\r\n        }\r\n        return orders;\r\n    };\r\n\r\n    getSimplifiedRoots = () => {\r\n        let temp = this.copy();\r\n        for (let i = 0; i < temp.zeros.length; i++) {\r\n            temp.zeros[i] =\r\n                temp.zeros[i] instanceof Complex\r\n                    ? temp.zeros[i]\r\n                    : new Complex(temp.zeros[i], 0);\r\n            const pi = temp.poles.findIndex((p) => temp.zeros[i].equals(p));\r\n            if (pi !== -1) {\r\n                // temp.zeros.splice(i, 1);\r\n                // temp.poles.splice(pi, 1);\r\n                temp.zeros[i] = null;\r\n                temp.poles[pi] = null;\r\n            }\r\n        }\r\n        return [temp.zeros.filter((zi) => zi), temp.poles.filter((pi) => pi)];\r\n    };\r\n\r\n    getSimplifiedOrderedRoots = () => {\r\n        let temp = this.copy();\r\n        for (let i = 0; i < temp.orderedZeros.length; i++) {\r\n            const pi = temp.orderedPoles.findIndex((p) =>\r\n                p.value.equals(temp.orderedZeros[i].value)\r\n            );\r\n            if (pi !== -1) {\r\n                const minOrder = min(temp.orderedZeros[i].order, pi.order);\r\n                temp.orderedZeros[i].order -= minOrder;\r\n                temp.orderedPoles[pi].order -= minOrder;\r\n            }\r\n        }\r\n        return [\r\n            temp.orderedZeros.filter((zi) => zi.order),\r\n            temp.orderedPoles.filter((pi) => pi.order),\r\n        ];\r\n    };\r\n\r\n    static OmegaZetaPoles = (w_n, zeta) => {\r\n        if (Math.abs(zeta) >= 1) {\r\n            const alpha = -zeta * w_n;\r\n            const beta = w_n * (zeta * zeta - 1) ** 0.5;\r\n            return [alpha + beta, alpha - beta];\r\n        }\r\n        const alpha = -zeta * w_n;\r\n        const beta = w_n * (1 - zeta * zeta) ** 0.5;\r\n        return [new Complex(alpha, beta), new Complex(alpha, -beta)];\r\n    };\r\n    constructor(numerator, denominator, params = {}) {\r\n        let zeros = [],\r\n            poles = [];\r\n        if (params) {\r\n            if (params.overshoot && params.t_rise) {\r\n                params.overshoot = Number(params.overshoot);\r\n                params.t_rise = Number(params.t_rise);\r\n                const logMp = Math.log10(params.overshoot);\r\n                params.zeta =\r\n                    -logMp / (Math.PI * Math.PI + logMp * logMp) ** 0.5;\r\n                params.w_d = Math.PI / params.t_rise;\r\n                params.w_n =\r\n                    params.w_d / (1 - params.zeta * params.zeta) ** 0.5;\r\n            }\r\n\r\n            if (params.w_n) {\r\n                params.w_n = Number(params.w_n);\r\n                params.zeta = Number(params.zeta);\r\n                // if the user sends w_n params it will override the given zero/pole list\r\n                const { w_n, zeta } = params;\r\n                const wn2 = w_n * w_n;\r\n                numerator = wn2;\r\n                denominator = [1, 2 * zeta * w_n, wn2];\r\n                poles = TransferFunction.OmegaZetaPoles(w_n, zeta);\r\n                zeros = [];\r\n            }\r\n        }\r\n        super(numerator, denominator, \"s\", params);\r\n        // SIMPL;IFY\r\n        this.poles = [...poles]; //edit solve equations\r\n        this.zeros = [...zeros];\r\n        if (!this.a instanceof Array) this.a = [this.a];\r\n        if (this.a.length === 1 && !this.w_n) {\r\n            if (\r\n                this.b.length === 3 &&\r\n                this.b[this.b.length - 1] === this.a[0]\r\n            ) {\r\n                this.w_n = this.a[0];\r\n                this.zeta = this.b[1] / (2 * this.w_n);\r\n                this.timeConstant = round(1 / (this.zeta * this.w_n));\r\n                this.t_settle = 4 * this.timeConstant;\r\n                if (params && params.w_d) this.w_d = params.w_d;\r\n                else if (this.zeta >= -1 && this.zeta <= 1)\r\n                    this.w_d = this.w_n * (1 - this.zeta ** 2) ** 0.5;\r\n                this.order = 2;\r\n                this.setRoots(\r\n                    [],\r\n                    TransferFunction.OmegaZetaPoles(this.w_n, this.zeta)\r\n                );\r\n            }\r\n        }\r\n        if (!this.order)\r\n            this.order =\r\n                denominator instanceof Array ? denominator.length - 1 : 1;\r\n        if (params.overshoot && params.t_rise) {\r\n            [this.overshoot, this.t_rise] = [params.overshoot, params.t_rise];\r\n        } else {\r\n            const dampingCharasteristics =\r\n                this.getDampingSystemCharasteristics();\r\n            if (dampingCharasteristics) {\r\n                this.overshoot = dampingCharasteristics.overshoot;\r\n                this.t_rise = dampingCharasteristics.t_rise;\r\n            }\r\n        }\r\n        if (\r\n            (!this.zeros || !this.zeros.length) &&\r\n            (!this.poles || !this.poles.length)\r\n        )\r\n            this.updateRoots();\r\n    }\r\n\r\n    roots = () => {\r\n        // roots hasnt been decided by user\r\n        let zeros = [],\r\n            poles = [];\r\n        if (\r\n            this.a instanceof Array &&\r\n            this.b instanceof Array && // if all elements of numerator and denominator are actual numbers\r\n            !this.a.find((ai) => ai !== +ai) &&\r\n            !this.b.find((bi) => bi !== +bi)\r\n        ) {\r\n            // CONSTANT COEFFICIENT POLYNOMIAL EQUATIONS\r\n            zeros =\r\n                this.a.length > 1\r\n                    ? new Formula(this.numerator().toFormula(), this.symbol).x()\r\n                    : // ? new Equation(this.a, this.symbol).solve()\r\n                      [];\r\n            poles =\r\n                this.b.length > 1\r\n                    ? new Formula(\r\n                          this.denominator().toFormula(),\r\n                          this.symbol\r\n                      ).x()\r\n                    : //? new Equation(this.b, this.symbol).solve()\r\n                      [];\r\n            if (zeros.length < this.a.length - 1) {\r\n                zeros = Formula.RepetitiveFactors(\r\n                    this.numerator().toFormula(),\r\n                    zeros,\r\n                    this.symbol\r\n                );\r\n            }\r\n            if (poles.length < this.b.length - 1) {\r\n                poles = Formula.RepetitiveFactors(\r\n                    this.denominator().toFormula(),\r\n                    poles,\r\n                    this.symbol\r\n                );\r\n            }\r\n        } else {\r\n            // if the equation isnt a simple constant coefficient polynomial\r\n        }\r\n\r\n        return [zeros, poles];\r\n    };\r\n\r\n    setRoots = (zeros, poles) => {\r\n        this.poles = poles\r\n            .map((pi) =>\r\n                pi instanceof Complex ? pi.copy() : new Complex(pi, 0)\r\n            )\r\n            .sort((p1, p2) => p1.real() - p2.real());\r\n        this.zeros = zeros\r\n            .map((zi) =>\r\n                zi instanceof Complex ? zi.copy() : new Complex(zi, 0)\r\n            )\r\n            .sort((z1, z2) => z1.real() - z2.real());\r\n        this.orderedZeros = TransferFunction.RootOrders(this.zeros);\r\n        this.orderedPoles = TransferFunction.RootOrders(this.poles);\r\n        return this;\r\n    };\r\n\r\n    updateRoots = () => {\r\n        const [zeros, poles] = this.roots();\r\n        return this.setRoots(zeros, poles);\r\n    };\r\n    getDampingSystemCharasteristics = () =>\r\n        this.w_d\r\n            ? {\r\n                  t_rise: round(Math.PI / this.w_d),\r\n                  // WHAT IF W_D === 0?\r\n                  overshoot:\r\n                      this.zeta >= -1 && this.zeta <= 1\r\n                          ? round(\r\n                                100 *\r\n                                    Math.exp(\r\n                                        -(this.zeta * Math.PI) /\r\n                                            (1 - this.zeta ** 2) ** 0.5\r\n                                    )\r\n                            )\r\n                          : null,\r\n              }\r\n            : null;\r\n\r\n    getOrder = () => this.order;\r\n    setOrder = (order) => {\r\n        this.order = order;\r\n        return this;\r\n    };\r\n    getPoles = () => this.poles;\r\n    setPoles = (poles) => {\r\n        this.poles = TransferFunction.map((pi) =>\r\n            pi instanceof Complex ? pi.copy() : new Complex(pi, 0)\r\n        );\r\n        return this;\r\n    };\r\n    getZeros = () => this.zeros;\r\n    setZeros = (zeros) => {\r\n        this.zeros = zeros.map((zi) =>\r\n            zi instanceof Complex ? zi.copy() : new Complex(zi, 0)\r\n        );\r\n        return this;\r\n    };\r\n\r\n    poleOrder = (pole) =>\r\n        this.poles.filter((pi) => Algebra.areTheseTwoEqual(pole, pi)).length;\r\n\r\n    derivative = (against = this.symbol) => {\r\n        let result = this.copy(true);\r\n        if (against === this.symbol) {\r\n            const rplus = result.plus;\r\n            if (!result.dot) {\r\n                const f = this.numerator(),\r\n                    g = this.denominator();\r\n                const num = f\r\n                    .derivative()\r\n                    .multiply(g)\r\n                    .substract(g.derivative().multiply(f));\r\n                result = num.devide(g.multiply(g)).toTransferFunction();\r\n            }\r\n            if (rplus) result.plus = rplus.derivative();\r\n        }\r\n        return result;\r\n    };\r\n    laplace = () => this.copy(); // actually it has no laplace, this is for disfunctioning the laplace method in the parent class Algebra\r\n    laplaceInverse = () => {\r\n        this.updateRoots();\r\n        const f_s = this.simplify();\r\n        if (f_s.isIntegrator()) {\r\n            const denCoef = f_s.b.filter((bi) => bi !== 0)[0];\r\n            return {\r\n                $s: f_s.copy(),\r\n                $t: Poly.atn(\r\n                    (f_s.a instanceof Array ? f_s.a[0] : f_s.a) / denCoef,\r\n                    f_s.denominator().degree() - 1\r\n                ).setInputSignal(new Step()),\r\n            };\r\n        }\r\n        const coefs = [];\r\n        const zeros = f_s.orderedZeros,\r\n            poles = f_s.orderedPoles; // shortcuts\r\n        for (let i = 0; i < poles.length; i++) {\r\n            // for(let j  = 0; j < poles[i].order; i++)\r\n            const s = poles[i].value;\r\n            const otherPoles = [...poles];\r\n            otherPoles.splice(i, 1);\r\n            const num =\r\n                    zeros.length > 0\r\n                        ? Complex.MultiplyFactors(\r\n                              zeros,\r\n                              s,\r\n                              f_s.numerator().mostSignificantCoefficient()\r\n                          )\r\n                        : new Complex(\r\n                              f_s.numerator().mostSignificantCoefficient(),\r\n                              0\r\n                          ),\r\n                den = Complex.MultiplyFactors(\r\n                    otherPoles,\r\n                    s,\r\n                    f_s.denominator().mostSignificantCoefficient()\r\n                );\r\n            coefs.push(num.devide(den));\r\n            if (poles[i].order > 1) {\r\n                coefs[i] = [coefs[i]];\r\n                let dF = TransferFunction.Shortcuts.$Roots(\r\n                    zeros.map((z) => z.value),\r\n                    otherPoles.map((p) => p.value)\r\n                );\r\n                let factoriel = 1;\r\n                for (let q = 1; q < poles[i].order; q++) {\r\n                    dF = dF.derivative();\r\n                    let coef = dF.$(s);\r\n                    coef =\r\n                        coef instanceof Complex ? coef : new Complex(coef, 0);\r\n                    factoriel *= q;\r\n                    coefs[i].push(coef.devide(factoriel));\r\n                }\r\n            }\r\n        }\r\n        // edit THIIIIIIIIIIIIIS\r\n        let g_s = new Zero(),\r\n            c_t = new Zero();\r\n        for (let i = 0; i < coefs.length; i++) {\r\n            if (coefs[i] instanceof Array && poles[i].order > 1) {\r\n                const n = poles[i].order;\r\n                for (let q = 0; q < n; q++) {\r\n                    g_s = g_s.add(\r\n                        TransferFunction.Shortcuts.$DelayedIntegrator(\r\n                            coefs[i][q].actual(),\r\n                            poles[i].value.negation().actual(),\r\n                            n - q\r\n                        )\r\n                    );\r\n                    // const ap = [coefs[i][q].actual()];\r\n                    // for(let k = 0; k < poles[i].order - q - 1; k++)\r\n                    //     ap.push(0);\r\n                    const ap = Poly.atn(\r\n                        coefs[i][q].actual(),\r\n                        poles[i].order - q - 1\r\n                    );\r\n                    c_t = !poles[i].value.isZero()\r\n                        ? c_t.add(\r\n                              new Exp(ap, poles[i].value.actual(), \"t\", {\r\n                                  input: new Step(),\r\n                              })\r\n                          )\r\n                        : c_t.add(ap).multiply(new Step());\r\n                }\r\n            } else {\r\n                g_s = g_s.add(\r\n                    new TransferFunction(coefs[i].actual(), [\r\n                        1,\r\n                        poles[i].value.negation().actual(),\r\n                    ])\r\n                );\r\n                // if (poles[i].value.isComplex()) {\r\n                //     const sinje = new Exp(\r\n                //         coefs[i].actual(),\r\n                //         poles[i].value.actual(),\r\n                //         \"t\",\r\n                //         { input: new Step() }\r\n                //     ).toSin();\r\n                // } else\r\n                    c_t = c_t.add(\r\n                        !poles[i].value.isZero()\r\n                            ? new Exp(\r\n                                  coefs[i].actual(),\r\n                                  poles[i].value.actual(),\r\n                                  \"t\",\r\n                                  { input: new Step() }\r\n                              ).toSin()\r\n                            : new Poly(coefs[i].actual(), \"t\", {\r\n                                  input: new Step(),\r\n                              })\r\n                    );\r\n            }\r\n        }\r\n        return { $s: g_s, $t: c_t };\r\n    };\r\n\r\n    stepify = () => {\r\n        const lstep = this.copy();\r\n        lstep.b.push(0); //update denominator\r\n        lstep.poles.push(Complex.jX(0));\r\n        return lstep;\r\n    };\r\n    step = () => {\r\n        // normally will automatically return the time domain answer\r\n        // unless inLaplaceDomain is true\r\n        // PUT INPUT SIGNAL AT THE END\r\n        const m = this.zeros.length; // number of zeros\r\n        const n = this.poles.length; // number of poles\r\n        const nreal = this.poles.filter(\r\n            (pi) => !(pi instanceof Complex) || pi.isReal()\r\n        ).length; // number of real poles; can be eig   her 2 or 0\r\n        if (m === 0) {\r\n            const k = this.numerator();\r\n            if (n === 0) {\r\n                // return u(t)\r\n                // DEFINE U(T) IN ALGEBRA\r\n            }\r\n            if (n === 1) {\r\n            } else if (n === 2) {\r\n                const a = -this.poles[0],\r\n                    b = -this.poles[1];\r\n                if (nreal === 2) {\r\n                    // if (a > 0 && b > 0) {\r\n                    if (a !== b)\r\n                        // two independent polesdddd\r\n                        // two negative independent poles\r\n                        return new Exp(1 / a, -a)\r\n                            .add(new Exp(-1 / b, -b))\r\n                            .multiply(k / (a - b))\r\n                            .multiply(new Step())\r\n                            .add(new Step(k / (a * b)));\r\n                    else {\r\n                        const a2 = a * a;\r\n                        return new Exp(-k / a2, -a)\r\n                            .multiply(new Poly([a, 1]))\r\n                            .multiply(new Step())\r\n                            .add(new Step(k / a2));\r\n                    }\r\n                    // } else {\r\n                    //     // repetetive poles\r\n                    // }\r\n                } else if (nreal === 0) {\r\n                    // two conjugated complex poles\r\n                    //UNDERSHOOT BUG FIXLAYS HERE\r\n                    const a = -this.poles[0].real(),\r\n                        b = this.poles[0].imaginary();\r\n                    const ka2b2 = k / (a ** 2 + b ** 2);\r\n                    // FIND BUUUUUUG\r\n                    // return new Exp(-ka2b2, -a)\r\n                    //     .multiply(new Cos(1, b).add(new Sin(a / b, b)))\r\n                    //     .multiply(new Step())\r\n                    //     .add(new Step(ka2b2));\r\n                    return new Exp(-ka2b2, -a)\r\n                        .multiply(new Cos(1, b))\r\n                        .add(new Exp(-ka2b2, -a).multiply(new Sin(a / b, b)))\r\n                        .multiply(new Step())\r\n                        .add(new Step(ka2b2));\r\n                }\r\n                // else if( nreal == 1) // this cant happen, but what if sth went wrong?\r\n            }\r\n        }\r\n        // if its not in special mode:\r\n        return new Formula(this.stepify().toFormula(), this.symbol).iL();\r\n    };\r\n    copy = (\r\n        linkPrevious = false // copy everything\r\n    ) =>\r\n        new TransferFunction(this.a, this.b, {\r\n            overshoot: this.overshoot,\r\n            t_rise: this.t_rise,\r\n            t_settle: this.t_settle,\r\n            w_d: this.w_d,\r\n            timeConstant: this.timeConstant,\r\n            w_n: this.w_n,\r\n            zeta: this.zeta,\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        }).setRoots(this.zeros, this.poles);\r\n\r\n    hardcopy = () =>\r\n        // shallow-singleterm copy\r\n        new TransferFunction(this.a, this.b, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    lim = (s0) => {\r\n        let num, den;\r\n        // for simple polynomial numerator and denominator fractions\r\n        // IMPLEMENT HOPITAL AS WELL?\r\n        if (!s0) {\r\n            // s -> 0)\r\n\r\n            num = { a: 0, sp: this.a.length - 1 };\r\n            den = { b: 1, sp: this.b.length - 1 };\r\n            for (; num.sp > 0 && this.a[num.sp] === 0; num.sp--);\r\n            num.a = this.a[num.sp];\r\n            for (; den.sp > 0 && this.b[den.sp] === 0; den.sp--);\r\n            den.b = this.b[den.sp];\r\n            num.sp = this.a.length - num.sp - 1;\r\n            den.sp = this.b.length - den.sp - 1;\r\n            if (num.sp === den.sp) return num.a / den.b;\r\n            else {\r\n                const sMinPower = Math.min(den.sp, num.sp);\r\n                if (sMinPower) {\r\n                    num.sp -= sMinPower;\r\n                    den.sp -= sMinPower;\r\n                }\r\n                // now one of num.sp or den.sp is zero\r\n                if (den.sp)\r\n                    // zero on denominator\r\n                    return Infinity;\r\n                // if den.sp == 0 and num.sp != 0\r\n                return 0;\r\n            }\r\n        } else if (s0 === Infinity) {\r\n            // s -> infinity\r\n            num = { a: 0, sp: 0 };\r\n            den = { b: 1, sp: 0 };\r\n            for (; num.sp < this.a.length && this.a[num.sp] === 0; num.sp++);\r\n            num.a = this.a[num.sp];\r\n            for (; den.sp < this.b.length && this.b[den.sp] === 0; den.sp++);\r\n            den.b = this.b[den.sp];\r\n            num.sp = this.a.length - num.sp - 1;\r\n            den.sp = this.b.length - den.sp - 1;\r\n            if (num.sp === den.sp) return num.a / den.b;\r\n            // else\r\n            const sMinPower = Math.min(den.sp, num.sp);\r\n            if (sMinPower) {\r\n                num.sp -= sMinPower;\r\n                den.sp -= sMinPower;\r\n            }\r\n            // now one of num.sp or den.sp is zero\r\n            if (den.sp)\r\n                // zero on denominator\r\n                return 0;\r\n            // if den.sp == 0 and num.sp != 0\r\n            return Infinity;\r\n        } else {\r\n            // if s0 is just a no-zero limited number\r\n            num = this.numerator().$(s0);\r\n            den = this.denominator().$(s0);\r\n            if (den)\r\n                // simple non zero denominator limit\r\n                return num / den;\r\n            // if den == 0\r\n            // use Hopital or other limit methods\r\n            //return (num.a * (s0 ** num.sp)) / (den.b * (s0 ** den.sp));\r\n        }\r\n    };\r\n    errors = () => {\r\n        const sGs = this.multiply(new Poly([1, 0], \"s\"));\r\n        const s2Gs = sGs.multiply(new Poly([1, 0], \"s\"));\r\n        return {\r\n            Ks: round(this.lim(0)),\r\n            Kr: round(sGs.lim(0)),\r\n            Ka: round(s2Gs.lim(0)),\r\n        };\r\n    };\r\n    // $ = (t) => this.laplaceInverse().$(t); // valueOf function in certain point; I used character $ in many places as,\r\n    // acronym for \"set\" in setters, so $ here means that set the t ( or x or whatever) with a certain point\r\n\r\n    amplitude = (w) => {\r\n        // w === omega\r\n        const jw = Complex.jX(w);\r\n        const num = this.numerator(),\r\n            den = this.denominator();\r\n        const numAmp = !(num instanceof Exp)\r\n                ? num.$(jw).magnitude()\r\n                : Math.abs(num.getA()),\r\n            denAmp = !(den instanceof Exp)\r\n                ? den.$(jw).magnitude()\r\n                : Math.abs(den.getB());\r\n        return numAmp / denAmp;\r\n        // this is for find exact match of the devide function\r\n        // but im sure num and den are Complex so i directly stated the result\r\n\r\n        // if(num instanceof Complex)\r\n        //     return num.magnitude() / (den instanceof Complex ? den.magnitude : den).magnitude();\r\n        // if(den instanceof Complex)\r\n        //     return num instanceof Algebra ? num.devide(den.magnitude()) : num / den.magnitude();\r\n        // if(num instanceof Algebra)\r\n        //     return num.devide(den);\r\n        // if(den instanceof Algebra)\r\n        //     return den.devideInverse(num);\r\n        // // signal input?\r\n        // if(den)\r\n        //     return num / den;\r\n        // return NaN;\r\n    };\r\n\r\n    phase = (w) => {\r\n        const jw = Complex.jX(w);\r\n        let num = this.numerator(),\r\n            den = this.denominator();\r\n        const numPhase = !(num instanceof Exp)\r\n                ? num.$(jw).phase()\r\n                : num.phase(w), //exponentials have their own shortcut for phase()\r\n            denPhase = !(den instanceof Exp) ? den.$(jw).phase() : den.phase(w);\r\n        if (+denPhase === denPhase && +numPhase === numPhase)\r\n            return numPhase - denPhase;\r\n        // for now Complex.phase() returns numbers or functions:\r\n        // numPhase or denPhase instanceof Function then:\r\n        return (\r\n            (numPhase instanceof Function ? numPhase(w) : numPhase) -\r\n            (denPhase instanceof Function ? denPhase(w) : denPhase)\r\n        );\r\n        // else if(numPhase instanceof Algebra)\r\n        //     return numPhase.$(w) - den.phase();\r\n        // return NaN;\r\n    };\r\n\r\n    static PolarToComplex = (A, phi) =>\r\n        new Complex(A * Math.cos(phi), A * Math.sin(phi));\r\n    nyquist = (w, method = \"complex\") =>\r\n        method === \"complex\"\r\n            ? this.$(Complex.jX(w))\r\n            : TransferFunction.PolarToComplex(this.amplitude(w), this.phase(w));\r\n\r\n    bode = (w) => 20 * Math.log10(this.amplitude(w));\r\n\r\n    toFormula = () => {\r\n        // const [zeros, poles] = this.repetitiveRoots();\r\n        const num =\r\n            this.zeros.length > 0\r\n                ? this.zeros\r\n                      .map(\r\n                          (zi) =>\r\n                              \"(\" +\r\n                              this.symbol +\r\n                              \" - \" +\r\n                              zi.toString(false, true).replace(\"j\", \"i*\") +\r\n                              \")\"\r\n                      )\r\n                      .join(\"*\")\r\n                : \"1\";\r\n        const den =\r\n            this.poles.length > 0\r\n                ? this.poles\r\n                      .map(\r\n                          (pi) =>\r\n                              \"(\" +\r\n                              this.symbol +\r\n                              \" - \" +\r\n                              pi.toString(false, true).replace(\"j\", \"i*\") +\r\n                              \")\"\r\n                      )\r\n                      .join(\"*\")\r\n                : \"1\";\r\n        return `(${num})/(${den})`;\r\n    };\r\n\r\n    // ****************************************************** //\r\n    // SOLVE THIS WITH nerdamer again\r\n    rootLocus = async (k_min, k_max, progressBarObject, N = 1000) => {\r\n        // return root locus values for plotting\r\n\r\n        // TEMPORARY:\r\n        let dk = (k_max - k_min) / N;\r\n        const a = this.getA(), // numerator\r\n            b = this.getB(); // denominator => a / b\r\n        const na = a.length - 1,\r\n            nb = b.length - 1;\r\n        const reals = [],\r\n            imaginaries = [];\r\n        const progressLength = k_max - k_min;\r\n        const newTerm = Formula.GetTerm; // Equation.GetAlgebriteTerm;\r\n        for (let k = k_min, progress = 0; k <= k_max; k += dk, progress += dk) {\r\n            // in this piece: using short form codes and using objects is set to minimum\r\n            // because root locus is time consuming and putting all the codes in one main loop is better\r\n            // const delta = b.add(a.multiply(k));\r\n            let delta = null,\r\n                expression = \"\";\r\n            // USE ARRAY DIRECT PROCESS FOR FASTER RESPONSE\r\n            // NUM + K * DEN\r\n            if (na <= nb) {\r\n                delta = Array(nb);\r\n                const offsetB = nb - na;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetB;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(nb - i, delta[i], this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetB;\r\n                    i <= na;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(na - i, delta[ib], this.symbol),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            } else {\r\n                delta = Array(na);\r\n                const offsetA = na - nb;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetA;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(na - i, delta[i], this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetA;\r\n                    i <= nb;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(nb - i, delta[ib], this.symbol),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            }\r\n            const poles = new Formula(expression, this.symbol).x();\r\n            await makeProgress(\r\n                progressBarObject,\r\n                (100 * progress) / progressLength\r\n            );\r\n\r\n            for (let i = 0; i < poles.length; i++) {\r\n                if (poles[i] instanceof Complex) {\r\n                    reals.push(poles[i].real());\r\n                    imaginaries.push(poles[i].imaginary());\r\n                } else {\r\n                    reals.push(poles[i]);\r\n                    imaginaries.push(0);\r\n                }\r\n            }\r\n        }\r\n        await makeProgress(progressBarObject, 100);\r\n        return [reals, imaginaries];\r\n    };\r\n\r\n    rootsByAlgebriteLocus = async (\r\n        k_min,\r\n        k_max,\r\n        progressBarObject,\r\n        N = 1000\r\n    ) => {\r\n        // return root locus values for plotting\r\n\r\n        // TEMPORARY:\r\n        let dk = (k_max - k_min) / N;\r\n        const a = this.getA(), // numerator\r\n            b = this.getB(); // denominator => a / b\r\n        const na = a.length - 1,\r\n            nb = b.length - 1;\r\n        const reals = [],\r\n            imaginaries = [];\r\n        const progressLength = k_max - k_min;\r\n        const newTerm = Equation.GetAlgebriteTerm;\r\n        for (let k = k_min, progress = 0; k <= k_max; k += dk, progress += dk) {\r\n            // in this piece: using short form codes and using objects is set to minimum\r\n            // because root locus is time consuming and putting all the codes in one main loop is better\r\n            // const delta = b.add(a.multiply(k));\r\n            let delta = null,\r\n                expression = \"\";\r\n            // USE ARRAY DIRECT PROCESS FOR FASTER RESPONSE\r\n            // NUM + K * DEN\r\n            if (na <= nb) {\r\n                delta = Array(nb);\r\n                const offsetB = nb - na;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetB;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(nb - i, delta[i], i, this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetB;\r\n                    i <= na;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(\r\n                            na - i,\r\n                            delta[ib],\r\n                            ib,\r\n                            this.symbol\r\n                        ),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            } else {\r\n                delta = Array(na);\r\n                const offsetA = na - nb;\r\n                for (\r\n                    let i = 0;\r\n                    i < offsetA;\r\n                    delta[i] = b[i],\r\n                        expression += newTerm(na - i, delta[i], i, this.symbol),\r\n                        i++\r\n                );\r\n                for (\r\n                    let i = 0, ib = offsetA;\r\n                    i <= nb;\r\n                    delta[ib] = b[ib] + k * a[i],\r\n                        expression += newTerm(\r\n                            nb - i,\r\n                            delta[ib],\r\n                            ib,\r\n                            this.symbol\r\n                        ),\r\n                        i++,\r\n                        ib++\r\n                );\r\n            }\r\n            // const roots = new Equation(new Poly(delta)).roots();\r\n            const poles = new Equation(expression).solve();\r\n\r\n            await makeProgress(\r\n                progressBarObject,\r\n                (100 * progress) / progressLength\r\n            );\r\n\r\n            for (let i = 0; i < poles.length; i++) {\r\n                if (poles[i] instanceof Complex) {\r\n                    reals.push(poles[i].real());\r\n                    imaginaries.push(poles[i].imaginary());\r\n                } else {\r\n                    reals.push(poles[i]);\r\n                    imaginaries.push(0);\r\n                }\r\n            }\r\n        }\r\n        await makeProgress(progressBarObject, 100);\r\n        return [reals, imaginaries];\r\n    };\r\n\r\n    controlFeedback = (controller) => {\r\n        const cs_gs = this.multiply(controller);\r\n        return cs_gs\r\n            .numerator()\r\n            .devide(cs_gs.numerator().add(cs_gs.denominator()))\r\n            .toTransferFunction();\r\n    };\r\n\r\n    isIntegrator = () =>\r\n        !this.dot\r\n            ? (typeof this.a === \"number\" ||\r\n                  (this.a.length === 1 && typeof this.a[0] === \"number\")) &&\r\n              this.b[this.b.length - 1] === 0 &&\r\n              this.b.filter((bi) => (bi instanceof Complex ? !bi.isZero() : bi))\r\n                  .length === 1 &&\r\n              !this.plus &&\r\n              !this.previous\r\n            : this.copy().linkDot(null).multiply(this.dot).isIntegrator();\r\n\r\n    simplify = () => {\r\n        const [zeros, poles] = this.getSimplifiedRoots();\r\n        return TransferFunction.Shortcuts.$Roots(\r\n            zeros,\r\n            poles,\r\n            this.numerator().mostSignificantCoefficient(),\r\n            this.denominator().mostSignificantCoefficient()\r\n        );\r\n    };\r\n}\r\n","import Algebra from \"math/algebra\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Exp from \"./exp\";\r\nimport Fraction from \"./fraction\";\r\n\r\nexport class Sin extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        if (w === +w && w < 0) {\r\n            w *= -1;\r\n            A *= -1;\r\n        }\r\n        super(A, { symbol, type: \"sin\", b: w, teta, ...params });\r\n    }\r\n    copy = (\r\n        linkPrevious = false // deep copy; copy everything\r\n    ) =>\r\n        new Sin(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    hardcopy = () =>\r\n        // shallow copy; copy signle term\r\n        new Sin(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    toExp = () => {\r\n        const sin = this.copy();\r\n        const exp1 = new Exp(sin.a / 2, Complex.jX(-sin.b));\r\n        const exp2 = new Exp(-sin.a / 2, Complex.jX(sin.b));\r\n        return Complex.jX(exp1.add(exp2));\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.sin(w * t + teta);\r\n    };\r\n}\r\n\r\nexport class Cos extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        if (+w === w && w < 0) w *= -1; // cos(-w) = cos(w);\r\n        super(A, { symbol, type: \"cos\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Cos(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    hardcopy = () =>\r\n        // shallow copy; copy signle term\r\n        new Cos(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    toExp = () => {\r\n        const cos = this.copy();\r\n        const exp1 = new Exp(cos.a / 2, Complex.jX(cos.b));\r\n        const exp2 = new Exp(cos.a / 2, Complex.jX(-cos.b));\r\n        return exp1.add(exp2);\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.cos(w * t + teta);\r\n    };\r\n}\r\n\r\nexport class Tan extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        super(A, { symbol, type: \"tan\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Tan(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    hardcopy = () =>\r\n        // shallow copy; copy signle term\r\n        new Tan(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    toExp = () => {\r\n        const tan = this.copy();\r\n        const exp1 = new Exp(1, Complex.jX(-tan.b));\r\n        const numeratorExp2 = new Exp(-1, Complex.jX(tan.b));\r\n        const denominatorExp2 = new Exp(1, Complex.jX(tan.b));\r\n        return new Fraction(exp1.add(numeratorExp2), exp1.add(denominatorExp2));\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.tan(w * t + teta);\r\n    };\r\n}\r\n\r\nexport class Cot extends Algebra {\r\n    constructor(A, w, teta = 0, symbol = \"t\", params = {}) {\r\n        // Ae^wt\r\n        super(A, { symbol, type: \"cot\", b: w, teta, ...params });\r\n    }\r\n    copy = (linkPrevious = false) =>\r\n        new Cot(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            plus: this.plus,\r\n            previous: linkPrevious ? this.previous : null,\r\n            input: this.input,\r\n        });\r\n    hardcopy = () =>\r\n        // shallow copy; copy signle term\r\n        new Cot(this.a, this.b, this.teta, this.symbol, {\r\n            dot: this.dot,\r\n            input: this.input,\r\n        });\r\n    toExp = () => {\r\n        const cot = this.copy();\r\n        const exp1 = new Exp(1, Complex.jX(-cot.b));\r\n        const numeratorExp2 = new Exp(-1, Complex.jX(cot.b));\r\n        const denominatorExp2 = new Exp(1, Complex.jX(cot.b));\r\n        return new Fraction(exp1.add(denominatorExp2), exp1.add(numeratorExp2));\r\n    };\r\n\r\n    valueAt = (t) => {\r\n        const A = Algebra.valueOf(this.a, t);\r\n        const w = Algebra.valueOf(this.b, t);\r\n        const teta = Algebra.valueOf(this.teta, t);\r\n        return A * Math.cot(w * t + teta);\r\n    };\r\n}\r\n"],"names":["Exp","a","b","symbol","params","type","copy","linkPrevious","dot","plus","previous","input","hardcopy","toSin","exp","Complex","isComplex","real","toString","imaginary","cos","Cos","sin","Sin","Algebra","negation","amplitude","t","phase","w","jw","pb","$","multiply","decomposition","valueAt","numericT","Math","Fraction","num","den","Array","length","map","di","actual","lim","numerator","Poly","denominator","setNumerator","setA","setDenominator","setB","devide","devideInverse","operand","y","toFormula","toTransferFunction","TransferFunction","getA","getB","isIntegrator","add2gether","degree","n","powerTerm","result","i","add","NaN","derivative","against","da","fill","expression","slice","filter","ci","a_i","join","Number","mostSignificantCoefficient","an","bi","isUnit","atn","aArray","Symbolic","halfTermsVisible","coef","inline","res","Step","amp","StandardInputSignal","Algebrite","require","Equation","solve","x","nroots","replaceAll","split","xi","separatorIndex","isDigit","terms","push","magnitude","replace","approximate","method","Methods","newton","N","boundary","allRoots","isUnique","newRoot","isNaN","findIndex","rt","equals","isUniqueComplex","a0","abs","x0","algebra","rx","round","durandKerner","guess","f","random","isReal","roots","_","iter","xiN","sndTermDen","j","xjN","substract","sndTerm","r","this","GetAlgebriteTerm","undefined","zeroPrecision","precision","termDegree","index","intExpI","symbolicPart","run","algebraf","df","xs","dfx0","isZero","fx","middlePoint","expectedRate","poles","xa","xb","rate","max","p","Set","nerdamer","Formula","mathPhrase","expressions","diff","iL","timeSymbol","L","frequencySymbol","knownVariables","evaluate","toDecimal","solveFor","ri","includes","toTeX","toAlgebra","GetTerm","RepetitiveFactors","fullRoots","root","knowns","fi","Zero","str","linkPlus","teta","getTeta","getSymbol","getType","zeros","overshoot","t_rise","logMp","log10","zeta","PI","w_d","w_n","wn2","OmegaZetaPoles","getSimplifiedRoots","temp","pi","zi","getSimplifiedOrderedRoots","orderedPoles","value","orderedZeros","minOrder","min","order","find","ai","setRoots","sort","p1","p2","z1","z2","RootOrders","updateRoots","getDampingSystemCharasteristics","getOrder","setOrder","getPoles","setPoles","getZeros","setZeros","poleOrder","pole","rplus","g","laplace","laplaceInverse","f_s","simplify","denCoef","$s","$t","setInputSignal","coefs","s","otherPoles","splice","dF","Shortcuts","$Roots","z","factoriel","q","g_s","c_t","$DelayedIntegrator","ap","stepify","lstep","step","m","nreal","k","a2","ka2b2","t_settle","timeConstant","s0","sp","sMinPower","Infinity","errors","sGs","s2Gs","Ks","Kr","Ka","numPhase","denPhase","Function","nyquist","PolarToComplex","bode","rootLocus","k_min","k_max","progressBarObject","dk","na","nb","reals","imaginaries","progressLength","newTerm","progress","delta","offsetB","ib","offsetA","makeProgress","rootsByAlgebriteLocus","controlFeedback","controller","cs_gs","linkDot","dampingCharasteristics","$1","$2","conjugate","aplusb","ab","$WnZ","$design","$PID","Kp","Ti","Td","numeratorGain","denominatorGain","delay","raise","Roots","orders","alpha","beta","A","phi","toExp","exp1","exp2"],"sourceRoot":""}