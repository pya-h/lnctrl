{"version":3,"file":"static/js/737.902e1fe4.chunk.js","mappings":"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","sources":["views/input-boxes/SimpleParametersList.jsx","views/plotter/GraphMenu.jsx","views/plotter/PlotlyBox.jsx","views/topics/chapter06/nyquist-plot/parameters.jsx","views/topics/chapter06/nyquist-plot/index.jsx","views/ui-component/cards/MainCard.js","views/ui-component/progressbar/ProgressBar.jsx"],"sourcesContent":["import { Grid, InputAdornment, TextField } from \"@mui/material\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst SimpleParametersList = ({ parameters, setters, labels, units }) => {\r\n    return (\r\n        <Fragment>\r\n            {parameters instanceof Array &&\r\n                parameters.map((param, i) => (\r\n                    <Grid md={12} sm={4} xs={6} item>\r\n                        <TextField\r\n                            onChange={(e) => setters[i](e.target.value)}\r\n                            value={param}\r\n                            sx={{ width: \"100%\" }}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"left\">\r\n                                        <MathJax>{labels[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: units[i] && (\r\n                                    <InputAdornment position=\"right\">\r\n                                        <MathJax>{units[i]}</MathJax>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SimpleParametersList;\r\n","import PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}\r\n                {capture && <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>}\r\n\r\n                {reset && <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>}\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst PlotlyBox = ({ traces, title, width, height = 500, logX, hideX, hideY, yRange, hideLegends }) => {\r\n    /*const temp_layout = {\r\n        xaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n        yaxis: {\r\n            zeroline: true,\r\n            rangemode: \"tozero\",\r\n            autotick: false,\r\n            ticks: \"outside\",\r\n            tick0: 0,\r\n            dtick: 0.25,\r\n            ticklen: 8,\r\n            tickwidth: 4,\r\n            tickcolor: \"#000\",\r\n        },\r\n    };*/\r\n    return (\r\n        <Plot\r\n            style={{ textAlign: \"center\" }}\r\n            //id=\"PlotlyBox\"\r\n            data={traces}\r\n            layout={{\r\n                // width: 1000,\r\n                // autosize: true,\r\n                showlegend: !hideLegends,\r\n                margin: {\r\n                    t: 30, //top margin\r\n                    l: 30, //left margin\r\n                    r: 20, //right margin\r\n                    b: 30, //bottom margin\r\n                },\r\n                xaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true,\r\n                    type: !logX ? \"dec\" : \"log\",\r\n                    visible: !hideX\r\n                },\r\n                yaxis: {\r\n                    rangemode: \"tozero\",\r\n                    zeroline: true,\r\n                    visible: !hideY,\r\n                    range: yRange\r\n                },\r\n\r\n                height,\r\n                title,\r\n                // hoverlabel: { bgcolor: \"#FFF\" },\r\n                hoverlabel: {align:'auto', boxmode: 'overlay', font:{color:'#000000FF'}},\r\n                legend: {orientation: 'h'}//, y: -0.3},\r\n                \r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PlotlyBox;\r\n","import { Button, Grid, Typography } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport ProgressBar from \"views/ui-component/progressbar/ProgressBar\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$Num = [$$\",\r\n    \"$$Den = [$$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n    \"$$N = $$\",\r\n];\r\nconst parameterUnits = [\"$$]$$\", \"$$]$$\", \"$$Hz$$\", \"$$Hz$$\", null];\r\n\r\nconst NyquistPlotParameters = ({\r\n    rawNumerator,\r\n    rawDenominator,\r\n    $rawNumerator,\r\n    $rawDenominator,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    N,\r\n    $N,\r\n    responseTime,\r\n    method,\r\n    changeMethod,\r\n}) => {\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[rawNumerator, rawDenominator, w_min, w_max, N]}\r\n                    setters={[\r\n                        $rawNumerator,\r\n                        $rawDenominator,\r\n                        $w_min,\r\n                        $w_max,\r\n                        $N,\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n                <hr style={{width: '100%'}} />\r\n\r\n                <Grid xs={12} style={{ paddingLeft: \"3%\" }} container>\r\n  \r\n                    <Grid xs={12} item>\r\n                        <Typography dir=\"rtl\" style={{ textAlign: \"center\" }}>\r\n                            روش رسم\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => changeMethod(\"polar\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                method === \"polar\" ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            قطبی\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => changeMethod(\"cartesian\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                method === \"cartesian\" ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            دکارتی\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <hr style={{width: '100%'}} />\r\n                <Grid xs={12} sx={{ mt: 1 }} item>\r\n                    <ProgressBar\r\n                        background=\"lightcoral\"\r\n                        id=\"precvious_plots_progressbar\"\r\n                    />\r\n                </Grid>\r\n                <Grid xs={12} sx={{ mt: 1 }} item>\r\n                    <ProgressBar id=\"nyquist_progressbar\" />\r\n                </Grid>\r\n                {responseTime && (\r\n                    <Grid xs={12} sx={{ mt: 1 }} item>\r\n                        <Typography style={{ textAlign: \"center\", color: \"coral\" }}>\r\n                            مدت زمان عملیات: {responseTime}\r\n                        </Typography>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default NyquistPlotParameters;\r\n","// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"views/plotter/GraphMenu\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport PlotlyBox from \"views/plotter/PlotlyBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { makeProgress } from \"toolshed\";\r\nimport NyquistPlotParameters from \"./parameters\";\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\n\r\nconst observeSystem = (numerator, denominator) => {\r\n    let degreeOfZeroPole = 0,\r\n        degreeOfZeroZero = 0;\r\n    for (\r\n        ;\r\n        !denominator[denominator.length - 1 - degreeOfZeroPole];\r\n        degreeOfZeroPole++\r\n    );\r\n    for (\r\n        ;\r\n        !numerator[numerator.length - 1 - degreeOfZeroZero];\r\n        degreeOfZeroZero++\r\n    );\r\n    const sensitiveSystem =\r\n        !denominator[denominator.length - 1] &&\r\n        degreeOfZeroZero < degreeOfZeroPole;\r\n    // degreeOfZeroPole % 2;\r\n    const systemIsPainInTheA =\r\n        sensitiveSystem &&\r\n        denominator.length > numerator.length + 1 &&\r\n        denominator.length > 2 &&\r\n        denominator.length - degreeOfZeroPole > 1; //numerator.length < denominator.length;\r\n\r\n    return { sensitiveSystem, systemIsPainInTheA };\r\n};\r\n\r\nconst revisePlot = (numerator, denominator, x, y) => {\r\n    let systemIsPainInTheA = true;\r\n    if (denominator.length === 3 && denominator[0] && denominator[1]) {\r\n        // just have a simple zero pole with degree 1\r\n        let max = 0;\r\n        const nearInfinityPole = -Math.abs(denominator[1]) / denominator[0];\r\n\r\n        const absP = Math.abs(nearInfinityPole);\r\n        for (let i = 0; i < x.length; i++) {\r\n            if (Math.abs(x[i]) + 0.001 >= absP || x[i] === 0) {\r\n                delete x[i];\r\n                delete y[i];\r\n            } else {\r\n                const absy = Math.abs(y[i]);\r\n                if (absy > max) max = absy;\r\n            }\r\n        }\r\n        x.push(nearInfinityPole - 0.001);\r\n        y.push(max * 10);\r\n        x.push(nearInfinityPole - 0.001);\r\n        y.push(-max * 10);\r\n\r\n        systemIsPainInTheA = false;\r\n    }\r\n    return { x, y, systemIsPainInTheA };\r\n};\r\nlet currentRawNum = \"\",\r\n    currentRawDen = \"\";\r\nconst _1PlusJ = calculus.arrayToTrace([-1], [0], 1, \"-1+0j\", false, \"markers\");\r\nconst NyquistPlot = () => {\r\n    const [rawNumerator, $rawNumerator] = useState(\"1\");\r\n    const [rawDenominator, $rawDenominator] = useState(\"1 1\");\r\n    const [fraction, $fraction] = useState([[1], [1, 1]]);\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(-50);\r\n    const [w_max, $w_max] = useState(50);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [N, $N] = useState(10000);\r\n    const [responseTime, setResponseTime] = useState(null);\r\n    const [method, changeMethod] = useState(\"polar\");\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n\r\n        if (capturedSystems.findIndex((sys) => H_s.equals(sys.H)) === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                H_s,\r\n                thickness,\r\n                legend:\r\n                    symbols.out + \"_{\" + (systems.length + 1).toString() + \"}\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const currentPlotProgressBarElement = document.getElementById(\r\n                        \"nyquist_progressbar\"\r\n                    ),\r\n                    previousPlotsProgressBarElement = document.getElementById(\r\n                        \"precvious_plots_progressbar\"\r\n                    );\r\n                const [numerator, denominator] = fraction;\r\n\r\n                const h_s = new TransferFunction(numerator, denominator);\r\n                // if (!h_s.equals(H_s))\r\n                {\r\n                    $H_s(h_s);\r\n                    $response(\"$$\" + h_s.label(\"H\") + \"$$\");\r\n                    setResponseTime(\"درحال رسم\");\r\n                    // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n                    // so that the traces will be loaded with new conditions\r\n                    let repeatedSystem = false;\r\n                    const startTime = new Date();\r\n                    const all = Array(systems.length);\r\n                    for (let i = 0; i < systems.length; i++) {\r\n                        const num = systems[i].H_s.getA(),\r\n                            den = systems[i].H_s.getB();\r\n                        let { sensitiveSystem, systemIsPainInTheA } =\r\n                            observeSystem(num, den);\r\n                        await makeProgress(\r\n                            previousPlotsProgressBarElement,\r\n                            (100 * i) / systems.length\r\n                        );\r\n                        let [x, y] = await calculus.complexPointify(\r\n                            (w) => systems[i].H_s.nyquist(w, method),\r\n                            +w_min,\r\n                            +w_max,\r\n                            method === \"cartesian\" && !sensitiveSystem,\r\n                            +N\r\n                        );\r\n                        // if (systemIsPainInTheA)\r\n                        //     ({ x, y, systemIsPainInTheA } = revisePlot(\r\n                        //         num,\r\n                        //         den,\r\n                        //         x,\r\n                        //         y\r\n                        //     ));\r\n                        if (h_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n                        all[i] = calculus.arrayToTrace(\r\n                            x,\r\n                            y,\r\n                            systems[i].thickness,\r\n                            systems[i].legend,\r\n                            is3DPlotEnabled,\r\n                            method === \"polar\" || !systemIsPainInTheA\r\n                                ? \"lines\"\r\n                                : \"markers\"\r\n                        );\r\n                    }\r\n                    if (all.length) {\r\n                        await makeProgress(\r\n                            previousPlotsProgressBarElement,\r\n                            100\r\n                        );\r\n                    }\r\n                    if (!repeatedSystem) {\r\n                        await makeProgress(currentPlotProgressBarElement, 0);\r\n                        // if current system isnt in traces list => add it temperory to plot\r\n                        let { sensitiveSystem, systemIsPainInTheA } =\r\n                            observeSystem(numerator, denominator);\r\n                        let [x, y] = await calculus.complexPointify(\r\n                            (w) => h_s.nyquist(w, method),\r\n                            +w_min,\r\n                            +w_max,\r\n                            method === \"cartesian\" && !sensitiveSystem,\r\n                            +N,\r\n                            currentPlotProgressBarElement\r\n                        );\r\n                        // if (systemIsPainInTheA)\r\n                        //     ({ x, y, systemIsPainInTheA } = revisePlot(\r\n                        //         numerator,\r\n                        //         denominator,\r\n                        //         x,\r\n                        //         y\r\n                        //     ));\r\n                        const newsys = calculus.arrayToTrace(\r\n                            x,\r\n                            y,\r\n                            thickness,\r\n                            `${symbols.out}(${symbols.in})`,\r\n                            is3DPlotEnabled,\r\n                            method === \"polar\" || !systemIsPainInTheA\r\n                                ? \"lines\"\r\n                                : \"markers\"\r\n                        );\r\n                        all.push(newsys);\r\n                        const endTime = new Date();\r\n                        setResponseTime(\r\n                            (+endTime - +startTime) / 1000 + \" ثانیه\"\r\n                        );\r\n                        await makeProgress(currentPlotProgressBarElement, 100);\r\n                    }\r\n                    all.push(_1PlusJ);\r\n\r\n                    $traces(all);\r\n                }\r\n            } catch (ex) {\r\n                console.log(ex);\r\n            }\r\n        })();\r\n    }, [\r\n        fraction,\r\n        w_min,\r\n        w_max,\r\n        method,\r\n        is3DPlotEnabled,\r\n        thickness,\r\n        systems,\r\n        N,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            rawNumerator.trim() !== currentRawNum ||\r\n            rawDenominator.trim() !== currentRawDen\r\n        ) {\r\n            const num = calculus.stringToArray(rawNumerator),\r\n                den = calculus.stringToArray(rawDenominator);\r\n            currentRawDen = rawDenominator;\r\n            currentRawNum = rawNumerator;\r\n            $fraction([num, den]);\r\n        }\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Typography>\r\n                    <h2 className=\"chapter-section-title\">نمودار نایکوئیست</h2>\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <NyquistPlotParameters\r\n                                    rawNumerator={rawNumerator}\r\n                                    rawDenominator={rawDenominator}\r\n                                    $rawNumerator={$rawNumerator}\r\n                                    $rawDenominator={$rawDenominator}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    responseTime={responseTime}\r\n                                    N={N}\r\n                                    $N={$N}\r\n                                    method={method}\r\n                                    changeMethod={changeMethod}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid xs={12} item>\r\n                                        <PlotlyBox\r\n                                            title=\"نمودار نایکويیست\"\r\n                                            traces={traces}\r\n                                        />\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default NyquistPlot;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    overflowY: 'auto',\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","const ProgressBar = ({\r\n    id,\r\n    color = \"white\",\r\n    background = \"lightgreen\",\r\n    borderRadius = \"10px\",\r\n}) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"0%\",\r\n                textAlign: \"right\",\r\n                background,\r\n                color,\r\n                borderRadius,\r\n                padding: \"1%\",\r\n            }}\r\n            id={id}\r\n        ></div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;\r\n"],"names":["parameters","setters","labels","units","Fragment","Array","map","param","i","md","sm","xs","item","onChange","e","target","value","sx","width","InputProps","startAdornment","position","endAdornment","capture","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","direction","container","color","component","onClick","spacing","mt","alignItems","traces","title","height","logX","hideX","hideY","yRange","hideLegends","style","textAlign","data","layout","showlegend","margin","t","l","r","b","xaxis","rangemode","zeroline","type","visible","yaxis","range","hoverlabel","align","boxmode","font","legend","orientation","parameterFormulas","parameterUnits","rawNumerator","rawDenominator","$rawNumerator","$rawDenominator","w_min","w_max","$w_min","$w_max","N","$N","responseTime","method","changeMethod","SubCard","darkBorder","Grid","gridSpacing","SimpleParametersList","paddingLeft","Typography","dir","p","Button","textTransform","variant","ProgressBar","background","id","symbols","observeSystem","numerator","denominator","degreeOfZeroPole","degreeOfZeroZero","length","sensitiveSystem","systemIsPainInTheA","currentRawNum","currentRawDen","_1PlusJ","calculus","fraction","$fraction","H_s","$H_s","systems","$systems","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","setResponseTime","currentPlotProgressBarElement","document","getElementById","previousPlotsProgressBarElement","h_s","TransferFunction","label","repeatedSystem","startTime","Date","all","num","getA","den","getB","makeProgress","w","nyquist","x","y","equals","newsys","push","endTime","console","log","trim","MainCard","className","sys","index","formula","fontSize","MathJax","marginTop","GraphMenu","capturedSystems","findIndex","H","toString","changes","PlotlyBox","headerSX","mr","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","others","theme","useTheme","overflowY","borderColor","palette","primary","action","borderRadius","padding"],"sourceRoot":""}