{"version":3,"file":"static/js/645.758db4e6.chunk.js","mappings":"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","sources":["views/ui-component/buttons/Switcher.jsx","views/topics/chapter03/second-order-tf-examining/by-params/lecture.jsx","views/topics/chapter03/second-order-tf-examining/by-params/parameters.jsx","views/topics/chapter03/second-order-tf-examining/by-params/index.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/lecture.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/parameters.jsx","views/topics/chapter03/second-order-tf-examining/by-poles/index.jsx","views/topics/chapter03/second-order-tf-examining/index.jsx"],"sourcesContent":["import Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport { purple } from \"@mui/material/colors\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"./buttons.css\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Switcher({ setSwitch, choices}) {\r\n    const [selected, setSelected] = useState(0); // 0 right, 1 left\r\n\r\n    // const selectedStyle = {variant: \"contained\", style: { width: '75%', backgroundColor: purple[600], color: 'white'}};\r\n    // const notSelectedStyle = {variant: \"outline\", style:{width: '25%' }};\r\n\r\n    return (\r\n        <Stack \r\n            className=\"switcher-stack\"\r\n            // sx={{py: 1}}\r\n            xs={12}\r\n            spacing={1}\r\n            direction=\"row\"\r\n        >\r\n            <Grid xs={12} dir=\"rtl\" container>\r\n                <Button\r\n                    onClick={() => {\r\n                        setSelected(1);\r\n                        if(choices.length > 1)\r\n                            setSwitch(1);\r\n                    }}\r\n                    className=\"switcher-button\"\r\n                    variant={\"outlined\"}\r\n                    style={{\r\n                        width: selected ? \"75%\" : \"25%\",\r\n                        background: selected ? purple[600] : \"transparent\",\r\n                        color: selected ? \"white\" : purple[700],\r\n                    }}\r\n                    // style={{width: selected ? '75%' : '25%'}}\r\n                    // {... (selected ? selectedStyle: notSelectedStyle)}\r\n                >\r\n                    {choices[1]}\r\n                </Button>\r\n                <Button\r\n                    onClick={() => {\r\n                        setSelected(0);\r\n                        if(choices.length > 0)\r\n                            setSwitch(0);\r\n                    }}\r\n                    className=\"switcher-button\"\r\n                    // {... (!selected ? selectedStyle: notSelectedStyle)}\r\n                    color=\"primary\"\r\n                    variant={\"contained\"}\r\n                    style={{\r\n                        width: !selected ? \"75%\" : \"25%\",\r\n                        background: !selected ? purple[600] : \"transparent\",\r\n                        color: !selected ? \"white\" : purple[700],\r\n                    }}\r\n                >\r\n                    {choices[0]}\r\n                </Button>\r\n            </Grid>\r\n        </Stack>\r\n    );\r\n}\r\n","import SubCard from \"views/ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"../../../topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { mathjaxSpaces } from \"toolshed\";\r\n\r\nconst sotfExtremeMortalFormula =\r\n    \"$$ s_{1,2} = -\\\\zeta\\\\omega_n \\\\pm\\\\omega_n \\\\sqrt{\\\\zeta ^ 2 - 1} \\\\\\\\ \" +\r\n    \" G(s) = \\\\frac{\\\\omega_n ^ 2}{s^2 + 2\\\\zeta\\\\omega_n s + \\\\omega_n ^ 2} \\\\\\\\\" +\r\n    \"C(s) = \\\\frac{\\\\omega_n ^ 2}{s(s^2 + 2\\\\zeta\\\\omega_n s + \\\\omega_n ^ 2)} \\\\\\\\\" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{\\\\omega_n ^ 2}{\\\\omega_n ^ 2} = 1 $$\";\r\nconst sotfTransientStepResponseFormula =\r\n    \"$$c(t) = 1 - e^{-\\\\zeta\\\\omega_n t} \\\\lgroup cos\\\\omega_d t + \\\\frac{\\\\zeta}{\\\\sqrt{1 - \\\\zeta^2}}sin\\\\omega_d t \\\\rgroup, \" + mathjaxSpaces(3) + \r\n    \"\\\\omega_d = \\\\omega_n \\\\sqrt{1 - \\\\zeta^2} \\\\\\\\ \" + \r\n    \" \\\\\\\\ c(t) = 1 - \\\\frac{1}{\\\\sqrt{\\\\zeta ^ 2 - 1}}e^{-\\\\zeta \\\\omega_n t}sin(\\\\omega_n \\\\lgroup\\\\sqrt{\\\\zeta ^ 2 - 1}\\\\rgroup t + cos^{-1}\\\\zeta) \\\\\\\\\" + \r\n    \"c(t) = 1 - \\\\frac{e ^ {-\\\\zeta \\\\omega_n t}}{\\\\sqrt{1 - \\\\zeta ^ 2}}sin \\\\lgroup \\\\omega_d t + tan^{-1}\\\\frac{\\\\sqrt{1 - \\\\zeta^2}}{\\\\zeta} \\\\rgroup$$\";\r\n\r\nconst sotfTransientImpulseResponseFormula =\r\n    \"$$c(t) = \\\\frac{\\\\omega_n}{\\\\sqrt{\\\\zeta ^ 2 - 1}}e^{-\\\\zeta \\\\omega_n t}sin(\\\\omega_n \\\\lgroup\\\\sqrt{\\\\zeta ^ 2 - 1}\\\\rgroup t)$$\";\r\n\r\nconst SOTFByParamsLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"تابع تبدیل مرتبه دو- بررسی پارامتری\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n            spacing={gridSpacing}\r\n        >\r\n            <Grid className=\"lecture-text\" style={{ fontSize: \"20px\" }} item>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; پاسخ سیستم مرتبه دوم به ورودی\r\n                    پله یکی از سه حالت زیر می باشد:\r\n                </p>\r\n            </Grid>\r\n            <SubCard>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfExtremeMortalFormula}</MathJax>\r\n                </Grid>\r\n                <Grid\r\n                    className=\"lecture-text\"\r\n                    style={{ fontSize: \"20px\" }}\r\n                    item\r\n                >\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; پاسخ حالت گذرای ورودی پله:\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfTransientStepResponseFormula}</MathJax>\r\n                </Grid>\r\n                <Grid\r\n                    className=\"lecture-text\"\r\n                    style={{ fontSize: \"20px\" }}\r\n                    item\r\n                >\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; پاسخ حالت گذرای ورودی ضربه:\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfTransientImpulseResponseFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByParamsLecture;\r\n","import { Grid } from \"@mui/material\";\r\nimport CoordinateSystem from \"views/input-boxes/CoordinateSystem\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$\\\\omega_{n} = $$\",\r\n    \"$$\\\\zeta = $$\",\r\n    \"$$t_i = $$\",\r\n    \"$$t_f = $$\",\r\n    \"$$N = $$\"\r\n];\r\nconst parameterUnits = [null, null, \"$$sec$$\", \"$$sec$$\", null];\r\n\r\nconst SOTFByParamsInputs = ({\r\n    w_n,\r\n    zeta,\r\n    $w_n,\r\n    $zeta,\r\n    t_i,\r\n    t_f,\r\n    $t_i,\r\n    $t_f,\r\n    N,\r\n    $N\r\n}) => {\r\n    const grids = 10;\r\n    const checkSetW_N = (value) => value && $w_n(value);\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={0.6} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[w_n, zeta, t_i, t_f, N]}\r\n                    setters={[\r\n                        checkSetW_N,\r\n                        $zeta,\r\n                        $t_i,\r\n                        $t_f,\r\n                        $N\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n\r\n                <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <p style={{ textAlign: \"center\" }}>\r\n                        مقدار پارامترها را از اینجا هم می توانید تغییر دهید\r\n                    </p>\r\n\r\n                    <CoordinateSystem\r\n                        point={{\r\n                            x: w_n,\r\n                            y: 0,\r\n                            select: ({x}) => {\r\n                                if(x) $w_n(x)\r\n                            }\r\n                        }}\r\n                        extra={{\r\n                            x: 0,\r\n                            y: zeta,\r\n                            select: ({y}) => {\r\n                                if(y) $zeta(y)\r\n                            }\r\n                        }}\r\n                        options={{ pointSize: 10, grids }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByParamsInputs;\r\n","import SOTFByParamsLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport SOTFByParamsInputs from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Describer from \"math/describer\";\r\n\r\nconst stepResponse = (tf, c_t = tf.step(), index = undefined) =>\r\n    \"$$\\\\begin{cases} \" +\r\n    tf.label(\"G\", index) +\r\n    \" \\\\\\\\ \\\\\\\\ \" +\r\n    c_t.label(\"c\", index) +\r\n    \"\\\\end{cases}$$\";\r\n\r\nconst symbols = {\r\n    in: \"t\",\r\n    out: \"c\",\r\n};\r\n\r\nconst SOTFExamineByParams = () => {\r\n    const [w_n, $w_n] = useState(1);\r\n    const [zeta, $zeta] = useState(0.1);\r\n    const [t_i, $t_i] = useState(0);\r\n    const [t_f, $t_f] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [C_t, $C_t] = useState(null);\r\n    const [G_s, $G_s] = useState(null);\r\n    const [GInfo, $GInfo] = useState(\"\");\r\n    const [N, $N] = useState(1000);\r\n    const [response, $response] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    //update\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) => w_n === sys.w_n && zeta === sys.zeta\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                w_n,\r\n                zeta,\r\n                G_s,\r\n                C_t,\r\n                thickness,\r\n                legend:\r\n                    \"$$\" +\r\n                    symbols.out +\r\n                    \"_{\" +\r\n                    (systems.length + 1).toString() +\r\n                    \"}$$\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        let gtf = TransferFunction.Specials.$WnZ(w_n, zeta);\r\n        const tstep = gtf.step();\r\n        $G_s(gtf);\r\n        if (gtf) {\r\n            $C_t(tstep);\r\n            $GInfo(new Describer(gtf));\r\n            const [x, y] = calculus.pointify(tstep.$, +t_i, +t_f, +N);\r\n            $response(stepResponse(gtf));\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            const all = systems.map((e, index) => {\r\n                const w_n2 = e.w_n * e.w_n;\r\n                let tgtf = new TransferFunction(\r\n                    [w_n2],\r\n                    [1, 2 * e.zeta * e.w_n, w_n2]\r\n                );\r\n\r\n                const [xi, yi] = calculus.pointify(tgtf.step().$, +t_i, +t_f, +N);\r\n\r\n                return {\r\n                    x: xi,\r\n                    y: yi,\r\n                    z: is3DPlotEnabled ? Array(xi.length).fill(0) : null,\r\n                    line: {\r\n                        // color: e.color...\r\n                        width: e.thickness,\r\n                    },\r\n                    // color,\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: e.legend,\r\n                };\r\n            });\r\n\r\n            const index = systems.findIndex(\r\n                (sys) => +w_n === sys.w_n && +zeta === sys.zeta\r\n            );\r\n            if (index === -1)\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                all.push({\r\n                    x,\r\n                    y,\r\n                    z: is3DPlotEnabled ? Array(x.length).fill(0) : null,\r\n                    // color,\r\n                    line: {\r\n                        // color:'rgb(17, 157, 255)'\r\n                        width: thickness,\r\n                    },\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: `${symbols.out}(${symbols.in})`,\r\n                });\r\n\r\n            $traces(all);\r\n        }\r\n    }, [w_n, zeta, t_i, t_f, is3DPlotEnabled, thickness, systems, N]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [w_n, zeta]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <Grid container direction=\"column\" spacing={gridSpacing}>\r\n            <Grid\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                item\r\n            >\r\n                <SOTFByParamsLecture />\r\n            </Grid>\r\n\r\n            <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                <SubCard sx={{ direction: \"ltr\" }}>\r\n                    <Grid\r\n                        id=\"formulaBox\"\r\n                        sx={{ margin: \"auto\" }}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        {systems instanceof Array &&\r\n                            systems.map((sys, index) => {\r\n                                const formula = stepResponse(\r\n                                    sys.G_s,\r\n                                    sys.C_t,\r\n                                    index + 1\r\n                                );\r\n                                console.log(sys.C_t, sys.G_s);\r\n\r\n                                return (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        xs={12}\r\n                                        item\r\n                                    >\r\n                                        <MathJax>{formula}</MathJax>\r\n                                    </Grid>\r\n                                );\r\n                            })}\r\n                        {!isGraphCatured && (\r\n                            <Grid style={{ fontSize: \"18px\" }} xs={12}>\r\n                                <MathJax>{response}</MathJax>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </SubCard>\r\n            </Grid>\r\n            <Grid\r\n                spacing={2}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                container\r\n            >\r\n                <Grid\r\n                    md={3}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                    container\r\n                >\r\n                    <Grid xs={12}>\r\n                        <SOTFByParamsInputs\r\n                            w_n={w_n}\r\n                            zeta={zeta}\r\n                            t_i={t_i}\r\n                            t_f={t_f}\r\n                            $w_n={$w_n}\r\n                            $zeta={$zeta}\r\n                            $t_i={$t_i}\r\n                            $t_f={$t_f}\r\n                            N={N}\r\n                            $N={$N}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid md={9} sm={12} xs={12} item>\r\n                    <SubCard>\r\n                        <GraphMenu\r\n                            capture={capture}\r\n                            formulaFileName={\r\n                                \"Water Tank Level Equations _ \" +\r\n                                [...systems.map((sys) => sys.legend)].join() +\r\n                                \".png\"\r\n                            }\r\n                            graphFileName={\r\n                                [\r\n                                    ...systems.map(\r\n                                        (sys) =>\r\n                                            `${sys.legend}{w_n=${\r\n                                                sys.w_n\r\n                                            }_zeta=${sys.zeta}_k=${sys.k}_in=${\r\n                                                sys.inputSignal\r\n                                                    ? \"ramp\"\r\n                                                    : \"step\"\r\n                                            }}`\r\n                                    ),\r\n                                ].join(\", \") + \".png\"\r\n                            }\r\n                            reset={() => $systems([])}\r\n                            update={(changes) => update(changes)}\r\n                            toggle3DPlot={toggle3DPlot}\r\n                        />\r\n                    </SubCard>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        <SubCard>\r\n                            <GraphBox title=\"پاسخ پله\" traces={traces} />\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        {GInfo && <GInfo.Explain />}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SOTFExamineByParams;\r\n","import SubCard from \"views/ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"views/topics/topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport { mathjaxSpaces } from \"toolshed\";\r\nimport { gridSpacing } from \"store/constant\";\r\n\r\nconst sotfExtremeMortalFormula =\r\n    \"$$ G(s) = \\\\frac{k}{(s + \\\\alpha) (s + \\\\beta)}\" +\r\n    mathjaxSpaces(3) +\r\n    \"\\\\alpha,\\\\beta > 0,\" +\r\n    mathjaxSpaces(1) +\r\n    \"\\\\alpha \\\\neq \\\\beta \\\\\\\\\" +\r\n    \"C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s(s + \\\\alpha) (s + \\\\beta)}\" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha\\\\beta} \\\\\\\\\" +\r\n    \"c(t) = (\\\\frac{k}{\\\\alpha\\\\beta} + \\\\frac{k}{\\\\alpha - \\\\beta} \\\\lgroup \\\\frac{e^{-\\\\alpha t}}{\\\\alpha} - \\\\frac{e^{-\\\\beta t}}{\\\\beta}\\\\rgroup)u(t)$$\";\r\nconst sotfCriticalFormula =\r\n    \"$$ G(s) = \\\\frac{k}{(s + \\\\alpha)^2}\" +\r\n    mathjaxSpaces(3) +\r\n    \"\\\\alpha,\\\\beta > 0,\" +\r\n    mathjaxSpaces(1) +\r\n    \"\\\\alpha = \\\\beta \\\\\\\\\" +\r\n    \"C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s(s + \\\\alpha)^2}\" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha^2} \\\\\\\\ \" +\r\n    \"c(t) = (\\\\frac{k}{\\\\alpha^2} - \\\\frac{k}{\\\\alpha^2} \\\\lgroup 1 + \\\\alpha t\\\\rgroup)e^{-\\\\alpha t}u(t)$$\";\r\n\r\nconst sotfWeakFormula =\r\n    \"$$ G(s) = \\\\frac{k}{s + \\\\alpha + j\\\\beta)(s + \\\\alpha - j\\\\beta)}\" +\r\n    mathjaxSpaces(3) +\r\n    \"\\\\alpha > 0 \\\\\\\\\" +\r\n    \" \\\\Longrightarrow G(s) = \\\\frac{k}{(s^2 + 2\\\\alpha s + (\\\\alpha ^ 2 + \\\\beta ^ 2) } \\\\\\\\ \" +\r\n    \"C(s) = \\\\frac{1}{s}G(s) = \\\\frac{k}{s^3 + 2\\\\alpha s^2 + (\\\\alpha ^ 2 + \\\\beta ^ 2)s } =  \" +\r\n    \"\\\\frac{1}{s} \\\\frac{k}{(s + \\\\alpha)^2 + \\\\beta ^ 2 }\\\\\\\\ \" +\r\n    \"\\\\Longrightarrow c_{ss} = \\\\lim\\\\limits_{s \\\\to 0}sC(s) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2} \\\\\\\\ \" +\r\n    \"c(t) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2}u(t) - \\\\frac{ke^{-\\\\alpha t}}{\\\\alpha ^ 2 + \\\\beta ^ 2} \\\\lgroup cos\\\\beta t + \\\\frac{\\\\alpha}{\\\\beta}sin\\\\beta t \\\\rgroup u(t) \\\\\\\\\" +\r\n    \"\\\\Longrightarrow c(t) = \\\\frac{k}{\\\\alpha ^ 2 + \\\\beta ^ 2}u(t) - \\\\frac{\\\\sqrt{\\\\alpha ^ 2 + \\\\beta ^ 2}}{\\\\beta}e^{-\\\\alpha t}sin(\\\\beta t + \\\\theta) u(t)$$\";\r\n\r\nconst SOTFByPolesLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"تابع تبدیل مرتبه دو- بررسی پارامتری\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n            spacing={gridSpacing}\r\n        >\r\n            <Grid className=\"lecture-text\"  style={{ fontSize: \"20px\" }} item>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; پاسخ سیستم مرتبه دوم به ورودی\r\n                    پله یکی از سه حالت زیر می باشد:\r\n                </p>\r\n            </Grid>\r\n            <SubCard>\r\n                <Grid sx={{ my: 4 }} className=\"lecture-text\" item>\r\n                    <h1>&nbsp; پاسخ میرای شدید</h1>\r\n                </Grid>\r\n                <Grid sx={{ my: 4 }}  style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب\r\n                        حقیقی منفی دارد.\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfExtremeMortalFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n            <SubCard sx={{ my: 4 }}>\r\n                <Grid className=\"lecture-text\" item>\r\n                    <h1>&nbsp; پاسخ میرای بحرانی</h1>\r\n                </Grid>\r\n                <Grid sx={{ my: 4 }}  style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب\r\n                        حقیقی منفی برابر دارد.\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfCriticalFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n            <SubCard sx={{ my: 4 }}>\r\n                <Grid className=\"lecture-text\" item>\r\n                    <h1>&nbsp; پاسخ میرای ضعیف (نوسانی)</h1>\r\n                </Grid>\r\n                <Grid sx={{ my: 4 }}  style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                    <p>\r\n                        &nbsp; &nbsp; &nbsp; &nbsp; در این حالت سیستم دو قطب\r\n                        مزدوج با مقدار حقیقی منفی دارد.\r\n                    </p>\r\n                </Grid>\r\n                <Grid style={{ fontSize: \"20px\" }} item>\r\n                    <MathJax>{sotfWeakFormula}</MathJax>\r\n                </Grid>\r\n            </SubCard>\r\n            <Grid sx={{ my: 4 }} style={{ fontSize: \"20px\" }} className=\"lecture-text\" item>\r\n                <p>&nbsp; &nbsp; &nbsp; &nbsp;\r\n                    پاسخ اکثر سیستم های خطی در عمل به صورت میرای ضعیف است. لذا معیارهای عملکرد در حوزه ی زمان برای بررسی و تحلیل سیستم های کنترل خطی\r\n                    از این پاسخ استخراج می شود.\r\n                </p>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByPolesLecture;\r\n","import { Grid } from \"@mui/material\";\r\nimport CoordinateSystem from \"views/input-boxes/CoordinateSystem\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$\\\\alpha = $$\",\r\n    \"$$\\\\beta = $$\",\r\n    \"$$k = $$\",\r\n    \"$$t_i = $$\",\r\n    \"$$t_f = $$\",\r\n    \"$$N = $$\"\r\n];\r\nconst parameterUnits = [null, null, null, \"$$sec$$\", \"$$sec$$\", null];\r\n\r\nconst SOTFByPolesInputs = ({\r\n    k,\r\n    alpha,\r\n    beta,\r\n    $k,\r\n    $alpha,\r\n    $beta,\r\n    t_i,\r\n    t_f,\r\n    $t_i,\r\n    $t_f,\r\n    N,\r\n    $N\r\n}) => {\r\n    const grids = 10;\r\n\r\n    const updatePoles = (newPole, other, $newPole, $other) => {\r\n        $newPole(newPole);\r\n        return newPole.isReal()\r\n            ? $other(other.realify())\r\n            : $other(newPole.conjugate());\r\n    };\r\n\r\n    const selectAlpha = (point) => {\r\n        if (point) {\r\n            const { x, y } = point;\r\n            updatePoles(new Complex(-x, -y), beta, $alpha, $beta);\r\n        }\r\n    };\r\n    const selectBeta = (point) => {\r\n        if (point) {\r\n            const { x, y } = point;\r\n            updatePoles(new Complex(-x, -y), alpha, $beta, $alpha);\r\n        }\r\n    };\r\n\r\n    const alphaTextBoxOnChange = (strValue) =>\r\n        updatePoles(Complex.extract(strValue), beta, $alpha, $beta);\r\n\r\n    const betaTextBoxOnChange = (strValue) =>\r\n        updatePoles(Complex.extract(strValue), alpha, $beta, $alpha);\r\n\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={0.6} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[alpha, beta, k, t_i, t_f, N]}\r\n                    setters={[\r\n                        alphaTextBoxOnChange,\r\n                        betaTextBoxOnChange,\r\n                        $k,\r\n                        $t_i,\r\n                        $t_f,\r\n                        $N\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n\r\n                <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <p style={{ textAlign: \"center\" }}>\r\n                        محل قطب ها را انتخاب کنید\r\n                    </p>\r\n\r\n                    <CoordinateSystem\r\n                        point={{\r\n                            x: -alpha.real(),\r\n                            y: -alpha.imaginary(),\r\n                            select: selectAlpha,\r\n                        }}\r\n                        extra={{\r\n                            x: -beta.real(),\r\n                            y: -beta.imaginary(),\r\n                            select: selectBeta,\r\n                        }}\r\n                        options={{ pointSize: 10, grids }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default SOTFByPolesInputs;\r\n","import SOTFByPolesLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport SOTFByPolesInputs from \"./parameters\";\r\nimport Complex from \"math/algebra/complex\";\r\nimport Algebra from \"math/algebra/index\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Describer from \"math/describer\";\r\n\r\nconst stepResponse = (tf, c_t = tf.step(), index = undefined) =>\r\n    \"$$\\\\begin{cases} \" +\r\n    tf.label(\"G\", index) +\r\n    \" \\\\\\\\ \\\\\\\\ \" +\r\n    c_t.label(\"c\", index) +\r\n    \"\\\\end{cases}$$\";\r\n\r\nconst symbols = {\r\n    in: \"t\",\r\n    out: \"c\",\r\n};\r\n\r\nconst SOTFExamineByPoles = () => {\r\n    const [alpha, $alpha] = useState(new Complex(1, 1));\r\n    const [beta, $beta] = useState(alpha.conjugate());\r\n    const [k, $k] = useState(1.0);\r\n    const [t_i, $t_i] = useState(0);\r\n    const [t_f, $t_f] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState([]);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [C_t, $C_t] = useState(null);\r\n    const [G_s, $G_s] = useState(null);\r\n    const [GInfo, $GInfo] = useState(\"\");\r\n    const [N, $N] = useState(1000);\r\n    const [response, $response] = useState(null);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    //update\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) =>\r\n                alpha.equals(sys.alpha) && beta.equals(sys.beta) && sys.k === k\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                alpha,\r\n                beta,\r\n                k,\r\n                G_s,\r\n                C_t,\r\n                thickness,\r\n                legend:\r\n                    \"$$\" +\r\n                    symbols.out +\r\n                    \"_{\" +\r\n                    (systems.length + 1).toString() +\r\n                    \"}$$\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let gtf = TransferFunction.Specials.$2(\r\n            +k,\r\n            alpha instanceof Algebra ? alpha.negation() : -alpha,\r\n            beta instanceof Algebra ? beta.negation() : -beta\r\n        );\r\n        const tstep = gtf.step();\r\n        $G_s(gtf);\r\n        if (gtf && alpha.hasSameTypeWith(beta)) {\r\n            $C_t(tstep);\r\n            $GInfo(new Describer(gtf));\r\n            const [x, y] = calculus.pointify(tstep.$, +t_i, +t_f, +N); \r\n            $response(stepResponse(gtf));\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            const all = systems.map((e, index) => {\r\n                let tgtf = TransferFunction.Specials.$2(\r\n                    +e.k,\r\n                    e.alpha instanceof Algebra ? e.alpha.negation() : -e.alpha,\r\n                    e.beta instanceof Algebra ? e.beta.negation() : -e.beta\r\n                );\r\n\r\n                const [xi, yi] = calculus.pointify(\r\n                    tgtf.step().$,\r\n                    +t_i,\r\n                    +t_f,\r\n                    +N\r\n                ); \r\n\r\n                return {\r\n                    x: xi,\r\n                    y: yi,\r\n                    z: is3DPlotEnabled ? Array(xi.length).fill(0) : null,\r\n                    line: {\r\n                        // color: e.color...\r\n                        width: e.thickness,\r\n                    },\r\n                    // color,\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: e.legend,\r\n                };\r\n            });\r\n\r\n            const index = systems.findIndex(\r\n                (sys) =>\r\n                    alpha.equals(sys.alpha) &&\r\n                    beta.equals(sys.beta) &&\r\n                    sys.k === k\r\n            );\r\n            if (index === -1)\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                all.push({\r\n                    x,\r\n                    y,\r\n                    z: is3DPlotEnabled ? Array(x.length).fill(0) : null,\r\n                    // color,\r\n                    line: {\r\n                        // color:'rgb(17, 157, 255)'\r\n                        width: thickness,\r\n                    },\r\n                    type: \"scatter\" + (is3DPlotEnabled ? \"3d\" : \"\"),\r\n                    mode: \"lines\",\r\n                    name: `${symbols.out}(${symbols.in})`,\r\n                });\r\n\r\n            $traces(all);\r\n        }\r\n    }, [alpha, beta, k, t_i, t_f, is3DPlotEnabled, thickness, systems, N]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [alpha, beta, k]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <Grid container direction=\"column\" spacing={gridSpacing}>\r\n            <Grid\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                item\r\n            >\r\n                <SOTFByPolesLecture />\r\n            </Grid>\r\n\r\n            <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                <SubCard sx={{ direction: \"ltr\" }}>\r\n                    <Grid\r\n                        id=\"formulaBox\"\r\n                        sx={{ margin: \"auto\" }}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        {systems instanceof Array &&\r\n                            systems.map((sys, index) => {\r\n                                const formula = stepResponse(\r\n                                    sys.G_s,\r\n                                    sys.C_t,\r\n                                    index + 1\r\n                                );\r\n                                console.log(sys.C_t, sys.G_s);\r\n\r\n                                return (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        xs={12}\r\n                                        item\r\n                                    >\r\n                                        <MathJax>{formula}</MathJax>\r\n                                    </Grid>\r\n                                );\r\n                            })}\r\n                        {!isGraphCatured && (\r\n                            <Grid style={{ fontSize: \"18px\" }} xs={12}>\r\n                                <MathJax>{response}</MathJax>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </SubCard>\r\n            </Grid>\r\n            <Grid\r\n                spacing={2}\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    margin: \"auto\",\r\n                    direction: \"ltr\",\r\n                }}\r\n                container\r\n            >\r\n                <Grid\r\n                    md={3}\r\n                    sm={12}\r\n                    xs={12}\r\n                    sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                    container\r\n                >\r\n                    <Grid xs={12}>\r\n                        <SOTFByPolesInputs\r\n                            alpha={alpha}\r\n                            beta={beta}\r\n                            k={k}\r\n                            t_i={t_i}\r\n                            t_f={t_f}\r\n                            $alpha={$alpha}\r\n                            $beta={$beta}\r\n                            $k={$k}\r\n                            $t_i={$t_i}\r\n                            $t_f={$t_f}\r\n                            N={N}\r\n                            $N={$N}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid md={9} sm={12} xs={12} item>\r\n                    <SubCard>\r\n                        <GraphMenu\r\n                            capture={capture}\r\n                            formulaFileName={\r\n                                \"Water Tank Level Equations _ \" +\r\n                                [...systems.map((sys) => sys.legend)].join() +\r\n                                \".png\"\r\n                            }\r\n                            graphFileName={\r\n                                [\r\n                                    ...systems.map(\r\n                                        (sys) =>\r\n                                            `${sys.legend}{alpha=${\r\n                                                sys.alpha\r\n                                            }_beta=${sys.beta}_k=${sys.k}_in=${\r\n                                                sys.inputSignal\r\n                                                    ? \"ramp\"\r\n                                                    : \"step\"\r\n                                            }}`\r\n                                    ),\r\n                                ].join(\", \") + \".png\"\r\n                            }\r\n                            reset={() => $systems([])}\r\n                            update={(changes) => update(changes)}\r\n                            toggle3DPlot={toggle3DPlot}\r\n                        />\r\n                    </SubCard>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        <SubCard>\r\n                            <GraphBox title=\"پاسخ پله\" traces={traces} />\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <hr />\r\n                    <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                        {GInfo && <GInfo.Explain />}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SOTFExamineByPoles;\r\n","import { Grid } from \"@mui/material\";\r\n// project imports\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Switcher from \"views/ui-component/buttons/Switcher\";\r\nimport { useState } from \"react\";\r\nimport SOTFExamineByParams from \"./by-params/index\";\r\nimport SOTFExamineByPoles from \"./by-poles/index\";\r\nimport \"views/topics/topics.css\";\r\n\r\nconst SecondOrderTransferFunctionExamining = () => {\r\n    const [mode, setMode] = useState(0);\r\n    const choices = [\"بررسی قطبی\", \"بررسی پارامتری\"];\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid\r\n                item\r\n                direction=\"row\"\r\n                sx={{ pt: 1 }}\r\n                container\r\n                spacing={gridSpacing}\r\n            >\r\n                <Switcher choices={choices} setSwitch={setMode} />\r\n            </Grid>\r\n            <MainCard style={{ background: \"#F5E1FD\" }}>\r\n                <Grid item spacing={gridSpacing}>\r\n                    {mode === 0 ? (\r\n                        <SOTFExamineByPoles />\r\n                    ) : (\r\n                        <SOTFExamineByParams />\r\n                    )}\r\n                </Grid>\r\n            </MainCard>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SecondOrderTransferFunctionExamining;\r\n"],"names":["Switcher","setSwitch","choices","useState","selected","setSelected","Stack","className","xs","spacing","direction","Grid","dir","container","Button","onClick","length","variant","style","width","background","purple","color","sotfTransientStepResponseFormula","mathjaxSpaces","SubCard","title","darkBorder","sx","gridSpacing","fontSize","item","MathJax","parameterFormulas","parameterUnits","w_n","zeta","$w_n","$zeta","t_i","t_f","$t_i","$t_f","N","$N","textAlign","height","SimpleParametersList","parameters","setters","value","labels","units","mt","md","sm","CoordinateSystem","point","x","y","select","extra","options","pointSize","grids","stepResponse","tf","c_t","step","index","undefined","label","symbols","systems","$systems","traces","$traces","thickness","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","C_t","$C_t","G_s","$G_s","GInfo","$GInfo","response","$response","useEffect","gtf","TransferFunction","tstep","Describer","calculus","$","all","map","e","w_n2","tgtf","xi","z","Array","fill","line","type","mode","name","legend","findIndex","sys","push","margin","id","formula","console","log","marginTop","GraphMenu","capture","capturedSystems","toString","formulaFileName","join","graphFileName","k","inputSignal","reset","update","changes","toggle3DPlot","lg","GraphBox","Explain","sotfExtremeMortalFormula","sotfCriticalFormula","sotfWeakFormula","my","alpha","beta","$k","$alpha","$beta","updatePoles","newPole","other","$newPole","$other","isReal","realify","conjugate","strValue","Complex","real","imaginary","Algebra","negation","hasSameTypeWith","equals","setMode","pt","MainCard"],"sourceRoot":""}