{"version":3,"file":"static/js/883.94c5189a.chunk.js","mappings":"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","sources":["math/GraphMenu.jsx","views/topics/chapter06/bode-plot/parameters.jsx","views/topics/chapter06/bode-plot/index.jsx"],"sourcesContent":["import SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { useState, useEffect } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    graphFileName,\r\n    formulaFileName,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    const save = () => {\r\n        const graphBoxElement = document.getElementById(\"graphBox\");\r\n        // normal .blob has dark bakground\r\n        // convert background to light\r\n        const canvasWithBackground = document.createElement(\"canvas\");\r\n        canvasWithBackground.width = graphBoxElement.width;\r\n        canvasWithBackground.height = graphBoxElement.height;\r\n\r\n        const ctx = canvasWithBackground.getContext(\"2d\");\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, graphBoxElement.width, graphBoxElement.height);\r\n\r\n        ctx.drawImage(graphBoxElement, 0, 0);\r\n        // save\r\n        canvasWithBackground.toBlob((blob) => {\r\n            saveAs(blob, graphFileName);\r\n        });\r\n\r\n        html2canvas(document.getElementById(\"formulaBox\")).then((canvas) => {\r\n            canvas.toBlob((blob) => {\r\n                saveAs(blob, formulaFileName);\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}{\" \"}\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"download graph\"\r\n                    component=\"span\"\r\n                    onClick={save}\r\n                >\r\n                    <SaveAltIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import { Grid, Button } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from \"store/constant\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$Num = [$$\",\r\n    \"$$Den = [$$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n    \"$$N = $$\"\r\n];\r\nconst parameterUnits = [\"$$]$$\", \"$$]$$\", \"$$Hz$$\", \"$$Hz$$\", null];\r\n\r\nconst BodePlotParameters = ({\r\n    rawNumerator,\r\n    rawDenominator,\r\n    $rawNumerator,\r\n    $rawDenominator,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    phaseInRadianScale,\r\n    setPhaseInRadianScale,\r\n    N,\r\n    $N\r\n}) => {\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[rawNumerator, rawDenominator, w_min, w_max, N]}\r\n                    setters={[$rawNumerator, $rawDenominator, $w_min, $w_max, $N]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n                <Grid xs={12} style={{paddingLeft: '3%'}} container>\r\n                    <Grid xs={6} sx={{ p: 1 }}  item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(false)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                !phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            درجه\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(\"rad\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            رادیان\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default BodePlotParameters;\r\n","// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport BodePlotParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\n\r\nconst BodePlot = () => {\r\n    const [rawNumerator, $rawNumerator] = useState(\"1\");\r\n    const [rawDenominator, $rawDenominator] = useState(\"1 1\");\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(0);\r\n    const [w_max, $w_max] = useState(10);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState({\r\n        phase: [],\r\n        amplitude: [],\r\n        degreePhase: [],\r\n    });\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n\r\n        if (capturedSystems.findIndex((sys) => H_s.equals(sys.H)) === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                H_s,\r\n                thickness,\r\n                legend:\r\n                    symbols.out + \"_{\" + (systems.length + 1).toString() + \"}\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n            console.log(capturedSystems);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const num = calculus.stringToArray(rawNumerator),\r\n                den = calculus.stringToArray(rawDenominator);\r\n            const h_s = new TransferFunction(num, den);\r\n            $H_s(h_s);\r\n            $response(\"$$\" + h_s.label(\"H\") + \"$$\");\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            let repeatedSystem = false;\r\n            const all = {\r\n                amplitude: Array(systems.length),\r\n                phase: Array(systems.length),\r\n                degreePhase: Array(systems.length),\r\n            };\r\n\r\n            for (let i = 0; i < systems.length; i++) {\r\n                all.amplitude[i] = calculus.systemToTrace(\r\n                    systems[i].H_s.bode,\r\n                    +w_min,\r\n                    +w_max,\r\n                    systems[i].thickness,\r\n                    systems[i].legend,\r\n                    is3DPlotEnabled,\r\n                    N\r\n                );\r\n                all.phase[i] = calculus.systemToTrace(\r\n                    systems[i].H_s.phase,\r\n                    +w_min,\r\n                    +w_max,\r\n                    systems[i].thickness,\r\n                    systems[i].legend,\r\n                    is3DPlotEnabled,\r\n                    N\r\n                );\r\n                all.degreePhase[i] = { ...all.phase[i] };\r\n                all.degreePhase[i].y = all.degreePhase[i].y.map(\r\n                    (yi) => yi * calculus.RadianToDegree\r\n                );\r\n                if (h_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n            }\r\n\r\n            if (!repeatedSystem) {\r\n                const amps = calculus.systemToTrace(\r\n                        h_s.bode,\r\n                        +w_min,\r\n                        +w_max,\r\n                        thickness,\r\n                        `${symbols.out}(${symbols.in})`,\r\n                        is3DPlotEnabled,\r\n                        N\r\n                    ),\r\n                    phase = calculus.systemToTrace(\r\n                        h_s.phase,\r\n                        +w_min,\r\n                        +w_max,\r\n                        thickness,\r\n                        `${symbols.out}(${symbols.in})`,\r\n                        is3DPlotEnabled,\r\n                        N\r\n                    );\r\n                const degreePhase = { ...phase };\r\n                degreePhase.y = degreePhase.y.map(\r\n                    (yi) => yi * calculus.RadianToDegree\r\n                );\r\n                all.phase.push(phase);\r\n                all.degreePhase.push(degreePhase);\r\n                all.amplitude.push(amps);\r\n            }\r\n\r\n            $traces(all);\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }, [\r\n        rawNumerator,\r\n        rawDenominator,\r\n        w_min,\r\n        w_max,\r\n        is3DPlotEnabled,\r\n        thickness,\r\n        systems,\r\n        N,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [rawNumerator, rawDenominator]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">\r\n                    نمودار بود\r\n                </h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <BodePlotParameters\r\n                                    rawNumerator={rawNumerator}\r\n                                    rawDenominator={rawDenominator}\r\n                                    $rawNumerator={$rawNumerator}\r\n                                    $rawDenominator={$rawDenominator}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                    N={N}\r\n                                    $N={$N}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    formulaFileName={\r\n                                        \"Water Tank Level Equations _ \" +\r\n                                        [\r\n                                            ...systems.map((sys) => sys.legend),\r\n                                        ].join() +\r\n                                        \".png\"\r\n                                    }\r\n                                    graphFileName={\r\n                                        [\r\n                                            ...systems.map(\r\n                                                (sys) =>\r\n                                                    `${sys.legend}{alpha=${\r\n                                                        sys.a\r\n                                                    }_k=${sys.k}_in=${\r\n                                                        sys.inputSignal\r\n                                                            ? \"ramp\"\r\n                                                            : \"step\"\r\n                                                    }}`\r\n                                            ),\r\n                                        ].join(\", \") + \".png\"\r\n                                    }\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid lg={9} md={9} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            logX={true}\r\n\r\n                                            title=\"نمودار بود\"\r\n                                            traces={traces.amplitude}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid lg={9} md={9} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"فاز\"\r\n                                            logX={true}\r\n                                            traces={\r\n                                                phaseInRadianScale\r\n                                                    ? traces.phase\r\n                                                    : traces.degreePhase\r\n                                            }\r\n                                        />\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default BodePlot;\r\n"],"names":["capture","graphFileName","formulaFileName","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","sx","direction","container","md","sm","xs","item","color","component","onClick","graphBoxElement","document","getElementById","canvasWithBackground","createElement","width","height","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","blob","saveAs","html2canvas","then","canvas","spacing","mt","alignItems","value","onChange","e","parameterFormulas","parameterUnits","rawNumerator","rawDenominator","$rawNumerator","$rawDenominator","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","N","$N","SubCard","darkBorder","title","textAlign","Grid","gridSpacing","SimpleParametersList","parameters","setters","labels","units","style","paddingLeft","p","Button","textTransform","variant","symbols","H_s","$H_s","systems","$systems","phase","amplitude","degreePhase","traces","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","num","calculus","den","h_s","TransferFunction","label","repeatedSystem","all","Array","length","i","bode","legend","y","map","yi","equals","amps","push","ex","console","log","MainCard","className","margin","id","sys","index","formula","fontSize","MathJax","marginTop","GraphMenu","capturedSystems","findIndex","H","toString","join","a","k","inputSignal","changes","lg","GraphBox","logX"],"sourceRoot":""}