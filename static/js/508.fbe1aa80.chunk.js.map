{"version":3,"file":"static/js/508.fbe1aa80.chunk.js","mappings":"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","sources":["math/GraphMenu.jsx","views/topics/chapter06/bode-example/parameters.jsx","views/topics/chapter06/bode-example/lecture.jsx","views/topics/chapter06/bode-example/index.jsx"],"sourcesContent":["import SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { useState, useEffect } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    graphFileName,\r\n    formulaFileName,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    const save = () => {\r\n        const graphBoxElement = document.getElementById(\"graphBox\");\r\n        // normal .blob has dark bakground\r\n        // convert background to light\r\n        const canvasWithBackground = document.createElement(\"canvas\");\r\n        canvasWithBackground.width = graphBoxElement.width;\r\n        canvasWithBackground.height = graphBoxElement.height;\r\n\r\n        const ctx = canvasWithBackground.getContext(\"2d\");\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, graphBoxElement.width, graphBoxElement.height);\r\n\r\n        ctx.drawImage(graphBoxElement, 0, 0);\r\n        // save\r\n        canvasWithBackground.toBlob((blob) => {\r\n            saveAs(blob, graphFileName);\r\n        });\r\n\r\n        html2canvas(document.getElementById(\"formulaBox\")).then((canvas) => {\r\n            canvas.toBlob((blob) => {\r\n                saveAs(blob, formulaFileName);\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}{\" \"}\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"download graph\"\r\n                    component=\"span\"\r\n                    onClick={save}\r\n                >\r\n                    <SaveAltIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import { Grid, Button, Fab } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport AnimateButton from \"../../../ui-component/extended/AnimateButton\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\n\r\nconst parameterFormulas = [\r\n    \"$$K = $$\",\r\n    \"$$\\\\tau _a = $$\",\r\n    \"$$\\\\tau _b = $$\",\r\n    \"$$\\\\tau _1 = $$\",\r\n    \"$$\\\\tau _2 = $$\",\r\n    \"$$\\\\tau _3 = $$\",\r\n    \"$$\\\\tau _4 = $$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n    \"$$N = $$\",\r\n];\r\nconst parameterUnits = [\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    null,\r\n    \"$$Hz$$\",\r\n    \"$$Hz$$\",\r\n    null,\r\n];\r\n\r\nconst BodePlotExampleParameters = ({\r\n    t_a,\r\n    t_b,\r\n    K,\r\n    t_1,\r\n    t_2,\r\n    t_3,\r\n    t_4,\r\n    $t_a,\r\n    $t_b,\r\n    $K,\r\n    $t_1,\r\n    $t_2,\r\n    $t_3,\r\n    $t_4,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    phaseInRadianScale,\r\n    setPhaseInRadianScale,\r\n    N,\r\n    $N,\r\n    multiplier,\r\n}) => {\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n                <SimpleParametersList\r\n                    parameters={[\r\n                        K,\r\n                        t_a,\r\n                        t_b,\r\n                        t_1,\r\n                        t_2,\r\n                        t_3,\r\n                        t_4,\r\n                        w_min,\r\n                        w_max,\r\n                        N,\r\n                    ]}\r\n                    setters={[\r\n                        $K,\r\n                        $t_a,\r\n                        $t_b,\r\n                        $t_1,\r\n                        $t_2,\r\n                        $t_3,\r\n                        $t_4,\r\n                        $w_min,\r\n                        $w_max,\r\n                        $N,\r\n                    ]}\r\n                    labels={parameterFormulas}\r\n                    units={parameterUnits}\r\n                />\r\n                <Grid xs={12} style={{ paddingLeft: \"3%\" }} container>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(false)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                !phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            درجه\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(\"rad\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={\r\n                                phaseInRadianScale ? \"contained\" : \"outlined\"\r\n                            }\r\n                        >\r\n                            رادیان\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <hr />\r\n            <Grid\r\n                xs={12}\r\n                sx={{ pt: gridSpacing }}\r\n                spacing={gridSpacing}\r\n                style={{ textAlign: \"center\" }}\r\n                container\r\n            >\r\n                <Grid xs={12} item>\r\n                    تاثیر ضرب اسکالر سیستم در نمودار بود\r\n                </Grid>\r\n                <Grid xs={4} item>\r\n                    <Fab\r\n                        size=\"large\"\r\n                        variant=\"circular\"\r\n                        onClick={() => multiplier(0.1)}\r\n                    >\r\n                        <AnimateButton type=\"scale\" direction=\"down\">\r\n                            <MathJax>{\"$$\\\\times\\\\frac{1}{10}$$\"}</MathJax>\r\n                        </AnimateButton>\r\n                    </Fab>\r\n                </Grid>\r\n                <Grid xs={4} item>\r\n                    <Fab\r\n                        size=\"large\"\r\n                        variant=\"circular\"\r\n                        onClick={() => multiplier(10)}\r\n                    >\r\n                        <AnimateButton type=\"scale\" direction=\"down\">\r\n                            <MathJax>{\"$$\\\\times 10$$\"}</MathJax>\r\n                        </AnimateButton>\r\n                    </Fab>\r\n                </Grid>\r\n                <Grid xs={4} item>\r\n                    <Fab\r\n                        size=\"large\"\r\n                        variant=\"circular\"\r\n                        onClick={() => multiplier(-1)}\r\n                    >\r\n                        <AnimateButton type=\"scale\" direction=\"down\">\r\n                            <MathJax>{\"$$\\\\lgroup - \\\\rgroup$$\"}</MathJax>\r\n                        </AnimateButton>\r\n                    </Fab>\r\n                </Grid>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default BodePlotExampleParameters;\r\n","import SubCard from \"../../../ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"views/topics/topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nconst transferFunctionFormFormula = \"$$H(s) = \\\\frac{K(s\\\\tau _a + 1)(s\\\\tau _b + 1)}{s(s\\\\tau _1 + 1)(s\\\\tau _2 + 1)(s\\\\tau _3 + 1)(s\\\\tau _4 + 1)}$$\";\r\n\r\nconst BodePlotExampleLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"مثالی از رسم نمودار بود\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n        >\r\n            <Grid className=\"lecture-text\" item>\r\n                <p>\r\n                    &nbsp; می خواهیم برای توابع تبدیل به فرم زیر نمودار بود رسم\r\n                    کنیم:\r\n                </p>\r\n            </Grid>\r\n            <Grid item>\r\n                <MathJax>{transferFunctionFormFormula}</MathJax>\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default BodePlotExampleLecture;\r\n","// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport BodePlotParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { preventBrowserLock } from \"toolshed\";\r\nimport BodePlotExampleLecture from \"./lecture\";\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\n\r\nconst BodePlotExample = () => {\r\n    const [K, $K] = useState(1);\r\n    const [t_a, $t_a] = useState(0.1);\r\n    const [t_b, $t_b] = useState(0.2);\r\n    const [t_1, $t_1] = useState(0.3);\r\n    const [t_2, $t_2] = useState(0.4);\r\n    const [t_3, $t_3] = useState(0.5);\r\n    const [t_4, $t_4] = useState(0.6);\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(0);\r\n    const [w_max, $w_max] = useState(10);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState({\r\n        phase: [],\r\n        amplitude: [],\r\n        degreePhase: [],\r\n    });\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n\r\n        if (capturedSystems.findIndex((sys) => H_s.equals(sys.H)) === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                H_s,\r\n                thickness,\r\n                legend:\r\n                    symbols.out + \"_{\" + (systems.length + 1).toString() + \"}\",\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // plot\r\n        if (H_s) {\r\n            (async () => {\r\n                try {\r\n                    $response(\"$$\" + H_s.label(\"H\") + \"$$\");\r\n                    // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n                    // so that the traces will be loaded with new conditions\r\n                    let repeatedSystem = false;\r\n                    const all = {\r\n                        amplitude: Array(systems.length),\r\n                        phase: Array(systems.length),\r\n                        degreePhase: Array(systems.length),\r\n                    };\r\n\r\n                    for (let i = 0; i < systems.length; i++) {\r\n                        if (i % 5 === 0) await preventBrowserLock();\r\n                        all.amplitude[i] = calculus.systemToTrace(\r\n                            systems[i].H_s.bode,\r\n                            +w_min,\r\n                            +w_max,\r\n                            systems[i].thickness,\r\n                            systems[i].legend,\r\n                            is3DPlotEnabled,\r\n                            N\r\n                        );\r\n                        all.phase[i] = calculus.systemToTrace(\r\n                            systems[i].H_s.phase,\r\n                            +w_min,\r\n                            +w_max,\r\n                            systems[i].thickness,\r\n                            systems[i].legend,\r\n                            is3DPlotEnabled,\r\n                            N\r\n                        ).map(phi => (phi + 360) % 360);\r\n                        all.degreePhase[i] = { ...all.phase[i] };\r\n                        all.degreePhase[i].y = all.degreePhase[i].y.map(\r\n                            (yi) => yi * calculus.RadianToDegree\r\n                        );\r\n                        if (H_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n                    }\r\n\r\n                    if (!repeatedSystem) {\r\n                        const amps = calculus.systemToTrace(\r\n                                H_s.bode,\r\n                                +w_min,\r\n                                +w_max,\r\n                                thickness,\r\n                                `${symbols.out}(${symbols.in})`,\r\n                                is3DPlotEnabled,\r\n                                N\r\n                            ),\r\n                            phase = calculus.systemToTrace(\r\n                                H_s.phase,\r\n                                +w_min,\r\n                                +w_max,\r\n                                thickness,\r\n                                `${symbols.out}(${symbols.in})`,\r\n                                is3DPlotEnabled,\r\n                                N\r\n                            );\r\n                        phase.y = phase.y.map(phi => ((phi - (2 * Math.PI)) % (2 * Math.PI)));\r\n                        const degreePhase = { ...phase };\r\n                        degreePhase.y = degreePhase.y.map(\r\n                            (yi) => yi * calculus.RadianToDegree\r\n                        );\r\n                        all.phase.push(phase);\r\n                        all.degreePhase.push(degreePhase);\r\n                        all.amplitude.push(amps);\r\n                    }\r\n                    $traces(all);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [H_s, systems, w_min, w_max, is3DPlotEnabled, thickness, N]);\r\n\r\n    const multiplyPlotBy = (value) => {\r\n        const currentLength = systems.length;\r\n        const multipliedSystem = H_s.multiply(value);\r\n        const newSystemList = systems.filter(\r\n            (sys) => !sys.H_s.equals(multipliedSystem)\r\n        );\r\n        if (newSystemList.length === currentLength) capture();\r\n        else $systems(newSystemList);\r\n        $H_s(multipliedSystem);\r\n    };\r\n    useEffect(() => {\r\n        try {\r\n            const k = +K,\r\n                ta = +t_a,\r\n                tb = +t_b;\r\n            const tau = [+t_1, +t_2, +t_3, +t_4];\r\n\r\n            const num = [k * ta * tb, k * (ta + tb), k],\r\n                den = Array(6).fill(0);\r\n            den[5] = 0;\r\n            den[4] = 1;\r\n            den[0] = 1;\r\n\r\n            for (let i = 0; i <= 3; i++) {\r\n                den[0] *= tau[i];\r\n\r\n                for (let j = i + 1; j <= 3; j++) {\r\n                    den[2] += tau[i] * tau[j];\r\n                }\r\n\r\n                den[3] += tau[i];\r\n            }\r\n            den[1] +=\r\n                (tau[0] + tau[1]) * tau[2] * tau[3] +\r\n                (tau[2] + tau[3]) * tau[0] * tau[1];\r\n            const h_s = new TransferFunction(num, den);\r\n            $H_s(h_s);\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }, [K, t_a, t_b, t_1, t_2, t_3, t_4]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [K, t_a, t_b, t_1, t_2, t_3, t_4]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">نمودار بود</h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={gridSpacing}>\r\n                    <Grid\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        item\r\n                    >\r\n                        <BodePlotExampleLecture />\r\n                    </Grid>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <BodePlotParameters\r\n                                    K={K}\r\n                                    $K={$K}\r\n                                    t_a={t_a}\r\n                                    $t_a={$t_a}\r\n                                    t_b={t_b}\r\n                                    $t_b={$t_b}\r\n                                    t_1={t_1}\r\n                                    $t_1={$t_1}\r\n                                    t_2={t_2}\r\n                                    $t_2={$t_2}\r\n                                    t_3={t_3}\r\n                                    $t_3={$t_3}\r\n                                    t_4={t_4}\r\n                                    $t_4={$t_4}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                    N={N}\r\n                                    $N={$N}\r\n                                    multiplier={multiplyPlotBy}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    formulaFileName={\r\n                                        \"Water Tank Level Equations _ \" +\r\n                                        [\r\n                                            ...systems.map((sys) => sys.legend),\r\n                                        ].join() +\r\n                                        \".png\"\r\n                                    }\r\n                                    graphFileName={\r\n                                        [\r\n                                            ...systems.map(\r\n                                                (sys) =>\r\n                                                    `${sys.legend}{alpha=${\r\n                                                        sys.a\r\n                                                    }_k=${sys.k}_in=${\r\n                                                        sys.inputSignal\r\n                                                            ? \"ramp\"\r\n                                                            : \"step\"\r\n                                                    }}`\r\n                                            ),\r\n                                        ].join(\", \") + \".png\"\r\n                                    }\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid lg={9} md={9} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            logX={true}\r\n                                            title=\"نمودار بود\"\r\n                                            traces={traces.amplitude}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid lg={9} md={9} sm={12} xs={12} item>\r\n                                        <GraphBox\r\n                                            title=\"فاز\"\r\n                                            logX={true}\r\n                                            traces={\r\n                                                phaseInRadianScale\r\n                                                    ? traces.phase\r\n                                                    : traces.degreePhase\r\n                                            }\r\n                                        />\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default BodePlotExample;\r\n"],"names":["capture","graphFileName","formulaFileName","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","sx","direction","container","md","sm","xs","item","color","component","onClick","graphBoxElement","document","getElementById","canvasWithBackground","createElement","width","height","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","blob","saveAs","html2canvas","then","canvas","spacing","mt","alignItems","value","onChange","e","parameterFormulas","parameterUnits","t_a","t_b","K","t_1","t_2","t_3","t_4","$t_a","$t_b","$K","$t_1","$t_2","$t_3","$t_4","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","N","$N","multiplier","SubCard","darkBorder","title","textAlign","Grid","gridSpacing","SimpleParametersList","parameters","setters","labels","units","style","paddingLeft","p","Button","textTransform","variant","pt","Fab","size","AnimateButton","type","MathJax","className","symbols","H_s","$H_s","systems","$systems","phase","amplitude","degreePhase","traces","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","capturedSystems","findIndex","sys","equals","H","push","legend","length","toString","label","repeatedSystem","all","Array","i","preventBrowserLock","calculus","bode","map","phi","y","yi","amps","Math","PI","console","log","k","ta","tb","tau","num","den","fill","j","h_s","TransferFunction","ex","MainCard","margin","id","index","formula","fontSize","marginTop","currentLength","multipliedSystem","multiply","newSystemList","filter","GraphMenu","join","a","inputSignal","changes","lg","GraphBox","logX"],"sourceRoot":""}