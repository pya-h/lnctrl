{"version":3,"file":"static/js/772.07c94c9a.chunk.js","mappings":"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","sources":["math/GraphMenu.jsx","views/topics/chapter06/rc-filter-frequency-response/lecture.jsx","views/topics/chapter06/rc-filter-frequency-response/parameters.jsx","views/topics/chapter06/rc-filter-frequency-response/index.jsx"],"sourcesContent":["import SaveAltIcon from \"@mui/icons-material/SaveAlt\";\r\nimport PhotoCamera from \"@mui/icons-material/PhotoCamera\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FullScreen from \"@mui/icons-material/Fullscreen\";\r\nimport FilterCenterFocusIcon from \"@mui/icons-material/FilterCenterFocus\";\r\nimport { Grid, IconButton, Slider, Stack } from \"@mui/material\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { useState, useEffect } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport ThreeDRotationIcon from \"@mui/icons-material/ThreeDRotation\";\r\nimport ThreeSixtyIcon from \"@mui/icons-material/ThreeSixty\";\r\n\r\nconst GraphMenu = ({\r\n    capture,\r\n    graphFileName,\r\n    formulaFileName,\r\n    reset,\r\n    update,\r\n    toggle3DPlot,\r\n}) => {\r\n    const [is3DModeEnabled, set3DModeEnaabled] = useState(false);\r\n    const [thicknessSliderPercentage, setThicknessSliderPercentage] =\r\n        useState(20);\r\n\r\n    const toggle3DMode = () => {\r\n        set3DModeEnaabled(!is3DModeEnabled);\r\n        toggle3DPlot();\r\n    };\r\n\r\n    const save = () => {\r\n        const graphBoxElement = document.getElementById(\"graphBox\");\r\n        // normal .blob has dark bakground\r\n        // convert background to light\r\n        const canvasWithBackground = document.createElement(\"canvas\");\r\n        canvasWithBackground.width = graphBoxElement.width;\r\n        canvasWithBackground.height = graphBoxElement.height;\r\n\r\n        const ctx = canvasWithBackground.getContext(\"2d\");\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, graphBoxElement.width, graphBoxElement.height);\r\n\r\n        ctx.drawImage(graphBoxElement, 0, 0);\r\n        // save\r\n        canvasWithBackground.toBlob((blob) => {\r\n            saveAs(blob, graphFileName);\r\n        });\r\n\r\n        html2canvas(document.getElementById(\"formulaBox\")).then((canvas) => {\r\n            canvas.toBlob((blob) => {\r\n                saveAs(blob, formulaFileName);\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        update({ thickness: thicknessSliderPercentage / 20.0 + 0.1 });\r\n    }, [thicknessSliderPercentage, update]);\r\n\r\n    return (\r\n        <Grid sx={{ direction: \"rtl\" }} container direction=\"row\">\r\n            <Grid md={10} sm={8} xs={6} sx={{ direction: \"rtl\" }} item>\r\n                {toggle3DPlot && (\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        aria-label=\"capture graph\"\r\n                        component=\"span\"\r\n                        onClick={toggle3DMode}\r\n                    >\r\n                        {is3DModeEnabled ? (\r\n                            <ThreeSixtyIcon />\r\n                        ) : (\r\n                            <ThreeDRotationIcon />\r\n                        )}\r\n                    </IconButton>\r\n                )}{\" \"}\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={capture}\r\n                >\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"download graph\"\r\n                    component=\"span\"\r\n                    onClick={save}\r\n                >\r\n                    <SaveAltIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    color=\"secondary\"\r\n                    aria-label=\"capture graph\"\r\n                    component=\"span\"\r\n                    onClick={reset}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid md={2} sm={4} xs={6} item>\r\n                <Stack\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    sx={{ mt: 0.5, direction: \"ltr\" }}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <FullScreen />\r\n                    <Slider\r\n                        aria-label=\"Volume\"\r\n                        value={thicknessSliderPercentage}\r\n                        onChange={(e, value) =>\r\n                            setThicknessSliderPercentage(value)\r\n                        }\r\n                    />\r\n                    <FilterCenterFocusIcon />\r\n                </Stack>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GraphMenu;\r\n","import SubCard from \"../../../ui-component/cards/SubCard\";\r\nimport { Grid } from \"@mui/material\";\r\nimport \"views/topics/topics.css\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport rc_filter_circuit from './visual/rc_filter_circuit.png';\r\nconst firstOrderTransferFunctionFormFormula = \"$$G(s) = \\\\frac{k}{s + a}$$\";\r\n\r\nconst RCFilterFrequencyResponseLecture = () => {\r\n    return (\r\n        <SubCard\r\n            title=\"تابع تبدیل مرتبه یک\"\r\n            darkBorder={true}\r\n            sx={{ direction: \"rtl\" }}\r\n        >\r\n            <Grid className=\"lecture-text\" item>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; این توابع تبدیل به فرم زیر می\r\n                    باشند:\r\n                </p>\r\n            </Grid>\r\n            <Grid item>\r\n                <MathJax>{firstOrderTransferFunctionFormFormula}</MathJax>\r\n            </Grid>\r\n            <Grid className=\"lecture-text\" item>\r\n                <h1 style={{ marginTop: \"5%\", marginBottom: \"3%\" }}>\r\n                    &nbsp;پاسخ حالت ماندگار\r\n                </h1>\r\n                <p>\r\n                    &nbsp; &nbsp; &nbsp; &nbsp; دیاگرام یک سیستم LTI ساده بصورت\r\n                    زیر می باشد:\r\n                </p>\r\n            </Grid>\r\n            <Grid item>\r\n                <img\r\n                    className=\"lecture-image\"\r\n                    src={rc_filter_circuit}\r\n                    alt=\"بارگذاری تصویر با مشکل مواجه شد\"\r\n                />\r\n            </Grid>\r\n           \r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default RCFilterFrequencyResponseLecture;\r\n","import { Grid, Button } from \"@mui/material\";\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport SimpleParametersList from \"views/input-boxes/SimpleParametersList\";\r\nimport { gridSpacing } from 'store/constant';\r\n\r\nconst parameterFormulas = [\r\n    \"$$R = $$\",\r\n    \"$$C = $$\",\r\n    \"$$\\\\omega_{min} = $$\",\r\n    \"$$\\\\omega_{max} = $$\",\r\n    \"$$N = $$\"\r\n];\r\nconst parameterUnits = [\"$$k\\\\Omega$$\", \"$$\\\\mu F$$\", \"$$Hz$$\", \"$$Hz$$\", null];\r\n\r\nconst RCFilterFrequencyResponseParameters = ({\r\n    R,\r\n    C,\r\n    $R,\r\n    $C,\r\n    w_min,\r\n    w_max,\r\n    $w_min,\r\n    $w_max,\r\n    phaseInRadianScale,\r\n    setPhaseInRadianScale,\r\n    N,\r\n    $N\r\n}) => {\r\n    // const grids = 10;\r\n    // const selectR = (point) => {\r\n    //     if (point) $R(point.x);\r\n    // };\r\n    // const selectC = (point) => {\r\n    //     if (point) $C(point.y);\r\n    // };\r\n\r\n    return (\r\n        <SubCard\r\n            darkBorder\r\n            title=\"پارامترها\"\r\n            sx={{\r\n                direction: \"ltr\",\r\n                textAlign: \"right\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Grid spacing={gridSpacing} container direction=\"row\">\r\n            \r\n                <SimpleParametersList parameters={[R, C, w_min, w_max, N]} setters={[$R, $C, $w_min, $w_max, $N]} labels={parameterFormulas} units={parameterUnits} />\r\n                <Grid xs={12} style={{paddingLeft: '3%'}} container>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(false)}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={!phaseInRadianScale ? \"contained\" : \"outlined\"}\r\n                        >\r\n                            درجه\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid xs={6} sx={{ p: 1 }} item>\r\n                        <Button\r\n                            onClick={() => setPhaseInRadianScale(\"rad\")}\r\n                            style={{ width: \"100%\", textTransform: \"none\" }}\r\n                            variant={phaseInRadianScale ? \"contained\" : \"outlined\"}\r\n                        >\r\n                            رادیان\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                {/* <Grid sx={{ mt: 1 }} md={12} sm={4} xs={6} item>\r\n                    <p style={{textAlign: 'center'}}>محل قطب را انتخاب کنید</p>\r\n                    <CoordinateSystem\r\n                        point={{ x: R, y: 0, select: selectR }}\r\n                        extra={{\r\n                            x: 0,\r\n                            y: C,\r\n                            select: selectC,\r\n                        }}\r\n                        options={{ pointSize: 10, grids }}\r\n                    />\r\n                </Grid> */}\r\n            </Grid>\r\n        </SubCard>\r\n    );\r\n};\r\n\r\nexport default RCFilterFrequencyResponseParameters;","import RCFilterFrequencyResponseLecture from \"./lecture\";\r\n\r\n// project imports\r\nimport SubCard from \"views/ui-component/cards/SubCard\";\r\nimport calculus from \"../../../../math/calculus/index\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GraphMenu from \"math/GraphMenu\";\r\nimport { Grid } from \"@mui/material\";\r\nimport GraphBox from \"math/GraphBox\";\r\nimport { MathJax } from \"better-react-mathjax\";\r\nimport RCFilterFrequencyResponseParameters from \"./parameters\";\r\nimport TransferFunction from \"math/algebra/functions/transfer\";\r\nimport MainCard from \"views/ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nconst symbols = {\r\n    in: \"jw\",\r\n    out: \"H\",\r\n};\r\n\r\nconst RCFilterFrequencyResponseExample = () => {\r\n    const [R, $R] = useState(0.001);\r\n    const [C, $C] = useState(1.0);\r\n    const [H_s, $H_s] = useState(null);\r\n    const [w_min, $w_min] = useState(-5);\r\n    const [w_max, $w_max] = useState(5);\r\n    // gradiant of u(t) is 0 and unit ramp is one\r\n    const [systems, $systems] = useState([]);\r\n    const [traces, $traces] = useState({\r\n        phase: [],\r\n        amplitude: [],\r\n        degreePhase: [],\r\n    });\r\n    const [response, $response] = useState(null);\r\n    const [thickness, $thickness] = useState(1.0); // graph line thickness\r\n    const [isGraphCatured, $graphCaptured] = useState(false);\r\n    const [is3DPlotEnabled, $3DPlotEnabled] = useState(false);\r\n    const [phaseInRadianScale, setPhaseInRadianScale] = useState(true); // for degree => 180 / PI, for radian scale => 1.0\r\n    const [N, $N] = useState(1000);\r\n    const toggle3DPlot = () => $3DPlotEnabled(!is3DPlotEnabled);\r\n\r\n    const capture = () => {\r\n        const capturedSystems = [...systems];\r\n        const index = capturedSystems.findIndex(\r\n            (sys) => sys.R === +R && sys.C === +C\r\n        );\r\n        if (index === -1) {\r\n            // if current system has not been captured before => then capture it; o.w. its not needed\r\n            capturedSystems.push({\r\n                R: +R,\r\n                C: +C,\r\n                H_s,\r\n                thickness,\r\n                legend: symbols.out + \"_{\" + (systems.length + 1).toString(),\r\n            });\r\n            $systems(capturedSystems);\r\n            $graphCaptured(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const h_s = new TransferFunction([1], [+R * +C * 10e3, 1]);\r\n            $H_s(h_s);\r\n            $response(\"$$\" + h_s.label(\"H\") + \"$$\");\r\n            // parameters changed => load again all traces(traces); this is for when shared params changes(ti, tf, ...),\r\n            // so that the traces will be loaded with new conditions\r\n            let repeatedSystem = false;\r\n            const all = {\r\n                amplitude: Array(systems.length),\r\n                phase: Array(systems.length),\r\n                degreePhase: Array(systems.length),\r\n            };\r\n\r\n            for (let i = 0; i < systems.length; i++) {\r\n                all.amplitude[i] = calculus.systemToTrace(\r\n                    systems[i].H_s.amplitude,\r\n                    +w_min,\r\n                    +w_max,\r\n                    systems[i].thickness,\r\n                    systems[i].legend,\r\n                    is3DPlotEnabled,\r\n                    +N\r\n                );\r\n                all.phase[i] = calculus.systemToTrace(\r\n                    systems[i].H_s.phase,\r\n                    +w_min,\r\n                    +w_max,\r\n                    systems[i].thickness,\r\n                    systems[i].legend,\r\n                    is3DPlotEnabled,\r\n                    +N\r\n                );\r\n                all.degreePhase[i] = { ...all.phase[i] };\r\n                all.degreePhase[i].y = all.degreePhase[i].y.map(\r\n                    (yi) => yi * calculus.RadianToDegree\r\n                );\r\n                if (h_s.equals(systems[i].H_s)) repeatedSystem = true;\r\n            }\r\n\r\n            if (!repeatedSystem) {\r\n                // if current system isnt in traces list => add it temperory to plot\r\n                const amps = calculus.systemToTrace(\r\n                        h_s.amplitude,\r\n                        +w_min,\r\n                        +w_max,\r\n                        thickness,\r\n                        `${symbols.out}(${symbols.in})`,\r\n                        is3DPlotEnabled,\r\n                        +N\r\n                    ),\r\n                    phase = calculus.systemToTrace(\r\n                        h_s.phase,\r\n                        +w_min,\r\n                        +w_max,\r\n                        thickness,\r\n                        `${symbols.out}(${symbols.in})`,\r\n                        is3DPlotEnabled,\r\n                        +N\r\n                    );\r\n                const degreePhase = { ...phase };\r\n                degreePhase.y = degreePhase.y.map(\r\n                    (yi) => yi * calculus.RadianToDegree\r\n                );\r\n\r\n                all.phase.push(phase);\r\n                all.degreePhase.push(degreePhase);\r\n                all.amplitude.push(amps);\r\n            }\r\n\r\n            $traces(all);\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }, [R, C, w_min, w_max, is3DPlotEnabled, thickness, systems, N]);\r\n\r\n    useEffect(() => {\r\n        $graphCaptured(false);\r\n    }, [R, C]);\r\n\r\n    const update = (changes) => {\r\n        if (changes) $thickness(changes.thickness);\r\n        //and so...\r\n    };\r\n    return (\r\n        <MainCard>\r\n            <Grid item spacing={gridSpacing}>\r\n                <h2 className=\"chapter-section-title\">پاسخ فرکانسی فیلتر RC</h2>\r\n            </Grid>\r\n            <Grid item spacing={gridSpacing}>\r\n                <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        item\r\n                    >\r\n                        <RCFilterFrequencyResponseLecture />\r\n                    </Grid>\r\n                    <Grid sx={{ margin: \"auto\", width: \"100%\" }} item>\r\n                        <SubCard sx={{ direction: \"ltr\" }}>\r\n                            <Grid\r\n                                id=\"formulaBox\"\r\n                                sx={{ margin: \"auto\" }}\r\n                                container\r\n                                direction=\"row\"\r\n                            >\r\n                                {systems.map((sys, index) => {\r\n                                    let formula =\r\n                                        \"$$\" +\r\n                                        sys.H_s.label(\"H\", index + 1) +\r\n                                        \"$$\";\r\n\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ fontSize: \"18px\" }}\r\n                                            md={6}\r\n                                            sm={12}\r\n                                            item\r\n                                        >\r\n                                            <MathJax>{formula}</MathJax>\r\n                                        </Grid>\r\n                                    );\r\n                                })}\r\n                                {!isGraphCatured && (\r\n                                    <Grid\r\n                                        style={{ fontSize: \"18px\" }}\r\n                                        md={6}\r\n                                        sm={12}\r\n                                    >\r\n                                        <MathJax>{response}</MathJax>\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                    <Grid\r\n                        spacing={2}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"100%\",\r\n                            margin: \"auto\",\r\n                            direction: \"ltr\",\r\n                        }}\r\n                        container\r\n                    >\r\n                        <Grid\r\n                            md={3}\r\n                            sm={12}\r\n                            xs={12}\r\n                            sx={{ marginTop: \"1%\", width: \"100%\" }}\r\n                            container\r\n                        >\r\n                            <Grid xs={12}>\r\n                                <RCFilterFrequencyResponseParameters\r\n                                    C={C}\r\n                                    R={R}\r\n                                    $C={(value) => {\r\n                                        if (value >= 0) $C(value);\r\n                                    }}\r\n                                    $R={(value) => {\r\n                                        if (value >= 0) $R(value);\r\n                                    }}\r\n                                    w_min={w_min}\r\n                                    w_max={w_max}\r\n                                    $w_min={$w_min}\r\n                                    $w_max={$w_max}\r\n                                    phaseInRadianScale={phaseInRadianScale}\r\n                                    setPhaseInRadianScale={\r\n                                        setPhaseInRadianScale\r\n                                    }\r\n                                    N={N}\r\n                                    $N={$N}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid md={9} sm={12} xs={12} item>\r\n                            <SubCard>\r\n                                <GraphMenu\r\n                                    capture={capture}\r\n                                    formulaFileName={\r\n                                        \"Water Tank Level Equations _ \" +\r\n                                        [\r\n                                            ...systems.map((sys) => sys.legend),\r\n                                        ].join() +\r\n                                        \".png\"\r\n                                    }\r\n                                    graphFileName={\r\n                                        [\r\n                                            ...systems.map(\r\n                                                (sys) =>\r\n                                                    `${sys.legend}{alpha=${\r\n                                                        sys.a\r\n                                                    }_k=${sys.k}_in=${\r\n                                                        sys.inputSignal\r\n                                                            ? \"ramp\"\r\n                                                            : \"step\"\r\n                                                    }}`\r\n                                            ),\r\n                                        ].join(\", \") + \".png\"\r\n                                    }\r\n                                    reset={() => $systems([])}\r\n                                    update={(changes) => update(changes)}\r\n                                    toggle3DPlot={toggle3DPlot}\r\n                                />\r\n                            </SubCard>\r\n                            <hr />\r\n                            <Grid lg={12} md={12} sm={12} xs={12} item>\r\n                                <SubCard>\r\n                                    <Grid\r\n                                        spacing={gridSpacing}\r\n                                        direction=\"row\"\r\n                                        container\r\n                                    >\r\n                                        <Grid\r\n                                            lg={9}\r\n                                            md={9}\r\n                                            sm={12}\r\n                                            xs={12}\r\n                                            item\r\n                                        >\r\n                                            <GraphBox\r\n                                                title=\"اندازه\"\r\n                                                traces={traces.amplitude}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid\r\n                                            lg={9}\r\n                                            md={9}\r\n                                            sm={12}\r\n                                            xs={12}\r\n                                            item\r\n                                        >\r\n                                            <GraphBox\r\n                                                title=\"فاز\"\r\n                                                traces={\r\n                                                    phaseInRadianScale\r\n                                                        ? traces.phase\r\n                                                        : traces.degreePhase\r\n                                                }\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default RCFilterFrequencyResponseExample;\r\n"],"names":["capture","graphFileName","formulaFileName","reset","update","toggle3DPlot","useState","is3DModeEnabled","set3DModeEnaabled","thicknessSliderPercentage","setThicknessSliderPercentage","useEffect","thickness","sx","direction","container","md","sm","xs","item","color","component","onClick","graphBoxElement","document","getElementById","canvasWithBackground","createElement","width","height","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","blob","saveAs","html2canvas","then","canvas","spacing","mt","alignItems","value","onChange","e","SubCard","title","darkBorder","Grid","className","MathJax","style","marginTop","marginBottom","src","rc_filter_circuit","alt","parameterFormulas","parameterUnits","R","C","$R","$C","w_min","w_max","$w_min","$w_max","phaseInRadianScale","setPhaseInRadianScale","N","$N","textAlign","gridSpacing","SimpleParametersList","parameters","setters","labels","units","paddingLeft","p","Button","textTransform","variant","symbols","H_s","$H_s","systems","$systems","phase","amplitude","degreePhase","traces","$traces","response","$response","$thickness","isGraphCatured","$graphCaptured","is3DPlotEnabled","$3DPlotEnabled","h_s","TransferFunction","label","repeatedSystem","all","Array","length","i","calculus","legend","y","map","yi","equals","amps","push","ex","console","log","MainCard","margin","id","sys","index","formula","fontSize","GraphMenu","capturedSystems","findIndex","toString","join","a","k","inputSignal","changes","lg","GraphBox"],"sourceRoot":""}